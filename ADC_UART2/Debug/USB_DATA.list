
USB_DATA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001044c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000abc  080105fc  080105fc  000205fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080110b8  080110b8  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  080110b8  080110b8  000210b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080110c0  080110c0  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110c0  080110c0  000210c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080110c4  080110c4  000210c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080110c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e04  20000090  08011158  00030090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002e94  08011158  00032e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f3a  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e08  00000000  00000000  00050ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  00055e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  00057430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f322  00000000  00000000  000588a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000225c1  00000000  00000000  00087bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffe68  00000000  00000000  000aa183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a9feb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006388  00000000  00000000  001aa03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080105e4 	.word	0x080105e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	080105e4 	.word	0x080105e4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008e0:	f000 b974 	b.w	8000bcc <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468e      	mov	lr, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d14d      	bne.n	80009a6 <__udivmoddi4+0xaa>
 800090a:	428a      	cmp	r2, r1
 800090c:	4694      	mov	ip, r2
 800090e:	d969      	bls.n	80009e4 <__udivmoddi4+0xe8>
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	b152      	cbz	r2, 800092c <__udivmoddi4+0x30>
 8000916:	fa01 f302 	lsl.w	r3, r1, r2
 800091a:	f1c2 0120 	rsb	r1, r2, #32
 800091e:	fa20 f101 	lsr.w	r1, r0, r1
 8000922:	fa0c fc02 	lsl.w	ip, ip, r2
 8000926:	ea41 0e03 	orr.w	lr, r1, r3
 800092a:	4094      	lsls	r4, r2
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	0c21      	lsrs	r1, r4, #16
 8000932:	fbbe f6f8 	udiv	r6, lr, r8
 8000936:	fa1f f78c 	uxth.w	r7, ip
 800093a:	fb08 e316 	mls	r3, r8, r6, lr
 800093e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000942:	fb06 f107 	mul.w	r1, r6, r7
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000952:	f080 811f 	bcs.w	8000b94 <__udivmoddi4+0x298>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 811c 	bls.w	8000b94 <__udivmoddi4+0x298>
 800095c:	3e02      	subs	r6, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb3 f0f8 	udiv	r0, r3, r8
 8000968:	fb08 3310 	mls	r3, r8, r0, r3
 800096c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000970:	fb00 f707 	mul.w	r7, r0, r7
 8000974:	42a7      	cmp	r7, r4
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x92>
 8000978:	eb1c 0404 	adds.w	r4, ip, r4
 800097c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000980:	f080 810a 	bcs.w	8000b98 <__udivmoddi4+0x29c>
 8000984:	42a7      	cmp	r7, r4
 8000986:	f240 8107 	bls.w	8000b98 <__udivmoddi4+0x29c>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	1be4      	subs	r4, r4, r7
 8000994:	2600      	movs	r6, #0
 8000996:	b11d      	cbz	r5, 80009a0 <__udivmoddi4+0xa4>
 8000998:	40d4      	lsrs	r4, r2
 800099a:	2300      	movs	r3, #0
 800099c:	e9c5 4300 	strd	r4, r3, [r5]
 80009a0:	4631      	mov	r1, r6
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0xc2>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	f000 80ef 	beq.w	8000b8e <__udivmoddi4+0x292>
 80009b0:	2600      	movs	r6, #0
 80009b2:	e9c5 0100 	strd	r0, r1, [r5]
 80009b6:	4630      	mov	r0, r6
 80009b8:	4631      	mov	r1, r6
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	fab3 f683 	clz	r6, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d14a      	bne.n	8000a5c <__udivmoddi4+0x160>
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d302      	bcc.n	80009d0 <__udivmoddi4+0xd4>
 80009ca:	4282      	cmp	r2, r0
 80009cc:	f200 80f9 	bhi.w	8000bc2 <__udivmoddi4+0x2c6>
 80009d0:	1a84      	subs	r4, r0, r2
 80009d2:	eb61 0303 	sbc.w	r3, r1, r3
 80009d6:	2001      	movs	r0, #1
 80009d8:	469e      	mov	lr, r3
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d0e0      	beq.n	80009a0 <__udivmoddi4+0xa4>
 80009de:	e9c5 4e00 	strd	r4, lr, [r5]
 80009e2:	e7dd      	b.n	80009a0 <__udivmoddi4+0xa4>
 80009e4:	b902      	cbnz	r2, 80009e8 <__udivmoddi4+0xec>
 80009e6:	deff      	udf	#255	; 0xff
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	f040 8092 	bne.w	8000b16 <__udivmoddi4+0x21a>
 80009f2:	eba1 010c 	sub.w	r1, r1, ip
 80009f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009fa:	fa1f fe8c 	uxth.w	lr, ip
 80009fe:	2601      	movs	r6, #1
 8000a00:	0c20      	lsrs	r0, r4, #16
 8000a02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a06:	fb07 1113 	mls	r1, r7, r3, r1
 8000a0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a0e:	fb0e f003 	mul.w	r0, lr, r3
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x12c>
 8000a16:	eb1c 0101 	adds.w	r1, ip, r1
 8000a1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x12a>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f200 80cb 	bhi.w	8000bbc <__udivmoddi4+0x2c0>
 8000a26:	4643      	mov	r3, r8
 8000a28:	1a09      	subs	r1, r1, r0
 8000a2a:	b2a4      	uxth	r4, r4
 8000a2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a30:	fb07 1110 	mls	r1, r7, r0, r1
 8000a34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a38:	fb0e fe00 	mul.w	lr, lr, r0
 8000a3c:	45a6      	cmp	lr, r4
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x156>
 8000a40:	eb1c 0404 	adds.w	r4, ip, r4
 8000a44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a48:	d202      	bcs.n	8000a50 <__udivmoddi4+0x154>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f200 80bb 	bhi.w	8000bc6 <__udivmoddi4+0x2ca>
 8000a50:	4608      	mov	r0, r1
 8000a52:	eba4 040e 	sub.w	r4, r4, lr
 8000a56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a5a:	e79c      	b.n	8000996 <__udivmoddi4+0x9a>
 8000a5c:	f1c6 0720 	rsb	r7, r6, #32
 8000a60:	40b3      	lsls	r3, r6
 8000a62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a72:	431c      	orrs	r4, r3
 8000a74:	40f9      	lsrs	r1, r7
 8000a76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a82:	0c20      	lsrs	r0, r4, #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fb09 1118 	mls	r1, r9, r8, r1
 8000a8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a90:	fb08 f00e 	mul.w	r0, r8, lr
 8000a94:	4288      	cmp	r0, r1
 8000a96:	fa02 f206 	lsl.w	r2, r2, r6
 8000a9a:	d90b      	bls.n	8000ab4 <__udivmoddi4+0x1b8>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000aa4:	f080 8088 	bcs.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f240 8085 	bls.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aae:	f1a8 0802 	sub.w	r8, r8, #2
 8000ab2:	4461      	add	r1, ip
 8000ab4:	1a09      	subs	r1, r1, r0
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000abc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ac0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ac4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac8:	458e      	cmp	lr, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x1e2>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ad4:	d26c      	bcs.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ad6:	458e      	cmp	lr, r1
 8000ad8:	d96a      	bls.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ada:	3802      	subs	r0, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ae6:	eba1 010e 	sub.w	r1, r1, lr
 8000aea:	42a1      	cmp	r1, r4
 8000aec:	46c8      	mov	r8, r9
 8000aee:	46a6      	mov	lr, r4
 8000af0:	d356      	bcc.n	8000ba0 <__udivmoddi4+0x2a4>
 8000af2:	d053      	beq.n	8000b9c <__udivmoddi4+0x2a0>
 8000af4:	b15d      	cbz	r5, 8000b0e <__udivmoddi4+0x212>
 8000af6:	ebb3 0208 	subs.w	r2, r3, r8
 8000afa:	eb61 010e 	sbc.w	r1, r1, lr
 8000afe:	fa01 f707 	lsl.w	r7, r1, r7
 8000b02:	fa22 f306 	lsr.w	r3, r2, r6
 8000b06:	40f1      	lsrs	r1, r6
 8000b08:	431f      	orrs	r7, r3
 8000b0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b0e:	2600      	movs	r6, #0
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	40d8      	lsrs	r0, r3
 8000b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b20:	fa21 f303 	lsr.w	r3, r1, r3
 8000b24:	4091      	lsls	r1, r2
 8000b26:	4301      	orrs	r1, r0
 8000b28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b34:	fb07 3610 	mls	r6, r7, r0, r3
 8000b38:	0c0b      	lsrs	r3, r1, #16
 8000b3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b42:	429e      	cmp	r6, r3
 8000b44:	fa04 f402 	lsl.w	r4, r4, r2
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x260>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b52:	d22f      	bcs.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d92d      	bls.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	b289      	uxth	r1, r1
 8000b60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b64:	fb07 3316 	mls	r3, r7, r6, r3
 8000b68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x28a>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b7c:	d216      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d914      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b82:	3e02      	subs	r6, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b8c:	e738      	b.n	8000a00 <__udivmoddi4+0x104>
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e705      	b.n	80009a0 <__udivmoddi4+0xa4>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e3      	b.n	8000960 <__udivmoddi4+0x64>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6f8      	b.n	800098e <__udivmoddi4+0x92>
 8000b9c:	454b      	cmp	r3, r9
 8000b9e:	d2a9      	bcs.n	8000af4 <__udivmoddi4+0x1f8>
 8000ba0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ba4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7a3      	b.n	8000af4 <__udivmoddi4+0x1f8>
 8000bac:	4646      	mov	r6, r8
 8000bae:	e7ea      	b.n	8000b86 <__udivmoddi4+0x28a>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	e794      	b.n	8000ade <__udivmoddi4+0x1e2>
 8000bb4:	4640      	mov	r0, r8
 8000bb6:	e7d1      	b.n	8000b5c <__udivmoddi4+0x260>
 8000bb8:	46d0      	mov	r8, sl
 8000bba:	e77b      	b.n	8000ab4 <__udivmoddi4+0x1b8>
 8000bbc:	3b02      	subs	r3, #2
 8000bbe:	4461      	add	r1, ip
 8000bc0:	e732      	b.n	8000a28 <__udivmoddi4+0x12c>
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	e709      	b.n	80009da <__udivmoddi4+0xde>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	e742      	b.n	8000a52 <__udivmoddi4+0x156>

08000bcc <__aeabi_idiv0>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fb13 	bl	8000204 <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <Send_Uart+0x28>)
 8000bea:	f004 f8f3 	bl	8004dd4 <HAL_UART_Transmit>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200001e8 	.word	0x200001e8

08000bfc <Mount_USB>:



void Mount_USB (void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000c00:	2201      	movs	r2, #1
 8000c02:	490d      	ldr	r1, [pc, #52]	; (8000c38 <Mount_USB+0x3c>)
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <Mount_USB+0x40>)
 8000c06:	f00c fdb5 	bl	800d774 <f_mount>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <Mount_USB+0x44>)
 8000c10:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <Mount_USB+0x44>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d006      	beq.n	8000c28 <Mount_USB+0x2c>
		Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <Mount_USB+0x48>)
 8000c1c:	f7ff ffd8 	bl	8000bd0 <Send_Uart>
		printf("ERROR!!! in mounting USB ...\n\n");
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <Mount_USB+0x4c>)
 8000c22:	f00e fdcd 	bl	800f7c0 <puts>
	}
	else{
		Send_Uart("USB mounted successfully...\n");
		printf("USB mounted successfully...\n");
	}
}
 8000c26:	e005      	b.n	8000c34 <Mount_USB+0x38>
		Send_Uart("USB mounted successfully...\n");
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <Mount_USB+0x50>)
 8000c2a:	f7ff ffd1 	bl	8000bd0 <Send_Uart>
		printf("USB mounted successfully...\n");
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <Mount_USB+0x54>)
 8000c30:	f00e fdc6 	bl	800f7c0 <puts>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000278 	.word	0x20000278
 8000c3c:	2000027c 	.word	0x2000027c
 8000c40:	200001d0 	.word	0x200001d0
 8000c44:	080105fc 	.word	0x080105fc
 8000c48:	0801061c 	.word	0x0801061c
 8000c4c:	0801063c 	.word	0x0801063c
 8000c50:	0801065c 	.word	0x0801065c

08000c54 <Unmount_USB>:

void Unmount_USB (void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	490a      	ldr	r1, [pc, #40]	; (8000c84 <Unmount_USB+0x30>)
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f00c fd89 	bl	800d774 <f_mount>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <Unmount_USB+0x34>)
 8000c68:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <Unmount_USB+0x34>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <Unmount_USB+0x26>
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <Unmount_USB+0x38>)
 8000c74:	f7ff ffac 	bl	8000bd0 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000c78:	e002      	b.n	8000c80 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <Unmount_USB+0x3c>)
 8000c7c:	f7ff ffa8 	bl	8000bd0 <Send_Uart>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000278 	.word	0x20000278
 8000c88:	200001d0 	.word	0x200001d0
 8000c8c:	08010678 	.word	0x08010678
 8000c90:	0801069c 	.word	0x0801069c

08000c94 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09a      	sub	sp, #104	; 0x68
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000c9c:	2014      	movs	r0, #20
 8000c9e:	f00e fc1b 	bl	800f4d8 <malloc>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	4944      	ldr	r1, [pc, #272]	; (8000dbc <Scan_USB+0x128>)
 8000caa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000cac:	f00e fda0 	bl	800f7f0 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00d fb94 	bl	800e3e4 <f_opendir>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <Scan_USB+0x12c>)
 8000cc2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000cc4:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <Scan_USB+0x12c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d16e      	bne.n	8000daa <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	493c      	ldr	r1, [pc, #240]	; (8000dc4 <Scan_USB+0x130>)
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f00d fc55 	bl	800e582 <f_readdir>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <Scan_USB+0x12c>)
 8000cde:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <Scan_USB+0x12c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d15b      	bne.n	8000da0 <Scan_USB+0x10c>
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <Scan_USB+0x130>)
 8000cea:	7e9b      	ldrb	r3, [r3, #26]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d057      	beq.n	8000da0 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000cf0:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <Scan_USB+0x130>)
 8000cf2:	7b1b      	ldrb	r3, [r3, #12]
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d03a      	beq.n	8000d72 <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000cfc:	4932      	ldr	r1, [pc, #200]	; (8000dc8 <Scan_USB+0x134>)
 8000cfe:	4833      	ldr	r0, [pc, #204]	; (8000dcc <Scan_USB+0x138>)
 8000d00:	f7ff fa76 	bl	80001f0 <strcmp>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d045      	beq.n	8000d96 <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000d0a:	492f      	ldr	r1, [pc, #188]	; (8000dc8 <Scan_USB+0x134>)
 8000d0c:	4830      	ldr	r0, [pc, #192]	; (8000dd0 <Scan_USB+0x13c>)
 8000d0e:	f7ff fa6f 	bl	80001f0 <strcmp>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d040      	beq.n	8000d9a <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 8000d18:	201e      	movs	r0, #30
 8000d1a:	f00e fbdd 	bl	800f4d8 <malloc>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000d22:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <Scan_USB+0x134>)
 8000d24:	492b      	ldr	r1, [pc, #172]	; (8000dd4 <Scan_USB+0x140>)
 8000d26:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d28:	f00e fd62 	bl	800f7f0 <siprintf>
            	Send_Uart(buf);
 8000d2c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d2e:	f7ff ff4f 	bl	8000bd0 <Send_Uart>
            	free(buf);
 8000d32:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d34:	f00e fbd8 	bl	800f4e8 <free>
                i = strlen(path);
 8000d38:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d3a:	f7ff fa63 	bl	8000204 <strlen>
 8000d3e:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000d40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d44:	4413      	add	r3, r2
 8000d46:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <Scan_USB+0x134>)
 8000d48:	4923      	ldr	r1, [pc, #140]	; (8000dd8 <Scan_USB+0x144>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00e fd50 	bl	800f7f0 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000d50:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d52:	f7ff ff9f 	bl	8000c94 <Scan_USB>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <Scan_USB+0x12c>)
 8000d5c:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <Scan_USB+0x12c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d11b      	bne.n	8000d9e <Scan_USB+0x10a>
                path[i] = 0;
 8000d66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d6a:	4413      	add	r3, r2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e7ac      	b.n	8000ccc <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000d72:	201e      	movs	r0, #30
 8000d74:	f00e fbb0 	bl	800f4d8 <malloc>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <Scan_USB+0x134>)
 8000d7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d80:	4916      	ldr	r1, [pc, #88]	; (8000ddc <Scan_USB+0x148>)
 8000d82:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d84:	f00e fd34 	bl	800f7f0 <siprintf>
               Send_Uart(buf);
 8000d88:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d8a:	f7ff ff21 	bl	8000bd0 <Send_Uart>
               free(buf);
 8000d8e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d90:	f00e fbaa 	bl	800f4e8 <free>
 8000d94:	e79a      	b.n	8000ccc <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000d96:	bf00      	nop
 8000d98:	e798      	b.n	8000ccc <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000d9a:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000d9c:	e796      	b.n	8000ccc <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8000d9e:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4618      	mov	r0, r3
 8000da6:	f00d fbc6 	bl	800e536 <f_closedir>
    }
    free(path);
 8000daa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000dac:	f00e fb9c 	bl	800f4e8 <free>
    return fresult;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <Scan_USB+0x12c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3768      	adds	r7, #104	; 0x68
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	080106bc 	.word	0x080106bc
 8000dc0:	200001d0 	.word	0x200001d0
 8000dc4:	200000b0 	.word	0x200000b0
 8000dc8:	200000ca 	.word	0x200000ca
 8000dcc:	080106c0 	.word	0x080106c0
 8000dd0:	080106cc 	.word	0x080106cc
 8000dd4:	080106e8 	.word	0x080106e8
 8000dd8:	080106f4 	.word	0x080106f4
 8000ddc:	080106f8 	.word	0x080106f8

08000de0 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000dea:	4955      	ldr	r1, [pc, #340]	; (8000f40 <Write_File+0x160>)
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f00d fc05 	bl	800e5fc <f_stat>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <Write_File+0x164>)
 8000df8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000dfa:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <Write_File+0x164>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d012      	beq.n	8000e28 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000e02:	2064      	movs	r0, #100	; 0x64
 8000e04:	f00e fb68 	bl	800f4d8 <malloc>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	494e      	ldr	r1, [pc, #312]	; (8000f48 <Write_File+0x168>)
 8000e10:	68b8      	ldr	r0, [r7, #8]
 8000e12:	f00e fced 	bl	800f7f0 <siprintf>
		Send_Uart (buf);
 8000e16:	68b8      	ldr	r0, [r7, #8]
 8000e18:	f7ff feda 	bl	8000bd0 <Send_Uart>
	    free(buf);
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	f00e fb63 	bl	800f4e8 <free>
	    return fresult;
 8000e22:	4b48      	ldr	r3, [pc, #288]	; (8000f44 <Write_File+0x164>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	e087      	b.n	8000f38 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000e28:	2202      	movs	r2, #2
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4847      	ldr	r0, [pc, #284]	; (8000f4c <Write_File+0x16c>)
 8000e2e:	f00c fce7 	bl	800d800 <f_open>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <Write_File+0x164>)
 8000e38:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000e3a:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <Write_File+0x164>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d015      	beq.n	8000e6e <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e42:	2064      	movs	r0, #100	; 0x64
 8000e44:	f00e fb48 	bl	800f4d8 <malloc>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <Write_File+0x164>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	493e      	ldr	r1, [pc, #248]	; (8000f50 <Write_File+0x170>)
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f00e fcca 	bl	800f7f0 <siprintf>
	    	Send_Uart(buf);
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff feb7 	bl	8000bd0 <Send_Uart>
	        free(buf);
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f00e fb40 	bl	800f4e8 <free>
	        return fresult;
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <Write_File+0x164>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	e064      	b.n	8000f38 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f00e fb32 	bl	800f4d8 <malloc>
 8000e74:	4603      	mov	r3, r0
 8000e76:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4936      	ldr	r1, [pc, #216]	; (8000f54 <Write_File+0x174>)
 8000e7c:	69f8      	ldr	r0, [r7, #28]
 8000e7e:	f00e fcb7 	bl	800f7f0 <siprintf>
	    	Send_Uart(buf);
 8000e82:	69f8      	ldr	r0, [r7, #28]
 8000e84:	f7ff fea4 	bl	8000bd0 <Send_Uart>
	        free(buf);
 8000e88:	69f8      	ldr	r0, [r7, #28]
 8000e8a:	f00e fb2d 	bl	800f4e8 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000e8e:	6838      	ldr	r0, [r7, #0]
 8000e90:	f7ff f9b8 	bl	8000204 <strlen>
 8000e94:	4602      	mov	r2, r0
 8000e96:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <Write_File+0x178>)
 8000e98:	6839      	ldr	r1, [r7, #0]
 8000e9a:	482c      	ldr	r0, [pc, #176]	; (8000f4c <Write_File+0x16c>)
 8000e9c:	f00c ff83 	bl	800dda6 <f_write>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <Write_File+0x164>)
 8000ea6:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <Write_File+0x164>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d012      	beq.n	8000ed6 <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000eb0:	2064      	movs	r0, #100	; 0x64
 8000eb2:	f00e fb11 	bl	800f4d8 <malloc>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000eba:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <Write_File+0x164>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4926      	ldr	r1, [pc, #152]	; (8000f5c <Write_File+0x17c>)
 8000ec4:	69b8      	ldr	r0, [r7, #24]
 8000ec6:	f00e fc93 	bl	800f7f0 <siprintf>
	    		Send_Uart(buf);
 8000eca:	69b8      	ldr	r0, [r7, #24]
 8000ecc:	f7ff fe80 	bl	8000bd0 <Send_Uart>
	    		free(buf);
 8000ed0:	69b8      	ldr	r0, [r7, #24]
 8000ed2:	f00e fb09 	bl	800f4e8 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000ed6:	481d      	ldr	r0, [pc, #116]	; (8000f4c <Write_File+0x16c>)
 8000ed8:	f00d fa5a 	bl	800e390 <f_close>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <Write_File+0x164>)
 8000ee2:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <Write_File+0x164>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000eec:	2064      	movs	r0, #100	; 0x64
 8000eee:	f00e faf3 	bl	800f4d8 <malloc>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <Write_File+0x164>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4918      	ldr	r1, [pc, #96]	; (8000f60 <Write_File+0x180>)
 8000f00:	6938      	ldr	r0, [r7, #16]
 8000f02:	f00e fc75 	bl	800f7f0 <siprintf>
	    		Send_Uart(buf);
 8000f06:	6938      	ldr	r0, [r7, #16]
 8000f08:	f7ff fe62 	bl	8000bd0 <Send_Uart>
	    		free(buf);
 8000f0c:	6938      	ldr	r0, [r7, #16]
 8000f0e:	f00e faeb 	bl	800f4e8 <free>
 8000f12:	e00f      	b.n	8000f34 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000f14:	2064      	movs	r0, #100	; 0x64
 8000f16:	f00e fadf 	bl	800f4d8 <malloc>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4910      	ldr	r1, [pc, #64]	; (8000f64 <Write_File+0x184>)
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f00e fc64 	bl	800f7f0 <siprintf>
	    		Send_Uart(buf);
 8000f28:	6978      	ldr	r0, [r7, #20]
 8000f2a:	f7ff fe51 	bl	8000bd0 <Send_Uart>
	    		free(buf);
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f00e fada 	bl	800f4e8 <free>
	    	}
	    }
	    return fresult;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <Write_File+0x164>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200000b0 	.word	0x200000b0
 8000f44:	200001d0 	.word	0x200001d0
 8000f48:	0801070c 	.word	0x0801070c
 8000f4c:	200012b8 	.word	0x200012b8
 8000f50:	0801072c 	.word	0x0801072c
 8000f54:	08010754 	.word	0x08010754
 8000f58:	200001d4 	.word	0x200001d4
 8000f5c:	08010780 	.word	0x08010780
 8000f60:	080107b4 	.word	0x080107b4
 8000f64:	080107ec 	.word	0x080107ec

08000f68 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000f70:	4943      	ldr	r1, [pc, #268]	; (8001080 <Create_File+0x118>)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f00d fb42 	bl	800e5fc <f_stat>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b41      	ldr	r3, [pc, #260]	; (8001084 <Create_File+0x11c>)
 8000f7e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000f80:	4b40      	ldr	r3, [pc, #256]	; (8001084 <Create_File+0x11c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d112      	bne.n	8000fae <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f00e faa5 	bl	800f4d8 <malloc>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	493c      	ldr	r1, [pc, #240]	; (8001088 <Create_File+0x120>)
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f00e fc2a 	bl	800f7f0 <siprintf>
		Send_Uart(buf);
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f7ff fe17 	bl	8000bd0 <Send_Uart>
		free(buf);
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f00e faa0 	bl	800f4e8 <free>
	    return fresult;
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <Create_File+0x11c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	e063      	b.n	8001076 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000fae:	220b      	movs	r2, #11
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4836      	ldr	r0, [pc, #216]	; (800108c <Create_File+0x124>)
 8000fb4:	f00c fc24 	bl	800d800 <f_open>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <Create_File+0x11c>)
 8000fbe:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <Create_File+0x11c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d015      	beq.n	8000ff4 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000fc8:	2064      	movs	r0, #100	; 0x64
 8000fca:	f00e fa85 	bl	800f4d8 <malloc>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <Create_File+0x11c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	492d      	ldr	r1, [pc, #180]	; (8001090 <Create_File+0x128>)
 8000fdc:	6938      	ldr	r0, [r7, #16]
 8000fde:	f00e fc07 	bl	800f7f0 <siprintf>
			Send_Uart(buf);
 8000fe2:	6938      	ldr	r0, [r7, #16]
 8000fe4:	f7ff fdf4 	bl	8000bd0 <Send_Uart>
			free(buf);
 8000fe8:	6938      	ldr	r0, [r7, #16]
 8000fea:	f00e fa7d 	bl	800f4e8 <free>
		    return fresult;
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <Create_File+0x11c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	e040      	b.n	8001076 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000ff4:	2064      	movs	r0, #100	; 0x64
 8000ff6:	f00e fa6f 	bl	800f4d8 <malloc>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4924      	ldr	r1, [pc, #144]	; (8001094 <Create_File+0x12c>)
 8001002:	69f8      	ldr	r0, [r7, #28]
 8001004:	f00e fbf4 	bl	800f7f0 <siprintf>
			Send_Uart(buf);
 8001008:	69f8      	ldr	r0, [r7, #28]
 800100a:	f7ff fde1 	bl	8000bd0 <Send_Uart>
			free(buf);
 800100e:	69f8      	ldr	r0, [r7, #28]
 8001010:	f00e fa6a 	bl	800f4e8 <free>
		}

		fresult = f_close(&USBHFile);
 8001014:	481d      	ldr	r0, [pc, #116]	; (800108c <Create_File+0x124>)
 8001016:	f00d f9bb 	bl	800e390 <f_close>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <Create_File+0x11c>)
 8001020:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <Create_File+0x11c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d013      	beq.n	8001052 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f00e fa54 	bl	800f4d8 <malloc>
 8001030:	4603      	mov	r3, r0
 8001032:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <Create_File+0x11c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4916      	ldr	r1, [pc, #88]	; (8001098 <Create_File+0x130>)
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f00e fbd6 	bl	800f7f0 <siprintf>
			Send_Uart(buf);
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f7ff fdc3 	bl	8000bd0 <Send_Uart>
			free(buf);
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f00e fa4c 	bl	800f4e8 <free>
 8001050:	e00f      	b.n	8001072 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001052:	2064      	movs	r0, #100	; 0x64
 8001054:	f00e fa40 	bl	800f4d8 <malloc>
 8001058:	4603      	mov	r3, r0
 800105a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	490f      	ldr	r1, [pc, #60]	; (800109c <Create_File+0x134>)
 8001060:	69b8      	ldr	r0, [r7, #24]
 8001062:	f00e fbc5 	bl	800f7f0 <siprintf>
			Send_Uart(buf);
 8001066:	69b8      	ldr	r0, [r7, #24]
 8001068:	f7ff fdb2 	bl	8000bd0 <Send_Uart>
			free(buf);
 800106c:	69b8      	ldr	r0, [r7, #24]
 800106e:	f00e fa3b 	bl	800f4e8 <free>
		}
	}
    return fresult;
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <Create_File+0x11c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000b0 	.word	0x200000b0
 8001084:	200001d0 	.word	0x200001d0
 8001088:	080108e0 	.word	0x080108e0
 800108c:	200012b8 	.word	0x200012b8
 8001090:	08010918 	.word	0x08010918
 8001094:	08010940 	.word	0x08010940
 8001098:	08010980 	.word	0x08010980
 800109c:	080108c0 	.word	0x080108c0

080010a0 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f00d fbe7 	bl	800e87c <f_mkdir>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <Create_Dir+0x74>)
 80010b4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <Create_Dir+0x74>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d110      	bne.n	80010e0 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f00e fa0a 	bl	800f4d8 <malloc>
 80010c4:	4603      	mov	r3, r0
 80010c6:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4913      	ldr	r1, [pc, #76]	; (8001118 <Create_Dir+0x78>)
 80010cc:	68b8      	ldr	r0, [r7, #8]
 80010ce:	f00e fb8f 	bl	800f7f0 <siprintf>
    	Send_Uart (buf);
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f7ff fd7c 	bl	8000bd0 <Send_Uart>
    	free(buf);
 80010d8:	68b8      	ldr	r0, [r7, #8]
 80010da:	f00e fa05 	bl	800f4e8 <free>
 80010de:	e012      	b.n	8001106 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80010e0:	2064      	movs	r0, #100	; 0x64
 80010e2:	f00e f9f9 	bl	800f4d8 <malloc>
 80010e6:	4603      	mov	r3, r0
 80010e8:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <Create_Dir+0x74>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	490a      	ldr	r1, [pc, #40]	; (800111c <Create_Dir+0x7c>)
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f00e fb7b 	bl	800f7f0 <siprintf>
    	Send_Uart(buf);
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff fd68 	bl	8000bd0 <Send_Uart>
    	free(buf);
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f00e f9f1 	bl	800f4e8 <free>
    }
    return fresult;
 8001106:	4b03      	ldr	r3, [pc, #12]	; (8001114 <Create_Dir+0x74>)
 8001108:	781b      	ldrb	r3, [r3, #0]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001d0 	.word	0x200001d0
 8001118:	08010a60 	.word	0x08010a60
 800111c:	08010a88 	.word	0x08010a88

08001120 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8001126:	4a30      	ldr	r2, [pc, #192]	; (80011e8 <Check_USB_Details+0xc8>)
 8001128:	4930      	ldr	r1, [pc, #192]	; (80011ec <Check_USB_Details+0xcc>)
 800112a:	4831      	ldr	r0, [pc, #196]	; (80011f0 <Check_USB_Details+0xd0>)
 800112c:	f00d fa9f 	bl	800e66e <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <Check_USB_Details+0xc8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	3b02      	subs	r3, #2
 8001138:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <Check_USB_Details+0xc8>)
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	8952      	ldrh	r2, [r2, #10]
 800113e:	fb02 f303 	mul.w	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fb28 	bl	8000798 <__aeabi_ui2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <Check_USB_Details+0xd4>)
 800114e:	f7ff f8b7 	bl	80002c0 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fb97 	bl	800088c <__aeabi_d2uiz>
 800115e:	4603      	mov	r3, r0
 8001160:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <Check_USB_Details+0xd8>)
 8001162:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001164:	201e      	movs	r0, #30
 8001166:	f00e f9b7 	bl	800f4d8 <malloc>
 800116a:	4603      	mov	r3, r0
 800116c:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <Check_USB_Details+0xd8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	4921      	ldr	r1, [pc, #132]	; (80011fc <Check_USB_Details+0xdc>)
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f00e fb3a 	bl	800f7f0 <siprintf>
    Send_Uart(buf);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fd27 	bl	8000bd0 <Send_Uart>
    free(buf);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f00e f9b0 	bl	800f4e8 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <Check_USB_Details+0xc8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	895b      	ldrh	r3, [r3, #10]
 800118e:	461a      	mov	r2, r3
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <Check_USB_Details+0xcc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fafd 	bl	8000798 <__aeabi_ui2d>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <Check_USB_Details+0xd4>)
 80011a4:	f7ff f88c 	bl	80002c0 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fb6c 	bl	800088c <__aeabi_d2uiz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <Check_USB_Details+0xe0>)
 80011b8:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80011ba:	201e      	movs	r0, #30
 80011bc:	f00e f98c 	bl	800f4d8 <malloc>
 80011c0:	4603      	mov	r3, r0
 80011c2:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <Check_USB_Details+0xe0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <Check_USB_Details+0xe4>)
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f00e fb0f 	bl	800f7f0 <siprintf>
    Send_Uart(buf);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fcfc 	bl	8000bd0 <Send_Uart>
    free(buf);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f00e f985 	bl	800f4e8 <free>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001d8 	.word	0x200001d8
 80011ec:	200001dc 	.word	0x200001dc
 80011f0:	08010ab4 	.word	0x08010ab4
 80011f4:	3fe00000 	.word	0x3fe00000
 80011f8:	200001e0 	.word	0x200001e0
 80011fc:	08010ab8 	.word	0x08010ab8
 8001200:	200001e4 	.word	0x200001e4
 8001204:	08010ad0 	.word	0x08010ad0

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f000 fa97 	bl	800173e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f80c 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f000 f898 	bl	8001348 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8001218:	f00d fda0 	bl	800ed5c <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800121c:	f005 fd56 	bl	8006ccc <MX_FATFS_Init>
  MX_LPUART1_UART_Init();
 8001220:	f000 f866 	bl	80012f0 <MX_LPUART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001224:	f00d fdc0 	bl	800eda8 <MX_USB_HOST_Process>
 8001228:	e7fc      	b.n	8001224 <main+0x1c>
	...

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b096      	sub	sp, #88	; 0x58
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2244      	movs	r2, #68	; 0x44
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f00e f96a 	bl	800f514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800124e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001252:	f002 f9e3 	bl	800361c <HAL_PWREx_ControlVoltageScaling>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800125c:	f000 f8c0 	bl	80013e0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001260:	f002 f9be 	bl	80035e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <SystemClock_Config+0xc0>)
 8001266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126a:	4a20      	ldr	r2, [pc, #128]	; (80012ec <SystemClock_Config+0xc0>)
 800126c:	f023 0318 	bic.w	r3, r3, #24
 8001270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001274:	2314      	movs	r3, #20
 8001276:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001284:	2360      	movs	r3, #96	; 0x60
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800128c:	2301      	movs	r3, #1
 800128e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001294:	2328      	movs	r3, #40	; 0x28
 8001296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800129c:	2302      	movs	r3, #2
 800129e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fa2d 	bl	8003708 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012b4:	f000 f894 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2303      	movs	r3, #3
 80012be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	2104      	movs	r1, #4
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fe33 	bl	8003f3c <HAL_RCC_ClockConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012dc:	f000 f880 	bl	80013e0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012e0:	f003 fb4c 	bl	800497c <HAL_RCCEx_EnableMSIPLLMode>
}
 80012e4:	bf00      	nop
 80012e6:	3758      	adds	r7, #88	; 0x58
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000

080012f0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_LPUART1_UART_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <MX_LPUART1_UART_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_LPUART1_UART_Init+0x50>)
 80012fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001300:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_LPUART1_UART_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <MX_LPUART1_UART_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_LPUART1_UART_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_LPUART1_UART_Init+0x50>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_LPUART1_UART_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_LPUART1_UART_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_LPUART1_UART_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_LPUART1_UART_Init+0x50>)
 800132e:	f003 fd03 	bl	8004d38 <HAL_UART_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 f852 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200001e8 	.word	0x200001e8
 8001344:	40008000 	.word	0x40008000

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <MX_GPIO_Init+0x90>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <MX_GPIO_Init+0x90>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_GPIO_Init+0x90>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_GPIO_Init+0x90>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <MX_GPIO_Init+0x90>)
 800137c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_GPIO_Init+0x90>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800138e:	f002 f9ab 	bl	80036e8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_GPIO_Init+0x90>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <MX_GPIO_Init+0x90>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_GPIO_Init+0x90>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <MX_GPIO_Init+0x94>)
 80013b0:	f000 fd80 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b4:	2340      	movs	r3, #64	; 0x40
 80013b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_GPIO_Init+0x94>)
 80013cc:	f000 fbe0 	bl	8001b90 <HAL_GPIO_Init>

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48001800 	.word	0x48001800

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_MspInit+0x44>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_MspInit+0x44>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6613      	str	r3, [r2, #96]	; 0x60
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_MspInit+0x44>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_MspInit+0x44>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_MspInit+0x44>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6593      	str	r3, [r2, #88]	; 0x58
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_MspInit+0x44>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000

08001434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0ac      	sub	sp, #176	; 0xb0
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	228c      	movs	r2, #140	; 0x8c
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f00e f85d 	bl	800f514 <memset>
  if(huart->Instance==LPUART1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_UART_MspInit+0xc4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d145      	bne.n	80014f0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001464:	2320      	movs	r3, #32
 8001466:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001468:	2300      	movs	r3, #0
 800146a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4618      	mov	r0, r3
 8001472:	f002 ff87 	bl	8004384 <HAL_RCCEx_PeriphCLKConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800147c:	f7ff ffb0 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_UART_MspInit+0xc8>)
 8001482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001484:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_UART_MspInit+0xc8>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_UART_MspInit+0xc8>)
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_UART_MspInit+0xc8>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_UART_MspInit+0xc8>)
 800149e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_UART_MspInit+0xc8>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80014b0:	f002 f91a 	bl	80036e8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014ce:	2308      	movs	r3, #8
 80014d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d8:	4619      	mov	r1, r3
 80014da:	4809      	ldr	r0, [pc, #36]	; (8001500 <HAL_UART_MspInit+0xcc>)
 80014dc:	f000 fb58 	bl	8001b90 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2046      	movs	r0, #70	; 0x46
 80014e6:	f000 fa9e 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80014ea:	2046      	movs	r0, #70	; 0x46
 80014ec:	f000 fab7 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	37b0      	adds	r7, #176	; 0xb0
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40008000 	.word	0x40008000
 80014fc:	40021000 	.word	0x40021000
 8001500:	48001800 	.word	0x48001800

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001550:	f000 f94a 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <OTG_FS_IRQHandler+0x10>)
 800155e:	f000 ff27 	bl	80023b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20002b80 	.word	0x20002b80

0800156c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <LPUART1_IRQHandler+0x10>)
 8001572:	f003 fcc3 	bl	8004efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200001e8 	.word	0x200001e8

08001580 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e00a      	b.n	80015a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001592:	f3af 8000 	nop.w
 8001596:	4601      	mov	r1, r0
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	b2ca      	uxtb	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf0      	blt.n	8001592 <_read+0x12>
	}

return len;
 80015b0:	687b      	ldr	r3, [r7, #4]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e009      	b.n	80015e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf1      	blt.n	80015cc <_write+0x12>
	}
	return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_close>:

int _close(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	605a      	str	r2, [r3, #4]
	return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_isatty>:

int _isatty(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
	return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f00d fefa 	bl	800f484 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20050000 	.word	0x20050000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	2000026c 	.word	0x2000026c
 80016c4:	20002e98 	.word	0x20002e98

080016c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001724 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f0:	f7ff ffea 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <LoopForever+0x6>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	; (800172c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <LoopForever+0xe>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	; (8001738 <LoopForever+0x16>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f00d feb9 	bl	800f490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800171e:	f7ff fd73 	bl	8001208 <main>

08001722 <LoopForever>:

LoopForever:
    b LoopForever
 8001722:	e7fe      	b.n	8001722 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001724:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001730:	080110c8 	.word	0x080110c8
  ldr r2, =_sbss
 8001734:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001738:	20002e94 	.word	0x20002e94

0800173c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC1_2_IRQHandler>

0800173e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 f961 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174e:	200f      	movs	r0, #15
 8001750:	f000 f80e 	bl	8001770 <HAL_InitTick>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	e001      	b.n	8001764 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001760:	f7ff fe44 	bl	80013ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001764:	79fb      	ldrb	r3, [r7, #7]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_InitTick+0x6c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d023      	beq.n	80017cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_InitTick+0x70>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_InitTick+0x6c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f96d 	bl	8001a7a <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10f      	bne.n	80017c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d809      	bhi.n	80017c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b4:	f000 f937 	bl	8001a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_InitTick+0x74>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e007      	b.n	80017d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e004      	b.n	80017d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	e001      	b.n	80017d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008
 800180c:	20000270 	.word	0x20000270

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000270 	.word	0x20000270

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <__NVIC_EnableIRQ+0x38>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff29 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff3e 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff31 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa2 	bl	80019cc <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d008      	beq.n	8001abc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2204      	movs	r2, #4
 8001aae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e022      	b.n	8001b02 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 020e 	bic.w	r2, r2, #14
 8001aca:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f003 021c 	and.w	r2, r3, #28
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d005      	beq.n	8001b32 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2204      	movs	r2, #4
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e029      	b.n	8001b86 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 020e 	bic.w	r2, r2, #14
 8001b40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0201 	bic.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f003 021c 	and.w	r2, r3, #28
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f202 	lsl.w	r2, r1, r2
 8001b64:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
    }
  }
  return status;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	e166      	b.n	8001e6e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8158 	beq.w	8001e68 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d005      	beq.n	8001bd0 <HAL_GPIO_Init+0x40>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d130      	bne.n	8001c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c06:	2201      	movs	r2, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 0201 	and.w	r2, r3, #1
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d017      	beq.n	8001c6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d123      	bne.n	8001cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	6939      	ldr	r1, [r7, #16]
 8001cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0203 	and.w	r2, r3, #3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80b2 	beq.w	8001e68 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d04:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d08:	4a60      	ldr	r2, [pc, #384]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d10:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d1c:	4a5c      	ldr	r2, [pc, #368]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d46:	d02b      	beq.n	8001da0 <HAL_GPIO_Init+0x210>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d025      	beq.n	8001d9c <HAL_GPIO_Init+0x20c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a51      	ldr	r2, [pc, #324]	; (8001e98 <HAL_GPIO_Init+0x308>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d01f      	beq.n	8001d98 <HAL_GPIO_Init+0x208>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a50      	ldr	r2, [pc, #320]	; (8001e9c <HAL_GPIO_Init+0x30c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d019      	beq.n	8001d94 <HAL_GPIO_Init+0x204>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4f      	ldr	r2, [pc, #316]	; (8001ea0 <HAL_GPIO_Init+0x310>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x200>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a4e      	ldr	r2, [pc, #312]	; (8001ea4 <HAL_GPIO_Init+0x314>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1fc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a4d      	ldr	r2, [pc, #308]	; (8001ea8 <HAL_GPIO_Init+0x318>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1f8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a4c      	ldr	r2, [pc, #304]	; (8001eac <HAL_GPIO_Init+0x31c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1f4>
 8001d80:	2307      	movs	r3, #7
 8001d82:	e00e      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d84:	2308      	movs	r3, #8
 8001d86:	e00c      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d88:	2306      	movs	r3, #6
 8001d8a:	e00a      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	e008      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d90:	2304      	movs	r3, #4
 8001d92:	e006      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e004      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_GPIO_Init+0x212>
 8001da0:	2300      	movs	r3, #0
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	f002 0203 	and.w	r2, r2, #3
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	4093      	lsls	r3, r2
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001db2:	4937      	ldr	r1, [pc, #220]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001de4:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e0e:	4a28      	ldr	r2, [pc, #160]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e62:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f47f ae91 	bne.w	8001ba0 <HAL_GPIO_Init+0x10>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	48000400 	.word	0x48000400
 8001e98:	48000800 	.word	0x48000800
 8001e9c:	48000c00 	.word	0x48000c00
 8001ea0:	48001000 	.word	0x48001000
 8001ea4:	48001400 	.word	0x48001400
 8001ea8:	48001800 	.word	0x48001800
 8001eac:	48001c00 	.word	0x48001c00
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	b08f      	sub	sp, #60	; 0x3c
 8001ee8:	af0a      	add	r7, sp, #40	; 0x28
 8001eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e054      	b.n	8001fa0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f00c ff9b 	bl	800ee4c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 f834 	bl	8005fa2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	687e      	ldr	r6, [r7, #4]
 8001f42:	466d      	mov	r5, sp
 8001f44:	f106 0410 	add.w	r4, r6, #16
 8001f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f58:	1d33      	adds	r3, r6, #4
 8001f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5c:	6838      	ldr	r0, [r7, #0]
 8001f5e:	f003 ffe3 	bl	8005f28 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2101      	movs	r1, #1
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 f82b 	bl	8005fc4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	687e      	ldr	r6, [r7, #4]
 8001f76:	466d      	mov	r5, sp
 8001f78:	f106 0410 	add.w	r4, r6, #16
 8001f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f88:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f8c:	1d33      	adds	r3, r6, #4
 8001f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f90:	6838      	ldr	r0, [r7, #0]
 8001f92:	f004 f9af 	bl	80062f4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fa8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af04      	add	r7, sp, #16
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	70fb      	strb	r3, [r7, #3]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70bb      	strb	r3, [r7, #2]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_HCD_HC_Init+0x28>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e076      	b.n	80020be <HAL_HCD_HC_Init+0x116>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	212c      	movs	r1, #44	; 0x2c
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	333d      	adds	r3, #61	; 0x3d
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3338      	adds	r3, #56	; 0x38
 8001ff8:	787a      	ldrb	r2, [r7, #1]
 8001ffa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	3340      	adds	r3, #64	; 0x40
 800200a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800200c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	212c      	movs	r1, #44	; 0x2c
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	3339      	adds	r3, #57	; 0x39
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	333f      	adds	r3, #63	; 0x3f
 800202e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002032:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	78ba      	ldrb	r2, [r7, #2]
 8002038:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800203c:	b2d0      	uxtb	r0, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	333a      	adds	r3, #58	; 0x3a
 800204a:	4602      	mov	r2, r0
 800204c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800204e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da09      	bge.n	800206a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	333b      	adds	r3, #59	; 0x3b
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	e008      	b.n	800207c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	333b      	adds	r3, #59	; 0x3b
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	333c      	adds	r3, #60	; 0x3c
 800208a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800208e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	787c      	ldrb	r4, [r7, #1]
 8002096:	78ba      	ldrb	r2, [r7, #2]
 8002098:	78f9      	ldrb	r1, [r7, #3]
 800209a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800209c:	9302      	str	r3, [sp, #8]
 800209e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	4623      	mov	r3, r4
 80020ac:	f004 fa6a 	bl	8006584 <USB_HC_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd90      	pop	{r4, r7, pc}

080020c6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_HCD_HC_Halt+0x1e>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e00f      	b.n	8002104 <HAL_HCD_HC_Halt+0x3e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 fc5a 	bl	80069ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	4608      	mov	r0, r1
 8002116:	4611      	mov	r1, r2
 8002118:	461a      	mov	r2, r3
 800211a:	4603      	mov	r3, r0
 800211c:	70fb      	strb	r3, [r7, #3]
 800211e:	460b      	mov	r3, r1
 8002120:	70bb      	strb	r3, [r7, #2]
 8002122:	4613      	mov	r3, r2
 8002124:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	333b      	adds	r3, #59	; 0x3b
 8002134:	78ba      	ldrb	r2, [r7, #2]
 8002136:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	333f      	adds	r3, #63	; 0x3f
 8002146:	787a      	ldrb	r2, [r7, #1]
 8002148:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800214a:	7c3b      	ldrb	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d112      	bne.n	8002176 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3342      	adds	r3, #66	; 0x42
 800215e:	2203      	movs	r2, #3
 8002160:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	333d      	adds	r3, #61	; 0x3d
 8002170:	7f3a      	ldrb	r2, [r7, #28]
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e008      	b.n	8002188 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3342      	adds	r3, #66	; 0x42
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b03      	cmp	r3, #3
 800218c:	f200 80c6 	bhi.w	800231c <HAL_HCD_HC_SubmitRequest+0x210>
 8002190:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002196:	bf00      	nop
 8002198:	080021a9 	.word	0x080021a9
 800219c:	08002309 	.word	0x08002309
 80021a0:	0800220d 	.word	0x0800220d
 80021a4:	0800228b 	.word	0x0800228b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80021a8:	7c3b      	ldrb	r3, [r7, #16]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	f040 80b8 	bne.w	8002320 <HAL_HCD_HC_SubmitRequest+0x214>
 80021b0:	78bb      	ldrb	r3, [r7, #2]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 80b4 	bne.w	8002320 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80021b8:	8b3b      	ldrh	r3, [r7, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d108      	bne.n	80021d0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3355      	adds	r3, #85	; 0x55
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3355      	adds	r3, #85	; 0x55
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3342      	adds	r3, #66	; 0x42
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021f6:	e093      	b.n	8002320 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3342      	adds	r3, #66	; 0x42
 8002206:	2202      	movs	r2, #2
 8002208:	701a      	strb	r2, [r3, #0]
      break;
 800220a:	e089      	b.n	8002320 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800220c:	78bb      	ldrb	r3, [r7, #2]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d11d      	bne.n	800224e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3355      	adds	r3, #85	; 0x55
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3342      	adds	r3, #66	; 0x42
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002238:	e073      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	3342      	adds	r3, #66	; 0x42
 8002248:	2202      	movs	r2, #2
 800224a:	701a      	strb	r2, [r3, #0]
      break;
 800224c:	e069      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3354      	adds	r3, #84	; 0x54
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3342      	adds	r3, #66	; 0x42
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
      break;
 8002274:	e055      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3342      	adds	r3, #66	; 0x42
 8002284:	2202      	movs	r2, #2
 8002286:	701a      	strb	r2, [r3, #0]
      break;
 8002288:	e04b      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800228a:	78bb      	ldrb	r3, [r7, #2]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11d      	bne.n	80022cc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3355      	adds	r3, #85	; 0x55
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d109      	bne.n	80022b8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	212c      	movs	r1, #44	; 0x2c
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	3342      	adds	r3, #66	; 0x42
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022b6:	e034      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3342      	adds	r3, #66	; 0x42
 80022c6:	2202      	movs	r2, #2
 80022c8:	701a      	strb	r2, [r3, #0]
      break;
 80022ca:	e02a      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3354      	adds	r3, #84	; 0x54
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3342      	adds	r3, #66	; 0x42
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
      break;
 80022f2:	e016      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	3342      	adds	r3, #66	; 0x42
 8002302:	2202      	movs	r2, #2
 8002304:	701a      	strb	r2, [r3, #0]
      break;
 8002306:	e00c      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3342      	adds	r3, #66	; 0x42
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
      break;
 800231a:	e002      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800231c:	bf00      	nop
 800231e:	e000      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002320:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3344      	adds	r3, #68	; 0x44
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	8b3a      	ldrh	r2, [r7, #24]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	202c      	movs	r0, #44	; 0x2c
 800233c:	fb00 f303 	mul.w	r3, r0, r3
 8002340:	440b      	add	r3, r1
 8002342:	334c      	adds	r3, #76	; 0x4c
 8002344:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3360      	adds	r3, #96	; 0x60
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3350      	adds	r3, #80	; 0x50
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3339      	adds	r3, #57	; 0x39
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3361      	adds	r3, #97	; 0x61
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	222c      	movs	r2, #44	; 0x2c
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	3338      	adds	r3, #56	; 0x38
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f004 f9fb 	bl	800679c <USB_HC_StartXfer>
 80023a6:	4603      	mov	r3, r0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 ff51 	bl	800626e <USB_GetMode>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	f040 80f6 	bne.w	80025c0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 ff35 	bl	8006248 <USB_ReadInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80ec 	beq.w	80025be <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 ff2c 	bl	8006248 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023fa:	d104      	bne.n	8002406 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002404:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f003 ff1c 	bl	8006248 <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800241a:	d104      	bne.n	8002426 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002424:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 ff0c 	bl	8006248 <USB_ReadInterrupts>
 8002430:	4603      	mov	r3, r0
 8002432:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002436:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800243a:	d104      	bne.n	8002446 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002444:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fefc 	bl	8006248 <USB_ReadInterrupts>
 8002450:	4603      	mov	r3, r0
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b02      	cmp	r3, #2
 8002458:	d103      	bne.n	8002462 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 feee 	bl	8006248 <USB_ReadInterrupts>
 800246c:	4603      	mov	r3, r0
 800246e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002476:	d11c      	bne.n	80024b2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002480:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002492:	2110      	movs	r1, #16
 8002494:	6938      	ldr	r0, [r7, #16]
 8002496:	f003 fde1 	bl	800605c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800249a:	6938      	ldr	r0, [r7, #16]
 800249c:	f003 fe12 	bl	80060c4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 ffa6 	bl	80063f8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f00c fd8d 	bl	800efcc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fec6 	bl	8006248 <USB_ReadInterrupts>
 80024bc:	4603      	mov	r3, r0
 80024be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c6:	d102      	bne.n	80024ce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f001 f815 	bl	80034f8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 feb8 	bl	8006248 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d106      	bne.n	80024f0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f00c fd56 	bl	800ef94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2208      	movs	r2, #8
 80024ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 fea7 	bl	8006248 <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b10      	cmp	r3, #16
 8002502:	d101      	bne.n	8002508 <HAL_HCD_IRQHandler+0x158>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_HCD_IRQHandler+0x15a>
 8002508:	2300      	movs	r3, #0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d012      	beq.n	8002534 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0210 	bic.w	r2, r2, #16
 800251c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 ff18 	bl	8003354 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0210 	orr.w	r2, r2, #16
 8002532:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f003 fe85 	bl	8006248 <USB_ReadInterrupts>
 800253e:	4603      	mov	r3, r0
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002548:	d13a      	bne.n	80025c0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fa1c 	bl	800698c <USB_HC_ReadInterrupt>
 8002554:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e025      	b.n	80025a8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d018      	beq.n	80025a2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002586:	d106      	bne.n	8002596 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f8ab 	bl	80026ea <HCD_HC_IN_IRQHandler>
 8002594:	e005      	b.n	80025a2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4619      	mov	r1, r3
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fbd7 	bl	8002d50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d3d4      	bcc.n	800255c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ba:	615a      	str	r2, [r3, #20]
 80025bc:	e000      	b.n	80025c0 <HAL_HCD_IRQHandler+0x210>
      return;
 80025be:	bf00      	nop
    }
  }
}
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_HCD_Start+0x16>
 80025d8:	2302      	movs	r3, #2
 80025da:	e013      	b.n	8002604 <HAL_HCD_Start+0x3e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2101      	movs	r1, #1
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 ff68 	bl	80064c0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fcc3 	bl	8005f80 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_HCD_Stop+0x16>
 800261e:	2302      	movs	r3, #2
 8002620:	e00d      	b.n	800263e <HAL_HCD_Stop+0x32>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f004 fab9 	bl	8006ba6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 ff0a 	bl	800646c <USB_ResetPort>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	3360      	adds	r3, #96	; 0x60
 800267c:	781b      	ldrb	r3, [r3, #0]
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	3350      	adds	r3, #80	; 0x50
 80026a4:	681b      	ldr	r3, [r3, #0]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 ff4e 	bl	8006560 <USB_GetCurrentFrame>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 ff29 	bl	8006532 <USB_GetHostSpeed>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d11a      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	461a      	mov	r2, r3
 8002728:	2304      	movs	r3, #4
 800272a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3361      	adds	r3, #97	; 0x61
 800273a:	2206      	movs	r2, #6
 800273c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f004 f930 	bl	80069ae <USB_HC_Halt>
 800274e:	e0af      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002766:	d11b      	bne.n	80027a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	461a      	mov	r2, r3
 8002776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	3361      	adds	r3, #97	; 0x61
 800278a:	2207      	movs	r2, #7
 800278c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f004 f908 	bl	80069ae <USB_HC_Halt>
 800279e:	e087      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d109      	bne.n	80027ca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	461a      	mov	r2, r3
 80027c4:	2320      	movs	r3, #32
 80027c6:	6093      	str	r3, [r2, #8]
 80027c8:	e072      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d11a      	bne.n	8002816 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	461a      	mov	r2, r3
 80027ee:	2308      	movs	r3, #8
 80027f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3361      	adds	r3, #97	; 0x61
 8002800:	2205      	movs	r2, #5
 8002802:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f004 f8cd 	bl	80069ae <USB_HC_Halt>
 8002814:	e04c      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282c:	d11b      	bne.n	8002866 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283a:	461a      	mov	r2, r3
 800283c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002840:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3361      	adds	r3, #97	; 0x61
 8002850:	2208      	movs	r2, #8
 8002852:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f004 f8a5 	bl	80069ae <USB_HC_Halt>
 8002864:	e024      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d119      	bne.n	80028b0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	461a      	mov	r2, r3
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	3361      	adds	r3, #97	; 0x61
 800289c:	2206      	movs	r2, #6
 800289e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 f87f 	bl	80069ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c6:	d112      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f004 f86b 	bl	80069ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	461a      	mov	r2, r3
 80028e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80028ec:	e22c      	b.n	8002d48 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	f040 80c1 	bne.w	8002a88 <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	3361      	adds	r3, #97	; 0x61
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	335c      	adds	r3, #92	; 0x5c
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	461a      	mov	r2, r3
 8002938:	2301      	movs	r3, #1
 800293a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	333f      	adds	r3, #63	; 0x3f
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	333f      	adds	r3, #63	; 0x3f
 800295e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002960:	2b02      	cmp	r3, #2
 8002962:	d111      	bne.n	8002988 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f004 f81d 	bl	80069ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	2310      	movs	r3, #16
 8002984:	6093      	str	r3, [r2, #8]
 8002986:	e03a      	b.n	80029fe <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	333f      	adds	r3, #63	; 0x3f
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d009      	beq.n	80029b0 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	333f      	adds	r3, #63	; 0x3f
 80029aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d126      	bne.n	80029fe <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	0151      	lsls	r1, r2, #5
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	440a      	add	r2, r1
 80029c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029ce:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3360      	adds	r3, #96	; 0x60
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	b2d9      	uxtb	r1, r3
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	202c      	movs	r0, #44	; 0x2c
 80029ec:	fb00 f303 	mul.w	r3, r0, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3360      	adds	r3, #96	; 0x60
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f00c faf5 	bl	800efe8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d12b      	bne.n	8002a5e <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3348      	adds	r3, #72	; 0x48
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	202c      	movs	r0, #44	; 0x2c
 8002a1c:	fb00 f202 	mul.w	r2, r0, r2
 8002a20:	440a      	add	r2, r1
 8002a22:	3240      	adds	r2, #64	; 0x40
 8002a24:	8812      	ldrh	r2, [r2, #0]
 8002a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 818a 	beq.w	8002d48 <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3354      	adds	r3, #84	; 0x54
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2d8      	uxtb	r0, r3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3354      	adds	r3, #84	; 0x54
 8002a58:	4602      	mov	r2, r0
 8002a5a:	701a      	strb	r2, [r3, #0]
}
 8002a5c:	e174      	b.n	8002d48 <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3354      	adds	r3, #84	; 0x54
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f083 0301 	eor.w	r3, r3, #1
 8002a72:	b2d8      	uxtb	r0, r3
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3354      	adds	r3, #84	; 0x54
 8002a82:	4602      	mov	r2, r0
 8002a84:	701a      	strb	r2, [r3, #0]
}
 8002a86:	e15f      	b.n	8002d48 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	f040 80f6 	bne.w	8002c8c <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3361      	adds	r3, #97	; 0x61
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d109      	bne.n	8002ac8 <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3360      	adds	r3, #96	; 0x60
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e0c9      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3361      	adds	r3, #97	; 0x61
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d109      	bne.n	8002af0 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3360      	adds	r3, #96	; 0x60
 8002aea:	2205      	movs	r2, #5
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e0b5      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3361      	adds	r3, #97	; 0x61
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b06      	cmp	r3, #6
 8002b02:	d009      	beq.n	8002b18 <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3361      	adds	r3, #97	; 0x61
 8002b12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d150      	bne.n	8002bba <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	335c      	adds	r3, #92	; 0x5c
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	202c      	movs	r0, #44	; 0x2c
 8002b30:	fb00 f303 	mul.w	r3, r0, r3
 8002b34:	440b      	add	r3, r1
 8002b36:	335c      	adds	r3, #92	; 0x5c
 8002b38:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	335c      	adds	r3, #92	; 0x5c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d912      	bls.n	8002b74 <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	335c      	adds	r3, #92	; 0x5c
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3360      	adds	r3, #96	; 0x60
 8002b6e:	2204      	movs	r2, #4
 8002b70:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b72:	e073      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3360      	adds	r3, #96	; 0x60
 8002b82:	2202      	movs	r2, #2
 8002b84:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b9c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ba4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bb8:	e050      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3361      	adds	r3, #97	; 0x61
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d122      	bne.n	8002c14 <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3360      	adds	r3, #96	; 0x60
 8002bdc:	2202      	movs	r2, #2
 8002bde:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bf6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bfe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e023      	b.n	8002c5c <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3361      	adds	r3, #97	; 0x61
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b07      	cmp	r3, #7
 8002c26:	d119      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	335c      	adds	r3, #92	; 0x5c
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	202c      	movs	r0, #44	; 0x2c
 8002c40:	fb00 f303 	mul.w	r3, r0, r3
 8002c44:	440b      	add	r3, r1
 8002c46:	335c      	adds	r3, #92	; 0x5c
 8002c48:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	3360      	adds	r3, #96	; 0x60
 8002c58:	2204      	movs	r2, #4
 8002c5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	b2d9      	uxtb	r1, r3
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	202c      	movs	r0, #44	; 0x2c
 8002c78:	fb00 f303 	mul.w	r3, r0, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3360      	adds	r3, #96	; 0x60
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f00c f9af 	bl	800efe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c8a:	e05d      	b.n	8002d48 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d152      	bne.n	8002d48 <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	333f      	adds	r3, #63	; 0x3f
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d111      	bne.n	8002cda <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	335c      	adds	r3, #92	; 0x5c
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fe6b 	bl	80069ae <USB_HC_Halt>
 8002cd8:	e02d      	b.n	8002d36 <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	333f      	adds	r3, #63	; 0x3f
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	333f      	adds	r3, #63	; 0x3f
 8002cfc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d119      	bne.n	8002d36 <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	335c      	adds	r3, #92	; 0x5c
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3361      	adds	r3, #97	; 0x61
 8002d22:	2203      	movs	r2, #3
 8002d24:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 fe3c 	bl	80069ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	2310      	movs	r3, #16
 8002d46:	6093      	str	r3, [r2, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d11a      	bne.n	8002db6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2304      	movs	r3, #4
 8002d90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3361      	adds	r3, #97	; 0x61
 8002da0:	2206      	movs	r2, #6
 8002da2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 fdfd 	bl	80069ae <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002db4:	e2ca      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d12e      	bne.n	8002e2a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2320      	movs	r3, #32
 8002ddc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	333d      	adds	r3, #61	; 0x3d
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	f040 82ac 	bne.w	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	333d      	adds	r3, #61	; 0x3d
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fdc3 	bl	80069ae <USB_HC_Halt>
}
 8002e28:	e290      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e40:	d112      	bne.n	8002e68 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f003 fda4 	bl	80069ae <USB_HC_Halt>
}
 8002e66:	e271      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d140      	bne.n	8002f00 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	335c      	adds	r3, #92	; 0x5c
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d111      	bne.n	8002eca <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	333d      	adds	r3, #61	; 0x3d
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2340      	movs	r3, #64	; 0x40
 8002ec8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2301      	movs	r3, #1
 8002eda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3361      	adds	r3, #97	; 0x61
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 fd58 	bl	80069ae <USB_HC_Halt>
}
 8002efe:	e225      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d12c      	bne.n	8002f70 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3361      	adds	r3, #97	; 0x61
 8002f24:	2204      	movs	r2, #4
 8002f26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	333d      	adds	r3, #61	; 0x3d
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	335c      	adds	r3, #92	; 0x5c
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 fd29 	bl	80069ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2340      	movs	r3, #64	; 0x40
 8002f6c:	6093      	str	r3, [r2, #8]
}
 8002f6e:	e1ed      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d11a      	bne.n	8002fbc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	461a      	mov	r2, r3
 8002f94:	2308      	movs	r3, #8
 8002f96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	212c      	movs	r1, #44	; 0x2c
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3361      	adds	r3, #97	; 0x61
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 fcfa 	bl	80069ae <USB_HC_Halt>
}
 8002fba:	e1c7      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d123      	bne.n	800301a <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	335c      	adds	r3, #92	; 0x5c
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3361      	adds	r3, #97	; 0x61
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f003 fcd4 	bl	80069ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003012:	461a      	mov	r2, r3
 8003014:	2310      	movs	r3, #16
 8003016:	6093      	str	r3, [r2, #8]
}
 8003018:	e198      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b80      	cmp	r3, #128	; 0x80
 800302e:	d11a      	bne.n	8003066 <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	3361      	adds	r3, #97	; 0x61
 800303e:	2206      	movs	r2, #6
 8003040:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fcae 	bl	80069ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305e:	461a      	mov	r2, r3
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	6093      	str	r3, [r2, #8]
}
 8003064:	e172      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307c:	d11b      	bne.n	80030b6 <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3361      	adds	r3, #97	; 0x61
 800308c:	2208      	movs	r2, #8
 800308e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f003 fc87 	bl	80069ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b2:	6093      	str	r3, [r2, #8]
}
 80030b4:	e14a      	b.n	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	f040 813f 	bne.w	800334c <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	3361      	adds	r3, #97	; 0x61
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d17d      	bne.n	80031de <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3360      	adds	r3, #96	; 0x60
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	333f      	adds	r3, #63	; 0x3f
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d00a      	beq.n	800311e <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	333f      	adds	r3, #63	; 0x3f
 8003116:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003118:	2b03      	cmp	r3, #3
 800311a:	f040 8100 	bne.w	800331e <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d113      	bne.n	800314e <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	3355      	adds	r3, #85	; 0x55
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2d8      	uxtb	r0, r3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3355      	adds	r3, #85	; 0x55
 800314a:	4602      	mov	r2, r0
 800314c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b01      	cmp	r3, #1
 8003154:	f040 80e3 	bne.w	800331e <HCD_HC_OUT_IRQHandler+0x5ce>
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	334c      	adds	r3, #76	; 0x4c
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80d8 	beq.w	800331e <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	334c      	adds	r3, #76	; 0x4c
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	202c      	movs	r0, #44	; 0x2c
 8003184:	fb00 f202 	mul.w	r2, r0, r2
 8003188:	440a      	add	r2, r1
 800318a:	3240      	adds	r2, #64	; 0x40
 800318c:	8812      	ldrh	r2, [r2, #0]
 800318e:	4413      	add	r3, r2
 8003190:	3b01      	subs	r3, #1
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	202c      	movs	r0, #44	; 0x2c
 8003198:	fb00 f202 	mul.w	r2, r0, r2
 800319c:	440a      	add	r2, r1
 800319e:	3240      	adds	r2, #64	; 0x40
 80031a0:	8812      	ldrh	r2, [r2, #0]
 80031a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80b5 	beq.w	800331e <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3355      	adds	r3, #85	; 0x55
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	f083 0301 	eor.w	r3, r3, #1
 80031c8:	b2d8      	uxtb	r0, r3
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3355      	adds	r3, #85	; 0x55
 80031d8:	4602      	mov	r2, r0
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e09f      	b.n	800331e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	3361      	adds	r3, #97	; 0x61
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d109      	bne.n	8003206 <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3360      	adds	r3, #96	; 0x60
 8003200:	2202      	movs	r2, #2
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	e08b      	b.n	800331e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3361      	adds	r3, #97	; 0x61
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d109      	bne.n	800322e <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	3360      	adds	r3, #96	; 0x60
 8003228:	2202      	movs	r2, #2
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	e077      	b.n	800331e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	212c      	movs	r1, #44	; 0x2c
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	3361      	adds	r3, #97	; 0x61
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b05      	cmp	r3, #5
 8003240:	d109      	bne.n	8003256 <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3360      	adds	r3, #96	; 0x60
 8003250:	2205      	movs	r2, #5
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e063      	b.n	800331e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3361      	adds	r3, #97	; 0x61
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b06      	cmp	r3, #6
 8003268:	d009      	beq.n	800327e <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3361      	adds	r3, #97	; 0x61
 8003278:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800327a:	2b08      	cmp	r3, #8
 800327c:	d14f      	bne.n	800331e <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	335c      	adds	r3, #92	; 0x5c
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	202c      	movs	r0, #44	; 0x2c
 8003296:	fb00 f303 	mul.w	r3, r0, r3
 800329a:	440b      	add	r3, r1
 800329c:	335c      	adds	r3, #92	; 0x5c
 800329e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	212c      	movs	r1, #44	; 0x2c
 80032a6:	fb01 f303 	mul.w	r3, r1, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	335c      	adds	r3, #92	; 0x5c
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d912      	bls.n	80032da <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	335c      	adds	r3, #92	; 0x5c
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	212c      	movs	r1, #44	; 0x2c
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	3360      	adds	r3, #96	; 0x60
 80032d4:	2204      	movs	r2, #4
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e021      	b.n	800331e <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	212c      	movs	r1, #44	; 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	3360      	adds	r3, #96	; 0x60
 80032e8:	2202      	movs	r2, #2
 80032ea:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003302:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800330a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	461a      	mov	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	2302      	movs	r3, #2
 800332e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	b2d9      	uxtb	r1, r3
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	202c      	movs	r0, #44	; 0x2c
 800333a:	fb00 f303 	mul.w	r3, r0, r3
 800333e:	4413      	add	r3, r2
 8003340:	3360      	adds	r3, #96	; 0x60
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f00b fe4e 	bl	800efe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800334c:	bf00      	nop
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	; 0x28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	0c5b      	lsrs	r3, r3, #17
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003388:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d004      	beq.n	800339a <HCD_RXQLVL_IRQHandler+0x46>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b05      	cmp	r3, #5
 8003394:	f000 80a9 	beq.w	80034ea <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003398:	e0aa      	b.n	80034f0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a6 	beq.w	80034ee <HCD_RXQLVL_IRQHandler+0x19a>
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3344      	adds	r3, #68	; 0x44
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 809b 	beq.w	80034ee <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3350      	adds	r3, #80	; 0x50
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	441a      	add	r2, r3
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	202c      	movs	r0, #44	; 0x2c
 80033d2:	fb00 f303 	mul.w	r3, r0, r3
 80033d6:	440b      	add	r3, r1
 80033d8:	334c      	adds	r3, #76	; 0x4c
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d87a      	bhi.n	80034d6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3344      	adds	r3, #68	; 0x44
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	b292      	uxth	r2, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f002 fecd 	bl	8006198 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3344      	adds	r3, #68	; 0x44
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	441a      	add	r2, r3
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	202c      	movs	r0, #44	; 0x2c
 8003418:	fb00 f303 	mul.w	r3, r0, r3
 800341c:	440b      	add	r3, r1
 800341e:	3344      	adds	r3, #68	; 0x44
 8003420:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	212c      	movs	r1, #44	; 0x2c
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	4413      	add	r3, r2
 800342e:	3350      	adds	r3, #80	; 0x50
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	441a      	add	r2, r3
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	202c      	movs	r0, #44	; 0x2c
 800343c:	fb00 f303 	mul.w	r3, r0, r3
 8003440:	440b      	add	r3, r1
 8003442:	3350      	adds	r3, #80	; 0x50
 8003444:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	0cdb      	lsrs	r3, r3, #19
 8003456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800345a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3340      	adds	r3, #64	; 0x40
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4293      	cmp	r3, r2
 8003472:	d13c      	bne.n	80034ee <HCD_RXQLVL_IRQHandler+0x19a>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d039      	beq.n	80034ee <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	4413      	add	r3, r2
 8003482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003490:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003498:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	461a      	mov	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3354      	adds	r3, #84	; 0x54
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	b2d8      	uxtb	r0, r3
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3354      	adds	r3, #84	; 0x54
 80034d0:	4602      	mov	r2, r0
 80034d2:	701a      	strb	r2, [r3, #0]
      break;
 80034d4:	e00b      	b.n	80034ee <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	3360      	adds	r3, #96	; 0x60
 80034e4:	2204      	movs	r2, #4
 80034e6:	701a      	strb	r2, [r3, #0]
      break;
 80034e8:	e001      	b.n	80034ee <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80034ee:	bf00      	nop
  }
}
 80034f0:	bf00      	nop
 80034f2:	3728      	adds	r7, #40	; 0x28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003524:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b02      	cmp	r3, #2
 800352e:	d10b      	bne.n	8003548 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d102      	bne.n	8003540 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f00b fd38 	bl	800efb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f043 0302 	orr.w	r3, r3, #2
 8003546:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b08      	cmp	r3, #8
 8003550:	d132      	bne.n	80035b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f043 0308 	orr.w	r3, r3, #8
 8003558:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b04      	cmp	r3, #4
 8003562:	d126      	bne.n	80035b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d113      	bne.n	8003594 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003572:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003576:	d106      	bne.n	8003586 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2102      	movs	r1, #2
 800357e:	4618      	mov	r0, r3
 8003580:	f002 ff3a 	bl	80063f8 <USB_InitFSLSPClkSel>
 8003584:	e011      	b.n	80035aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2101      	movs	r1, #1
 800358c:	4618      	mov	r0, r3
 800358e:	f002 ff33 	bl	80063f8 <USB_InitFSLSPClkSel>
 8003592:	e00a      	b.n	80035aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d106      	bne.n	80035aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035a2:	461a      	mov	r2, r3
 80035a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f00b fd2a 	bl	800f004 <HAL_HCD_PortEnabled_Callback>
 80035b0:	e002      	b.n	80035b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f00b fd34 	bl	800f020 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d103      	bne.n	80035ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f043 0320 	orr.w	r3, r3, #32
 80035c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6013      	str	r3, [r2, #0]
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ee:	6013      	str	r3, [r2, #0]
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40007000 	.word	0x40007000

08003600 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <HAL_PWREx_GetVoltageRange+0x18>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40007000 	.word	0x40007000

0800361c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362a:	d130      	bne.n	800368e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800362c:	4b23      	ldr	r3, [pc, #140]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003638:	d038      	beq.n	80036ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003642:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003648:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2232      	movs	r2, #50	; 0x32
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	0c9b      	lsrs	r3, r3, #18
 800365c:	3301      	adds	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003660:	e002      	b.n	8003668 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3b01      	subs	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003668:	4b14      	ldr	r3, [pc, #80]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003674:	d102      	bne.n	800367c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f2      	bne.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003688:	d110      	bne.n	80036ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e00f      	b.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d007      	beq.n	80036ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a4:	4a05      	ldr	r2, [pc, #20]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40007000 	.word	0x40007000
 80036c0:	20000000 	.word	0x20000000
 80036c4:	431bde83 	.word	0x431bde83

080036c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036d6:	6053      	str	r3, [r2, #4]
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40007000 	.word	0x40007000

080036e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_PWREx_EnableVddIO2+0x1c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <HAL_PWREx_EnableVddIO2+0x1c>)
 80036f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f6:	6053      	str	r3, [r2, #4]
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40007000 	.word	0x40007000

08003708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f000 bc08 	b.w	8003f2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371c:	4b96      	ldr	r3, [pc, #600]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003726:	4b94      	ldr	r3, [pc, #592]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80e4 	beq.w	8003906 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_RCC_OscConfig+0x4c>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b0c      	cmp	r3, #12
 8003748:	f040 808b 	bne.w	8003862 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b01      	cmp	r3, #1
 8003750:	f040 8087 	bne.w	8003862 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003754:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_OscConfig+0x64>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e3df      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	4b81      	ldr	r3, [pc, #516]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <HAL_RCC_OscConfig+0x7e>
 800377c:	4b7e      	ldr	r3, [pc, #504]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003784:	e005      	b.n	8003792 <HAL_RCC_OscConfig+0x8a>
 8003786:	4b7c      	ldr	r3, [pc, #496]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003792:	4293      	cmp	r3, r2
 8003794:	d223      	bcs.n	80037de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fd92 	bl	80042c4 <RCC_SetFlashLatencyFromMSIRange>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e3c0      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037aa:	4b73      	ldr	r3, [pc, #460]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a72      	ldr	r2, [pc, #456]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037b0:	f043 0308 	orr.w	r3, r3, #8
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b70      	ldr	r3, [pc, #448]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	496d      	ldr	r1, [pc, #436]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c8:	4b6b      	ldr	r3, [pc, #428]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	4968      	ldr	r1, [pc, #416]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
 80037dc:	e025      	b.n	800382a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037de:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a65      	ldr	r2, [pc, #404]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037e4:	f043 0308 	orr.w	r3, r3, #8
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4960      	ldr	r1, [pc, #384]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037fc:	4b5e      	ldr	r3, [pc, #376]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	495b      	ldr	r1, [pc, #364]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fd52 	bl	80042c4 <RCC_SetFlashLatencyFromMSIRange>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e380      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800382a:	f000 fc87 	bl	800413c <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b51      	ldr	r3, [pc, #324]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	4950      	ldr	r1, [pc, #320]	; (800397c <HAL_RCC_OscConfig+0x274>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	4a4e      	ldr	r2, [pc, #312]	; (8003980 <HAL_RCC_OscConfig+0x278>)
 8003848:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800384a:	4b4e      	ldr	r3, [pc, #312]	; (8003984 <HAL_RCC_OscConfig+0x27c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd ff8e 	bl	8001770 <HAL_InitTick>
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d052      	beq.n	8003904 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	e364      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d032      	beq.n	80038d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800386a:	4b43      	ldr	r3, [pc, #268]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a42      	ldr	r2, [pc, #264]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003876:	f7fd ffcb 	bl	8001810 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800387e:	f7fd ffc7 	bl	8001810 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e34d      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a35      	ldr	r2, [pc, #212]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80038a2:	f043 0308 	orr.w	r3, r3, #8
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4930      	ldr	r1, [pc, #192]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ba:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	492b      	ldr	r1, [pc, #172]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
 80038ce:	e01a      	b.n	8003906 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038d0:	4b29      	ldr	r3, [pc, #164]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a28      	ldr	r2, [pc, #160]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038dc:	f7fd ff98 	bl	8001810 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038e4:	f7fd ff94 	bl	8001810 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e31a      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x1dc>
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003904:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d073      	beq.n	80039fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d005      	beq.n	8003924 <HAL_RCC_OscConfig+0x21c>
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b0c      	cmp	r3, #12
 800391c:	d10e      	bne.n	800393c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d10b      	bne.n	800393c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d063      	beq.n	80039f8 <HAL_RCC_OscConfig+0x2f0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d15f      	bne.n	80039f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e2f7      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d106      	bne.n	8003954 <HAL_RCC_OscConfig+0x24c>
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e025      	b.n	80039a0 <HAL_RCC_OscConfig+0x298>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395c:	d114      	bne.n	8003988 <HAL_RCC_OscConfig+0x280>
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a02      	ldr	r2, [pc, #8]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e013      	b.n	80039a0 <HAL_RCC_OscConfig+0x298>
 8003978:	40021000 	.word	0x40021000
 800397c:	08010b84 	.word	0x08010b84
 8003980:	20000000 	.word	0x20000000
 8003984:	20000004 	.word	0x20000004
 8003988:	4ba0      	ldr	r3, [pc, #640]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a9f      	ldr	r2, [pc, #636]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 800398e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b9d      	ldr	r3, [pc, #628]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a9c      	ldr	r2, [pc, #624]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 800399a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd ff32 	bl	8001810 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fd ff2e 	bl	8001810 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e2b4      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c2:	4b92      	ldr	r3, [pc, #584]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x2a8>
 80039ce:	e014      	b.n	80039fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd ff1e 	bl	8001810 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fd ff1a 	bl	8001810 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e2a0      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ea:	4b88      	ldr	r3, [pc, #544]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2d0>
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d060      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_OscConfig+0x310>
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d119      	bne.n	8003a46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d116      	bne.n	8003a46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a18:	4b7c      	ldr	r3, [pc, #496]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_OscConfig+0x328>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e27d      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a30:	4b76      	ldr	r3, [pc, #472]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	061b      	lsls	r3, r3, #24
 8003a3e:	4973      	ldr	r1, [pc, #460]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a44:	e040      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d023      	beq.n	8003a96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4e:	4b6f      	ldr	r3, [pc, #444]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6e      	ldr	r2, [pc, #440]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fd fed9 	bl	8001810 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a62:	f7fd fed5 	bl	8001810 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e25b      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a74:	4b65      	ldr	r3, [pc, #404]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a80:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	495f      	ldr	r1, [pc, #380]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
 8003a94:	e018      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a96:	4b5d      	ldr	r3, [pc, #372]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a5c      	ldr	r2, [pc, #368]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fd feb5 	bl	8001810 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7fd feb1 	bl	8001810 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e237      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003abc:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f0      	bne.n	8003aaa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d03c      	beq.n	8003b4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003adc:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae2:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fd fe90 	bl	8001810 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fd fe8c 	bl	8001810 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e212      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b06:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ef      	beq.n	8003af4 <HAL_RCC_OscConfig+0x3ec>
 8003b14:	e01b      	b.n	8003b4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b16:	4b3d      	ldr	r3, [pc, #244]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b1c:	4a3b      	ldr	r2, [pc, #236]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b26:	f7fd fe73 	bl	8001810 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fd fe6f 	bl	8001810 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e1f5      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b40:	4b32      	ldr	r3, [pc, #200]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1ef      	bne.n	8003b2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80a6 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b60:	4b2a      	ldr	r3, [pc, #168]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10d      	bne.n	8003b88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b76:	6593      	str	r3, [r2, #88]	; 0x58
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b84:	2301      	movs	r3, #1
 8003b86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b88:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <HAL_RCC_OscConfig+0x508>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d118      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b94:	4b1e      	ldr	r3, [pc, #120]	; (8003c10 <HAL_RCC_OscConfig+0x508>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <HAL_RCC_OscConfig+0x508>)
 8003b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba0:	f7fd fe36 	bl	8001810 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba8:	f7fd fe32 	bl	8001810 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e1b8      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_RCC_OscConfig+0x508>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d108      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4d8>
 8003bce:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd4:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bde:	e029      	b.n	8003c34 <HAL_RCC_OscConfig+0x52c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b05      	cmp	r3, #5
 8003be6:	d115      	bne.n	8003c14 <HAL_RCC_OscConfig+0x50c>
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	4a03      	ldr	r2, [pc, #12]	; (8003c0c <HAL_RCC_OscConfig+0x504>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c08:	e014      	b.n	8003c34 <HAL_RCC_OscConfig+0x52c>
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40007000 	.word	0x40007000
 8003c14:	4b9d      	ldr	r3, [pc, #628]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	4a9c      	ldr	r2, [pc, #624]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c24:	4b99      	ldr	r3, [pc, #612]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	4a98      	ldr	r2, [pc, #608]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003c2c:	f023 0304 	bic.w	r3, r3, #4
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d016      	beq.n	8003c6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fd fde8 	bl	8001810 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c44:	f7fd fde4 	bl	8001810 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e168      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5a:	4b8c      	ldr	r3, [pc, #560]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ed      	beq.n	8003c44 <HAL_RCC_OscConfig+0x53c>
 8003c68:	e015      	b.n	8003c96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6a:	f7fd fdd1 	bl	8001810 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7fd fdcd 	bl	8001810 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e151      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c88:	4b80      	ldr	r3, [pc, #512]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1ed      	bne.n	8003c72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c96:	7ffb      	ldrb	r3, [r7, #31]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9c:	4b7b      	ldr	r3, [pc, #492]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	4a7a      	ldr	r2, [pc, #488]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d03c      	beq.n	8003d2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01c      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cbc:	4b73      	ldr	r3, [pc, #460]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc2:	4a72      	ldr	r2, [pc, #456]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fd fda0 	bl	8001810 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cd4:	f7fd fd9c 	bl	8001810 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e122      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ce6:	4b69      	ldr	r3, [pc, #420]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0ef      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x5cc>
 8003cf4:	e01b      	b.n	8003d2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cf6:	4b65      	ldr	r3, [pc, #404]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cfc:	4a63      	ldr	r2, [pc, #396]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d06:	f7fd fd83 	bl	8001810 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d0e:	f7fd fd7f 	bl	8001810 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e105      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d20:	4b5a      	ldr	r3, [pc, #360]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1ef      	bne.n	8003d0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80f9 	beq.w	8003f2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	f040 80cf 	bne.w	8003ee0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d42:	4b52      	ldr	r3, [pc, #328]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0203 	and.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d12c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	3b01      	subs	r3, #1
 8003d62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d123      	bne.n	8003db0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d11b      	bne.n	8003db0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d113      	bne.n	8003db0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	3b01      	subs	r3, #1
 8003d96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d109      	bne.n	8003db0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	085b      	lsrs	r3, r3, #1
 8003da8:	3b01      	subs	r3, #1
 8003daa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d071      	beq.n	8003e94 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b0c      	cmp	r3, #12
 8003db4:	d068      	beq.n	8003e88 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003db6:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003dc2:	4b32      	ldr	r3, [pc, #200]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e0ac      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2d      	ldr	r2, [pc, #180]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ddc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dde:	f7fd fd17 	bl	8001810 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fd fd13 	bl	8001810 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e099      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df8:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_RCC_OscConfig+0x788>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e14:	3a01      	subs	r2, #1
 8003e16:	0112      	lsls	r2, r2, #4
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e1e:	0212      	lsls	r2, r2, #8
 8003e20:	4311      	orrs	r1, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e26:	0852      	lsrs	r2, r2, #1
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	0552      	lsls	r2, r2, #21
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e32:	0852      	lsrs	r2, r2, #1
 8003e34:	3a01      	subs	r2, #1
 8003e36:	0652      	lsls	r2, r2, #25
 8003e38:	4311      	orrs	r1, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e3e:	06d2      	lsls	r2, r2, #27
 8003e40:	430a      	orrs	r2, r1
 8003e42:	4912      	ldr	r1, [pc, #72]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a0f      	ldr	r2, [pc, #60]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e60:	f7fd fcd6 	bl	8001810 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fd fcd2 	bl	8001810 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e058      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <HAL_RCC_OscConfig+0x784>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e86:	e050      	b.n	8003f2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e04f      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e94:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d144      	bne.n	8003f2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eac:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a20      	ldr	r2, [pc, #128]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eb8:	f7fd fcaa 	bl	8001810 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd fca6 	bl	8001810 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e02c      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	4b18      	ldr	r3, [pc, #96]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x7b8>
 8003ede:	e024      	b.n	8003f2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d01f      	beq.n	8003f26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fc8d 	bl	8001810 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fd fc89 	bl	8001810 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e00f      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	4905      	ldr	r1, [pc, #20]	; (8003f34 <HAL_RCC_OscConfig+0x82c>)
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_OscConfig+0x830>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	60cb      	str	r3, [r1, #12]
 8003f24:	e001      	b.n	8003f2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	feeefffc 	.word	0xfeeefffc

08003f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0e7      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f50:	4b75      	ldr	r3, [pc, #468]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d910      	bls.n	8003f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b72      	ldr	r3, [pc, #456]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 0207 	bic.w	r2, r3, #7
 8003f66:	4970      	ldr	r1, [pc, #448]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b6e      	ldr	r3, [pc, #440]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0cf      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d010      	beq.n	8003fae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	4b66      	ldr	r3, [pc, #408]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d908      	bls.n	8003fae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9c:	4b63      	ldr	r3, [pc, #396]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4960      	ldr	r1, [pc, #384]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04c      	beq.n	8004054 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc2:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d121      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e0a6      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	4b54      	ldr	r3, [pc, #336]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d115      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e09a      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ff2:	4b4e      	ldr	r3, [pc, #312]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e08e      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004002:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e086      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004012:	4b46      	ldr	r3, [pc, #280]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4943      	ldr	r1, [pc, #268]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fd fbf4 	bl	8001810 <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	e00a      	b.n	8004042 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402c:	f7fd fbf0 	bl	8001810 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e06e      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	4b3a      	ldr	r3, [pc, #232]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 020c 	and.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d1eb      	bne.n	800402c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406c:	429a      	cmp	r2, r3
 800406e:	d208      	bcs.n	8004082 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004070:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	492b      	ldr	r1, [pc, #172]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004082:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d210      	bcs.n	80040b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 0207 	bic.w	r2, r3, #7
 8004098:	4923      	ldr	r1, [pc, #140]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e036      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040be:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4918      	ldr	r1, [pc, #96]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4910      	ldr	r1, [pc, #64]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040f0:	f000 f824 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	490b      	ldr	r1, [pc, #44]	; (8004130 <HAL_RCC_ClockConfig+0x1f4>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
 800410c:	4a09      	ldr	r2, [pc, #36]	; (8004134 <HAL_RCC_ClockConfig+0x1f8>)
 800410e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x1fc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7fd fb2b 	bl	8001770 <HAL_InitTick>
 800411a:	4603      	mov	r3, r0
 800411c:	72fb      	strb	r3, [r7, #11]

  return status;
 800411e:	7afb      	ldrb	r3, [r7, #11]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40022000 	.word	0x40022000
 800412c:	40021000 	.word	0x40021000
 8004130:	08010b84 	.word	0x08010b84
 8004134:	20000000 	.word	0x20000000
 8004138:	20000004 	.word	0x20000004

0800413c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	2300      	movs	r3, #0
 8004148:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414a:	4b3e      	ldr	r3, [pc, #248]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004154:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x34>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b0c      	cmp	r3, #12
 8004168:	d121      	bne.n	80041ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d11e      	bne.n	80041ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004170:	4b34      	ldr	r3, [pc, #208]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d107      	bne.n	800418c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800417c:	4b31      	ldr	r3, [pc, #196]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 800417e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	e005      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800418c:	4b2d      	ldr	r3, [pc, #180]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004198:	4a2b      	ldr	r2, [pc, #172]	; (8004248 <HAL_RCC_GetSysClockFreq+0x10c>)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10d      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d102      	bne.n	80041ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <HAL_RCC_GetSysClockFreq+0x110>)
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	e004      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041c0:	4b23      	ldr	r3, [pc, #140]	; (8004250 <HAL_RCC_GetSysClockFreq+0x114>)
 80041c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	d134      	bne.n	8004234 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d003      	beq.n	80041e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d003      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0xac>
 80041e0:	e005      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_RCC_GetSysClockFreq+0x110>)
 80041e4:	617b      	str	r3, [r7, #20]
      break;
 80041e6:	e005      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_RCC_GetSysClockFreq+0x114>)
 80041ea:	617b      	str	r3, [r7, #20]
      break;
 80041ec:	e002      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	617b      	str	r3, [r7, #20]
      break;
 80041f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	3301      	adds	r3, #1
 8004200:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	fb03 f202 	mul.w	r2, r3, r2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	0e5b      	lsrs	r3, r3, #25
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	3301      	adds	r3, #1
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004234:	69bb      	ldr	r3, [r7, #24]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3724      	adds	r7, #36	; 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	08010b9c 	.word	0x08010b9c
 800424c:	00f42400 	.word	0x00f42400
 8004250:	007a1200 	.word	0x007a1200

08004254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_RCC_GetHCLKFreq+0x14>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000000 	.word	0x20000000

0800426c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004270:	f7ff fff0 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4904      	ldr	r1, [pc, #16]	; (8004294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40021000 	.word	0x40021000
 8004294:	08010b94 	.word	0x08010b94

08004298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800429c:	f7ff ffda 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0adb      	lsrs	r3, r3, #11
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4904      	ldr	r1, [pc, #16]	; (80042c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000
 80042c0:	08010b94 	.word	0x08010b94

080042c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042d0:	4b2a      	ldr	r3, [pc, #168]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042dc:	f7ff f990 	bl	8003600 <HAL_PWREx_GetVoltageRange>
 80042e0:	6178      	str	r0, [r7, #20]
 80042e2:	e014      	b.n	800430e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	4a24      	ldr	r2, [pc, #144]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042fc:	f7ff f980 	bl	8003600 <HAL_PWREx_GetVoltageRange>
 8004300:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004302:	4b1e      	ldr	r3, [pc, #120]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	4a1d      	ldr	r2, [pc, #116]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004314:	d10b      	bne.n	800432e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d919      	bls.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2ba0      	cmp	r3, #160	; 0xa0
 8004320:	d902      	bls.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004322:	2302      	movs	r3, #2
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	e013      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004328:	2301      	movs	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	e010      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d902      	bls.n	800433a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004334:	2303      	movs	r3, #3
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e00a      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d102      	bne.n	8004346 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004340:	2302      	movs	r3, #2
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	e004      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b70      	cmp	r3, #112	; 0x70
 800434a:	d101      	bne.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800434c:	2301      	movs	r3, #1
 800434e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 0207 	bic.w	r2, r3, #7
 8004358:	4909      	ldr	r1, [pc, #36]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	429a      	cmp	r2, r3
 800436c:	d001      	beq.n	8004372 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	40022000 	.word	0x40022000

08004384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800438c:	2300      	movs	r3, #0
 800438e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004390:	2300      	movs	r3, #0
 8004392:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800439c:	2b00      	cmp	r3, #0
 800439e:	d041      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043a8:	d02a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043ae:	d824      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043b4:	d008      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043ba:	d81e      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c4:	d010      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043c6:	e018      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043c8:	4b86      	ldr	r3, [pc, #536]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a85      	ldr	r2, [pc, #532]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043d4:	e015      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3304      	adds	r3, #4
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fadd 	bl	800499c <RCCEx_PLLSAI1_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043e6:	e00c      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3320      	adds	r3, #32
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fbc6 	bl	8004b80 <RCCEx_PLLSAI2_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043f8:	e003      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	74fb      	strb	r3, [r7, #19]
      break;
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004408:	4b76      	ldr	r3, [pc, #472]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004416:	4973      	ldr	r1, [pc, #460]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800441e:	e001      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d041      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004434:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004438:	d02a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800443a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800443e:	d824      	bhi.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004444:	d008      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800444a:	d81e      	bhi.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004454:	d010      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004456:	e018      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004458:	4b62      	ldr	r3, [pc, #392]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a61      	ldr	r2, [pc, #388]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004462:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004464:	e015      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3304      	adds	r3, #4
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fa95 	bl	800499c <RCCEx_PLLSAI1_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004476:	e00c      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3320      	adds	r3, #32
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fb7e 	bl	8004b80 <RCCEx_PLLSAI2_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004488:	e003      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	74fb      	strb	r3, [r7, #19]
      break;
 800448e:	e000      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004492:	7cfb      	ldrb	r3, [r7, #19]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10b      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004498:	4b52      	ldr	r3, [pc, #328]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	494f      	ldr	r1, [pc, #316]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044ae:	e001      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80a0 	beq.w	8004602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c2:	2300      	movs	r3, #0
 80044c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044c6:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00d      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044dc:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	4a40      	ldr	r2, [pc, #256]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e6:	6593      	str	r3, [r2, #88]	; 0x58
 80044e8:	4b3e      	ldr	r3, [pc, #248]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f4:	2301      	movs	r3, #1
 80044f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f8:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a3a      	ldr	r2, [pc, #232]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004502:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004504:	f7fd f984 	bl	8001810 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800450a:	e009      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450c:	f7fd f980 	bl	8001810 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d902      	bls.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	74fb      	strb	r3, [r7, #19]
        break;
 800451e:	e005      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004520:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0ef      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800452c:	7cfb      	ldrb	r3, [r7, #19]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d15c      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004532:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01f      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	429a      	cmp	r2, r3
 800454e:	d019      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004550:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800455c:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	4a20      	ldr	r2, [pc, #128]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800456c:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800457c:	4a19      	ldr	r2, [pc, #100]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fd f93f 	bl	8001810 <HAL_GetTick>
 8004592:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004594:	e00b      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fd f93b 	bl	8001810 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d902      	bls.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	74fb      	strb	r3, [r7, #19]
            break;
 80045ac:	e006      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ec      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80045bc:	7cfb      	ldrb	r3, [r7, #19]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10c      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d2:	4904      	ldr	r1, [pc, #16]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045da:	e009      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	74bb      	strb	r3, [r7, #18]
 80045e0:	e006      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f0:	7c7b      	ldrb	r3, [r7, #17]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d105      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f6:	4ba6      	ldr	r3, [pc, #664]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	4aa5      	ldr	r2, [pc, #660]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004600:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800460e:	4ba0      	ldr	r3, [pc, #640]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f023 0203 	bic.w	r2, r3, #3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	499c      	ldr	r1, [pc, #624]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004630:	4b97      	ldr	r3, [pc, #604]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f023 020c 	bic.w	r2, r3, #12
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	4994      	ldr	r1, [pc, #592]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004652:	4b8f      	ldr	r3, [pc, #572]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	498b      	ldr	r1, [pc, #556]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004674:	4b86      	ldr	r3, [pc, #536]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	4983      	ldr	r1, [pc, #524]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004696:	4b7e      	ldr	r3, [pc, #504]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a4:	497a      	ldr	r1, [pc, #488]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046b8:	4b75      	ldr	r3, [pc, #468]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	4972      	ldr	r1, [pc, #456]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046da:	4b6d      	ldr	r3, [pc, #436]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e8:	4969      	ldr	r1, [pc, #420]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046fc:	4b64      	ldr	r3, [pc, #400]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800470a:	4961      	ldr	r1, [pc, #388]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800471e:	4b5c      	ldr	r3, [pc, #368]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	4958      	ldr	r1, [pc, #352]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004740:	4b53      	ldr	r3, [pc, #332]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	4950      	ldr	r1, [pc, #320]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004762:	4b4b      	ldr	r3, [pc, #300]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	4947      	ldr	r1, [pc, #284]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004784:	4b42      	ldr	r3, [pc, #264]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004786:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800478a:	f023 0203 	bic.w	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004792:	493f      	ldr	r1, [pc, #252]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d028      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047a6:	4b3a      	ldr	r3, [pc, #232]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4936      	ldr	r1, [pc, #216]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c4:	d106      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c6:	4b32      	ldr	r3, [pc, #200]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	4a31      	ldr	r2, [pc, #196]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d0:	60d3      	str	r3, [r2, #12]
 80047d2:	e011      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3304      	adds	r3, #4
 80047e2:	2101      	movs	r1, #1
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f8d9 	bl	800499c <RCCEx_PLLSAI1_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047ee:	7cfb      	ldrb	r3, [r7, #19]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d028      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004804:	4b22      	ldr	r3, [pc, #136]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004812:	491f      	ldr	r1, [pc, #124]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004822:	d106      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004824:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800482a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800482e:	60d3      	str	r3, [r2, #12]
 8004830:	e011      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800483a:	d10c      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	2101      	movs	r1, #1
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f8aa 	bl	800499c <RCCEx_PLLSAI1_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02a      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004870:	4907      	ldr	r1, [pc, #28]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800487c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004880:	d108      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004882:	4b03      	ldr	r3, [pc, #12]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	4a02      	ldr	r2, [pc, #8]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800488c:	60d3      	str	r3, [r2, #12]
 800488e:	e013      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004890:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800489c:	d10c      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3304      	adds	r3, #4
 80048a2:	2101      	movs	r1, #1
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f879 	bl	800499c <RCCEx_PLLSAI1_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ae:	7cfb      	ldrb	r3, [r7, #19]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02f      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048c4:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d2:	4929      	ldr	r1, [pc, #164]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048e2:	d10d      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	2102      	movs	r1, #2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f856 	bl	800499c <RCCEx_PLLSAI1_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d014      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
 80048fc:	74bb      	strb	r3, [r7, #18]
 80048fe:	e011      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004908:	d10c      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3320      	adds	r3, #32
 800490e:	2102      	movs	r1, #2
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f935 	bl	8004b80 <RCCEx_PLLSAI2_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800491a:	7cfb      	ldrb	r3, [r7, #19]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004930:	4b11      	ldr	r3, [pc, #68]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004940:	490d      	ldr	r1, [pc, #52]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004954:	4b08      	ldr	r3, [pc, #32]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004964:	4904      	ldr	r1, [pc, #16]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800496c:	7cbb      	ldrb	r3, [r7, #18]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000

0800497c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a04      	ldr	r2, [pc, #16]	; (8004998 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004986:	f043 0304 	orr.w	r3, r3, #4
 800498a:	6013      	str	r3, [r2, #0]
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000

0800499c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049aa:	4b74      	ldr	r3, [pc, #464]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d018      	beq.n	80049e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049b6:	4b71      	ldr	r3, [pc, #452]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0203 	and.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d10d      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049ce:	4b6b      	ldr	r3, [pc, #428]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
       ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d047      	beq.n	8004a72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
 80049e6:	e044      	b.n	8004a72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d018      	beq.n	8004a22 <RCCEx_PLLSAI1_Config+0x86>
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d825      	bhi.n	8004a40 <RCCEx_PLLSAI1_Config+0xa4>
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d002      	beq.n	80049fe <RCCEx_PLLSAI1_Config+0x62>
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d009      	beq.n	8004a10 <RCCEx_PLLSAI1_Config+0x74>
 80049fc:	e020      	b.n	8004a40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049fe:	4b5f      	ldr	r3, [pc, #380]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11d      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0e:	e01a      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a10:	4b5a      	ldr	r3, [pc, #360]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d116      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a20:	e013      	b.n	8004a4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a22:	4b56      	ldr	r3, [pc, #344]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a2e:	4b53      	ldr	r3, [pc, #332]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a3e:	e006      	b.n	8004a4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
      break;
 8004a44:	e004      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10d      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a56:	4b49      	ldr	r3, [pc, #292]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	4943      	ldr	r1, [pc, #268]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d17c      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a78:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a3f      	ldr	r2, [pc, #252]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a84:	f7fc fec4 	bl	8001810 <HAL_GetTick>
 8004a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a8a:	e009      	b.n	8004aa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a8c:	f7fc fec0 	bl	8001810 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d902      	bls.n	8004aa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a9e:	e005      	b.n	8004aac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004aa0:	4b36      	ldr	r3, [pc, #216]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1ef      	bne.n	8004a8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d15f      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d110      	bne.n	8004ada <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab8:	4b30      	ldr	r3, [pc, #192]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ac0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6892      	ldr	r2, [r2, #8]
 8004ac8:	0211      	lsls	r1, r2, #8
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68d2      	ldr	r2, [r2, #12]
 8004ace:	06d2      	lsls	r2, r2, #27
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	492a      	ldr	r1, [pc, #168]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	610b      	str	r3, [r1, #16]
 8004ad8:	e027      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d112      	bne.n	8004b06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ae0:	4b26      	ldr	r3, [pc, #152]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ae8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6892      	ldr	r2, [r2, #8]
 8004af0:	0211      	lsls	r1, r2, #8
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6912      	ldr	r2, [r2, #16]
 8004af6:	0852      	lsrs	r2, r2, #1
 8004af8:	3a01      	subs	r2, #1
 8004afa:	0552      	lsls	r2, r2, #21
 8004afc:	430a      	orrs	r2, r1
 8004afe:	491f      	ldr	r1, [pc, #124]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	610b      	str	r3, [r1, #16]
 8004b04:	e011      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b06:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6892      	ldr	r2, [r2, #8]
 8004b16:	0211      	lsls	r1, r2, #8
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6952      	ldr	r2, [r2, #20]
 8004b1c:	0852      	lsrs	r2, r2, #1
 8004b1e:	3a01      	subs	r2, #1
 8004b20:	0652      	lsls	r2, r2, #25
 8004b22:	430a      	orrs	r2, r1
 8004b24:	4915      	ldr	r1, [pc, #84]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b2a:	4b14      	ldr	r3, [pc, #80]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a13      	ldr	r2, [pc, #76]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fc fe6b 	bl	8001810 <HAL_GetTick>
 8004b3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b3c:	e009      	b.n	8004b52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b3e:	f7fc fe67 	bl	8001810 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d902      	bls.n	8004b52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	73fb      	strb	r3, [r7, #15]
          break;
 8004b50:	e005      	b.n	8004b5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ef      	beq.n	8004b3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	4903      	ldr	r1, [pc, #12]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000

08004b80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b8e:	4b69      	ldr	r3, [pc, #420]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d018      	beq.n	8004bcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b9a:	4b66      	ldr	r3, [pc, #408]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0203 	and.w	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d10d      	bne.n	8004bc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
       ||
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bb2:	4b60      	ldr	r3, [pc, #384]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
       ||
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d047      	beq.n	8004c56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
 8004bca:	e044      	b.n	8004c56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d018      	beq.n	8004c06 <RCCEx_PLLSAI2_Config+0x86>
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d825      	bhi.n	8004c24 <RCCEx_PLLSAI2_Config+0xa4>
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d002      	beq.n	8004be2 <RCCEx_PLLSAI2_Config+0x62>
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d009      	beq.n	8004bf4 <RCCEx_PLLSAI2_Config+0x74>
 8004be0:	e020      	b.n	8004c24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004be2:	4b54      	ldr	r3, [pc, #336]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11d      	bne.n	8004c2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf2:	e01a      	b.n	8004c2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bf4:	4b4f      	ldr	r3, [pc, #316]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d116      	bne.n	8004c2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c04:	e013      	b.n	8004c2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c06:	4b4b      	ldr	r3, [pc, #300]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10f      	bne.n	8004c32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c12:	4b48      	ldr	r3, [pc, #288]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c22:	e006      	b.n	8004c32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
      break;
 8004c28:	e004      	b.n	8004c34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e002      	b.n	8004c34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10d      	bne.n	8004c56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c3a:	4b3e      	ldr	r3, [pc, #248]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	4938      	ldr	r1, [pc, #224]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d166      	bne.n	8004d2a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c5c:	4b35      	ldr	r3, [pc, #212]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a34      	ldr	r2, [pc, #208]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c68:	f7fc fdd2 	bl	8001810 <HAL_GetTick>
 8004c6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c6e:	e009      	b.n	8004c84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c70:	f7fc fdce 	bl	8001810 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d902      	bls.n	8004c84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	73fb      	strb	r3, [r7, #15]
        break;
 8004c82:	e005      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c84:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1ef      	bne.n	8004c70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d149      	bne.n	8004d2a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d110      	bne.n	8004cbe <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c9c:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ca4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6892      	ldr	r2, [r2, #8]
 8004cac:	0211      	lsls	r1, r2, #8
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68d2      	ldr	r2, [r2, #12]
 8004cb2:	06d2      	lsls	r2, r2, #27
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	491f      	ldr	r1, [pc, #124]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	614b      	str	r3, [r1, #20]
 8004cbc:	e011      	b.n	8004ce2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6892      	ldr	r2, [r2, #8]
 8004cce:	0211      	lsls	r1, r2, #8
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6912      	ldr	r2, [r2, #16]
 8004cd4:	0852      	lsrs	r2, r2, #1
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	0652      	lsls	r2, r2, #25
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	4915      	ldr	r1, [pc, #84]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ce2:	4b14      	ldr	r3, [pc, #80]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cee:	f7fc fd8f 	bl	8001810 <HAL_GetTick>
 8004cf2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cf4:	e009      	b.n	8004d0a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cf6:	f7fc fd8b 	bl	8001810 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d902      	bls.n	8004d0a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	73fb      	strb	r3, [r7, #15]
          break;
 8004d08:	e005      	b.n	8004d16 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0ef      	beq.n	8004cf6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d106      	bne.n	8004d2a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d1e:	695a      	ldr	r2, [r3, #20]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	4903      	ldr	r1, [pc, #12]	; (8004d34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000

08004d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e040      	b.n	8004dcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc fb6a 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2224      	movs	r2, #36	; 0x24
 8004d64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fbc2 	bl	8005500 <UART_SetConfig>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e022      	b.n	8004dcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fe6e 	bl	8005a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fef5 	bl	8005bb4 <UART_CheckIdleState>
 8004dca:	4603      	mov	r3, r0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08a      	sub	sp, #40	; 0x28
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	f040 8082 	bne.w	8004ef2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_UART_Transmit+0x26>
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e07a      	b.n	8004ef4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_UART_Transmit+0x38>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e073      	b.n	8004ef4 <HAL_UART_Transmit+0x120>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2221      	movs	r2, #33	; 0x21
 8004e20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e22:	f7fc fcf5 	bl	8001810 <HAL_GetTick>
 8004e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	88fa      	ldrh	r2, [r7, #6]
 8004e2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	88fa      	ldrh	r2, [r7, #6]
 8004e34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e40:	d108      	bne.n	8004e54 <HAL_UART_Transmit+0x80>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	e003      	b.n	8004e5c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004e64:	e02d      	b.n	8004ec2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2180      	movs	r1, #128	; 0x80
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fee8 	bl	8005c46 <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e039      	b.n	8004ef4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	881a      	ldrh	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e92:	b292      	uxth	r2, r2
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	3302      	adds	r3, #2
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e008      	b.n	8004eb0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	781a      	ldrb	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	b292      	uxth	r2, r2
 8004ea8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3301      	adds	r3, #1
 8004eae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1cb      	bne.n	8004e66 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2140      	movs	r1, #64	; 0x40
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 feb4 	bl	8005c46 <UART_WaitOnFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e005      	b.n	8004ef4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b0ba      	sub	sp, #232	; 0xe8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f26:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d115      	bne.n	8004f64 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00f      	beq.n	8004f64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 82a6 	beq.w	80054a6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4798      	blx	r3
      }
      return;
 8004f62:	e2a0      	b.n	80054a6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8117 	beq.w	800519c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f7e:	4b85      	ldr	r3, [pc, #532]	; (8005194 <HAL_UART_IRQHandler+0x298>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 810a 	beq.w	800519c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d011      	beq.n	8004fb8 <HAL_UART_IRQHandler+0xbc>
 8004f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d011      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xec>
 8004fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fde:	f043 0204 	orr.w	r2, r3, #4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d011      	beq.n	8005018 <HAL_UART_IRQHandler+0x11c>
 8004ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00b      	beq.n	8005018 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2204      	movs	r2, #4
 8005006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500e:	f043 0202 	orr.w	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d017      	beq.n	8005054 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005034:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2208      	movs	r2, #8
 8005042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504a:	f043 0208 	orr.w	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505c:	2b00      	cmp	r3, #0
 800505e:	d012      	beq.n	8005086 <HAL_UART_IRQHandler+0x18a>
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 820c 	beq.w	80054aa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800509e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d005      	beq.n	80050de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d04f      	beq.n	800517e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fe75 	bl	8005dce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ee:	2b40      	cmp	r3, #64	; 0x40
 80050f0:	d141      	bne.n	8005176 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3308      	adds	r3, #8
 80050f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800510c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800511e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800512a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1d9      	bne.n	80050f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	2b00      	cmp	r3, #0
 8005144:	d013      	beq.n	800516e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	4a13      	ldr	r2, [pc, #76]	; (8005198 <HAL_UART_IRQHandler+0x29c>)
 800514c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	4618      	mov	r0, r3
 8005154:	f7fc fcdb 	bl	8001b0e <HAL_DMA_Abort_IT>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d017      	beq.n	800518e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	e00f      	b.n	800518e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9b0 	bl	80054d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e00b      	b.n	800518e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f9ac 	bl	80054d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e007      	b.n	800518e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9a8 	bl	80054d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800518c:	e18d      	b.n	80054aa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518e:	bf00      	nop
    return;
 8005190:	e18b      	b.n	80054aa <HAL_UART_IRQHandler+0x5ae>
 8005192:	bf00      	nop
 8005194:	04000120 	.word	0x04000120
 8005198:	08005e95 	.word	0x08005e95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f040 8146 	bne.w	8005432 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 813f 	beq.w	8005432 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8138 	beq.w	8005432 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2210      	movs	r2, #16
 80051c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	f040 80b4 	bne.w	8005342 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 815f 	beq.w	80054ae <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051fa:	429a      	cmp	r2, r3
 80051fc:	f080 8157 	bcs.w	80054ae <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005206:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	f040 8085 	bne.w	8005326 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800524a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005252:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800525e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1da      	bne.n	800521c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3308      	adds	r3, #8
 800526c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3308      	adds	r3, #8
 8005286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800528a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800528e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005292:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800529c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e1      	bne.n	8005266 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3308      	adds	r3, #8
 80052a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3308      	adds	r3, #8
 80052c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e3      	bne.n	80052a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f6:	f023 0310 	bic.w	r3, r3, #16
 80052fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005308:	65bb      	str	r3, [r7, #88]	; 0x58
 800530a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800530e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e4      	bne.n	80052e6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	4618      	mov	r0, r3
 8005322:	f7fc fbb6 	bl	8001a92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005332:	b29b      	uxth	r3, r3
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	b29b      	uxth	r3, r3
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8d4 	bl	80054e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005340:	e0b5      	b.n	80054ae <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800534e:	b29b      	uxth	r3, r3
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80a7 	beq.w	80054b2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80a2 	beq.w	80054b2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005382:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
 8005392:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800539e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e4      	bne.n	800536e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	623b      	str	r3, [r7, #32]
   return(result);
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	f023 0301 	bic.w	r3, r3, #1
 80053ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053c8:	633a      	str	r2, [r7, #48]	; 0x30
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e3      	bne.n	80053a4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0310 	bic.w	r3, r3, #16
 8005402:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	69b9      	ldr	r1, [r7, #24]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	617b      	str	r3, [r7, #20]
   return(result);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e4      	bne.n	80053ee <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005428:	4619      	mov	r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f85c 	bl	80054e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005430:	e03f      	b.n	80054b2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00e      	beq.n	800545c <HAL_UART_IRQHandler+0x560>
 800543e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005452:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fd5d 	bl	8005f14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800545a:	e02d      	b.n	80054b8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01c      	beq.n	80054b6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
    }
    return;
 8005484:	e017      	b.n	80054b6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d012      	beq.n	80054b8 <HAL_UART_IRQHandler+0x5bc>
 8005492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fd0e 	bl	8005ec0 <UART_EndTransmit_IT>
    return;
 80054a4:	e008      	b.n	80054b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80054a6:	bf00      	nop
 80054a8:	e006      	b.n	80054b8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80054aa:	bf00      	nop
 80054ac:	e004      	b.n	80054b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80054ae:	bf00      	nop
 80054b0:	e002      	b.n	80054b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80054b2:	bf00      	nop
 80054b4:	e000      	b.n	80054b8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80054b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80054b8:	37e8      	adds	r7, #232	; 0xe8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop

080054c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005504:	b08a      	sub	sp, #40	; 0x28
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	431a      	orrs	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	431a      	orrs	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	4313      	orrs	r3, r2
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4ba4      	ldr	r3, [pc, #656]	; (80057c0 <UART_SetConfig+0x2c0>)
 8005530:	4013      	ands	r3, r2
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	6812      	ldr	r2, [r2, #0]
 8005536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005538:	430b      	orrs	r3, r1
 800553a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a99      	ldr	r2, [pc, #612]	; (80057c4 <UART_SetConfig+0x2c4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005568:	4313      	orrs	r3, r2
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557c:	430a      	orrs	r2, r1
 800557e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a90      	ldr	r2, [pc, #576]	; (80057c8 <UART_SetConfig+0x2c8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d126      	bne.n	80055d8 <UART_SetConfig+0xd8>
 800558a:	4b90      	ldr	r3, [pc, #576]	; (80057cc <UART_SetConfig+0x2cc>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b03      	cmp	r3, #3
 8005596:	d81b      	bhi.n	80055d0 <UART_SetConfig+0xd0>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <UART_SetConfig+0xa0>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055c1 	.word	0x080055c1
 80055a8:	080055b9 	.word	0x080055b9
 80055ac:	080055c9 	.word	0x080055c9
 80055b0:	2301      	movs	r3, #1
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b6:	e116      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80055b8:	2302      	movs	r3, #2
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e112      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80055c0:	2304      	movs	r3, #4
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e10e      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80055c8:	2308      	movs	r3, #8
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ce:	e10a      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80055d0:	2310      	movs	r3, #16
 80055d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d6:	e106      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a7c      	ldr	r2, [pc, #496]	; (80057d0 <UART_SetConfig+0x2d0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d138      	bne.n	8005654 <UART_SetConfig+0x154>
 80055e2:	4b7a      	ldr	r3, [pc, #488]	; (80057cc <UART_SetConfig+0x2cc>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e8:	f003 030c 	and.w	r3, r3, #12
 80055ec:	2b0c      	cmp	r3, #12
 80055ee:	d82d      	bhi.n	800564c <UART_SetConfig+0x14c>
 80055f0:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <UART_SetConfig+0xf8>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	0800562d 	.word	0x0800562d
 80055fc:	0800564d 	.word	0x0800564d
 8005600:	0800564d 	.word	0x0800564d
 8005604:	0800564d 	.word	0x0800564d
 8005608:	0800563d 	.word	0x0800563d
 800560c:	0800564d 	.word	0x0800564d
 8005610:	0800564d 	.word	0x0800564d
 8005614:	0800564d 	.word	0x0800564d
 8005618:	08005635 	.word	0x08005635
 800561c:	0800564d 	.word	0x0800564d
 8005620:	0800564d 	.word	0x0800564d
 8005624:	0800564d 	.word	0x0800564d
 8005628:	08005645 	.word	0x08005645
 800562c:	2300      	movs	r3, #0
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005632:	e0d8      	b.n	80057e6 <UART_SetConfig+0x2e6>
 8005634:	2302      	movs	r3, #2
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e0d4      	b.n	80057e6 <UART_SetConfig+0x2e6>
 800563c:	2304      	movs	r3, #4
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e0d0      	b.n	80057e6 <UART_SetConfig+0x2e6>
 8005644:	2308      	movs	r3, #8
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e0cc      	b.n	80057e6 <UART_SetConfig+0x2e6>
 800564c:	2310      	movs	r3, #16
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e0c8      	b.n	80057e6 <UART_SetConfig+0x2e6>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a5e      	ldr	r2, [pc, #376]	; (80057d4 <UART_SetConfig+0x2d4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d125      	bne.n	80056aa <UART_SetConfig+0x1aa>
 800565e:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <UART_SetConfig+0x2cc>)
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005664:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005668:	2b30      	cmp	r3, #48	; 0x30
 800566a:	d016      	beq.n	800569a <UART_SetConfig+0x19a>
 800566c:	2b30      	cmp	r3, #48	; 0x30
 800566e:	d818      	bhi.n	80056a2 <UART_SetConfig+0x1a2>
 8005670:	2b20      	cmp	r3, #32
 8005672:	d00a      	beq.n	800568a <UART_SetConfig+0x18a>
 8005674:	2b20      	cmp	r3, #32
 8005676:	d814      	bhi.n	80056a2 <UART_SetConfig+0x1a2>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <UART_SetConfig+0x182>
 800567c:	2b10      	cmp	r3, #16
 800567e:	d008      	beq.n	8005692 <UART_SetConfig+0x192>
 8005680:	e00f      	b.n	80056a2 <UART_SetConfig+0x1a2>
 8005682:	2300      	movs	r3, #0
 8005684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005688:	e0ad      	b.n	80057e6 <UART_SetConfig+0x2e6>
 800568a:	2302      	movs	r3, #2
 800568c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005690:	e0a9      	b.n	80057e6 <UART_SetConfig+0x2e6>
 8005692:	2304      	movs	r3, #4
 8005694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005698:	e0a5      	b.n	80057e6 <UART_SetConfig+0x2e6>
 800569a:	2308      	movs	r3, #8
 800569c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a0:	e0a1      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80056a2:	2310      	movs	r3, #16
 80056a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a8:	e09d      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a4a      	ldr	r2, [pc, #296]	; (80057d8 <UART_SetConfig+0x2d8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d125      	bne.n	8005700 <UART_SetConfig+0x200>
 80056b4:	4b45      	ldr	r3, [pc, #276]	; (80057cc <UART_SetConfig+0x2cc>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056be:	2bc0      	cmp	r3, #192	; 0xc0
 80056c0:	d016      	beq.n	80056f0 <UART_SetConfig+0x1f0>
 80056c2:	2bc0      	cmp	r3, #192	; 0xc0
 80056c4:	d818      	bhi.n	80056f8 <UART_SetConfig+0x1f8>
 80056c6:	2b80      	cmp	r3, #128	; 0x80
 80056c8:	d00a      	beq.n	80056e0 <UART_SetConfig+0x1e0>
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d814      	bhi.n	80056f8 <UART_SetConfig+0x1f8>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <UART_SetConfig+0x1d8>
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d008      	beq.n	80056e8 <UART_SetConfig+0x1e8>
 80056d6:	e00f      	b.n	80056f8 <UART_SetConfig+0x1f8>
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056de:	e082      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80056e0:	2302      	movs	r3, #2
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e6:	e07e      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80056e8:	2304      	movs	r3, #4
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ee:	e07a      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80056f0:	2308      	movs	r3, #8
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f6:	e076      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80056f8:	2310      	movs	r3, #16
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fe:	e072      	b.n	80057e6 <UART_SetConfig+0x2e6>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a35      	ldr	r2, [pc, #212]	; (80057dc <UART_SetConfig+0x2dc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d12a      	bne.n	8005760 <UART_SetConfig+0x260>
 800570a:	4b30      	ldr	r3, [pc, #192]	; (80057cc <UART_SetConfig+0x2cc>)
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005718:	d01a      	beq.n	8005750 <UART_SetConfig+0x250>
 800571a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800571e:	d81b      	bhi.n	8005758 <UART_SetConfig+0x258>
 8005720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005724:	d00c      	beq.n	8005740 <UART_SetConfig+0x240>
 8005726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572a:	d815      	bhi.n	8005758 <UART_SetConfig+0x258>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <UART_SetConfig+0x238>
 8005730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005734:	d008      	beq.n	8005748 <UART_SetConfig+0x248>
 8005736:	e00f      	b.n	8005758 <UART_SetConfig+0x258>
 8005738:	2300      	movs	r3, #0
 800573a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573e:	e052      	b.n	80057e6 <UART_SetConfig+0x2e6>
 8005740:	2302      	movs	r3, #2
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005746:	e04e      	b.n	80057e6 <UART_SetConfig+0x2e6>
 8005748:	2304      	movs	r3, #4
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574e:	e04a      	b.n	80057e6 <UART_SetConfig+0x2e6>
 8005750:	2308      	movs	r3, #8
 8005752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005756:	e046      	b.n	80057e6 <UART_SetConfig+0x2e6>
 8005758:	2310      	movs	r3, #16
 800575a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800575e:	e042      	b.n	80057e6 <UART_SetConfig+0x2e6>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a17      	ldr	r2, [pc, #92]	; (80057c4 <UART_SetConfig+0x2c4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d13a      	bne.n	80057e0 <UART_SetConfig+0x2e0>
 800576a:	4b18      	ldr	r3, [pc, #96]	; (80057cc <UART_SetConfig+0x2cc>)
 800576c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005778:	d01a      	beq.n	80057b0 <UART_SetConfig+0x2b0>
 800577a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800577e:	d81b      	bhi.n	80057b8 <UART_SetConfig+0x2b8>
 8005780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005784:	d00c      	beq.n	80057a0 <UART_SetConfig+0x2a0>
 8005786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578a:	d815      	bhi.n	80057b8 <UART_SetConfig+0x2b8>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <UART_SetConfig+0x298>
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005794:	d008      	beq.n	80057a8 <UART_SetConfig+0x2a8>
 8005796:	e00f      	b.n	80057b8 <UART_SetConfig+0x2b8>
 8005798:	2300      	movs	r3, #0
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579e:	e022      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80057a0:	2302      	movs	r3, #2
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a6:	e01e      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80057a8:	2304      	movs	r3, #4
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ae:	e01a      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80057b0:	2308      	movs	r3, #8
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b6:	e016      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80057b8:	2310      	movs	r3, #16
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057be:	e012      	b.n	80057e6 <UART_SetConfig+0x2e6>
 80057c0:	efff69f3 	.word	0xefff69f3
 80057c4:	40008000 	.word	0x40008000
 80057c8:	40013800 	.word	0x40013800
 80057cc:	40021000 	.word	0x40021000
 80057d0:	40004400 	.word	0x40004400
 80057d4:	40004800 	.word	0x40004800
 80057d8:	40004c00 	.word	0x40004c00
 80057dc:	40005000 	.word	0x40005000
 80057e0:	2310      	movs	r3, #16
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a9f      	ldr	r2, [pc, #636]	; (8005a68 <UART_SetConfig+0x568>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d17a      	bne.n	80058e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d824      	bhi.n	8005842 <UART_SetConfig+0x342>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0x300>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005825 	.word	0x08005825
 8005804:	08005843 	.word	0x08005843
 8005808:	0800582d 	.word	0x0800582d
 800580c:	08005843 	.word	0x08005843
 8005810:	08005833 	.word	0x08005833
 8005814:	08005843 	.word	0x08005843
 8005818:	08005843 	.word	0x08005843
 800581c:	08005843 	.word	0x08005843
 8005820:	0800583b 	.word	0x0800583b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005824:	f7fe fd22 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005828:	61f8      	str	r0, [r7, #28]
        break;
 800582a:	e010      	b.n	800584e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800582c:	4b8f      	ldr	r3, [pc, #572]	; (8005a6c <UART_SetConfig+0x56c>)
 800582e:	61fb      	str	r3, [r7, #28]
        break;
 8005830:	e00d      	b.n	800584e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005832:	f7fe fc83 	bl	800413c <HAL_RCC_GetSysClockFreq>
 8005836:	61f8      	str	r0, [r7, #28]
        break;
 8005838:	e009      	b.n	800584e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	61fb      	str	r3, [r7, #28]
        break;
 8005840:	e005      	b.n	800584e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800584c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80fb 	beq.w	8005a4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4413      	add	r3, r2
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	429a      	cmp	r2, r3
 8005864:	d305      	bcc.n	8005872 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	429a      	cmp	r2, r3
 8005870:	d903      	bls.n	800587a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005878:	e0e8      	b.n	8005a4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	2200      	movs	r2, #0
 800587e:	461c      	mov	r4, r3
 8005880:	4615      	mov	r5, r2
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	022b      	lsls	r3, r5, #8
 800588c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005890:	0222      	lsls	r2, r4, #8
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	6849      	ldr	r1, [r1, #4]
 8005896:	0849      	lsrs	r1, r1, #1
 8005898:	2000      	movs	r0, #0
 800589a:	4688      	mov	r8, r1
 800589c:	4681      	mov	r9, r0
 800589e:	eb12 0a08 	adds.w	sl, r2, r8
 80058a2:	eb43 0b09 	adc.w	fp, r3, r9
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b4:	4650      	mov	r0, sl
 80058b6:	4659      	mov	r1, fp
 80058b8:	f7fb f808 	bl	80008cc <__aeabi_uldivmod>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4613      	mov	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ca:	d308      	bcc.n	80058de <UART_SetConfig+0x3de>
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d2:	d204      	bcs.n	80058de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	60da      	str	r2, [r3, #12]
 80058dc:	e0b6      	b.n	8005a4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058e4:	e0b2      	b.n	8005a4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ee:	d15e      	bne.n	80059ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d828      	bhi.n	800594a <UART_SetConfig+0x44a>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0x400>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005925 	.word	0x08005925
 8005904:	0800592d 	.word	0x0800592d
 8005908:	08005935 	.word	0x08005935
 800590c:	0800594b 	.word	0x0800594b
 8005910:	0800593b 	.word	0x0800593b
 8005914:	0800594b 	.word	0x0800594b
 8005918:	0800594b 	.word	0x0800594b
 800591c:	0800594b 	.word	0x0800594b
 8005920:	08005943 	.word	0x08005943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005924:	f7fe fca2 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005928:	61f8      	str	r0, [r7, #28]
        break;
 800592a:	e014      	b.n	8005956 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800592c:	f7fe fcb4 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 8005930:	61f8      	str	r0, [r7, #28]
        break;
 8005932:	e010      	b.n	8005956 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005934:	4b4d      	ldr	r3, [pc, #308]	; (8005a6c <UART_SetConfig+0x56c>)
 8005936:	61fb      	str	r3, [r7, #28]
        break;
 8005938:	e00d      	b.n	8005956 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800593a:	f7fe fbff 	bl	800413c <HAL_RCC_GetSysClockFreq>
 800593e:	61f8      	str	r0, [r7, #28]
        break;
 8005940:	e009      	b.n	8005956 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005946:	61fb      	str	r3, [r7, #28]
        break;
 8005948:	e005      	b.n	8005956 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005954:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d077      	beq.n	8005a4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005a      	lsls	r2, r3, #1
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	441a      	add	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b0f      	cmp	r3, #15
 8005976:	d916      	bls.n	80059a6 <UART_SetConfig+0x4a6>
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597e:	d212      	bcs.n	80059a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f023 030f 	bic.w	r3, r3, #15
 8005988:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	b29b      	uxth	r3, r3
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	b29a      	uxth	r2, r3
 8005996:	8afb      	ldrh	r3, [r7, #22]
 8005998:	4313      	orrs	r3, r2
 800599a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	8afa      	ldrh	r2, [r7, #22]
 80059a2:	60da      	str	r2, [r3, #12]
 80059a4:	e052      	b.n	8005a4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059ac:	e04e      	b.n	8005a4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d827      	bhi.n	8005a06 <UART_SetConfig+0x506>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0x4bc>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	080059e9 	.word	0x080059e9
 80059c4:	080059f1 	.word	0x080059f1
 80059c8:	08005a07 	.word	0x08005a07
 80059cc:	080059f7 	.word	0x080059f7
 80059d0:	08005a07 	.word	0x08005a07
 80059d4:	08005a07 	.word	0x08005a07
 80059d8:	08005a07 	.word	0x08005a07
 80059dc:	080059ff 	.word	0x080059ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7fe fc44 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 80059e4:	61f8      	str	r0, [r7, #28]
        break;
 80059e6:	e014      	b.n	8005a12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e8:	f7fe fc56 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 80059ec:	61f8      	str	r0, [r7, #28]
        break;
 80059ee:	e010      	b.n	8005a12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f0:	4b1e      	ldr	r3, [pc, #120]	; (8005a6c <UART_SetConfig+0x56c>)
 80059f2:	61fb      	str	r3, [r7, #28]
        break;
 80059f4:	e00d      	b.n	8005a12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f6:	f7fe fba1 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80059fa:	61f8      	str	r0, [r7, #28]
        break;
 80059fc:	e009      	b.n	8005a12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a02:	61fb      	str	r3, [r7, #28]
        break;
 8005a04:	e005      	b.n	8005a12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a10:	bf00      	nop
    }

    if (pclk != 0U)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d019      	beq.n	8005a4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	085a      	lsrs	r2, r3, #1
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	441a      	add	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2b0f      	cmp	r3, #15
 8005a30:	d909      	bls.n	8005a46 <UART_SetConfig+0x546>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a38:	d205      	bcs.n	8005a46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	e002      	b.n	8005a4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3728      	adds	r7, #40	; 0x28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a66:	bf00      	nop
 8005a68:	40008000 	.word	0x40008000
 8005a6c:	00f42400 	.word	0x00f42400

08005a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01a      	beq.n	8005b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b6e:	d10a      	bne.n	8005b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	605a      	str	r2, [r3, #4]
  }
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc4:	f7fb fe24 	bl	8001810 <HAL_GetTick>
 8005bc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d10e      	bne.n	8005bf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f82d 	bl	8005c46 <UART_WaitOnFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e023      	b.n	8005c3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d10e      	bne.n	8005c22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f817 	bl	8005c46 <UART_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e00d      	b.n	8005c3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b09c      	sub	sp, #112	; 0x70
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	4613      	mov	r3, r2
 8005c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c56:	e0a5      	b.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c5e:	f000 80a1 	beq.w	8005da4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c62:	f7fb fdd5 	bl	8001810 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d302      	bcc.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d13e      	bne.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e6      	bne.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cca:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e5      	bne.n	8005caa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e067      	b.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d04f      	beq.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d12:	d147      	bne.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d1c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e6      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d70:	623a      	str	r2, [r7, #32]
 8005d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	69f9      	ldr	r1, [r7, #28]
 8005d76:	6a3a      	ldr	r2, [r7, #32]
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e5      	bne.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e010      	b.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69da      	ldr	r2, [r3, #28]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4013      	ands	r3, r2
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	bf0c      	ite	eq
 8005db4:	2301      	moveq	r3, #1
 8005db6:	2300      	movne	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	79fb      	ldrb	r3, [r7, #7]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	f43f af4a 	beq.w	8005c58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3770      	adds	r7, #112	; 0x70
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b095      	sub	sp, #84	; 0x54
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df4:	643b      	str	r3, [r7, #64]	; 0x40
 8005df6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e6      	bne.n	8005dd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e5      	bne.n	8005e08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d118      	bne.n	8005e76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f023 0310 	bic.w	r3, r3, #16
 8005e58:	647b      	str	r3, [r7, #68]	; 0x44
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6979      	ldr	r1, [r7, #20]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e6      	bne.n	8005e44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005e88:	bf00      	nop
 8005e8a:	3754      	adds	r7, #84	; 0x54
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f7ff fb0e 	bl	80054d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6979      	ldr	r1, [r7, #20]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e6      	bne.n	8005ec8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2220      	movs	r2, #32
 8005efe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff fada 	bl	80054c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f0c:	bf00      	nop
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f28:	b084      	sub	sp, #16
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	f107 001c 	add.w	r0, r7, #28
 8005f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9a0 	bl	800628c <USB_CoreReset>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
 8005f62:	e005      	b.n	8005f70 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f7c:	b004      	add	sp, #16
 8005f7e:	4770      	bx	lr

08005f80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f043 0201 	orr.w	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f023 0201 	bic.w	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d115      	bne.n	8006012 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	f7fb fc18 	bl	8001828 <HAL_Delay>
      ms++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f935 	bl	800626e <USB_GetMode>
 8006004:	4603      	mov	r3, r0
 8006006:	2b01      	cmp	r3, #1
 8006008:	d01e      	beq.n	8006048 <USB_SetCurrentMode+0x84>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b31      	cmp	r3, #49	; 0x31
 800600e:	d9f0      	bls.n	8005ff2 <USB_SetCurrentMode+0x2e>
 8006010:	e01a      	b.n	8006048 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d115      	bne.n	8006044 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006024:	2001      	movs	r0, #1
 8006026:	f7fb fbff 	bl	8001828 <HAL_Delay>
      ms++;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f91c 	bl	800626e <USB_GetMode>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <USB_SetCurrentMode+0x84>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b31      	cmp	r3, #49	; 0x31
 8006040:	d9f0      	bls.n	8006024 <USB_SetCurrentMode+0x60>
 8006042:	e001      	b.n	8006048 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e005      	b.n	8006054 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b32      	cmp	r3, #50	; 0x32
 800604c:	d101      	bne.n	8006052 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3301      	adds	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <USB_FlushTxFifo+0x64>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d901      	bls.n	800607c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e01b      	b.n	80060b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	daf2      	bge.n	800606a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	019b      	lsls	r3, r3, #6
 800608c:	f043 0220 	orr.w	r2, r3, #32
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a08      	ldr	r2, [pc, #32]	; (80060c0 <USB_FlushTxFifo+0x64>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e006      	b.n	80060b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d0f0      	beq.n	8006094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	00030d40 	.word	0x00030d40

080060c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a11      	ldr	r2, [pc, #68]	; (8006120 <USB_FlushRxFifo+0x5c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e018      	b.n	8006114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	daf2      	bge.n	80060d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2210      	movs	r2, #16
 80060f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a08      	ldr	r2, [pc, #32]	; (8006120 <USB_FlushRxFifo+0x5c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e006      	b.n	8006114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0310 	and.w	r3, r3, #16
 800610e:	2b10      	cmp	r3, #16
 8006110:	d0f0      	beq.n	80060f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	00030d40 	.word	0x00030d40

08006124 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006124:	b480      	push	{r7}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4611      	mov	r1, r2
 8006130:	461a      	mov	r2, r3
 8006132:	460b      	mov	r3, r1
 8006134:	71fb      	strb	r3, [r7, #7]
 8006136:	4613      	mov	r3, r2
 8006138:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006142:	88bb      	ldrh	r3, [r7, #4]
 8006144:	3303      	adds	r3, #3
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	e018      	b.n	8006182 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	031a      	lsls	r2, r3, #12
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	4413      	add	r3, r2
 8006158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615c:	461a      	mov	r2, r3
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	3301      	adds	r3, #1
 8006168:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	3301      	adds	r3, #1
 800616e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	3301      	adds	r3, #1
 8006174:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	3301      	adds	r3, #1
 800617a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	3301      	adds	r3, #1
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	429a      	cmp	r2, r3
 8006188:	d3e2      	bcc.n	8006150 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3724      	adds	r7, #36	; 0x24
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006198:	b480      	push	{r7}
 800619a:	b08b      	sub	sp, #44	; 0x2c
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	4613      	mov	r3, r2
 80061a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	089b      	lsrs	r3, r3, #2
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061be:	2300      	movs	r3, #0
 80061c0:	623b      	str	r3, [r7, #32]
 80061c2:	e014      	b.n	80061ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	3301      	adds	r3, #1
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	3301      	adds	r3, #1
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	3301      	adds	r3, #1
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	3301      	adds	r3, #1
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	3301      	adds	r3, #1
 80061ec:	623b      	str	r3, [r7, #32]
 80061ee:	6a3a      	ldr	r2, [r7, #32]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d3e6      	bcc.n	80061c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061f6:	8bfb      	ldrh	r3, [r7, #30]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01e      	beq.n	800623a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006206:	461a      	mov	r2, r3
 8006208:	f107 0310 	add.w	r3, r7, #16
 800620c:	6812      	ldr	r2, [r2, #0]
 800620e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	fa22 f303 	lsr.w	r3, r2, r3
 800621c:	b2da      	uxtb	r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	701a      	strb	r2, [r3, #0]
      i++;
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	3301      	adds	r3, #1
 8006226:	623b      	str	r3, [r7, #32]
      pDest++;
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	3301      	adds	r3, #1
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800622e:	8bfb      	ldrh	r3, [r7, #30]
 8006230:	3b01      	subs	r3, #1
 8006232:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006234:	8bfb      	ldrh	r3, [r7, #30]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1ea      	bne.n	8006210 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800623c:	4618      	mov	r0, r3
 800623e:	372c      	adds	r7, #44	; 0x2c
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4013      	ands	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006260:	68fb      	ldr	r3, [r7, #12]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0301 	and.w	r3, r3, #1
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4a13      	ldr	r2, [pc, #76]	; (80062f0 <USB_CoreReset+0x64>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e01b      	b.n	80062e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	daf2      	bge.n	8006298 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f043 0201 	orr.w	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <USB_CoreReset+0x64>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d901      	bls.n	80062d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e006      	b.n	80062e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d0f0      	beq.n	80062c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	00030d40 	.word	0x00030d40

080062f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062f4:	b084      	sub	sp, #16
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b086      	sub	sp, #24
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006314:	461a      	mov	r2, r3
 8006316:	2300      	movs	r3, #0
 8006318:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006340:	f023 0304 	bic.w	r3, r3, #4
 8006344:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006346:	2110      	movs	r1, #16
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff fe87 	bl	800605c <USB_FlushTxFifo>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff feb3 	bl	80060c4 <USB_FlushRxFifo>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	e015      	b.n	800639a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637a:	461a      	mov	r2, r3
 800637c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006380:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	461a      	mov	r2, r3
 8006390:	2300      	movs	r3, #0
 8006392:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	3301      	adds	r3, #1
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d3e5      	bcc.n	800636e <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063ae:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2280      	movs	r2, #128	; 0x80
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a0c      	ldr	r2, [pc, #48]	; (80063ec <USB_HostInit+0xf8>)
 80063ba:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a0c      	ldr	r2, [pc, #48]	; (80063f0 <USB_HostInit+0xfc>)
 80063c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f043 0210 	orr.w	r2, r3, #16
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699a      	ldr	r2, [r3, #24]
 80063d4:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <USB_HostInit+0x100>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063e8:	b004      	add	sp, #16
 80063ea:	4770      	bx	lr
 80063ec:	00600080 	.word	0x00600080
 80063f0:	004000e0 	.word	0x004000e0
 80063f4:	a3200008 	.word	0xa3200008

080063f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006416:	f023 0303 	bic.w	r3, r3, #3
 800641a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006430:	4313      	orrs	r3, r2
 8006432:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d107      	bne.n	800644a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006440:	461a      	mov	r2, r3
 8006442:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006446:	6053      	str	r3, [r2, #4]
 8006448:	e009      	b.n	800645e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d106      	bne.n	800645e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006456:	461a      	mov	r2, r3
 8006458:	f241 7370 	movw	r3, #6000	; 0x1770
 800645c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800648c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800649a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800649c:	2064      	movs	r0, #100	; 0x64
 800649e:	f7fb f9c3 	bl	8001828 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80064aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80064b0:	200a      	movs	r0, #10
 80064b2:	f7fb f9b9 	bl	8001828 <HAL_Delay>

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80064e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <USB_DriveVbus+0x44>
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d106      	bne.n	8006504 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80064fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006502:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800650a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650e:	d109      	bne.n	8006524 <USB_DriveVbus+0x64>
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800651e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006522:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	0c5b      	lsrs	r3, r3, #17
 8006550:	f003 0303 	and.w	r3, r3, #3
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	b29b      	uxth	r3, r3
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
	...

08006584 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	461a      	mov	r2, r3
 8006592:	4603      	mov	r3, r0
 8006594:	70fb      	strb	r3, [r7, #3]
 8006596:	460b      	mov	r3, r1
 8006598:	70bb      	strb	r3, [r7, #2]
 800659a:	4613      	mov	r3, r2
 800659c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b2:	461a      	mov	r2, r3
 80065b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80065ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d867      	bhi.n	8006692 <USB_HC_Init+0x10e>
 80065c2:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <USB_HC_Init+0x44>)
 80065c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c8:	080065d9 	.word	0x080065d9
 80065cc:	08006655 	.word	0x08006655
 80065d0:	080065d9 	.word	0x080065d9
 80065d4:	08006617 	.word	0x08006617
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	461a      	mov	r2, r3
 80065e6:	f240 439d 	movw	r3, #1181	; 0x49d
 80065ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80065ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da51      	bge.n	8006698 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	440a      	add	r2, r1
 800660a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006612:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006614:	e040      	b.n	8006698 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006622:	461a      	mov	r2, r3
 8006624:	f240 639d 	movw	r3, #1693	; 0x69d
 8006628:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800662a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800662e:	2b00      	cmp	r3, #0
 8006630:	da34      	bge.n	800669c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4413      	add	r3, r2
 800663a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	78fa      	ldrb	r2, [r7, #3]
 8006642:	0151      	lsls	r1, r2, #5
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	440a      	add	r2, r1
 8006648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800664c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006650:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006652:	e023      	b.n	800669c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006660:	461a      	mov	r2, r3
 8006662:	f240 2325 	movw	r3, #549	; 0x225
 8006666:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800666c:	2b00      	cmp	r3, #0
 800666e:	da17      	bge.n	80066a0 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	78fa      	ldrb	r2, [r7, #3]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	440a      	add	r2, r1
 8006686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800668a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800668e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006690:	e006      	b.n	80066a0 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	77fb      	strb	r3, [r7, #31]
      break;
 8006696:	e004      	b.n	80066a2 <USB_HC_Init+0x11e>
      break;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <USB_HC_Init+0x11e>
      break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <USB_HC_Init+0x11e>
      break;
 80066a0:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066bc:	f043 0302 	orr.w	r3, r3, #2
 80066c0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	2101      	movs	r1, #1
 80066d2:	fa01 f303 	lsl.w	r3, r1, r3
 80066d6:	6939      	ldr	r1, [r7, #16]
 80066d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80066dc:	4313      	orrs	r3, r2
 80066de:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80066ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	da03      	bge.n	80066fc <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80066f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	e001      	b.n	8006700 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff ff16 	bl	8006532 <USB_GetHostSpeed>
 8006706:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006708:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800670c:	2b02      	cmp	r3, #2
 800670e:	d106      	bne.n	800671e <USB_HC_Init+0x19a>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b02      	cmp	r3, #2
 8006714:	d003      	beq.n	800671e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	e001      	b.n	8006722 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006722:	787b      	ldrb	r3, [r7, #1]
 8006724:	059b      	lsls	r3, r3, #22
 8006726:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800672a:	78bb      	ldrb	r3, [r7, #2]
 800672c:	02db      	lsls	r3, r3, #11
 800672e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006732:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006734:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006738:	049b      	lsls	r3, r3, #18
 800673a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800673e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006740:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006742:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006746:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	0159      	lsls	r1, r3, #5
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	440b      	add	r3, r1
 8006754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006758:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800675e:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006760:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006764:	2b03      	cmp	r3, #3
 8006766:	d003      	beq.n	8006770 <USB_HC_Init+0x1ec>
 8006768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800676c:	2b01      	cmp	r3, #1
 800676e:	d10f      	bne.n	8006790 <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4413      	add	r3, r2
 8006778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	78fa      	ldrb	r2, [r7, #3]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	440a      	add	r2, r1
 8006786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800678e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006790:	7ffb      	ldrb	r3, [r7, #31]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3720      	adds	r7, #32
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop

0800679c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80067b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067b4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d018      	beq.n	80067f0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	8912      	ldrh	r2, [r2, #8]
 80067c6:	4413      	add	r3, r2
 80067c8:	3b01      	subs	r3, #1
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	8912      	ldrh	r2, [r2, #8]
 80067ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80067d2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80067d4:	8bfa      	ldrh	r2, [r7, #30]
 80067d6:	8a7b      	ldrh	r3, [r7, #18]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d90b      	bls.n	80067f4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80067dc:	8a7b      	ldrh	r3, [r7, #18]
 80067de:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067e0:	8bfb      	ldrh	r3, [r7, #30]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	8912      	ldrh	r2, [r2, #8]
 80067e6:	fb03 f202 	mul.w	r2, r3, r2
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	611a      	str	r2, [r3, #16]
 80067ee:	e001      	b.n	80067f4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80067f0:	2301      	movs	r3, #1
 80067f2:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	78db      	ldrb	r3, [r3, #3]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067fc:	8bfb      	ldrh	r3, [r7, #30]
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	8912      	ldrh	r2, [r2, #8]
 8006802:	fb03 f202 	mul.w	r2, r3, r2
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	611a      	str	r2, [r3, #16]
 800680a:	e003      	b.n	8006814 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800681c:	8bfb      	ldrh	r3, [r7, #30]
 800681e:	04d9      	lsls	r1, r3, #19
 8006820:	4b59      	ldr	r3, [pc, #356]	; (8006988 <USB_HC_StartXfer+0x1ec>)
 8006822:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006824:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	7a9b      	ldrb	r3, [r3, #10]
 800682a:	075b      	lsls	r3, r3, #29
 800682c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006830:	6979      	ldr	r1, [r7, #20]
 8006832:	0148      	lsls	r0, r1, #5
 8006834:	69b9      	ldr	r1, [r7, #24]
 8006836:	4401      	add	r1, r0
 8006838:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800683c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800683e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	bf0c      	ite	eq
 8006850:	2301      	moveq	r3, #1
 8006852:	2300      	movne	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	4413      	add	r3, r2
 8006860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	440a      	add	r2, r1
 800686e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006872:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006876:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	7c7b      	ldrb	r3, [r7, #17]
 8006888:	075b      	lsls	r3, r3, #29
 800688a:	6979      	ldr	r1, [r7, #20]
 800688c:	0148      	lsls	r0, r1, #5
 800688e:	69b9      	ldr	r1, [r7, #24]
 8006890:	4401      	add	r1, r0
 8006892:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006896:	4313      	orrs	r3, r2
 8006898:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068b0:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	78db      	ldrb	r3, [r3, #3]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c0:	60bb      	str	r3, [r7, #8]
 80068c2:	e003      	b.n	80068cc <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068ca:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068d2:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e0:	461a      	mov	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d147      	bne.n	800697e <USB_HC_StartXfer+0x1e2>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d043      	beq.n	800697e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	79db      	ldrb	r3, [r3, #7]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d830      	bhi.n	8006960 <USB_HC_StartXfer+0x1c4>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <USB_HC_StartXfer+0x168>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006915 	.word	0x08006915
 8006908:	08006939 	.word	0x08006939
 800690c:	08006915 	.word	0x08006915
 8006910:	08006939 	.word	0x08006939
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	3303      	adds	r3, #3
 800691a:	089b      	lsrs	r3, r3, #2
 800691c:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800691e:	89fa      	ldrh	r2, [r7, #14]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	b29b      	uxth	r3, r3
 8006926:	429a      	cmp	r2, r3
 8006928:	d91c      	bls.n	8006964 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f043 0220 	orr.w	r2, r3, #32
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	619a      	str	r2, [r3, #24]
        }
        break;
 8006936:	e015      	b.n	8006964 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	3303      	adds	r3, #3
 800693e:	089b      	lsrs	r3, r3, #2
 8006940:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006942:	89fa      	ldrh	r2, [r7, #14]
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	b29b      	uxth	r3, r3
 800694e:	429a      	cmp	r2, r3
 8006950:	d90a      	bls.n	8006968 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	619a      	str	r2, [r3, #24]
        }
        break;
 800695e:	e003      	b.n	8006968 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8006960:	bf00      	nop
 8006962:	e002      	b.n	800696a <USB_HC_StartXfer+0x1ce>
        break;
 8006964:	bf00      	nop
 8006966:	e000      	b.n	800696a <USB_HC_StartXfer+0x1ce>
        break;
 8006968:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68d9      	ldr	r1, [r3, #12]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	785a      	ldrb	r2, [r3, #1]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	b29b      	uxth	r3, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fbd3 	bl	8006124 <USB_WritePacket>
  }

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3720      	adds	r7, #32
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	1ff80000 	.word	0x1ff80000

0800698c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	b29b      	uxth	r3, r3
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b089      	sub	sp, #36	; 0x24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	0c9b      	lsrs	r3, r3, #18
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	0fdb      	lsrs	r3, r3, #31
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d104      	bne.n	8006a08 <USB_HC_Halt+0x5a>
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e0c8      	b.n	8006b9a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <USB_HC_Halt+0x66>
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d163      	bne.n	8006adc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a32:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f040 80ab 	bne.w	8006b98 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d133      	bne.n	8006ab6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a6c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a8c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3301      	adds	r3, #1
 8006a92:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a9a:	d81d      	bhi.n	8006ad8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab2:	d0ec      	beq.n	8006a8e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ab4:	e070      	b.n	8006b98 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ad4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ad6:	e05f      	b.n	8006b98 <USB_HC_Halt+0x1ea>
            break;
 8006ad8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ada:	e05d      	b.n	8006b98 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006afa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d133      	bne.n	8006b74 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	0151      	lsls	r1, r2, #5
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	440a      	add	r2, r1
 8006b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b4a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b58:	d81d      	bhi.n	8006b96 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b70:	d0ec      	beq.n	8006b4c <USB_HC_Halt+0x19e>
 8006b72:	e011      	b.n	8006b98 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	e000      	b.n	8006b98 <USB_HC_Halt+0x1ea>
          break;
 8006b96:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3724      	adds	r7, #36	; 0x24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b088      	sub	sp, #32
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff f9f1 	bl	8005fa2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bc0:	2110      	movs	r1, #16
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fa4a 	bl	800605c <USB_FlushTxFifo>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff fa76 	bl	80060c4 <USB_FlushRxFifo>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006be2:	2300      	movs	r3, #0
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	e01f      	b.n	8006c28 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bfe:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c06:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c0e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	3301      	adds	r3, #1
 8006c26:	61bb      	str	r3, [r7, #24]
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b0f      	cmp	r3, #15
 8006c2c:	d9dc      	bls.n	8006be8 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	e034      	b.n	8006c9e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c4a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c52:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c5a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c68:	461a      	mov	r2, r3
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c7a:	d80c      	bhi.n	8006c96 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c92:	d0ec      	beq.n	8006c6e <USB_StopHost+0xc8>
 8006c94:	e000      	b.n	8006c98 <USB_StopHost+0xf2>
        break;
 8006c96:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b0f      	cmp	r3, #15
 8006ca2:	d9c7      	bls.n	8006c34 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006caa:	461a      	mov	r2, r3
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cb8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff f960 	bl	8005f80 <USB_EnableGlobalInt>

  return ret;
 8006cc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3720      	adds	r7, #32
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006cd0:	4904      	ldr	r1, [pc, #16]	; (8006ce4 <MX_FATFS_Init+0x18>)
 8006cd2:	4805      	ldr	r0, [pc, #20]	; (8006ce8 <MX_FATFS_Init+0x1c>)
 8006cd4:	f007 ff6c 	bl	800ebb0 <FATFS_LinkDriver>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4b03      	ldr	r3, [pc, #12]	; (8006cec <MX_FATFS_Init+0x20>)
 8006cde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ce0:	bf00      	nop
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000278 	.word	0x20000278
 8006ce8:	08010bcc 	.word	0x08010bcc
 8006cec:	20000274 	.word	0x20000274

08006cf0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006cf4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4808      	ldr	r0, [pc, #32]	; (8006d4c <USBH_status+0x34>)
 8006d2c:	f000 fe1a 	bl	8007964 <USBH_MSC_UnitIsReady>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <USBH_status+0x24>
  {
    res = RES_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]
 8006d3a:	e001      	b.n	8006d40 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	200027a4 	.word	0x200027a4

08006d50 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b094      	sub	sp, #80	; 0x50
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006d66:	7bf9      	ldrb	r1, [r7, #15]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	4813      	ldr	r0, [pc, #76]	; (8006dc0 <USBH_read+0x70>)
 8006d72:	f000 fe41 	bl	80079f8 <USBH_MSC_Read>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <USBH_read+0x34>
  {
    res = RES_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006d82:	e017      	b.n	8006db4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006d84:	f107 0210 	add.w	r2, r7, #16
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	480c      	ldr	r0, [pc, #48]	; (8006dc0 <USBH_read+0x70>)
 8006d8e:	f000 fe0f 	bl	80079b0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006d92:	7f7b      	ldrb	r3, [r7, #29]
 8006d94:	2b3a      	cmp	r3, #58	; 0x3a
 8006d96:	d005      	beq.n	8006da4 <USBH_read+0x54>
 8006d98:	2b3a      	cmp	r3, #58	; 0x3a
 8006d9a:	dc07      	bgt.n	8006dac <USBH_read+0x5c>
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d001      	beq.n	8006da4 <USBH_read+0x54>
 8006da0:	2b28      	cmp	r3, #40	; 0x28
 8006da2:	d103      	bne.n	8006dac <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006da4:	2303      	movs	r3, #3
 8006da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006daa:	e003      	b.n	8006db4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006db2:	bf00      	nop
    }
  }

  return res;
 8006db4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3748      	adds	r7, #72	; 0x48
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	200027a4 	.word	0x200027a4

08006dc4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b094      	sub	sp, #80	; 0x50
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006dda:	7bf9      	ldrb	r1, [r7, #15]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4817      	ldr	r0, [pc, #92]	; (8006e44 <USBH_write+0x80>)
 8006de6:	f000 fe70 	bl	8007aca <USBH_MSC_Write>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <USBH_write+0x34>
  {
    res = RES_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006df6:	e01f      	b.n	8006e38 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006df8:	f107 0210 	add.w	r2, r7, #16
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4810      	ldr	r0, [pc, #64]	; (8006e44 <USBH_write+0x80>)
 8006e02:	f000 fdd5 	bl	80079b0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006e06:	7f7b      	ldrb	r3, [r7, #29]
 8006e08:	2b3a      	cmp	r3, #58	; 0x3a
 8006e0a:	d00d      	beq.n	8006e28 <USBH_write+0x64>
 8006e0c:	2b3a      	cmp	r3, #58	; 0x3a
 8006e0e:	dc0f      	bgt.n	8006e30 <USBH_write+0x6c>
 8006e10:	2b28      	cmp	r3, #40	; 0x28
 8006e12:	d009      	beq.n	8006e28 <USBH_write+0x64>
 8006e14:	2b28      	cmp	r3, #40	; 0x28
 8006e16:	dc0b      	bgt.n	8006e30 <USBH_write+0x6c>
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d005      	beq.n	8006e28 <USBH_write+0x64>
 8006e1c:	2b27      	cmp	r3, #39	; 0x27
 8006e1e:	d107      	bne.n	8006e30 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006e20:	2302      	movs	r3, #2
 8006e22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006e26:	e007      	b.n	8006e38 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006e2e:	e003      	b.n	8006e38 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006e36:	bf00      	nop
    }
  }

  return res;
 8006e38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3748      	adds	r7, #72	; 0x48
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	200027a4 	.word	0x200027a4

08006e48 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b090      	sub	sp, #64	; 0x40
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	603a      	str	r2, [r7, #0]
 8006e52:	71fb      	strb	r3, [r7, #7]
 8006e54:	460b      	mov	r3, r1
 8006e56:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006e5e:	79bb      	ldrb	r3, [r7, #6]
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d852      	bhi.n	8006f0a <USBH_ioctl+0xc2>
 8006e64:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <USBH_ioctl+0x24>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006e85 	.word	0x08006e85
 8006e74:	08006eaf 	.word	0x08006eaf
 8006e78:	08006edb 	.word	0x08006edb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006e82:	e045      	b.n	8006f10 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006e84:	f107 0208 	add.w	r2, r7, #8
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4823      	ldr	r0, [pc, #140]	; (8006f1c <USBH_ioctl+0xd4>)
 8006e8e:	f000 fd8f 	bl	80079b0 <USBH_MSC_GetLUNInfo>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006ea4:	e034      	b.n	8006f10 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006eac:	e030      	b.n	8006f10 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006eae:	f107 0208 	add.w	r2, r7, #8
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4819      	ldr	r0, [pc, #100]	; (8006f1c <USBH_ioctl+0xd4>)
 8006eb8:	f000 fd7a 	bl	80079b0 <USBH_MSC_GetLUNInfo>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d107      	bne.n	8006ed2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006ec2:	8a3b      	ldrh	r3, [r7, #16]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006ed0:	e01e      	b.n	8006f10 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006ed8:	e01a      	b.n	8006f10 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006eda:	f107 0208 	add.w	r2, r7, #8
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	480e      	ldr	r0, [pc, #56]	; (8006f1c <USBH_ioctl+0xd4>)
 8006ee4:	f000 fd64 	bl	80079b0 <USBH_MSC_GetLUNInfo>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d109      	bne.n	8006f02 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006eee:	8a3b      	ldrh	r3, [r7, #16]
 8006ef0:	0a5b      	lsrs	r3, r3, #9
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006f00:	e006      	b.n	8006f10 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006f08:	e002      	b.n	8006f10 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006f0a:	2304      	movs	r3, #4
 8006f0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006f10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3740      	adds	r7, #64	; 0x40
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	200027a4 	.word	0x200027a4

08006f20 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006f20:	b590      	push	{r4, r7, lr}
 8006f22:	b089      	sub	sp, #36	; 0x24
 8006f24:	af04      	add	r7, sp, #16
 8006f26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f2e:	7919      	ldrb	r1, [r3, #4]
 8006f30:	2350      	movs	r3, #80	; 0x50
 8006f32:	2206      	movs	r2, #6
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 fc53 	bl	80087e0 <USBH_FindInterface>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2bff      	cmp	r3, #255	; 0xff
 8006f42:	d002      	beq.n	8006f4a <USBH_MSC_InterfaceInit+0x2a>
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d901      	bls.n	8006f4e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e0ef      	b.n	800712e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fc28 	bl	80087a8 <USBH_SelectInterface>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006f62:	2302      	movs	r3, #2
 8006f64:	e0e3      	b.n	800712e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006f6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006f70:	f008 fab2 	bl	800f4d8 <malloc>
 8006f74:	4603      	mov	r3, r0
 8006f76:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e0d0      	b.n	800712e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f90:	2100      	movs	r1, #0
 8006f92:	68b8      	ldr	r0, [r7, #8]
 8006f94:	f008 fabe 	bl	800f514 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	211a      	movs	r1, #26
 8006f9e:	fb01 f303 	mul.w	r3, r1, r3
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	b25b      	sxtb	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	da16      	bge.n	8006fde <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	211a      	movs	r1, #26
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	4413      	add	r3, r2
 8006fbc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	211a      	movs	r1, #26
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006fd6:	881a      	ldrh	r2, [r3, #0]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	815a      	strh	r2, [r3, #10]
 8006fdc:	e015      	b.n	800700a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	211a      	movs	r1, #26
 8006fe4:	fb01 f303 	mul.w	r3, r1, r3
 8006fe8:	4413      	add	r3, r2
 8006fea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fee:	781a      	ldrb	r2, [r3, #0]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	211a      	movs	r1, #26
 8006ffa:	fb01 f303 	mul.w	r3, r1, r3
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007004:	881a      	ldrh	r2, [r3, #0]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	211a      	movs	r1, #26
 8007010:	fb01 f303 	mul.w	r3, r1, r3
 8007014:	4413      	add	r3, r2
 8007016:	f203 3356 	addw	r3, r3, #854	; 0x356
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	b25b      	sxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	da16      	bge.n	8007050 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	211a      	movs	r1, #26
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	4413      	add	r3, r2
 800702e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007032:	781a      	ldrb	r2, [r3, #0]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	211a      	movs	r1, #26
 800703e:	fb01 f303 	mul.w	r3, r1, r3
 8007042:	4413      	add	r3, r2
 8007044:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007048:	881a      	ldrh	r2, [r3, #0]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	815a      	strh	r2, [r3, #10]
 800704e:	e015      	b.n	800707c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	211a      	movs	r1, #26
 8007056:	fb01 f303 	mul.w	r3, r1, r3
 800705a:	4413      	add	r3, r2
 800705c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007060:	781a      	ldrb	r2, [r3, #0]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	211a      	movs	r1, #26
 800706c:	fb01 f303 	mul.w	r3, r1, r3
 8007070:	4413      	add	r3, r2
 8007072:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007076:	881a      	ldrh	r2, [r3, #0]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2200      	movs	r2, #0
 8007080:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2200      	movs	r2, #0
 8007086:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2200      	movs	r2, #0
 800708c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	799b      	ldrb	r3, [r3, #6]
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f002 fdc4 	bl	8009c22 <USBH_AllocPipe>
 800709a:	4603      	mov	r3, r0
 800709c:	461a      	mov	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	79db      	ldrb	r3, [r3, #7]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f002 fdba 	bl	8009c22 <USBH_AllocPipe>
 80070ae:	4603      	mov	r3, r0
 80070b0:	461a      	mov	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fdac 	bl	8007c14 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	7959      	ldrb	r1, [r3, #5]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	7998      	ldrb	r0, [r3, #6]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	8912      	ldrh	r2, [r2, #8]
 80070d4:	9202      	str	r2, [sp, #8]
 80070d6:	2202      	movs	r2, #2
 80070d8:	9201      	str	r2, [sp, #4]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	4623      	mov	r3, r4
 80070de:	4602      	mov	r2, r0
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f002 fd6f 	bl	8009bc4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	7919      	ldrb	r1, [r3, #4]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	79d8      	ldrb	r0, [r3, #7]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	8952      	ldrh	r2, [r2, #10]
 80070fe:	9202      	str	r2, [sp, #8]
 8007100:	2202      	movs	r2, #2
 8007102:	9201      	str	r2, [sp, #4]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4623      	mov	r3, r4
 8007108:	4602      	mov	r2, r0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f002 fd5a 	bl	8009bc4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	791b      	ldrb	r3, [r3, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f008 f8ff 	bl	800f31c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	795b      	ldrb	r3, [r3, #5]
 8007122:	2200      	movs	r2, #0
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f008 f8f8 	bl	800f31c <USBH_LL_SetToggle>

  return USBH_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	bd90      	pop	{r4, r7, pc}

08007136 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	795b      	ldrb	r3, [r3, #5]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00e      	beq.n	800716e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	795b      	ldrb	r3, [r3, #5]
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f002 fd53 	bl	8009c02 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	795b      	ldrb	r3, [r3, #5]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f002 fd7e 	bl	8009c64 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	791b      	ldrb	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00e      	beq.n	8007194 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	791b      	ldrb	r3, [r3, #4]
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f002 fd40 	bl	8009c02 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	791b      	ldrb	r3, [r3, #4]
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f002 fd6b 	bl	8009c64 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f008 f99d 	bl	800f4e8 <free>
    phost->pActiveClass->pData = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071b4:	2200      	movs	r2, #0
 80071b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80071d4:	2301      	movs	r3, #1
 80071d6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	7b9b      	ldrb	r3, [r3, #14]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d041      	beq.n	8007264 <USBH_MSC_ClassRequest+0xa2>
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	dc4b      	bgt.n	800727c <USBH_MSC_ClassRequest+0xba>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <USBH_MSC_ClassRequest+0x2a>
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d147      	bne.n	800727c <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fcf0 	bl	8007bd6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d104      	bne.n	800720a <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2200      	movs	r2, #0
 8007204:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d137      	bne.n	8007280 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d804      	bhi.n	8007222 <USBH_MSC_ClassRequest+0x60>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	b2da      	uxtb	r2, r3
 8007220:	e000      	b.n	8007224 <USBH_MSC_ClassRequest+0x62>
 8007222:	2202      	movs	r2, #2
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007228:	2300      	movs	r3, #0
 800722a:	73bb      	strb	r3, [r7, #14]
 800722c:	e014      	b.n	8007258 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	2134      	movs	r1, #52	; 0x34
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	4413      	add	r3, r2
 800723a:	3392      	adds	r3, #146	; 0x92
 800723c:	2202      	movs	r2, #2
 800723e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	2134      	movs	r1, #52	; 0x34
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	4413      	add	r3, r2
 800724c:	33c1      	adds	r3, #193	; 0xc1
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	3301      	adds	r3, #1
 8007256:	73bb      	strb	r3, [r7, #14]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	7bba      	ldrb	r2, [r7, #14]
 800725e:	429a      	cmp	r2, r3
 8007260:	d3e5      	bcc.n	800722e <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8007262:	e00d      	b.n	8007280 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007264:	2100      	movs	r1, #0
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f002 f87b 	bl	8009362 <USBH_ClrFeature>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d108      	bne.n	8007284 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	7bda      	ldrb	r2, [r3, #15]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	739a      	strb	r2, [r3, #14]
      }
      break;
 800727a:	e003      	b.n	8007284 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800727c:	bf00      	nop
 800727e:	e002      	b.n	8007286 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007280:	bf00      	nop
 8007282:	e000      	b.n	8007286 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007284:	bf00      	nop
  }

  return status;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80072a2:	2301      	movs	r3, #1
 80072a4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80072a6:	2301      	movs	r3, #1
 80072a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80072aa:	2301      	movs	r3, #1
 80072ac:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	7b1b      	ldrb	r3, [r3, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <USBH_MSC_Process+0x2e>
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	f000 8271 	beq.w	800779e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80072bc:	e272      	b.n	80077a4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	429a      	cmp	r2, r3
 80072cc:	f080 824f 	bcs.w	800776e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072d6:	4619      	mov	r1, r3
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	2334      	movs	r3, #52	; 0x34
 80072dc:	fb01 f303 	mul.w	r3, r1, r3
 80072e0:	4413      	add	r3, r2
 80072e2:	3391      	adds	r3, #145	; 0x91
 80072e4:	2201      	movs	r2, #1
 80072e6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072ee:	4619      	mov	r1, r3
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	2334      	movs	r3, #52	; 0x34
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	4413      	add	r3, r2
 80072fa:	3390      	adds	r3, #144	; 0x90
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b08      	cmp	r3, #8
 8007300:	f200 8243 	bhi.w	800778a <USBH_MSC_Process+0x4fa>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <USBH_MSC_Process+0x7c>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007331 	.word	0x08007331
 8007310:	0800778b 	.word	0x0800778b
 8007314:	080073f9 	.word	0x080073f9
 8007318:	0800757d 	.word	0x0800757d
 800731c:	08007357 	.word	0x08007357
 8007320:	08007649 	.word	0x08007649
 8007324:	0800778b 	.word	0x0800778b
 8007328:	0800778b 	.word	0x0800778b
 800732c:	0800775d 	.word	0x0800775d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007336:	4619      	mov	r1, r3
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	2334      	movs	r3, #52	; 0x34
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	4413      	add	r3, r2
 8007342:	3390      	adds	r3, #144	; 0x90
 8007344:	2204      	movs	r2, #4
 8007346:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007354:	e222      	b.n	800779c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800735c:	b2d9      	uxtb	r1, r3
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007364:	461a      	mov	r2, r3
 8007366:	2334      	movs	r3, #52	; 0x34
 8007368:	fb02 f303 	mul.w	r3, r2, r3
 800736c:	3398      	adds	r3, #152	; 0x98
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4413      	add	r3, r2
 8007372:	3307      	adds	r3, #7
 8007374:	461a      	mov	r2, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 ff6a 	bl	8008250 <USBH_MSC_SCSI_Inquiry>
 800737c:	4603      	mov	r3, r0
 800737e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10b      	bne.n	800739e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800738c:	4619      	mov	r1, r3
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	2334      	movs	r3, #52	; 0x34
 8007392:	fb01 f303 	mul.w	r3, r1, r3
 8007396:	4413      	add	r3, r2
 8007398:	3390      	adds	r3, #144	; 0x90
 800739a:	2202      	movs	r2, #2
 800739c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d10c      	bne.n	80073be <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073aa:	4619      	mov	r1, r3
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	2334      	movs	r3, #52	; 0x34
 80073b0:	fb01 f303 	mul.w	r3, r1, r3
 80073b4:	4413      	add	r3, r2
 80073b6:	3390      	adds	r3, #144	; 0x90
 80073b8:	2205      	movs	r2, #5
 80073ba:	701a      	strb	r2, [r3, #0]
            break;
 80073bc:	e1e7      	b.n	800778e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	f040 81e4 	bne.w	800778e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073cc:	4619      	mov	r1, r3
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	2334      	movs	r3, #52	; 0x34
 80073d2:	fb01 f303 	mul.w	r3, r1, r3
 80073d6:	4413      	add	r3, r2
 80073d8:	3390      	adds	r3, #144	; 0x90
 80073da:	2201      	movs	r2, #1
 80073dc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073e4:	4619      	mov	r1, r3
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	2334      	movs	r3, #52	; 0x34
 80073ea:	fb01 f303 	mul.w	r3, r1, r3
 80073ee:	4413      	add	r3, r2
 80073f0:	3391      	adds	r3, #145	; 0x91
 80073f2:	2202      	movs	r2, #2
 80073f4:	701a      	strb	r2, [r3, #0]
            break;
 80073f6:	e1ca      	b.n	800778e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fe66 	bl	80080d4 <USBH_MSC_SCSI_TestUnitReady>
 8007408:	4603      	mov	r3, r0
 800740a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d149      	bne.n	80074a6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007418:	4619      	mov	r1, r3
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	2334      	movs	r3, #52	; 0x34
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	4413      	add	r3, r2
 8007424:	3392      	adds	r3, #146	; 0x92
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00c      	beq.n	8007446 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007432:	4619      	mov	r1, r3
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	2334      	movs	r3, #52	; 0x34
 8007438:	fb01 f303 	mul.w	r3, r1, r3
 800743c:	4413      	add	r3, r2
 800743e:	33c1      	adds	r3, #193	; 0xc1
 8007440:	2201      	movs	r2, #1
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	e00b      	b.n	800745e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800744c:	4619      	mov	r1, r3
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	2334      	movs	r3, #52	; 0x34
 8007452:	fb01 f303 	mul.w	r3, r1, r3
 8007456:	4413      	add	r3, r2
 8007458:	33c1      	adds	r3, #193	; 0xc1
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007464:	4619      	mov	r1, r3
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	2334      	movs	r3, #52	; 0x34
 800746a:	fb01 f303 	mul.w	r3, r1, r3
 800746e:	4413      	add	r3, r2
 8007470:	3390      	adds	r3, #144	; 0x90
 8007472:	2203      	movs	r2, #3
 8007474:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800747c:	4619      	mov	r1, r3
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	2334      	movs	r3, #52	; 0x34
 8007482:	fb01 f303 	mul.w	r3, r1, r3
 8007486:	4413      	add	r3, r2
 8007488:	3391      	adds	r3, #145	; 0x91
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007494:	4619      	mov	r1, r3
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	2334      	movs	r3, #52	; 0x34
 800749a:	fb01 f303 	mul.w	r3, r1, r3
 800749e:	4413      	add	r3, r2
 80074a0:	3392      	adds	r3, #146	; 0x92
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d14a      	bne.n	8007542 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074b2:	4619      	mov	r1, r3
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	2334      	movs	r3, #52	; 0x34
 80074b8:	fb01 f303 	mul.w	r3, r1, r3
 80074bc:	4413      	add	r3, r2
 80074be:	3392      	adds	r3, #146	; 0x92
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d00c      	beq.n	80074e0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074cc:	4619      	mov	r1, r3
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	2334      	movs	r3, #52	; 0x34
 80074d2:	fb01 f303 	mul.w	r3, r1, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	33c1      	adds	r3, #193	; 0xc1
 80074da:	2201      	movs	r2, #1
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	e00b      	b.n	80074f8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074e6:	4619      	mov	r1, r3
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	2334      	movs	r3, #52	; 0x34
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	4413      	add	r3, r2
 80074f2:	33c1      	adds	r3, #193	; 0xc1
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074fe:	4619      	mov	r1, r3
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	2334      	movs	r3, #52	; 0x34
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	4413      	add	r3, r2
 800750a:	3390      	adds	r3, #144	; 0x90
 800750c:	2205      	movs	r2, #5
 800750e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007516:	4619      	mov	r1, r3
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	2334      	movs	r3, #52	; 0x34
 800751c:	fb01 f303 	mul.w	r3, r1, r3
 8007520:	4413      	add	r3, r2
 8007522:	3391      	adds	r3, #145	; 0x91
 8007524:	2201      	movs	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800752e:	4619      	mov	r1, r3
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	2334      	movs	r3, #52	; 0x34
 8007534:	fb01 f303 	mul.w	r3, r1, r3
 8007538:	4413      	add	r3, r2
 800753a:	3392      	adds	r3, #146	; 0x92
 800753c:	2202      	movs	r2, #2
 800753e:	701a      	strb	r2, [r3, #0]
            break;
 8007540:	e127      	b.n	8007792 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	2b04      	cmp	r3, #4
 8007546:	f040 8124 	bne.w	8007792 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007550:	4619      	mov	r1, r3
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	2334      	movs	r3, #52	; 0x34
 8007556:	fb01 f303 	mul.w	r3, r1, r3
 800755a:	4413      	add	r3, r2
 800755c:	3390      	adds	r3, #144	; 0x90
 800755e:	2201      	movs	r2, #1
 8007560:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007568:	4619      	mov	r1, r3
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	2334      	movs	r3, #52	; 0x34
 800756e:	fb01 f303 	mul.w	r3, r1, r3
 8007572:	4413      	add	r3, r2
 8007574:	3391      	adds	r3, #145	; 0x91
 8007576:	2202      	movs	r2, #2
 8007578:	701a      	strb	r2, [r3, #0]
            break;
 800757a:	e10a      	b.n	8007792 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007582:	b2d9      	uxtb	r1, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800758a:	461a      	mov	r2, r3
 800758c:	2334      	movs	r3, #52	; 0x34
 800758e:	fb02 f303 	mul.w	r3, r2, r3
 8007592:	3390      	adds	r3, #144	; 0x90
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4413      	add	r3, r2
 8007598:	3304      	adds	r3, #4
 800759a:	461a      	mov	r2, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fddc 	bl	800815a <USBH_MSC_SCSI_ReadCapacity>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d120      	bne.n	80075ee <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075b2:	4619      	mov	r1, r3
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	2334      	movs	r3, #52	; 0x34
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	4413      	add	r3, r2
 80075be:	3390      	adds	r3, #144	; 0x90
 80075c0:	2201      	movs	r2, #1
 80075c2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075ca:	4619      	mov	r1, r3
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	2334      	movs	r3, #52	; 0x34
 80075d0:	fb01 f303 	mul.w	r3, r1, r3
 80075d4:	4413      	add	r3, r2
 80075d6:	3391      	adds	r3, #145	; 0x91
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075e2:	3301      	adds	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80075ec:	e0d3      	b.n	8007796 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d10c      	bne.n	800760e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075fa:	4619      	mov	r1, r3
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	2334      	movs	r3, #52	; 0x34
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	4413      	add	r3, r2
 8007606:	3390      	adds	r3, #144	; 0x90
 8007608:	2205      	movs	r2, #5
 800760a:	701a      	strb	r2, [r3, #0]
            break;
 800760c:	e0c3      	b.n	8007796 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	2b04      	cmp	r3, #4
 8007612:	f040 80c0 	bne.w	8007796 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800761c:	4619      	mov	r1, r3
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	2334      	movs	r3, #52	; 0x34
 8007622:	fb01 f303 	mul.w	r3, r1, r3
 8007626:	4413      	add	r3, r2
 8007628:	3390      	adds	r3, #144	; 0x90
 800762a:	2201      	movs	r2, #1
 800762c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007634:	4619      	mov	r1, r3
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	2334      	movs	r3, #52	; 0x34
 800763a:	fb01 f303 	mul.w	r3, r1, r3
 800763e:	4413      	add	r3, r2
 8007640:	3391      	adds	r3, #145	; 0x91
 8007642:	2202      	movs	r2, #2
 8007644:	701a      	strb	r2, [r3, #0]
            break;
 8007646:	e0a6      	b.n	8007796 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800764e:	b2d9      	uxtb	r1, r3
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007656:	461a      	mov	r2, r3
 8007658:	2334      	movs	r3, #52	; 0x34
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	3398      	adds	r3, #152	; 0x98
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4413      	add	r3, r2
 8007664:	3304      	adds	r3, #4
 8007666:	461a      	mov	r2, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fe96 	bl	800839a <USBH_MSC_SCSI_RequestSense>
 800766e:	4603      	mov	r3, r0
 8007670:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d145      	bne.n	8007704 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800767e:	4619      	mov	r1, r3
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	2334      	movs	r3, #52	; 0x34
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	339c      	adds	r3, #156	; 0x9c
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b06      	cmp	r3, #6
 8007690:	d00c      	beq.n	80076ac <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007698:	4619      	mov	r1, r3
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	2334      	movs	r3, #52	; 0x34
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	339c      	adds	r3, #156	; 0x9c
 80076a6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d117      	bne.n	80076dc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80076be:	4293      	cmp	r3, r2
 80076c0:	d80c      	bhi.n	80076dc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076c8:	4619      	mov	r1, r3
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	2334      	movs	r3, #52	; 0x34
 80076ce:	fb01 f303 	mul.w	r3, r1, r3
 80076d2:	4413      	add	r3, r2
 80076d4:	3390      	adds	r3, #144	; 0x90
 80076d6:	2202      	movs	r2, #2
 80076d8:	701a      	strb	r2, [r3, #0]
                  break;
 80076da:	e05f      	b.n	800779c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076e2:	4619      	mov	r1, r3
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	2334      	movs	r3, #52	; 0x34
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	3390      	adds	r3, #144	; 0x90
 80076f0:	2201      	movs	r2, #1
 80076f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076fa:	3301      	adds	r3, #1
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d10c      	bne.n	8007724 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007710:	4619      	mov	r1, r3
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	2334      	movs	r3, #52	; 0x34
 8007716:	fb01 f303 	mul.w	r3, r1, r3
 800771a:	4413      	add	r3, r2
 800771c:	3390      	adds	r3, #144	; 0x90
 800771e:	2208      	movs	r2, #8
 8007720:	701a      	strb	r2, [r3, #0]
            break;
 8007722:	e03a      	b.n	800779a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	2b04      	cmp	r3, #4
 8007728:	d137      	bne.n	800779a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007730:	4619      	mov	r1, r3
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	2334      	movs	r3, #52	; 0x34
 8007736:	fb01 f303 	mul.w	r3, r1, r3
 800773a:	4413      	add	r3, r2
 800773c:	3390      	adds	r3, #144	; 0x90
 800773e:	2201      	movs	r2, #1
 8007740:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007748:	4619      	mov	r1, r3
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	2334      	movs	r3, #52	; 0x34
 800774e:	fb01 f303 	mul.w	r3, r1, r3
 8007752:	4413      	add	r3, r2
 8007754:	3391      	adds	r3, #145	; 0x91
 8007756:	2202      	movs	r2, #2
 8007758:	701a      	strb	r2, [r3, #0]
            break;
 800775a:	e01e      	b.n	800779a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007762:	3301      	adds	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800776c:	e016      	b.n	800779c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2200      	movs	r2, #0
 8007772:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	2201      	movs	r2, #1
 800777a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007782:	2102      	movs	r1, #2
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
      break;
 8007788:	e00c      	b.n	80077a4 <USBH_MSC_Process+0x514>
            break;
 800778a:	bf00      	nop
 800778c:	e00a      	b.n	80077a4 <USBH_MSC_Process+0x514>
            break;
 800778e:	bf00      	nop
 8007790:	e008      	b.n	80077a4 <USBH_MSC_Process+0x514>
            break;
 8007792:	bf00      	nop
 8007794:	e006      	b.n	80077a4 <USBH_MSC_Process+0x514>
            break;
 8007796:	bf00      	nop
 8007798:	e004      	b.n	80077a4 <USBH_MSC_Process+0x514>
            break;
 800779a:	bf00      	nop
      break;
 800779c:	e002      	b.n	80077a4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	75fb      	strb	r3, [r7, #23]
      break;
 80077a2:	bf00      	nop
  }
  return error;
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop

080077b0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b088      	sub	sp, #32
 80077ca:	af02      	add	r7, sp, #8
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80077dc:	2301      	movs	r3, #1
 80077de:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80077e0:	2301      	movs	r3, #1
 80077e2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	2134      	movs	r1, #52	; 0x34
 80077ea:	fb01 f303 	mul.w	r3, r1, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	3390      	adds	r3, #144	; 0x90
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b07      	cmp	r3, #7
 80077f6:	d03c      	beq.n	8007872 <USBH_MSC_RdWrProcess+0xac>
 80077f8:	2b07      	cmp	r3, #7
 80077fa:	f300 80a7 	bgt.w	800794c <USBH_MSC_RdWrProcess+0x186>
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d06c      	beq.n	80078dc <USBH_MSC_RdWrProcess+0x116>
 8007802:	2b06      	cmp	r3, #6
 8007804:	f040 80a2 	bne.w	800794c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007808:	78f9      	ldrb	r1, [r7, #3]
 800780a:	2300      	movs	r3, #0
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	2300      	movs	r3, #0
 8007810:	2200      	movs	r2, #0
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fea5 	bl	8008562 <USBH_MSC_SCSI_Read>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	2134      	movs	r1, #52	; 0x34
 8007828:	fb01 f303 	mul.w	r3, r1, r3
 800782c:	4413      	add	r3, r2
 800782e:	3390      	adds	r3, #144	; 0x90
 8007830:	2201      	movs	r2, #1
 8007832:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007838:	e08a      	b.n	8007950 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d109      	bne.n	8007854 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	2134      	movs	r1, #52	; 0x34
 8007846:	fb01 f303 	mul.w	r3, r1, r3
 800784a:	4413      	add	r3, r2
 800784c:	3390      	adds	r3, #144	; 0x90
 800784e:	2205      	movs	r2, #5
 8007850:	701a      	strb	r2, [r3, #0]
      break;
 8007852:	e07d      	b.n	8007950 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b04      	cmp	r3, #4
 8007858:	d17a      	bne.n	8007950 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	2134      	movs	r1, #52	; 0x34
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	4413      	add	r3, r2
 8007866:	3390      	adds	r3, #144	; 0x90
 8007868:	2208      	movs	r2, #8
 800786a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800786c:	2302      	movs	r3, #2
 800786e:	75fb      	strb	r3, [r7, #23]
      break;
 8007870:	e06e      	b.n	8007950 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007872:	78f9      	ldrb	r1, [r7, #3]
 8007874:	2300      	movs	r3, #0
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	2300      	movs	r3, #0
 800787a:	2200      	movs	r2, #0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fe05 	bl	800848c <USBH_MSC_SCSI_Write>
 8007882:	4603      	mov	r3, r0
 8007884:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10b      	bne.n	80078a4 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	2134      	movs	r1, #52	; 0x34
 8007892:	fb01 f303 	mul.w	r3, r1, r3
 8007896:	4413      	add	r3, r2
 8007898:	3390      	adds	r3, #144	; 0x90
 800789a:	2201      	movs	r2, #1
 800789c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078a2:	e057      	b.n	8007954 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d109      	bne.n	80078be <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	2134      	movs	r1, #52	; 0x34
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	4413      	add	r3, r2
 80078b6:	3390      	adds	r3, #144	; 0x90
 80078b8:	2205      	movs	r2, #5
 80078ba:	701a      	strb	r2, [r3, #0]
      break;
 80078bc:	e04a      	b.n	8007954 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d147      	bne.n	8007954 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	2134      	movs	r1, #52	; 0x34
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	4413      	add	r3, r2
 80078d0:	3390      	adds	r3, #144	; 0x90
 80078d2:	2208      	movs	r2, #8
 80078d4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80078d6:	2302      	movs	r3, #2
 80078d8:	75fb      	strb	r3, [r7, #23]
      break;
 80078da:	e03b      	b.n	8007954 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	2234      	movs	r2, #52	; 0x34
 80078e0:	fb02 f303 	mul.w	r3, r2, r3
 80078e4:	3398      	adds	r3, #152	; 0x98
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	1d1a      	adds	r2, r3, #4
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fd52 	bl	800839a <USBH_MSC_SCSI_RequestSense>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d113      	bne.n	8007928 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	2134      	movs	r1, #52	; 0x34
 8007906:	fb01 f303 	mul.w	r3, r1, r3
 800790a:	4413      	add	r3, r2
 800790c:	3390      	adds	r3, #144	; 0x90
 800790e:	2201      	movs	r2, #1
 8007910:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	2134      	movs	r1, #52	; 0x34
 8007918:	fb01 f303 	mul.w	r3, r1, r3
 800791c:	4413      	add	r3, r2
 800791e:	3391      	adds	r3, #145	; 0x91
 8007920:	2202      	movs	r2, #2
 8007922:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8007924:	2302      	movs	r3, #2
 8007926:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	2b02      	cmp	r3, #2
 800792c:	d014      	beq.n	8007958 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	2b04      	cmp	r3, #4
 8007932:	d111      	bne.n	8007958 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	2134      	movs	r1, #52	; 0x34
 800793a:	fb01 f303 	mul.w	r3, r1, r3
 800793e:	4413      	add	r3, r2
 8007940:	3390      	adds	r3, #144	; 0x90
 8007942:	2208      	movs	r2, #8
 8007944:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007946:	2302      	movs	r3, #2
 8007948:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800794a:	e005      	b.n	8007958 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800794c:	bf00      	nop
 800794e:	e004      	b.n	800795a <USBH_MSC_RdWrProcess+0x194>
      break;
 8007950:	bf00      	nop
 8007952:	e002      	b.n	800795a <USBH_MSC_RdWrProcess+0x194>
      break;
 8007954:	bf00      	nop
 8007956:	e000      	b.n	800795a <USBH_MSC_RdWrProcess+0x194>
      break;
 8007958:	bf00      	nop

  }
  return error;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b0b      	cmp	r3, #11
 8007982:	d10c      	bne.n	800799e <USBH_MSC_UnitIsReady+0x3a>
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	2134      	movs	r1, #52	; 0x34
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	4413      	add	r3, r2
 8007990:	3391      	adds	r3, #145	; 0x91
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
 800799c:	e001      	b.n	80079a2 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	460b      	mov	r3, r1
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b0b      	cmp	r3, #11
 80079d0:	d10d      	bne.n	80079ee <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80079d2:	7afb      	ldrb	r3, [r7, #11]
 80079d4:	2234      	movs	r2, #52	; 0x34
 80079d6:	fb02 f303 	mul.w	r3, r2, r3
 80079da:	3390      	adds	r3, #144	; 0x90
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	4413      	add	r3, r2
 80079e0:	2234      	movs	r2, #52	; 0x34
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f007 fd87 	bl	800f4f8 <memcpy>
    return USBH_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	e000      	b.n	80079f0 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80079ee:	2302      	movs	r3, #2
  }
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	607a      	str	r2, [r7, #4]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	460b      	mov	r3, r1
 8007a06:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00e      	beq.n	8007a3c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007a24:	2b0b      	cmp	r3, #11
 8007a26:	d109      	bne.n	8007a3c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007a28:	7afb      	ldrb	r3, [r7, #11]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	2134      	movs	r1, #52	; 0x34
 8007a2e:	fb01 f303 	mul.w	r3, r1, r3
 8007a32:	4413      	add	r3, r2
 8007a34:	3390      	adds	r3, #144	; 0x90
 8007a36:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d001      	beq.n	8007a40 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e040      	b.n	8007ac2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2206      	movs	r2, #6
 8007a44:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007a46:	7afb      	ldrb	r3, [r7, #11]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	2134      	movs	r1, #52	; 0x34
 8007a4c:	fb01 f303 	mul.w	r3, r1, r3
 8007a50:	4413      	add	r3, r2
 8007a52:	3390      	adds	r3, #144	; 0x90
 8007a54:	2206      	movs	r2, #6
 8007a56:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007a58:	7afb      	ldrb	r3, [r7, #11]
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007a62:	7af9      	ldrb	r1, [r7, #11]
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fd78 	bl	8008562 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a78:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007a7a:	e016      	b.n	8007aaa <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad2      	subs	r2, r2, r3
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	f242 7110 	movw	r1, #10000	; 0x2710
 8007a8c:	fb01 f303 	mul.w	r3, r1, r3
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d805      	bhi.n	8007aa0 <USBH_MSC_Read+0xa8>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d104      	bne.n	8007aaa <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e00b      	b.n	8007ac2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007aaa:	7afb      	ldrb	r3, [r7, #11]
 8007aac:	4619      	mov	r1, r3
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f7ff fe89 	bl	80077c6 <USBH_MSC_RdWrProcess>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d0e0      	beq.n	8007a7c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2201      	movs	r2, #1
 8007abe:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b088      	sub	sp, #32
 8007ace:	af02      	add	r7, sp, #8
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00e      	beq.n	8007b0e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007af6:	2b0b      	cmp	r3, #11
 8007af8:	d109      	bne.n	8007b0e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007afa:	7afb      	ldrb	r3, [r7, #11]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	2134      	movs	r1, #52	; 0x34
 8007b00:	fb01 f303 	mul.w	r3, r1, r3
 8007b04:	4413      	add	r3, r2
 8007b06:	3390      	adds	r3, #144	; 0x90
 8007b08:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d001      	beq.n	8007b12 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e040      	b.n	8007b94 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2207      	movs	r2, #7
 8007b16:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007b18:	7afb      	ldrb	r3, [r7, #11]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	2134      	movs	r1, #52	; 0x34
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	4413      	add	r3, r2
 8007b24:	3390      	adds	r3, #144	; 0x90
 8007b26:	2207      	movs	r2, #7
 8007b28:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007b34:	7af9      	ldrb	r1, [r7, #11]
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 fca4 	bl	800848c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b4a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007b4c:	e016      	b.n	8007b7c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	f242 7110 	movw	r1, #10000	; 0x2710
 8007b5e:	fb01 f303 	mul.w	r3, r1, r3
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d805      	bhi.n	8007b72 <USBH_MSC_Write+0xa8>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2201      	movs	r2, #1
 8007b76:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e00b      	b.n	8007b94 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007b7c:	7afb      	ldrb	r3, [r7, #11]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff fe20 	bl	80077c6 <USBH_MSC_RdWrProcess>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d0e0      	beq.n	8007b4e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2221      	movs	r2, #33	; 0x21
 8007ba8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	22ff      	movs	r2, #255	; 0xff
 8007bae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 fdab 	bl	8009722 <USBH_CtlReq>
 8007bcc:	4603      	mov	r3, r0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	22a1      	movs	r2, #161	; 0xa1
 8007be4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	22fe      	movs	r2, #254	; 0xfe
 8007bea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007bfe:	2201      	movs	r2, #1
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f001 fd8d 	bl	8009722 <USBH_CtlReq>
 8007c08:	4603      	mov	r3, r0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <USBH_MSC_BOT_Init+0x3c>)
 8007c2a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a09      	ldr	r2, [pc, #36]	; (8007c54 <USBH_MSC_BOT_Init+0x40>)
 8007c30:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	43425355 	.word	0x43425355
 8007c54:	20304050 	.word	0x20304050

08007c58 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007c64:	2301      	movs	r3, #1
 8007c66:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	2b0a      	cmp	r3, #10
 8007c8c:	f200 819e 	bhi.w	8007fcc <USBH_MSC_BOT_Process+0x374>
 8007c90:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <USBH_MSC_BOT_Process+0x40>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007cc5 	.word	0x08007cc5
 8007c9c:	08007ced 	.word	0x08007ced
 8007ca0:	08007d57 	.word	0x08007d57
 8007ca4:	08007d75 	.word	0x08007d75
 8007ca8:	08007df9 	.word	0x08007df9
 8007cac:	08007e1b 	.word	0x08007e1b
 8007cb0:	08007eb3 	.word	0x08007eb3
 8007cb4:	08007ecf 	.word	0x08007ecf
 8007cb8:	08007f21 	.word	0x08007f21
 8007cbc:	08007f51 	.word	0x08007f51
 8007cc0:	08007fb3 	.word	0x08007fb3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	795b      	ldrb	r3, [r3, #5]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	9200      	str	r2, [sp, #0]
 8007ce2:	221f      	movs	r2, #31
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 ff2a 	bl	8009b3e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007cea:	e17e      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	795b      	ldrb	r3, [r3, #5]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f007 fae8 	bl	800f2c8 <USBH_LL_GetURBState>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007cfc:	7d3b      	ldrb	r3, [r7, #20]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d118      	bne.n	8007d34 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00f      	beq.n	8007d2a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007d10:	b25b      	sxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da04      	bge.n	8007d20 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2203      	movs	r2, #3
 8007d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d1e:	e157      	b.n	8007fd0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	2205      	movs	r2, #5
 8007d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d28:	e152      	b.n	8007fd0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	2207      	movs	r2, #7
 8007d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d32:	e14d      	b.n	8007fd0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d34:	7d3b      	ldrb	r3, [r7, #20]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d104      	bne.n	8007d44 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d42:	e145      	b.n	8007fd0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8007d44:	7d3b      	ldrb	r3, [r7, #20]
 8007d46:	2b05      	cmp	r3, #5
 8007d48:	f040 8142 	bne.w	8007fd0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	220a      	movs	r2, #10
 8007d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d54:	e13c      	b.n	8007fd0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	895a      	ldrh	r2, [r3, #10]
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	791b      	ldrb	r3, [r3, #4]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 ff0f 	bl	8009b88 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8007d72:	e13a      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	791b      	ldrb	r3, [r3, #4]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f007 faa4 	bl	800f2c8 <USBH_LL_GetURBState>
 8007d80:	4603      	mov	r3, r0
 8007d82:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007d84:	7d3b      	ldrb	r3, [r7, #20]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d12d      	bne.n	8007de6 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	8952      	ldrh	r2, [r2, #10]
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d910      	bls.n	8007db8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	8952      	ldrh	r2, [r2, #10]
 8007da0:	441a      	add	r2, r3
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	8952      	ldrh	r2, [r2, #10]
 8007db0:	1a9a      	subs	r2, r3, r2
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007db6:	e002      	b.n	8007dbe <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	895a      	ldrh	r2, [r3, #10]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	791b      	ldrb	r3, [r3, #4]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fed7 	bl	8009b88 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007dda:	e0fb      	b.n	8007fd4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	2207      	movs	r2, #7
 8007de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007de4:	e0f6      	b.n	8007fd4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8007de6:	7d3b      	ldrb	r3, [r7, #20]
 8007de8:	2b05      	cmp	r3, #5
 8007dea:	f040 80f3 	bne.w	8007fd4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2209      	movs	r2, #9
 8007df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007df6:	e0ed      	b.n	8007fd4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	891a      	ldrh	r2, [r3, #8]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	795b      	ldrb	r3, [r3, #5]
 8007e06:	2001      	movs	r0, #1
 8007e08:	9000      	str	r0, [sp, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 fe97 	bl	8009b3e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	2206      	movs	r2, #6
 8007e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e18:	e0e7      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	795b      	ldrb	r3, [r3, #5]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f007 fa51 	bl	800f2c8 <USBH_LL_GetURBState>
 8007e26:	4603      	mov	r3, r0
 8007e28:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007e2a:	7d3b      	ldrb	r3, [r7, #20]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d12f      	bne.n	8007e90 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	8912      	ldrh	r2, [r2, #8]
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d910      	bls.n	8007e5e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	8912      	ldrh	r2, [r2, #8]
 8007e46:	441a      	add	r2, r3
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	8912      	ldrh	r2, [r2, #8]
 8007e56:	1a9a      	subs	r2, r3, r2
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e5c:	e002      	b.n	8007e64 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2200      	movs	r2, #0
 8007e62:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00c      	beq.n	8007e86 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	891a      	ldrh	r2, [r3, #8]
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	795b      	ldrb	r3, [r3, #5]
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	9000      	str	r0, [sp, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 fe5d 	bl	8009b3e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007e84:	e0a8      	b.n	8007fd8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	2207      	movs	r2, #7
 8007e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e8e:	e0a3      	b.n	8007fd8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e90:	7d3b      	ldrb	r3, [r7, #20]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d104      	bne.n	8007ea0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	2205      	movs	r2, #5
 8007e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e9e:	e09b      	b.n	8007fd8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8007ea0:	7d3b      	ldrb	r3, [r7, #20]
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	f040 8098 	bne.w	8007fd8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	220a      	movs	r2, #10
 8007eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007eb0:	e092      	b.n	8007fd8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	791b      	ldrb	r3, [r3, #4]
 8007ebc:	220d      	movs	r2, #13
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f001 fe62 	bl	8009b88 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	2208      	movs	r2, #8
 8007ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ecc:	e08d      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	791b      	ldrb	r3, [r3, #4]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f007 f9f7 	bl	800f2c8 <USBH_LL_GetURBState>
 8007eda:	4603      	mov	r3, r0
 8007edc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007ede:	7d3b      	ldrb	r3, [r7, #20]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d115      	bne.n	8007f10 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f8a9 	bl	800804c <USBH_MSC_DecodeCSW>
 8007efa:	4603      	mov	r3, r0
 8007efc:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007efe:	7d7b      	ldrb	r3, [r7, #21]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d102      	bne.n	8007f0a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007f08:	e068      	b.n	8007fdc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0e:	e065      	b.n	8007fdc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8007f10:	7d3b      	ldrb	r3, [r7, #20]
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d162      	bne.n	8007fdc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2209      	movs	r2, #9
 8007f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f1e:	e05d      	b.n	8007fdc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	2200      	movs	r2, #0
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f864 	bl	8007ff4 <USBH_MSC_BOT_Abort>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007f30:	7dbb      	ldrb	r3, [r7, #22]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2207      	movs	r2, #7
 8007f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007f3e:	e04f      	b.n	8007fe0 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007f40:	7dbb      	ldrb	r3, [r7, #22]
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d14c      	bne.n	8007fe0 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	220b      	movs	r2, #11
 8007f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f4e:	e047      	b.n	8007fe0 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	2201      	movs	r2, #1
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f84c 	bl	8007ff4 <USBH_MSC_BOT_Abort>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007f60:	7dbb      	ldrb	r3, [r7, #22]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d11d      	bne.n	8007fa2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	795b      	ldrb	r3, [r3, #5]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f007 fa05 	bl	800f37c <USBH_LL_GetToggle>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	7959      	ldrb	r1, [r3, #5]
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	f1c3 0301 	rsb	r3, r3, #1
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	461a      	mov	r2, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f007 f9c9 	bl	800f31c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	791b      	ldrb	r3, [r3, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f007 f9c2 	bl	800f31c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2209      	movs	r2, #9
 8007f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007fa0:	e020      	b.n	8007fe4 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8007fa2:	7dbb      	ldrb	r3, [r7, #22]
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d11d      	bne.n	8007fe4 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	220b      	movs	r2, #11
 8007fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007fb0:	e018      	b.n	8007fe4 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff fdf2 	bl	8007b9c <USBH_MSC_BOT_REQ_Reset>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d112      	bne.n	8007fe8 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8007fca:	e00d      	b.n	8007fe8 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8007fcc:	bf00      	nop
 8007fce:	e00c      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e00a      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>
      break;
 8007fd4:	bf00      	nop
 8007fd6:	e008      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>
      break;
 8007fd8:	bf00      	nop
 8007fda:	e006      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>
      break;
 8007fdc:	bf00      	nop
 8007fde:	e004      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>
      break;
 8007fe0:	bf00      	nop
 8007fe2:	e002      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>
      break;
 8007fe4:	bf00      	nop
 8007fe6:	e000      	b.n	8007fea <USBH_MSC_BOT_Process+0x392>
      break;
 8007fe8:	bf00      	nop
  }
  return status;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
 8008000:	4613      	mov	r3, r2
 8008002:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008004:	2302      	movs	r3, #2
 8008006:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008012:	78bb      	ldrb	r3, [r7, #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <USBH_MSC_BOT_Abort+0x2a>
 8008018:	2b01      	cmp	r3, #1
 800801a:	d009      	beq.n	8008030 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800801c:	e011      	b.n	8008042 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	79db      	ldrb	r3, [r3, #7]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 f99c 	bl	8009362 <USBH_ClrFeature>
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]
      break;
 800802e:	e008      	b.n	8008042 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	799b      	ldrb	r3, [r3, #6]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 f993 	bl	8009362 <USBH_ClrFeature>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]
      break;
 8008040:	bf00      	nop
  }
  return status;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800805e:	2301      	movs	r3, #1
 8008060:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	791b      	ldrb	r3, [r3, #4]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f007 f89b 	bl	800f1a4 <USBH_LL_GetLastXferSize>
 800806e:	4603      	mov	r3, r0
 8008070:	2b0d      	cmp	r3, #13
 8008072:	d002      	beq.n	800807a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008074:	2302      	movs	r3, #2
 8008076:	73fb      	strb	r3, [r7, #15]
 8008078:	e024      	b.n	80080c4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800807e:	4a14      	ldr	r2, [pc, #80]	; (80080d0 <USBH_MSC_DecodeCSW+0x84>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d11d      	bne.n	80080c0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800808c:	429a      	cmp	r2, r3
 800808e:	d119      	bne.n	80080c4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
 800809e:	e011      	b.n	80080c4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d102      	bne.n	80080b0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
 80080ae:	e009      	b.n	80080c4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d104      	bne.n	80080c4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80080ba:	2302      	movs	r3, #2
 80080bc:	73fb      	strb	r3, [r7, #15]
 80080be:	e001      	b.n	80080c4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80080c0:	2302      	movs	r3, #2
 80080c2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	53425355 	.word	0x53425355

080080d4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80080e0:	2302      	movs	r3, #2
 80080e2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d002      	beq.n	80080fe <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d021      	beq.n	8008140 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80080fc:	e028      	b.n	8008150 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2200      	movs	r2, #0
 8008102:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	220a      	movs	r2, #10
 8008110:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	3363      	adds	r3, #99	; 0x63
 8008118:	2210      	movs	r2, #16
 800811a:	2100      	movs	r1, #0
 800811c:	4618      	mov	r0, r3
 800811e:	f007 f9f9 	bl	800f514 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800813a:	2301      	movs	r3, #1
 800813c:	73fb      	strb	r3, [r7, #15]
      break;
 800813e:	e007      	b.n	8008150 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fd87 	bl	8007c58 <USBH_MSC_BOT_Process>
 800814a:	4603      	mov	r3, r0
 800814c:	73fb      	strb	r3, [r7, #15]
      break;
 800814e:	bf00      	nop
  }

  return error;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b086      	sub	sp, #24
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	460b      	mov	r3, r1
 8008164:	607a      	str	r2, [r7, #4]
 8008166:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800817c:	2b01      	cmp	r3, #1
 800817e:	d002      	beq.n	8008186 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008180:	2b02      	cmp	r3, #2
 8008182:	d027      	beq.n	80081d4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008184:	e05f      	b.n	8008246 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	2208      	movs	r2, #8
 800818a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	2280      	movs	r2, #128	; 0x80
 8008190:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	220a      	movs	r2, #10
 8008198:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	3363      	adds	r3, #99	; 0x63
 80081a0:	2210      	movs	r2, #16
 80081a2:	2100      	movs	r1, #0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f007 f9b5 	bl	800f514 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	2225      	movs	r2, #37	; 0x25
 80081ae:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	2202      	movs	r2, #2
 80081be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f103 0210 	add.w	r2, r3, #16
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80081ce:	2301      	movs	r3, #1
 80081d0:	75fb      	strb	r3, [r7, #23]
      break;
 80081d2:	e038      	b.n	8008246 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80081d4:	7afb      	ldrb	r3, [r7, #11]
 80081d6:	4619      	mov	r1, r3
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7ff fd3d 	bl	8007c58 <USBH_MSC_BOT_Process>
 80081de:	4603      	mov	r3, r0
 80081e0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d12d      	bne.n	8008244 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ee:	3303      	adds	r3, #3
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081fa:	3302      	adds	r3, #2
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008208:	3301      	adds	r3, #1
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800820e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	061b      	lsls	r3, r3, #24
 800821a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008226:	3307      	adds	r3, #7
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b29a      	uxth	r2, r3
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008232:	3306      	adds	r3, #6
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	021b      	lsls	r3, r3, #8
 800823a:	b29b      	uxth	r3, r3
 800823c:	4313      	orrs	r3, r2
 800823e:	b29a      	uxth	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	809a      	strh	r2, [r3, #4]
      break;
 8008244:	bf00      	nop
  }

  return error;
 8008246:	7dfb      	ldrb	r3, [r7, #23]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	460b      	mov	r3, r1
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800825e:	2302      	movs	r3, #2
 8008260:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008272:	2b01      	cmp	r3, #1
 8008274:	d002      	beq.n	800827c <USBH_MSC_SCSI_Inquiry+0x2c>
 8008276:	2b02      	cmp	r3, #2
 8008278:	d03d      	beq.n	80082f6 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800827a:	e089      	b.n	8008390 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	2224      	movs	r2, #36	; 0x24
 8008280:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2280      	movs	r2, #128	; 0x80
 8008286:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	220a      	movs	r2, #10
 800828e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	3363      	adds	r3, #99	; 0x63
 8008296:	220a      	movs	r2, #10
 8008298:	2100      	movs	r1, #0
 800829a:	4618      	mov	r0, r3
 800829c:	f007 f93a 	bl	800f514 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2212      	movs	r2, #18
 80082a4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	015b      	lsls	r3, r3, #5
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	2224      	movs	r2, #36	; 0x24
 80082c8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	2202      	movs	r2, #2
 80082e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f103 0210 	add.w	r2, r3, #16
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80082f0:	2301      	movs	r3, #1
 80082f2:	75fb      	strb	r3, [r7, #23]
      break;
 80082f4:	e04c      	b.n	8008390 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	4619      	mov	r1, r3
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff fcac 	bl	8007c58 <USBH_MSC_BOT_Process>
 8008300:	4603      	mov	r3, r0
 8008302:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d141      	bne.n	800838e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800830a:	2222      	movs	r2, #34	; 0x22
 800830c:	2100      	movs	r1, #0
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f007 f900 	bl	800f514 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	f003 031f 	and.w	r3, r3, #31
 8008320:	b2da      	uxtb	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	095b      	lsrs	r3, r3, #5
 8008330:	b2da      	uxtb	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800833c:	3301      	adds	r3, #1
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	b25b      	sxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	da03      	bge.n	800834e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	709a      	strb	r2, [r3, #2]
 800834c:	e002      	b.n	8008354 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	1cd8      	adds	r0, r3, #3
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800835e:	3308      	adds	r3, #8
 8008360:	2208      	movs	r2, #8
 8008362:	4619      	mov	r1, r3
 8008364:	f007 f8c8 	bl	800f4f8 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f103 000c 	add.w	r0, r3, #12
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008374:	3310      	adds	r3, #16
 8008376:	2210      	movs	r2, #16
 8008378:	4619      	mov	r1, r3
 800837a:	f007 f8bd 	bl	800f4f8 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	331d      	adds	r3, #29
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008388:	3220      	adds	r2, #32
 800838a:	6812      	ldr	r2, [r2, #0]
 800838c:	601a      	str	r2, [r3, #0]
      break;
 800838e:	bf00      	nop
  }

  return error;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b086      	sub	sp, #24
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	460b      	mov	r3, r1
 80083a4:	607a      	str	r2, [r7, #4]
 80083a6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80083a8:	2302      	movs	r3, #2
 80083aa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d002      	beq.n	80083c6 <USBH_MSC_SCSI_RequestSense+0x2c>
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d03d      	beq.n	8008440 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80083c4:	e05d      	b.n	8008482 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	220e      	movs	r2, #14
 80083ca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	2280      	movs	r2, #128	; 0x80
 80083d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	220a      	movs	r2, #10
 80083d8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	3363      	adds	r3, #99	; 0x63
 80083e0:	2210      	movs	r2, #16
 80083e2:	2100      	movs	r1, #0
 80083e4:	4618      	mov	r0, r3
 80083e6:	f007 f895 	bl	800f514 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2203      	movs	r2, #3
 80083ee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	015b      	lsls	r3, r3, #5
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	220e      	movs	r2, #14
 8008412:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	2202      	movs	r2, #2
 800842a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f103 0210 	add.w	r2, r3, #16
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800843a:	2301      	movs	r3, #1
 800843c:	75fb      	strb	r3, [r7, #23]
      break;
 800843e:	e020      	b.n	8008482 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008440:	7afb      	ldrb	r3, [r7, #11]
 8008442:	4619      	mov	r1, r3
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f7ff fc07 	bl	8007c58 <USBH_MSC_BOT_Process>
 800844a:	4603      	mov	r3, r0
 800844c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800844e:	7dfb      	ldrb	r3, [r7, #23]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d115      	bne.n	8008480 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800845a:	3302      	adds	r3, #2
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	b2da      	uxtb	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800846e:	7b1a      	ldrb	r2, [r3, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800847a:	7b5a      	ldrb	r2, [r3, #13]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	709a      	strb	r2, [r3, #2]
      break;
 8008480:	bf00      	nop
  }

  return error;
 8008482:	7dfb      	ldrb	r3, [r7, #23]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	607a      	str	r2, [r7, #4]
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	460b      	mov	r3, r1
 800849a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800849c:	2302      	movs	r3, #2
 800849e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d002      	beq.n	80084ba <USBH_MSC_SCSI_Write+0x2e>
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d047      	beq.n	8008548 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80084b8:	e04e      	b.n	8008558 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80084c0:	461a      	mov	r2, r3
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	fb03 f202 	mul.w	r2, r3, r2
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	220a      	movs	r2, #10
 80084d8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	3363      	adds	r3, #99	; 0x63
 80084e0:	2210      	movs	r2, #16
 80084e2:	2100      	movs	r1, #0
 80084e4:	4618      	mov	r0, r3
 80084e6:	f007 f815 	bl	800f514 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	222a      	movs	r2, #42	; 0x2a
 80084ee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80084f2:	79fa      	ldrb	r2, [r7, #7]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80084fa:	79ba      	ldrb	r2, [r7, #6]
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008502:	797a      	ldrb	r2, [r7, #5]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800850a:	1d3b      	adds	r3, r7, #4
 800850c:	781a      	ldrb	r2, [r3, #0]
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008514:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800851e:	f107 0320 	add.w	r3, r7, #32
 8008522:	781a      	ldrb	r2, [r3, #0]
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2202      	movs	r2, #2
 8008536:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]
      break;
 8008546:	e007      	b.n	8008558 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008548:	7afb      	ldrb	r3, [r7, #11]
 800854a:	4619      	mov	r1, r3
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f7ff fb83 	bl	8007c58 <USBH_MSC_BOT_Process>
 8008552:	4603      	mov	r3, r0
 8008554:	75fb      	strb	r3, [r7, #23]
      break;
 8008556:	bf00      	nop
  }

  return error;
 8008558:	7dfb      	ldrb	r3, [r7, #23]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b086      	sub	sp, #24
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]
 800856e:	460b      	mov	r3, r1
 8008570:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008572:	2302      	movs	r3, #2
 8008574:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008586:	2b01      	cmp	r3, #1
 8008588:	d002      	beq.n	8008590 <USBH_MSC_SCSI_Read+0x2e>
 800858a:	2b02      	cmp	r3, #2
 800858c:	d047      	beq.n	800861e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800858e:	e04e      	b.n	800862e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008596:	461a      	mov	r2, r3
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	fb03 f202 	mul.w	r2, r3, r2
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2280      	movs	r2, #128	; 0x80
 80085a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	220a      	movs	r2, #10
 80085ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	3363      	adds	r3, #99	; 0x63
 80085b6:	2210      	movs	r2, #16
 80085b8:	2100      	movs	r1, #0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f006 ffaa 	bl	800f514 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2228      	movs	r2, #40	; 0x28
 80085c4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80085c8:	79fa      	ldrb	r2, [r7, #7]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80085d0:	79ba      	ldrb	r2, [r7, #6]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80085d8:	797a      	ldrb	r2, [r7, #5]
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80085e0:	1d3b      	adds	r3, r7, #4
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80085ea:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80085f4:	f107 0320 	add.w	r3, r7, #32
 80085f8:	781a      	ldrb	r2, [r3, #0]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008618:	2301      	movs	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
      break;
 800861c:	e007      	b.n	800862e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	4619      	mov	r1, r3
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f7ff fb18 	bl	8007c58 <USBH_MSC_BOT_Process>
 8008628:	4603      	mov	r3, r0
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	bf00      	nop
  }

  return error;
 800862e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800864c:	2302      	movs	r3, #2
 800864e:	e029      	b.n	80086a4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	79fa      	ldrb	r2, [r7, #7]
 8008654:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f81f 	bl	80086ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d003      	beq.n	800869c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f006 fccd 	bl	800f03c <USBH_LL_Init>

  return USBH_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	e009      	b.n	80086d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	33e0      	adds	r3, #224	; 0xe0
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	2200      	movs	r2, #0
 80086ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b0e      	cmp	r3, #14
 80086d6:	d9f2      	bls.n	80086be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	e009      	b.n	80086f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086e8:	2200      	movs	r2, #0
 80086ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3301      	adds	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f8:	d3f1      	bcc.n	80086de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2240      	movs	r2, #64	; 0x40
 800871e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d016      	beq.n	8008796 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10e      	bne.n	8008790 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008778:	1c59      	adds	r1, r3, #1
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	33de      	adds	r3, #222	; 0xde
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
 800878e:	e004      	b.n	800879a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008790:	2302      	movs	r3, #2
 8008792:	73fb      	strb	r3, [r7, #15]
 8008794:	e001      	b.n	800879a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008796:	2302      	movs	r3, #2
 8008798:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800879a:	7bfb      	ldrb	r3, [r7, #15]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d204      	bcs.n	80087ce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	78fa      	ldrb	r2, [r7, #3]
 80087c8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80087cc:	e001      	b.n	80087d2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80087ce:	2302      	movs	r3, #2
 80087d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	4608      	mov	r0, r1
 80087ea:	4611      	mov	r1, r2
 80087ec:	461a      	mov	r2, r3
 80087ee:	4603      	mov	r3, r0
 80087f0:	70fb      	strb	r3, [r7, #3]
 80087f2:	460b      	mov	r3, r1
 80087f4:	70bb      	strb	r3, [r7, #2]
 80087f6:	4613      	mov	r3, r2
 80087f8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80087fe:	2300      	movs	r3, #0
 8008800:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008808:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800880a:	e025      	b.n	8008858 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	221a      	movs	r2, #26
 8008810:	fb02 f303 	mul.w	r3, r2, r3
 8008814:	3308      	adds	r3, #8
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	4413      	add	r3, r2
 800881a:	3302      	adds	r3, #2
 800881c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	795b      	ldrb	r3, [r3, #5]
 8008822:	78fa      	ldrb	r2, [r7, #3]
 8008824:	429a      	cmp	r2, r3
 8008826:	d002      	beq.n	800882e <USBH_FindInterface+0x4e>
 8008828:	78fb      	ldrb	r3, [r7, #3]
 800882a:	2bff      	cmp	r3, #255	; 0xff
 800882c:	d111      	bne.n	8008852 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008832:	78ba      	ldrb	r2, [r7, #2]
 8008834:	429a      	cmp	r2, r3
 8008836:	d002      	beq.n	800883e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008838:	78bb      	ldrb	r3, [r7, #2]
 800883a:	2bff      	cmp	r3, #255	; 0xff
 800883c:	d109      	bne.n	8008852 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008842:	787a      	ldrb	r2, [r7, #1]
 8008844:	429a      	cmp	r2, r3
 8008846:	d002      	beq.n	800884e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008848:	787b      	ldrb	r3, [r7, #1]
 800884a:	2bff      	cmp	r3, #255	; 0xff
 800884c:	d101      	bne.n	8008852 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	e006      	b.n	8008860 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	3301      	adds	r3, #1
 8008856:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d9d6      	bls.n	800880c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800885e:	23ff      	movs	r3, #255	; 0xff
}
 8008860:	4618      	mov	r0, r3
 8008862:	371c      	adds	r7, #28
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f006 fc1d 	bl	800f0b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800887a:	2101      	movs	r1, #1
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f006 fd36 	bl	800f2ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af04      	add	r7, sp, #16
 8008892:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008894:	2302      	movs	r3, #2
 8008896:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d102      	bne.n	80088ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2203      	movs	r2, #3
 80088ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b0b      	cmp	r3, #11
 80088b6:	f200 81b3 	bhi.w	8008c20 <USBH_Process+0x394>
 80088ba:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <USBH_Process+0x34>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	080088f1 	.word	0x080088f1
 80088c4:	08008923 	.word	0x08008923
 80088c8:	0800898b 	.word	0x0800898b
 80088cc:	08008bbb 	.word	0x08008bbb
 80088d0:	08008c21 	.word	0x08008c21
 80088d4:	08008a2f 	.word	0x08008a2f
 80088d8:	08008b61 	.word	0x08008b61
 80088dc:	08008a65 	.word	0x08008a65
 80088e0:	08008a85 	.word	0x08008a85
 80088e4:	08008aa5 	.word	0x08008aa5
 80088e8:	08008ad3 	.word	0x08008ad3
 80088ec:	08008ba3 	.word	0x08008ba3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8193 	beq.w	8008c24 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008904:	20c8      	movs	r0, #200	; 0xc8
 8008906:	f006 fd69 	bl	800f3dc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f006 fc2f 	bl	800f16e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008920:	e180      	b.n	8008c24 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008928:	2b01      	cmp	r3, #1
 800892a:	d107      	bne.n	800893c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800893a:	e182      	b.n	8008c42 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008946:	d914      	bls.n	8008972 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800894e:	3301      	adds	r3, #1
 8008950:	b2da      	uxtb	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800895e:	2b03      	cmp	r3, #3
 8008960:	d903      	bls.n	800896a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	220d      	movs	r2, #13
 8008966:	701a      	strb	r2, [r3, #0]
      break;
 8008968:	e16b      	b.n	8008c42 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	701a      	strb	r2, [r3, #0]
      break;
 8008970:	e167      	b.n	8008c42 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008978:	f103 020a 	add.w	r2, r3, #10
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008982:	200a      	movs	r0, #10
 8008984:	f006 fd2a 	bl	800f3dc <USBH_Delay>
      break;
 8008988:	e15b      	b.n	8008c42 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800899a:	2104      	movs	r1, #4
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80089a0:	2064      	movs	r0, #100	; 0x64
 80089a2:	f006 fd1b 	bl	800f3dc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f006 fbba 	bl	800f120 <USBH_LL_GetSpeed>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2205      	movs	r2, #5
 80089ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80089bc:	2100      	movs	r1, #0
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 f92f 	bl	8009c22 <USBH_AllocPipe>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80089cc:	2180      	movs	r1, #128	; 0x80
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 f927 	bl	8009c22 <USBH_AllocPipe>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	7919      	ldrb	r1, [r3, #4]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80089f0:	b292      	uxth	r2, r2
 80089f2:	9202      	str	r2, [sp, #8]
 80089f4:	2200      	movs	r2, #0
 80089f6:	9201      	str	r2, [sp, #4]
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	4603      	mov	r3, r0
 80089fc:	2280      	movs	r2, #128	; 0x80
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f001 f8e0 	bl	8009bc4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	7959      	ldrb	r1, [r3, #5]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a18:	b292      	uxth	r2, r2
 8008a1a:	9202      	str	r2, [sp, #8]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	9201      	str	r2, [sp, #4]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	4603      	mov	r3, r0
 8008a24:	2200      	movs	r2, #0
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 f8cc 	bl	8009bc4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008a2c:	e109      	b.n	8008c42 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f90c 	bl	8008c4c <USBH_HandleEnum>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f040 80f3 	bne.w	8008c28 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d103      	bne.n	8008a5c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2208      	movs	r2, #8
 8008a58:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008a5a:	e0e5      	b.n	8008c28 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2207      	movs	r2, #7
 8008a60:	701a      	strb	r2, [r3, #0]
      break;
 8008a62:	e0e1      	b.n	8008c28 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80de 	beq.w	8008c2c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a76:	2101      	movs	r1, #1
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2208      	movs	r2, #8
 8008a80:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008a82:	e0d3      	b.n	8008c2c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fc20 	bl	80092d4 <USBH_SetCfg>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f040 80ca 	bne.w	8008c30 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2209      	movs	r2, #9
 8008aa0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008aa2:	e0c5      	b.n	8008c30 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00b      	beq.n	8008aca <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fc30 	bl	800931a <USBH_SetFeature>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f040 80b9 	bne.w	8008c34 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	220a      	movs	r2, #10
 8008ac6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ac8:	e0b4      	b.n	8008c34 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	220a      	movs	r2, #10
 8008ace:	701a      	strb	r2, [r3, #0]
      break;
 8008ad0:	e0b0      	b.n	8008c34 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 80ad 	beq.w	8008c38 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]
 8008aea:	e016      	b.n	8008b1a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008aec:	7bfa      	ldrb	r2, [r7, #15]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	32de      	adds	r2, #222	; 0xde
 8008af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af6:	791a      	ldrb	r2, [r3, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d108      	bne.n	8008b14 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008b02:	7bfa      	ldrb	r2, [r7, #15]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	32de      	adds	r2, #222	; 0xde
 8008b08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008b12:	e005      	b.n	8008b20 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	3301      	adds	r3, #1
 8008b18:	73fb      	strb	r3, [r7, #15]
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0e5      	beq.n	8008aec <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d016      	beq.n	8008b58 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	4798      	blx	r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d109      	bne.n	8008b50 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2206      	movs	r2, #6
 8008b40:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b48:	2103      	movs	r1, #3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b4e:	e073      	b.n	8008c38 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	220d      	movs	r2, #13
 8008b54:	701a      	strb	r2, [r3, #0]
      break;
 8008b56:	e06f      	b.n	8008c38 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	220d      	movs	r2, #13
 8008b5c:	701a      	strb	r2, [r3, #0]
      break;
 8008b5e:	e06b      	b.n	8008c38 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d017      	beq.n	8008b9a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	4798      	blx	r3
 8008b76:	4603      	mov	r3, r0
 8008b78:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d103      	bne.n	8008b8a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	220b      	movs	r2, #11
 8008b86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b88:	e058      	b.n	8008c3c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d154      	bne.n	8008c3c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	220d      	movs	r2, #13
 8008b96:	701a      	strb	r2, [r3, #0]
      break;
 8008b98:	e050      	b.n	8008c3c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	220d      	movs	r2, #13
 8008b9e:	701a      	strb	r2, [r3, #0]
      break;
 8008ba0:	e04c      	b.n	8008c3c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d049      	beq.n	8008c40 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	4798      	blx	r3
      }
      break;
 8008bb8:	e042      	b.n	8008c40 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7ff fd72 	bl	80086ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d009      	beq.n	8008be6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d005      	beq.n	8008bfc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bf6:	2105      	movs	r1, #5
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d107      	bne.n	8008c18 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff fe2b 	bl	800886c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c16:	e014      	b.n	8008c42 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f006 fa4b 	bl	800f0b4 <USBH_LL_Start>
      break;
 8008c1e:	e010      	b.n	8008c42 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008c20:	bf00      	nop
 8008c22:	e00e      	b.n	8008c42 <USBH_Process+0x3b6>
      break;
 8008c24:	bf00      	nop
 8008c26:	e00c      	b.n	8008c42 <USBH_Process+0x3b6>
      break;
 8008c28:	bf00      	nop
 8008c2a:	e00a      	b.n	8008c42 <USBH_Process+0x3b6>
    break;
 8008c2c:	bf00      	nop
 8008c2e:	e008      	b.n	8008c42 <USBH_Process+0x3b6>
      break;
 8008c30:	bf00      	nop
 8008c32:	e006      	b.n	8008c42 <USBH_Process+0x3b6>
      break;
 8008c34:	bf00      	nop
 8008c36:	e004      	b.n	8008c42 <USBH_Process+0x3b6>
      break;
 8008c38:	bf00      	nop
 8008c3a:	e002      	b.n	8008c42 <USBH_Process+0x3b6>
      break;
 8008c3c:	bf00      	nop
 8008c3e:	e000      	b.n	8008c42 <USBH_Process+0x3b6>
      break;
 8008c40:	bf00      	nop
  }
  return USBH_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af04      	add	r7, sp, #16
 8008c52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008c54:	2301      	movs	r3, #1
 8008c56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	785b      	ldrb	r3, [r3, #1]
 8008c60:	2b07      	cmp	r3, #7
 8008c62:	f200 81c1 	bhi.w	8008fe8 <USBH_HandleEnum+0x39c>
 8008c66:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <USBH_HandleEnum+0x20>)
 8008c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6c:	08008c8d 	.word	0x08008c8d
 8008c70:	08008d4b 	.word	0x08008d4b
 8008c74:	08008db5 	.word	0x08008db5
 8008c78:	08008e43 	.word	0x08008e43
 8008c7c:	08008ead 	.word	0x08008ead
 8008c80:	08008f1d 	.word	0x08008f1d
 8008c84:	08008f63 	.word	0x08008f63
 8008c88:	08008fa9 	.word	0x08008fa9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008c8c:	2108      	movs	r1, #8
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fa50 	bl	8009134 <USBH_Get_DevDesc>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d130      	bne.n	8008d00 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	7919      	ldrb	r1, [r3, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008cc2:	b292      	uxth	r2, r2
 8008cc4:	9202      	str	r2, [sp, #8]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	9201      	str	r2, [sp, #4]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2280      	movs	r2, #128	; 0x80
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 ff77 	bl	8009bc4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	7959      	ldrb	r1, [r3, #5]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008cea:	b292      	uxth	r2, r2
 8008cec:	9202      	str	r2, [sp, #8]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	9201      	str	r2, [sp, #4]
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 ff63 	bl	8009bc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008cfe:	e175      	b.n	8008fec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	f040 8172 	bne.w	8008fec <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d0e:	3301      	adds	r3, #1
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d903      	bls.n	8008d2a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	220d      	movs	r2, #13
 8008d26:	701a      	strb	r2, [r3, #0]
      break;
 8008d28:	e160      	b.n	8008fec <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	795b      	ldrb	r3, [r3, #5]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 ff97 	bl	8009c64 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	791b      	ldrb	r3, [r3, #4]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 ff91 	bl	8009c64 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	701a      	strb	r2, [r3, #0]
      break;
 8008d48:	e150      	b.n	8008fec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008d4a:	2112      	movs	r1, #18
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f9f1 	bl	8009134 <USBH_Get_DevDesc>
 8008d52:	4603      	mov	r3, r0
 8008d54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d103      	bne.n	8008d64 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d62:	e145      	b.n	8008ff0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	f040 8142 	bne.w	8008ff0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d72:	3301      	adds	r3, #1
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d903      	bls.n	8008d8e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	220d      	movs	r2, #13
 8008d8a:	701a      	strb	r2, [r3, #0]
      break;
 8008d8c:	e130      	b.n	8008ff0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	795b      	ldrb	r3, [r3, #5]
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 ff65 	bl	8009c64 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	791b      	ldrb	r3, [r3, #4]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 ff5f 	bl	8009c64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	701a      	strb	r2, [r3, #0]
      break;
 8008db2:	e11d      	b.n	8008ff0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008db4:	2101      	movs	r1, #1
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa68 	bl	800928c <USBH_SetAddress>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d132      	bne.n	8008e2c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008dc6:	2002      	movs	r0, #2
 8008dc8:	f006 fb08 	bl	800f3dc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2203      	movs	r2, #3
 8008dd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	7919      	ldrb	r1, [r3, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008dee:	b292      	uxth	r2, r2
 8008df0:	9202      	str	r2, [sp, #8]
 8008df2:	2200      	movs	r2, #0
 8008df4:	9201      	str	r2, [sp, #4]
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2280      	movs	r2, #128	; 0x80
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fee1 	bl	8009bc4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	7959      	ldrb	r1, [r3, #5]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e16:	b292      	uxth	r2, r2
 8008e18:	9202      	str	r2, [sp, #8]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	9201      	str	r2, [sp, #4]
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	4603      	mov	r3, r0
 8008e22:	2200      	movs	r2, #0
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fecd 	bl	8009bc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e2a:	e0e3      	b.n	8008ff4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	f040 80e0 	bne.w	8008ff4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	220d      	movs	r2, #13
 8008e38:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	705a      	strb	r2, [r3, #1]
      break;
 8008e40:	e0d8      	b.n	8008ff4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008e42:	2109      	movs	r1, #9
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f99d 	bl	8009184 <USBH_Get_CfgDesc>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d103      	bne.n	8008e5c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2204      	movs	r2, #4
 8008e58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e5a:	e0cd      	b.n	8008ff8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	f040 80ca 	bne.w	8008ff8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d903      	bls.n	8008e86 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	220d      	movs	r2, #13
 8008e82:	701a      	strb	r2, [r3, #0]
      break;
 8008e84:	e0b8      	b.n	8008ff8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	795b      	ldrb	r3, [r3, #5]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fee9 	bl	8009c64 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	791b      	ldrb	r3, [r3, #4]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fee3 	bl	8009c64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
      break;
 8008eaa:	e0a5      	b.n	8008ff8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f965 	bl	8009184 <USBH_Get_CfgDesc>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2205      	movs	r2, #5
 8008ec8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008eca:	e097      	b.n	8008ffc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	f040 8094 	bne.w	8008ffc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008eda:	3301      	adds	r3, #1
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d903      	bls.n	8008ef6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	220d      	movs	r2, #13
 8008ef2:	701a      	strb	r2, [r3, #0]
      break;
 8008ef4:	e082      	b.n	8008ffc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	795b      	ldrb	r3, [r3, #5]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 feb1 	bl	8009c64 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	791b      	ldrb	r3, [r3, #4]
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 feab 	bl	8009c64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
      break;
 8008f1a:	e06f      	b.n	8008ffc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d019      	beq.n	8008f5a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f32:	23ff      	movs	r3, #255	; 0xff
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f949 	bl	80091cc <USBH_Get_StringDesc>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d103      	bne.n	8008f4c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2206      	movs	r2, #6
 8008f48:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008f4a:	e059      	b.n	8009000 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d156      	bne.n	8009000 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2206      	movs	r2, #6
 8008f56:	705a      	strb	r2, [r3, #1]
      break;
 8008f58:	e052      	b.n	8009000 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2206      	movs	r2, #6
 8008f5e:	705a      	strb	r2, [r3, #1]
      break;
 8008f60:	e04e      	b.n	8009000 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d019      	beq.n	8008fa0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f78:	23ff      	movs	r3, #255	; 0xff
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f926 	bl	80091cc <USBH_Get_StringDesc>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2207      	movs	r2, #7
 8008f8e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008f90:	e038      	b.n	8009004 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d135      	bne.n	8009004 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2207      	movs	r2, #7
 8008f9c:	705a      	strb	r2, [r3, #1]
      break;
 8008f9e:	e031      	b.n	8009004 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2207      	movs	r2, #7
 8008fa4:	705a      	strb	r2, [r3, #1]
      break;
 8008fa6:	e02d      	b.n	8009004 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d017      	beq.n	8008fe2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008fbe:	23ff      	movs	r3, #255	; 0xff
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f903 	bl	80091cc <USBH_Get_StringDesc>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008fd4:	e018      	b.n	8009008 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d115      	bne.n	8009008 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe0:	e012      	b.n	8009008 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe6:	e00f      	b.n	8009008 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008fe8:	bf00      	nop
 8008fea:	e00e      	b.n	800900a <USBH_HandleEnum+0x3be>
      break;
 8008fec:	bf00      	nop
 8008fee:	e00c      	b.n	800900a <USBH_HandleEnum+0x3be>
      break;
 8008ff0:	bf00      	nop
 8008ff2:	e00a      	b.n	800900a <USBH_HandleEnum+0x3be>
      break;
 8008ff4:	bf00      	nop
 8008ff6:	e008      	b.n	800900a <USBH_HandleEnum+0x3be>
      break;
 8008ff8:	bf00      	nop
 8008ffa:	e006      	b.n	800900a <USBH_HandleEnum+0x3be>
      break;
 8008ffc:	bf00      	nop
 8008ffe:	e004      	b.n	800900a <USBH_HandleEnum+0x3be>
      break;
 8009000:	bf00      	nop
 8009002:	e002      	b.n	800900a <USBH_HandleEnum+0x3be>
      break;
 8009004:	bf00      	nop
 8009006:	e000      	b.n	800900a <USBH_HandleEnum+0x3be>
      break;
 8009008:	bf00      	nop
  }
  return Status;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009026:	bf00      	nop
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f804 	bl	8009056 <USBH_HandleSof>
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b0b      	cmp	r3, #11
 8009066:	d10a      	bne.n	800907e <USBH_HandleSof+0x28>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800906e:	2b00      	cmp	r3, #0
 8009070:	d005      	beq.n	800907e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
  }
}
 800907e:	bf00      	nop
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009096:	bf00      	nop
}
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80090b2:	bf00      	nop
}
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f005 ffec 	bl	800f0ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	791b      	ldrb	r3, [r3, #4]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fda3 	bl	8009c64 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	795b      	ldrb	r3, [r3, #5]
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fd9d 	bl	8009c64 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af02      	add	r7, sp, #8
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	b29b      	uxth	r3, r3
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	4613      	mov	r3, r2
 800914e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009152:	2100      	movs	r1, #0
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f864 	bl	8009222 <USBH_GetDescriptor>
 800915a:	4603      	mov	r3, r0
 800915c:	73fb      	strb	r3, [r7, #15]
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f203 3026 	addw	r0, r3, #806	; 0x326
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009170:	78fa      	ldrb	r2, [r7, #3]
 8009172:	b292      	uxth	r2, r2
 8009174:	4619      	mov	r1, r3
 8009176:	f000 f918 	bl	80093aa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800917a:	7bfb      	ldrb	r3, [r7, #15]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af02      	add	r7, sp, #8
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	331c      	adds	r3, #28
 8009194:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009196:	887b      	ldrh	r3, [r7, #2]
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091a0:	2100      	movs	r1, #0
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f83d 	bl	8009222 <USBH_GetDescriptor>
 80091a8:	4603      	mov	r3, r0
 80091aa:	72fb      	strb	r3, [r7, #11]
 80091ac:	7afb      	ldrb	r3, [r7, #11]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d107      	bne.n	80091c2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80091b8:	887a      	ldrh	r2, [r7, #2]
 80091ba:	68f9      	ldr	r1, [r7, #12]
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 f964 	bl	800948a <USBH_ParseCfgDesc>
  }

  return status;
 80091c2:	7afb      	ldrb	r3, [r7, #11]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b088      	sub	sp, #32
 80091d0:	af02      	add	r7, sp, #8
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	607a      	str	r2, [r7, #4]
 80091d6:	461a      	mov	r2, r3
 80091d8:	460b      	mov	r3, r1
 80091da:	72fb      	strb	r3, [r7, #11]
 80091dc:	4613      	mov	r3, r2
 80091de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80091e0:	7afb      	ldrb	r3, [r7, #11]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80091e8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80091f0:	893b      	ldrh	r3, [r7, #8]
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	460b      	mov	r3, r1
 80091f6:	2100      	movs	r1, #0
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f812 	bl	8009222 <USBH_GetDescriptor>
 80091fe:	4603      	mov	r3, r0
 8009200:	75fb      	strb	r3, [r7, #23]
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d107      	bne.n	8009218 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800920e:	893a      	ldrh	r2, [r7, #8]
 8009210:	6879      	ldr	r1, [r7, #4]
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fa37 	bl	8009686 <USBH_ParseStringDesc>
  }

  return status;
 8009218:	7dfb      	ldrb	r3, [r7, #23]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	607b      	str	r3, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	72fb      	strb	r3, [r7, #11]
 8009230:	4613      	mov	r3, r2
 8009232:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	789b      	ldrb	r3, [r3, #2]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d11c      	bne.n	8009276 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800923c:	7afb      	ldrb	r3, [r7, #11]
 800923e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009242:	b2da      	uxtb	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2206      	movs	r2, #6
 800924c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	893a      	ldrh	r2, [r7, #8]
 8009252:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009254:	893b      	ldrh	r3, [r7, #8]
 8009256:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800925a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800925e:	d104      	bne.n	800926a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f240 4209 	movw	r2, #1033	; 0x409
 8009266:	829a      	strh	r2, [r3, #20]
 8009268:	e002      	b.n	8009270 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8b3a      	ldrh	r2, [r7, #24]
 8009274:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009276:	8b3b      	ldrh	r3, [r7, #24]
 8009278:	461a      	mov	r2, r3
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fa50 	bl	8009722 <USBH_CtlReq>
 8009282:	4603      	mov	r3, r0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	789b      	ldrb	r3, [r3, #2]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d10f      	bne.n	80092c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2205      	movs	r2, #5
 80092aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80092c0:	2200      	movs	r2, #0
 80092c2:	2100      	movs	r1, #0
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fa2c 	bl	8009722 <USBH_CtlReq>
 80092ca:	4603      	mov	r3, r0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	789b      	ldrb	r3, [r3, #2]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d10e      	bne.n	8009306 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2209      	movs	r2, #9
 80092f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	887a      	ldrh	r2, [r7, #2]
 80092f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009306:	2200      	movs	r2, #0
 8009308:	2100      	movs	r1, #0
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa09 	bl	8009722 <USBH_CtlReq>
 8009310:	4603      	mov	r3, r0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	460b      	mov	r3, r1
 8009324:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	789b      	ldrb	r3, [r3, #2]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d10f      	bne.n	800934e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2203      	movs	r2, #3
 8009338:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800933a:	78fb      	ldrb	r3, [r7, #3]
 800933c:	b29a      	uxth	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800934e:	2200      	movs	r2, #0
 8009350:	2100      	movs	r1, #0
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f9e5 	bl	8009722 <USBH_CtlReq>
 8009358:	4603      	mov	r3, r0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	460b      	mov	r3, r1
 800936c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	789b      	ldrb	r3, [r3, #2]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d10f      	bne.n	8009396 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2202      	movs	r2, #2
 800937a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009396:	2200      	movs	r2, #0
 8009398:	2100      	movs	r1, #0
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f9c1 	bl	8009722 <USBH_CtlReq>
 80093a0:	4603      	mov	r3, r0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b085      	sub	sp, #20
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	4613      	mov	r3, r2
 80093b6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	781a      	ldrb	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	785a      	ldrb	r2, [r3, #1]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	3302      	adds	r3, #2
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	3303      	adds	r3, #3
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	021b      	lsls	r3, r3, #8
 80093da:	b29b      	uxth	r3, r3
 80093dc:	4313      	orrs	r3, r2
 80093de:	b29a      	uxth	r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	791a      	ldrb	r2, [r3, #4]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	795a      	ldrb	r2, [r3, #5]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	799a      	ldrb	r2, [r3, #6]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	79da      	ldrb	r2, [r3, #7]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009404:	88fb      	ldrh	r3, [r7, #6]
 8009406:	2b08      	cmp	r3, #8
 8009408:	d939      	bls.n	800947e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	3308      	adds	r3, #8
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	b29a      	uxth	r2, r3
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	3309      	adds	r3, #9
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	b29b      	uxth	r3, r3
 800941a:	021b      	lsls	r3, r3, #8
 800941c:	b29b      	uxth	r3, r3
 800941e:	4313      	orrs	r3, r2
 8009420:	b29a      	uxth	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	330a      	adds	r3, #10
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	b29a      	uxth	r2, r3
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	330b      	adds	r3, #11
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	021b      	lsls	r3, r3, #8
 8009438:	b29b      	uxth	r3, r3
 800943a:	4313      	orrs	r3, r2
 800943c:	b29a      	uxth	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	330c      	adds	r3, #12
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	b29a      	uxth	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	330d      	adds	r3, #13
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b29b      	uxth	r3, r3
 8009452:	021b      	lsls	r3, r3, #8
 8009454:	b29b      	uxth	r3, r3
 8009456:	4313      	orrs	r3, r2
 8009458:	b29a      	uxth	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	7b9a      	ldrb	r2, [r3, #14]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	7bda      	ldrb	r2, [r3, #15]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	7c1a      	ldrb	r2, [r3, #16]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	7c5a      	ldrb	r2, [r3, #17]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	745a      	strb	r2, [r3, #17]
  }
}
 800947e:	bf00      	nop
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b08a      	sub	sp, #40	; 0x28
 800948e:	af00      	add	r7, sp, #0
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	4613      	mov	r3, r2
 8009496:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	785a      	ldrb	r2, [r3, #1]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	3302      	adds	r3, #2
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	3303      	adds	r3, #3
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	021b      	lsls	r3, r3, #8
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	4313      	orrs	r3, r2
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	791a      	ldrb	r2, [r3, #4]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	795a      	ldrb	r2, [r3, #5]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	799a      	ldrb	r2, [r3, #6]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	79da      	ldrb	r2, [r3, #7]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	7a1a      	ldrb	r2, [r3, #8]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009500:	88fb      	ldrh	r3, [r7, #6]
 8009502:	2b09      	cmp	r3, #9
 8009504:	d95f      	bls.n	80095c6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009506:	2309      	movs	r3, #9
 8009508:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800950a:	2300      	movs	r3, #0
 800950c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800950e:	e051      	b.n	80095b4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009510:	f107 0316 	add.w	r3, r7, #22
 8009514:	4619      	mov	r1, r3
 8009516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009518:	f000 f8e8 	bl	80096ec <USBH_GetNextDesc>
 800951c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	2b04      	cmp	r3, #4
 8009524:	d146      	bne.n	80095b4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800952a:	221a      	movs	r2, #26
 800952c:	fb02 f303 	mul.w	r3, r2, r3
 8009530:	3308      	adds	r3, #8
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4413      	add	r3, r2
 8009536:	3302      	adds	r3, #2
 8009538:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800953a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800953c:	69f8      	ldr	r0, [r7, #28]
 800953e:	f000 f846 	bl	80095ce <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009542:	2300      	movs	r3, #0
 8009544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009548:	2300      	movs	r3, #0
 800954a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800954c:	e022      	b.n	8009594 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800954e:	f107 0316 	add.w	r3, r7, #22
 8009552:	4619      	mov	r1, r3
 8009554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009556:	f000 f8c9 	bl	80096ec <USBH_GetNextDesc>
 800955a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	785b      	ldrb	r3, [r3, #1]
 8009560:	2b05      	cmp	r3, #5
 8009562:	d117      	bne.n	8009594 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009568:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800956c:	3201      	adds	r2, #1
 800956e:	00d2      	lsls	r2, r2, #3
 8009570:	211a      	movs	r1, #26
 8009572:	fb01 f303 	mul.w	r3, r1, r3
 8009576:	4413      	add	r3, r2
 8009578:	3308      	adds	r3, #8
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	4413      	add	r3, r2
 800957e:	3304      	adds	r3, #4
 8009580:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009584:	69b8      	ldr	r0, [r7, #24]
 8009586:	f000 f851 	bl	800962c <USBH_ParseEPDesc>
            ep_ix++;
 800958a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800958e:	3301      	adds	r3, #1
 8009590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	791b      	ldrb	r3, [r3, #4]
 8009598:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800959c:	429a      	cmp	r2, r3
 800959e:	d204      	bcs.n	80095aa <USBH_ParseCfgDesc+0x120>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	885a      	ldrh	r2, [r3, #2]
 80095a4:	8afb      	ldrh	r3, [r7, #22]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d8d1      	bhi.n	800954e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80095aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095ae:	3301      	adds	r3, #1
 80095b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80095b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d804      	bhi.n	80095c6 <USBH_ParseCfgDesc+0x13c>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	885a      	ldrh	r2, [r3, #2]
 80095c0:	8afb      	ldrh	r3, [r7, #22]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d8a4      	bhi.n	8009510 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80095c6:	bf00      	nop
 80095c8:	3728      	adds	r7, #40	; 0x28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b083      	sub	sp, #12
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781a      	ldrb	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	785a      	ldrb	r2, [r3, #1]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	789a      	ldrb	r2, [r3, #2]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	78da      	ldrb	r2, [r3, #3]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	791a      	ldrb	r2, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	795a      	ldrb	r2, [r3, #5]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	799a      	ldrb	r2, [r3, #6]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	79da      	ldrb	r2, [r3, #7]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	7a1a      	ldrb	r2, [r3, #8]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	721a      	strb	r2, [r3, #8]
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	781a      	ldrb	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	785a      	ldrb	r2, [r3, #1]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	789a      	ldrb	r2, [r3, #2]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	78da      	ldrb	r2, [r3, #3]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	3304      	adds	r3, #4
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	b29a      	uxth	r2, r3
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	3305      	adds	r3, #5
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	b29b      	uxth	r3, r3
 8009666:	021b      	lsls	r3, r3, #8
 8009668:	b29b      	uxth	r3, r3
 800966a:	4313      	orrs	r3, r2
 800966c:	b29a      	uxth	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	799a      	ldrb	r2, [r3, #6]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	719a      	strb	r2, [r3, #6]
}
 800967a:	bf00      	nop
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009686:	b480      	push	{r7}
 8009688:	b087      	sub	sp, #28
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	4613      	mov	r3, r2
 8009692:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3301      	adds	r3, #1
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2b03      	cmp	r3, #3
 800969c:	d120      	bne.n	80096e0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	1e9a      	subs	r2, r3, #2
 80096a4:	88fb      	ldrh	r3, [r7, #6]
 80096a6:	4293      	cmp	r3, r2
 80096a8:	bf28      	it	cs
 80096aa:	4613      	movcs	r3, r2
 80096ac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3302      	adds	r3, #2
 80096b2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80096b4:	2300      	movs	r3, #0
 80096b6:	82fb      	strh	r3, [r7, #22]
 80096b8:	e00b      	b.n	80096d2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80096ba:	8afb      	ldrh	r3, [r7, #22]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	781a      	ldrb	r2, [r3, #0]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	3301      	adds	r3, #1
 80096ca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80096cc:	8afb      	ldrh	r3, [r7, #22]
 80096ce:	3302      	adds	r3, #2
 80096d0:	82fb      	strh	r3, [r7, #22]
 80096d2:	8afa      	ldrh	r2, [r7, #22]
 80096d4:	8abb      	ldrh	r3, [r7, #20]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d3ef      	bcc.n	80096ba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2200      	movs	r2, #0
 80096de:	701a      	strb	r2, [r3, #0]
  }
}
 80096e0:	bf00      	nop
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	881a      	ldrh	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	4413      	add	r3, r2
 8009702:	b29a      	uxth	r2, r3
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4413      	add	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009714:	68fb      	ldr	r3, [r7, #12]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	4613      	mov	r3, r2
 800972e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009730:	2301      	movs	r3, #1
 8009732:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	789b      	ldrb	r3, [r3, #2]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d002      	beq.n	8009742 <USBH_CtlReq+0x20>
 800973c:	2b02      	cmp	r3, #2
 800973e:	d00f      	beq.n	8009760 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009740:	e027      	b.n	8009792 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	88fa      	ldrh	r2, [r7, #6]
 800974c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2202      	movs	r2, #2
 8009758:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800975a:	2301      	movs	r3, #1
 800975c:	75fb      	strb	r3, [r7, #23]
      break;
 800975e:	e018      	b.n	8009792 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f81b 	bl	800979c <USBH_HandleControl>
 8009766:	4603      	mov	r3, r0
 8009768:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <USBH_CtlReq+0x54>
 8009770:	7dfb      	ldrb	r3, [r7, #23]
 8009772:	2b03      	cmp	r3, #3
 8009774:	d106      	bne.n	8009784 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2201      	movs	r2, #1
 800977a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	761a      	strb	r2, [r3, #24]
      break;
 8009782:	e005      	b.n	8009790 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	2b02      	cmp	r3, #2
 8009788:	d102      	bne.n	8009790 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2201      	movs	r2, #1
 800978e:	709a      	strb	r2, [r3, #2]
      break;
 8009790:	bf00      	nop
  }
  return status;
 8009792:	7dfb      	ldrb	r3, [r7, #23]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80097a4:	2301      	movs	r3, #1
 80097a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	7e1b      	ldrb	r3, [r3, #24]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	2b0a      	cmp	r3, #10
 80097b4:	f200 8156 	bhi.w	8009a64 <USBH_HandleControl+0x2c8>
 80097b8:	a201      	add	r2, pc, #4	; (adr r2, 80097c0 <USBH_HandleControl+0x24>)
 80097ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097be:	bf00      	nop
 80097c0:	080097ed 	.word	0x080097ed
 80097c4:	08009807 	.word	0x08009807
 80097c8:	08009871 	.word	0x08009871
 80097cc:	08009897 	.word	0x08009897
 80097d0:	080098cf 	.word	0x080098cf
 80097d4:	080098f9 	.word	0x080098f9
 80097d8:	0800994b 	.word	0x0800994b
 80097dc:	0800996d 	.word	0x0800996d
 80097e0:	080099a9 	.word	0x080099a9
 80097e4:	080099cf 	.word	0x080099cf
 80097e8:	08009a0d 	.word	0x08009a0d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f103 0110 	add.w	r1, r3, #16
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	795b      	ldrb	r3, [r3, #5]
 80097f6:	461a      	mov	r2, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f943 	bl	8009a84 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2202      	movs	r2, #2
 8009802:	761a      	strb	r2, [r3, #24]
      break;
 8009804:	e139      	b.n	8009a7a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	795b      	ldrb	r3, [r3, #5]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f005 fd5b 	bl	800f2c8 <USBH_LL_GetURBState>
 8009812:	4603      	mov	r3, r0
 8009814:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009816:	7bbb      	ldrb	r3, [r7, #14]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d11e      	bne.n	800985a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	7c1b      	ldrb	r3, [r3, #16]
 8009820:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009824:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	8adb      	ldrh	r3, [r3, #22]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800982e:	7b7b      	ldrb	r3, [r7, #13]
 8009830:	2b80      	cmp	r3, #128	; 0x80
 8009832:	d103      	bne.n	800983c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2203      	movs	r2, #3
 8009838:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800983a:	e115      	b.n	8009a68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2205      	movs	r2, #5
 8009840:	761a      	strb	r2, [r3, #24]
      break;
 8009842:	e111      	b.n	8009a68 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009844:	7b7b      	ldrb	r3, [r7, #13]
 8009846:	2b80      	cmp	r3, #128	; 0x80
 8009848:	d103      	bne.n	8009852 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2209      	movs	r2, #9
 800984e:	761a      	strb	r2, [r3, #24]
      break;
 8009850:	e10a      	b.n	8009a68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2207      	movs	r2, #7
 8009856:	761a      	strb	r2, [r3, #24]
      break;
 8009858:	e106      	b.n	8009a68 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	2b04      	cmp	r3, #4
 800985e:	d003      	beq.n	8009868 <USBH_HandleControl+0xcc>
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2b02      	cmp	r3, #2
 8009864:	f040 8100 	bne.w	8009a68 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	220b      	movs	r2, #11
 800986c:	761a      	strb	r2, [r3, #24]
      break;
 800986e:	e0fb      	b.n	8009a68 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009876:	b29a      	uxth	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6899      	ldr	r1, [r3, #8]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	899a      	ldrh	r2, [r3, #12]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	791b      	ldrb	r3, [r3, #4]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f93a 	bl	8009b02 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2204      	movs	r2, #4
 8009892:	761a      	strb	r2, [r3, #24]
      break;
 8009894:	e0f1      	b.n	8009a7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	791b      	ldrb	r3, [r3, #4]
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f005 fd13 	bl	800f2c8 <USBH_LL_GetURBState>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80098a6:	7bbb      	ldrb	r3, [r7, #14]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d102      	bne.n	80098b2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2209      	movs	r2, #9
 80098b0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	2b05      	cmp	r3, #5
 80098b6:	d102      	bne.n	80098be <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80098b8:	2303      	movs	r3, #3
 80098ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80098bc:	e0d6      	b.n	8009a6c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	f040 80d3 	bne.w	8009a6c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	220b      	movs	r2, #11
 80098ca:	761a      	strb	r2, [r3, #24]
      break;
 80098cc:	e0ce      	b.n	8009a6c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6899      	ldr	r1, [r3, #8]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	899a      	ldrh	r2, [r3, #12]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	795b      	ldrb	r3, [r3, #5]
 80098da:	2001      	movs	r0, #1
 80098dc:	9000      	str	r0, [sp, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f8ea 	bl	8009ab8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2206      	movs	r2, #6
 80098f4:	761a      	strb	r2, [r3, #24]
      break;
 80098f6:	e0c0      	b.n	8009a7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	795b      	ldrb	r3, [r3, #5]
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f005 fce2 	bl	800f2c8 <USBH_LL_GetURBState>
 8009904:	4603      	mov	r3, r0
 8009906:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d103      	bne.n	8009916 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2207      	movs	r2, #7
 8009912:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009914:	e0ac      	b.n	8009a70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	2b05      	cmp	r3, #5
 800991a:	d105      	bne.n	8009928 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	220c      	movs	r2, #12
 8009920:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009922:	2303      	movs	r3, #3
 8009924:	73fb      	strb	r3, [r7, #15]
      break;
 8009926:	e0a3      	b.n	8009a70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2b02      	cmp	r3, #2
 800992c:	d103      	bne.n	8009936 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2205      	movs	r2, #5
 8009932:	761a      	strb	r2, [r3, #24]
      break;
 8009934:	e09c      	b.n	8009a70 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009936:	7bbb      	ldrb	r3, [r7, #14]
 8009938:	2b04      	cmp	r3, #4
 800993a:	f040 8099 	bne.w	8009a70 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	220b      	movs	r2, #11
 8009942:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009944:	2302      	movs	r3, #2
 8009946:	73fb      	strb	r3, [r7, #15]
      break;
 8009948:	e092      	b.n	8009a70 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	791b      	ldrb	r3, [r3, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	2100      	movs	r1, #0
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f8d5 	bl	8009b02 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2208      	movs	r2, #8
 8009968:	761a      	strb	r2, [r3, #24]

      break;
 800996a:	e086      	b.n	8009a7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	791b      	ldrb	r3, [r3, #4]
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f005 fca8 	bl	800f2c8 <USBH_LL_GetURBState>
 8009978:	4603      	mov	r3, r0
 800997a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d105      	bne.n	800998e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	220d      	movs	r2, #13
 8009986:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800998c:	e072      	b.n	8009a74 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	2b04      	cmp	r3, #4
 8009992:	d103      	bne.n	800999c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	220b      	movs	r2, #11
 8009998:	761a      	strb	r2, [r3, #24]
      break;
 800999a:	e06b      	b.n	8009a74 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	2b05      	cmp	r3, #5
 80099a0:	d168      	bne.n	8009a74 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80099a2:	2303      	movs	r3, #3
 80099a4:	73fb      	strb	r3, [r7, #15]
      break;
 80099a6:	e065      	b.n	8009a74 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	795b      	ldrb	r3, [r3, #5]
 80099ac:	2201      	movs	r2, #1
 80099ae:	9200      	str	r2, [sp, #0]
 80099b0:	2200      	movs	r2, #0
 80099b2:	2100      	movs	r1, #0
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f87f 	bl	8009ab8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	220a      	movs	r2, #10
 80099ca:	761a      	strb	r2, [r3, #24]
      break;
 80099cc:	e055      	b.n	8009a7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	795b      	ldrb	r3, [r3, #5]
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f005 fc77 	bl	800f2c8 <USBH_LL_GetURBState>
 80099da:	4603      	mov	r3, r0
 80099dc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80099de:	7bbb      	ldrb	r3, [r7, #14]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d105      	bne.n	80099f0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	220d      	movs	r2, #13
 80099ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80099ee:	e043      	b.n	8009a78 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d103      	bne.n	80099fe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2209      	movs	r2, #9
 80099fa:	761a      	strb	r2, [r3, #24]
      break;
 80099fc:	e03c      	b.n	8009a78 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
 8009a00:	2b04      	cmp	r3, #4
 8009a02:	d139      	bne.n	8009a78 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	220b      	movs	r2, #11
 8009a08:	761a      	strb	r2, [r3, #24]
      break;
 8009a0a:	e035      	b.n	8009a78 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	7e5b      	ldrb	r3, [r3, #25]
 8009a10:	3301      	adds	r3, #1
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	765a      	strb	r2, [r3, #25]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	7e5b      	ldrb	r3, [r3, #25]
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d806      	bhi.n	8009a2e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009a2c:	e025      	b.n	8009a7a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a34:	2106      	movs	r1, #6
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	795b      	ldrb	r3, [r3, #5]
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f90c 	bl	8009c64 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	791b      	ldrb	r3, [r3, #4]
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f906 	bl	8009c64 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009a5e:	2302      	movs	r3, #2
 8009a60:	73fb      	strb	r3, [r7, #15]
      break;
 8009a62:	e00a      	b.n	8009a7a <USBH_HandleControl+0x2de>

    default:
      break;
 8009a64:	bf00      	nop
 8009a66:	e008      	b.n	8009a7a <USBH_HandleControl+0x2de>
      break;
 8009a68:	bf00      	nop
 8009a6a:	e006      	b.n	8009a7a <USBH_HandleControl+0x2de>
      break;
 8009a6c:	bf00      	nop
 8009a6e:	e004      	b.n	8009a7a <USBH_HandleControl+0x2de>
      break;
 8009a70:	bf00      	nop
 8009a72:	e002      	b.n	8009a7a <USBH_HandleControl+0x2de>
      break;
 8009a74:	bf00      	nop
 8009a76:	e000      	b.n	8009a7a <USBH_HandleControl+0x2de>
      break;
 8009a78:	bf00      	nop
  }

  return status;
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b088      	sub	sp, #32
 8009a88:	af04      	add	r7, sp, #16
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009a92:	79f9      	ldrb	r1, [r7, #7]
 8009a94:	2300      	movs	r3, #0
 8009a96:	9303      	str	r3, [sp, #12]
 8009a98:	2308      	movs	r3, #8
 8009a9a:	9302      	str	r3, [sp, #8]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f005 fbdc 	bl	800f266 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af04      	add	r7, sp, #16
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	80fb      	strh	r3, [r7, #6]
 8009aca:	4613      	mov	r3, r2
 8009acc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009adc:	7979      	ldrb	r1, [r7, #5]
 8009ade:	7e3b      	ldrb	r3, [r7, #24]
 8009ae0:	9303      	str	r3, [sp, #12]
 8009ae2:	88fb      	ldrh	r3, [r7, #6]
 8009ae4:	9302      	str	r3, [sp, #8]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	2301      	movs	r3, #1
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	2300      	movs	r3, #0
 8009af0:	2200      	movs	r2, #0
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f005 fbb7 	bl	800f266 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b088      	sub	sp, #32
 8009b06:	af04      	add	r7, sp, #16
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	461a      	mov	r2, r3
 8009b10:	460b      	mov	r3, r1
 8009b12:	80fb      	strh	r3, [r7, #6]
 8009b14:	4613      	mov	r3, r2
 8009b16:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b18:	7979      	ldrb	r1, [r7, #5]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	9303      	str	r3, [sp, #12]
 8009b1e:	88fb      	ldrh	r3, [r7, #6]
 8009b20:	9302      	str	r3, [sp, #8]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	2301      	movs	r3, #1
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f005 fb99 	bl	800f266 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009b34:	2300      	movs	r3, #0

}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b088      	sub	sp, #32
 8009b42:	af04      	add	r7, sp, #16
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	80fb      	strh	r3, [r7, #6]
 8009b50:	4613      	mov	r3, r2
 8009b52:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b62:	7979      	ldrb	r1, [r7, #5]
 8009b64:	7e3b      	ldrb	r3, [r7, #24]
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	88fb      	ldrh	r3, [r7, #6]
 8009b6a:	9302      	str	r3, [sp, #8]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	2301      	movs	r3, #1
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2302      	movs	r3, #2
 8009b76:	2200      	movs	r2, #0
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f005 fb74 	bl	800f266 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af04      	add	r7, sp, #16
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4611      	mov	r1, r2
 8009b94:	461a      	mov	r2, r3
 8009b96:	460b      	mov	r3, r1
 8009b98:	80fb      	strh	r3, [r7, #6]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b9e:	7979      	ldrb	r1, [r7, #5]
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	9303      	str	r3, [sp, #12]
 8009ba4:	88fb      	ldrh	r3, [r7, #6]
 8009ba6:	9302      	str	r3, [sp, #8]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	9301      	str	r3, [sp, #4]
 8009bac:	2301      	movs	r3, #1
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f005 fb56 	bl	800f266 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af04      	add	r7, sp, #16
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	4608      	mov	r0, r1
 8009bce:	4611      	mov	r1, r2
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	70fb      	strb	r3, [r7, #3]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	70bb      	strb	r3, [r7, #2]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009bde:	7878      	ldrb	r0, [r7, #1]
 8009be0:	78ba      	ldrb	r2, [r7, #2]
 8009be2:	78f9      	ldrb	r1, [r7, #3]
 8009be4:	8b3b      	ldrh	r3, [r7, #24]
 8009be6:	9302      	str	r3, [sp, #8]
 8009be8:	7d3b      	ldrb	r3, [r7, #20]
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	7c3b      	ldrb	r3, [r7, #16]
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f005 fae9 	bl	800f1ca <USBH_LL_OpenPipe>

  return USBH_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f005 fb08 	bl	800f228 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f836 	bl	8009ca0 <USBH_GetFreePipe>
 8009c34:	4603      	mov	r3, r0
 8009c36:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009c38:	89fb      	ldrh	r3, [r7, #14]
 8009c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d00a      	beq.n	8009c58 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009c42:	78fa      	ldrb	r2, [r7, #3]
 8009c44:	89fb      	ldrh	r3, [r7, #14]
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	33e0      	adds	r3, #224	; 0xe0
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	440b      	add	r3, r1
 8009c56:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009c58:	89fb      	ldrh	r3, [r7, #14]
 8009c5a:	b2db      	uxtb	r3, r3
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	2b0a      	cmp	r3, #10
 8009c74:	d80d      	bhi.n	8009c92 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009c76:	78fb      	ldrb	r3, [r7, #3]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	33e0      	adds	r3, #224	; 0xe0
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	78fb      	ldrb	r3, [r7, #3]
 8009c84:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009c88:	6879      	ldr	r1, [r7, #4]
 8009c8a:	33e0      	adds	r3, #224	; 0xe0
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009cac:	2300      	movs	r3, #0
 8009cae:	73fb      	strb	r3, [r7, #15]
 8009cb0:	e00f      	b.n	8009cd2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	33e0      	adds	r3, #224	; 0xe0
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d102      	bne.n	8009ccc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	e007      	b.n	8009cdc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	73fb      	strb	r3, [r7, #15]
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	2b0a      	cmp	r3, #10
 8009cd6:	d9ec      	bls.n	8009cb2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	4a08      	ldr	r2, [pc, #32]	; (8009d18 <disk_status+0x30>)
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	79fa      	ldrb	r2, [r7, #7]
 8009d00:	4905      	ldr	r1, [pc, #20]	; (8009d18 <disk_status+0x30>)
 8009d02:	440a      	add	r2, r1
 8009d04:	7a12      	ldrb	r2, [r2, #8]
 8009d06:	4610      	mov	r0, r2
 8009d08:	4798      	blx	r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	20002798 	.word	0x20002798

08009d1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	4a0d      	ldr	r2, [pc, #52]	; (8009d64 <disk_initialize+0x48>)
 8009d2e:	5cd3      	ldrb	r3, [r2, r3]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d111      	bne.n	8009d58 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	4a0b      	ldr	r2, [pc, #44]	; (8009d64 <disk_initialize+0x48>)
 8009d38:	2101      	movs	r1, #1
 8009d3a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	4a09      	ldr	r2, [pc, #36]	; (8009d64 <disk_initialize+0x48>)
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	79fa      	ldrb	r2, [r7, #7]
 8009d4a:	4906      	ldr	r1, [pc, #24]	; (8009d64 <disk_initialize+0x48>)
 8009d4c:	440a      	add	r2, r1
 8009d4e:	7a12      	ldrb	r2, [r2, #8]
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	4603      	mov	r3, r0
 8009d56:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20002798 	.word	0x20002798

08009d68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
 8009d72:	603b      	str	r3, [r7, #0]
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	4a0a      	ldr	r2, [pc, #40]	; (8009da4 <disk_read+0x3c>)
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	689c      	ldr	r4, [r3, #8]
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	4a07      	ldr	r2, [pc, #28]	; (8009da4 <disk_read+0x3c>)
 8009d88:	4413      	add	r3, r2
 8009d8a:	7a18      	ldrb	r0, [r3, #8]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	68b9      	ldr	r1, [r7, #8]
 8009d92:	47a0      	blx	r4
 8009d94:	4603      	mov	r3, r0
 8009d96:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd90      	pop	{r4, r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20002798 	.word	0x20002798

08009da8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009da8:	b590      	push	{r4, r7, lr}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	603b      	str	r3, [r7, #0]
 8009db4:	4603      	mov	r3, r0
 8009db6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	4a0a      	ldr	r2, [pc, #40]	; (8009de4 <disk_write+0x3c>)
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	68dc      	ldr	r4, [r3, #12]
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	4a07      	ldr	r2, [pc, #28]	; (8009de4 <disk_write+0x3c>)
 8009dc8:	4413      	add	r3, r2
 8009dca:	7a18      	ldrb	r0, [r3, #8]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	68b9      	ldr	r1, [r7, #8]
 8009dd2:	47a0      	blx	r4
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd90      	pop	{r4, r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20002798 	.word	0x20002798

08009de8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	603a      	str	r2, [r7, #0]
 8009df2:	71fb      	strb	r3, [r7, #7]
 8009df4:	460b      	mov	r3, r1
 8009df6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	4a09      	ldr	r2, [pc, #36]	; (8009e20 <disk_ioctl+0x38>)
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	79fa      	ldrb	r2, [r7, #7]
 8009e06:	4906      	ldr	r1, [pc, #24]	; (8009e20 <disk_ioctl+0x38>)
 8009e08:	440a      	add	r2, r1
 8009e0a:	7a10      	ldrb	r0, [r2, #8]
 8009e0c:	79b9      	ldrb	r1, [r7, #6]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	4798      	blx	r3
 8009e12:	4603      	mov	r3, r0
 8009e14:	73fb      	strb	r3, [r7, #15]
  return res;
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20002798 	.word	0x20002798

08009e24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009e34:	89fb      	ldrh	r3, [r7, #14]
 8009e36:	021b      	lsls	r3, r3, #8
 8009e38:	b21a      	sxth	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b21b      	sxth	r3, r3
 8009e40:	4313      	orrs	r3, r2
 8009e42:	b21b      	sxth	r3, r3
 8009e44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e46:	89fb      	ldrh	r3, [r7, #14]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3303      	adds	r3, #3
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	021b      	lsls	r3, r3, #8
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	3202      	adds	r2, #2
 8009e6c:	7812      	ldrb	r2, [r2, #0]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	021b      	lsls	r3, r3, #8
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	3201      	adds	r2, #1
 8009e7a:	7812      	ldrb	r2, [r2, #0]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	021b      	lsls	r3, r3, #8
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	7812      	ldrb	r2, [r2, #0]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009e9a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009e9e:	b09d      	sub	sp, #116	; 0x74
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8009ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ea6:	3307      	adds	r3, #7
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2200      	movs	r2, #0
 8009eae:	469a      	mov	sl, r3
 8009eb0:	4693      	mov	fp, r2
 8009eb2:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 8009eb6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009eba:	f04f 0000 	mov.w	r0, #0
 8009ebe:	f04f 0100 	mov.w	r1, #0
 8009ec2:	0219      	lsls	r1, r3, #8
 8009ec4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009ec8:	0210      	lsls	r0, r2, #8
 8009eca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ecc:	3306      	adds	r3, #6
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	461c      	mov	r4, r3
 8009ed6:	4615      	mov	r5, r2
 8009ed8:	ea40 0804 	orr.w	r8, r0, r4
 8009edc:	ea41 0905 	orr.w	r9, r1, r5
 8009ee0:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8009ee4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009ee8:	f04f 0000 	mov.w	r0, #0
 8009eec:	f04f 0100 	mov.w	r1, #0
 8009ef0:	0219      	lsls	r1, r3, #8
 8009ef2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009ef6:	0210      	lsls	r0, r2, #8
 8009ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009efa:	3305      	adds	r3, #5
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2200      	movs	r2, #0
 8009f02:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f04:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009f06:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8009f0a:	4623      	mov	r3, r4
 8009f0c:	4303      	orrs	r3, r0
 8009f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f10:	462b      	mov	r3, r5
 8009f12:	430b      	orrs	r3, r1
 8009f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f16:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009f1a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8009f1e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009f22:	f04f 0000 	mov.w	r0, #0
 8009f26:	f04f 0100 	mov.w	r1, #0
 8009f2a:	0219      	lsls	r1, r3, #8
 8009f2c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009f30:	0210      	lsls	r0, r2, #8
 8009f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f34:	3304      	adds	r3, #4
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	653b      	str	r3, [r7, #80]	; 0x50
 8009f3e:	657a      	str	r2, [r7, #84]	; 0x54
 8009f40:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8009f44:	4623      	mov	r3, r4
 8009f46:	4303      	orrs	r3, r0
 8009f48:	623b      	str	r3, [r7, #32]
 8009f4a:	462b      	mov	r3, r5
 8009f4c:	430b      	orrs	r3, r1
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f50:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009f54:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8009f58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009f5c:	f04f 0000 	mov.w	r0, #0
 8009f60:	f04f 0100 	mov.w	r1, #0
 8009f64:	0219      	lsls	r1, r3, #8
 8009f66:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009f6a:	0210      	lsls	r0, r2, #8
 8009f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f6e:	3303      	adds	r3, #3
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2200      	movs	r2, #0
 8009f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f78:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009f7a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8009f7e:	4623      	mov	r3, r4
 8009f80:	4303      	orrs	r3, r0
 8009f82:	61bb      	str	r3, [r7, #24]
 8009f84:	462b      	mov	r3, r5
 8009f86:	430b      	orrs	r3, r1
 8009f88:	61fb      	str	r3, [r7, #28]
 8009f8a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009f8e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8009f92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009f96:	f04f 0000 	mov.w	r0, #0
 8009f9a:	f04f 0100 	mov.w	r1, #0
 8009f9e:	0219      	lsls	r1, r3, #8
 8009fa0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009fa4:	0210      	lsls	r0, r2, #8
 8009fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fa8:	3302      	adds	r3, #2
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2200      	movs	r2, #0
 8009fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8009fb2:	647a      	str	r2, [r7, #68]	; 0x44
 8009fb4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8009fb8:	4623      	mov	r3, r4
 8009fba:	4303      	orrs	r3, r0
 8009fbc:	613b      	str	r3, [r7, #16]
 8009fbe:	462b      	mov	r3, r5
 8009fc0:	430b      	orrs	r3, r1
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009fc8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8009fcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009fd0:	f04f 0200 	mov.w	r2, #0
 8009fd4:	f04f 0300 	mov.w	r3, #0
 8009fd8:	020b      	lsls	r3, r1, #8
 8009fda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fde:	0202      	lsls	r2, r0, #8
 8009fe0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009fe2:	3101      	adds	r1, #1
 8009fe4:	7809      	ldrb	r1, [r1, #0]
 8009fe6:	b2c9      	uxtb	r1, r1
 8009fe8:	2000      	movs	r0, #0
 8009fea:	63b9      	str	r1, [r7, #56]	; 0x38
 8009fec:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009fee:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4311      	orrs	r1, r2
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	4319      	orrs	r1, r3
 8009ffc:	60f9      	str	r1, [r7, #12]
 8009ffe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a002:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800a006:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a00a:	f04f 0200 	mov.w	r2, #0
 800a00e:	f04f 0300 	mov.w	r3, #0
 800a012:	020b      	lsls	r3, r1, #8
 800a014:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a018:	0202      	lsls	r2, r0, #8
 800a01a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a01c:	7809      	ldrb	r1, [r1, #0]
 800a01e:	b2c9      	uxtb	r1, r1
 800a020:	2000      	movs	r0, #0
 800a022:	6339      	str	r1, [r7, #48]	; 0x30
 800a024:	6378      	str	r0, [r7, #52]	; 0x34
 800a026:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a02a:	4621      	mov	r1, r4
 800a02c:	4311      	orrs	r1, r2
 800a02e:	6039      	str	r1, [r7, #0]
 800a030:	4629      	mov	r1, r5
 800a032:	4319      	orrs	r1, r3
 800a034:	6079      	str	r1, [r7, #4]
 800a036:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a03a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800a03e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800a042:	4610      	mov	r0, r2
 800a044:	4619      	mov	r1, r3
 800a046:	3774      	adds	r7, #116	; 0x74
 800a048:	46bd      	mov	sp, r7
 800a04a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a04e:	4770      	bx	lr

0800a050 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	460b      	mov	r3, r1
 800a05a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	607a      	str	r2, [r7, #4]
 800a062:	887a      	ldrh	r2, [r7, #2]
 800a064:	b2d2      	uxtb	r2, r2
 800a066:	701a      	strb	r2, [r3, #0]
 800a068:	887b      	ldrh	r3, [r7, #2]
 800a06a:	0a1b      	lsrs	r3, r3, #8
 800a06c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	1c5a      	adds	r2, r3, #1
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	887a      	ldrh	r2, [r7, #2]
 800a076:	b2d2      	uxtb	r2, r2
 800a078:	701a      	strb	r2, [r3, #0]
}
 800a07a:	bf00      	nop
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	607a      	str	r2, [r7, #4]
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	b2d2      	uxtb	r2, r2
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	0a1b      	lsrs	r3, r3, #8
 800a0a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	683a      	ldr	r2, [r7, #0]
 800a0aa:	b2d2      	uxtb	r2, r2
 800a0ac:	701a      	strb	r2, [r3, #0]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	0a1b      	lsrs	r3, r3, #8
 800a0b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	1c5a      	adds	r2, r3, #1
 800a0b8:	607a      	str	r2, [r7, #4]
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	b2d2      	uxtb	r2, r2
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	0a1b      	lsrs	r3, r3, #8
 800a0c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	1c5a      	adds	r2, r3, #1
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	701a      	strb	r2, [r3, #0]
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b085      	sub	sp, #20
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	60f8      	str	r0, [r7, #12]
 800a0e6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	60fa      	str	r2, [r7, #12]
 800a0f0:	783a      	ldrb	r2, [r7, #0]
 800a0f2:	701a      	strb	r2, [r3, #0]
 800a0f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0f8:	f04f 0200 	mov.w	r2, #0
 800a0fc:	f04f 0300 	mov.w	r3, #0
 800a100:	0a02      	lsrs	r2, r0, #8
 800a102:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a106:	0a0b      	lsrs	r3, r1, #8
 800a108:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	1c5a      	adds	r2, r3, #1
 800a110:	60fa      	str	r2, [r7, #12]
 800a112:	783a      	ldrb	r2, [r7, #0]
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a11a:	f04f 0200 	mov.w	r2, #0
 800a11e:	f04f 0300 	mov.w	r3, #0
 800a122:	0a02      	lsrs	r2, r0, #8
 800a124:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a128:	0a0b      	lsrs	r3, r1, #8
 800a12a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	60fa      	str	r2, [r7, #12]
 800a134:	783a      	ldrb	r2, [r7, #0]
 800a136:	701a      	strb	r2, [r3, #0]
 800a138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	f04f 0300 	mov.w	r3, #0
 800a144:	0a02      	lsrs	r2, r0, #8
 800a146:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a14a:	0a0b      	lsrs	r3, r1, #8
 800a14c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	1c5a      	adds	r2, r3, #1
 800a154:	60fa      	str	r2, [r7, #12]
 800a156:	783a      	ldrb	r2, [r7, #0]
 800a158:	701a      	strb	r2, [r3, #0]
 800a15a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a15e:	f04f 0200 	mov.w	r2, #0
 800a162:	f04f 0300 	mov.w	r3, #0
 800a166:	0a02      	lsrs	r2, r0, #8
 800a168:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a16c:	0a0b      	lsrs	r3, r1, #8
 800a16e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	60fa      	str	r2, [r7, #12]
 800a178:	783a      	ldrb	r2, [r7, #0]
 800a17a:	701a      	strb	r2, [r3, #0]
 800a17c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a180:	f04f 0200 	mov.w	r2, #0
 800a184:	f04f 0300 	mov.w	r3, #0
 800a188:	0a02      	lsrs	r2, r0, #8
 800a18a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a18e:	0a0b      	lsrs	r3, r1, #8
 800a190:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	60fa      	str	r2, [r7, #12]
 800a19a:	783a      	ldrb	r2, [r7, #0]
 800a19c:	701a      	strb	r2, [r3, #0]
 800a19e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1a2:	f04f 0200 	mov.w	r2, #0
 800a1a6:	f04f 0300 	mov.w	r3, #0
 800a1aa:	0a02      	lsrs	r2, r0, #8
 800a1ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a1b0:	0a0b      	lsrs	r3, r1, #8
 800a1b2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	1c5a      	adds	r2, r3, #1
 800a1ba:	60fa      	str	r2, [r7, #12]
 800a1bc:	783a      	ldrb	r2, [r7, #0]
 800a1be:	701a      	strb	r2, [r3, #0]
 800a1c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1c4:	f04f 0200 	mov.w	r2, #0
 800a1c8:	f04f 0300 	mov.w	r3, #0
 800a1cc:	0a02      	lsrs	r2, r0, #8
 800a1ce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a1d2:	0a0b      	lsrs	r3, r1, #8
 800a1d4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	60fa      	str	r2, [r7, #12]
 800a1de:	783a      	ldrb	r2, [r7, #0]
 800a1e0:	701a      	strb	r2, [r3, #0]
}
 800a1e2:	bf00      	nop
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a1ee:	b480      	push	{r7}
 800a1f0:	b087      	sub	sp, #28
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00d      	beq.n	800a224 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	1c53      	adds	r3, r2, #1
 800a20c:	613b      	str	r3, [r7, #16]
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	1c59      	adds	r1, r3, #1
 800a212:	6179      	str	r1, [r7, #20]
 800a214:	7812      	ldrb	r2, [r2, #0]
 800a216:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	607b      	str	r3, [r7, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1f1      	bne.n	800a208 <mem_cpy+0x1a>
	}
}
 800a224:	bf00      	nop
 800a226:	371c      	adds	r7, #28
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	1c5a      	adds	r2, r3, #1
 800a244:	617a      	str	r2, [r7, #20]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	b2d2      	uxtb	r2, r2
 800a24a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3b01      	subs	r3, #1
 800a250:	607b      	str	r3, [r7, #4]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1f3      	bne.n	800a240 <mem_set+0x10>
}
 800a258:	bf00      	nop
 800a25a:	bf00      	nop
 800a25c:	371c      	adds	r7, #28
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a266:	b480      	push	{r7}
 800a268:	b089      	sub	sp, #36	; 0x24
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	60f8      	str	r0, [r7, #12]
 800a26e:	60b9      	str	r1, [r7, #8]
 800a270:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	61fb      	str	r3, [r7, #28]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	61fa      	str	r2, [r7, #28]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	4619      	mov	r1, r3
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	61ba      	str	r2, [r7, #24]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	1acb      	subs	r3, r1, r3
 800a292:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3b01      	subs	r3, #1
 800a298:	607b      	str	r3, [r7, #4]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <mem_cmp+0x40>
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d0eb      	beq.n	800a27e <mem_cmp+0x18>

	return r;
 800a2a6:	697b      	ldr	r3, [r7, #20]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3724      	adds	r7, #36	; 0x24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a2be:	e002      	b.n	800a2c6 <chk_chr+0x12>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	607b      	str	r3, [r7, #4]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d005      	beq.n	800a2da <chk_chr+0x26>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d1f2      	bne.n	800a2c0 <chk_chr+0xc>
	return *str;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
	...

0800a2ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	60bb      	str	r3, [r7, #8]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	60fb      	str	r3, [r7, #12]
 800a2fe:	e029      	b.n	800a354 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a300:	4a27      	ldr	r2, [pc, #156]	; (800a3a0 <chk_lock+0xb4>)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	011b      	lsls	r3, r3, #4
 800a306:	4413      	add	r3, r2
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d01d      	beq.n	800a34a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a30e:	4a24      	ldr	r2, [pc, #144]	; (800a3a0 <chk_lock+0xb4>)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	4413      	add	r3, r2
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d116      	bne.n	800a34e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a320:	4a1f      	ldr	r2, [pc, #124]	; (800a3a0 <chk_lock+0xb4>)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	011b      	lsls	r3, r3, #4
 800a326:	4413      	add	r3, r2
 800a328:	3304      	adds	r3, #4
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a330:	429a      	cmp	r2, r3
 800a332:	d10c      	bne.n	800a34e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a334:	4a1a      	ldr	r2, [pc, #104]	; (800a3a0 <chk_lock+0xb4>)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	011b      	lsls	r3, r3, #4
 800a33a:	4413      	add	r3, r2
 800a33c:	3308      	adds	r3, #8
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800a344:	429a      	cmp	r2, r3
 800a346:	d102      	bne.n	800a34e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a348:	e007      	b.n	800a35a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a34a:	2301      	movs	r3, #1
 800a34c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d9d2      	bls.n	800a300 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d109      	bne.n	800a374 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d102      	bne.n	800a36c <chk_lock+0x80>
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d101      	bne.n	800a370 <chk_lock+0x84>
 800a36c:	2300      	movs	r3, #0
 800a36e:	e010      	b.n	800a392 <chk_lock+0xa6>
 800a370:	2312      	movs	r3, #18
 800a372:	e00e      	b.n	800a392 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d108      	bne.n	800a38c <chk_lock+0xa0>
 800a37a:	4a09      	ldr	r2, [pc, #36]	; (800a3a0 <chk_lock+0xb4>)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	4413      	add	r3, r2
 800a382:	330c      	adds	r3, #12
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a38a:	d101      	bne.n	800a390 <chk_lock+0xa4>
 800a38c:	2310      	movs	r3, #16
 800a38e:	e000      	b.n	800a392 <chk_lock+0xa6>
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	20002318 	.word	0x20002318

0800a3a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	607b      	str	r3, [r7, #4]
 800a3ae:	e002      	b.n	800a3b6 <enq_lock+0x12>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	607b      	str	r3, [r7, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d806      	bhi.n	800a3ca <enq_lock+0x26>
 800a3bc:	4a09      	ldr	r2, [pc, #36]	; (800a3e4 <enq_lock+0x40>)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	4413      	add	r3, r2
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1f2      	bne.n	800a3b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	bf14      	ite	ne
 800a3d0:	2301      	movne	r3, #1
 800a3d2:	2300      	moveq	r3, #0
 800a3d4:	b2db      	uxtb	r3, r3
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20002318 	.word	0x20002318

0800a3e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	60fb      	str	r3, [r7, #12]
 800a3f6:	e01f      	b.n	800a438 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a3f8:	4a41      	ldr	r2, [pc, #260]	; (800a500 <inc_lock+0x118>)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	011b      	lsls	r3, r3, #4
 800a3fe:	4413      	add	r3, r2
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d113      	bne.n	800a432 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a40a:	4a3d      	ldr	r2, [pc, #244]	; (800a500 <inc_lock+0x118>)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	011b      	lsls	r3, r3, #4
 800a410:	4413      	add	r3, r2
 800a412:	3304      	adds	r3, #4
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d109      	bne.n	800a432 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a41e:	4a38      	ldr	r2, [pc, #224]	; (800a500 <inc_lock+0x118>)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	011b      	lsls	r3, r3, #4
 800a424:	4413      	add	r3, r2
 800a426:	3308      	adds	r3, #8
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800a42e:	429a      	cmp	r2, r3
 800a430:	d006      	beq.n	800a440 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d9dc      	bls.n	800a3f8 <inc_lock+0x10>
 800a43e:	e000      	b.n	800a442 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a440:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b02      	cmp	r3, #2
 800a446:	d132      	bne.n	800a4ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a448:	2300      	movs	r3, #0
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	e002      	b.n	800a454 <inc_lock+0x6c>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3301      	adds	r3, #1
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d806      	bhi.n	800a468 <inc_lock+0x80>
 800a45a:	4a29      	ldr	r2, [pc, #164]	; (800a500 <inc_lock+0x118>)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	4413      	add	r3, r2
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1f2      	bne.n	800a44e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d101      	bne.n	800a472 <inc_lock+0x8a>
 800a46e:	2300      	movs	r3, #0
 800a470:	e040      	b.n	800a4f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	4922      	ldr	r1, [pc, #136]	; (800a500 <inc_lock+0x118>)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	011b      	lsls	r3, r3, #4
 800a47c:	440b      	add	r3, r1
 800a47e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	491e      	ldr	r1, [pc, #120]	; (800a500 <inc_lock+0x118>)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	011b      	lsls	r3, r3, #4
 800a48a:	440b      	add	r3, r1
 800a48c:	3304      	adds	r3, #4
 800a48e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a494:	491a      	ldr	r1, [pc, #104]	; (800a500 <inc_lock+0x118>)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	011b      	lsls	r3, r3, #4
 800a49a:	440b      	add	r3, r1
 800a49c:	3308      	adds	r3, #8
 800a49e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a4a0:	4a17      	ldr	r2, [pc, #92]	; (800a500 <inc_lock+0x118>)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	011b      	lsls	r3, r3, #4
 800a4a6:	4413      	add	r3, r2
 800a4a8:	330c      	adds	r3, #12
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d009      	beq.n	800a4c8 <inc_lock+0xe0>
 800a4b4:	4a12      	ldr	r2, [pc, #72]	; (800a500 <inc_lock+0x118>)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	011b      	lsls	r3, r3, #4
 800a4ba:	4413      	add	r3, r2
 800a4bc:	330c      	adds	r3, #12
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <inc_lock+0xe0>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	e015      	b.n	800a4f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d108      	bne.n	800a4e0 <inc_lock+0xf8>
 800a4ce:	4a0c      	ldr	r2, [pc, #48]	; (800a500 <inc_lock+0x118>)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	011b      	lsls	r3, r3, #4
 800a4d4:	4413      	add	r3, r2
 800a4d6:	330c      	adds	r3, #12
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	e001      	b.n	800a4e4 <inc_lock+0xfc>
 800a4e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4e4:	4906      	ldr	r1, [pc, #24]	; (800a500 <inc_lock+0x118>)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	440b      	add	r3, r1
 800a4ec:	330c      	adds	r3, #12
 800a4ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3301      	adds	r3, #1
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	20002318 	.word	0x20002318

0800a504 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3b01      	subs	r3, #1
 800a510:	607b      	str	r3, [r7, #4]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d825      	bhi.n	800a564 <dec_lock+0x60>
		n = Files[i].ctr;
 800a518:	4a17      	ldr	r2, [pc, #92]	; (800a578 <dec_lock+0x74>)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	4413      	add	r3, r2
 800a520:	330c      	adds	r3, #12
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a526:	89fb      	ldrh	r3, [r7, #14]
 800a528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a52c:	d101      	bne.n	800a532 <dec_lock+0x2e>
 800a52e:	2300      	movs	r3, #0
 800a530:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a532:	89fb      	ldrh	r3, [r7, #14]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <dec_lock+0x3a>
 800a538:	89fb      	ldrh	r3, [r7, #14]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a53e:	4a0e      	ldr	r2, [pc, #56]	; (800a578 <dec_lock+0x74>)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	011b      	lsls	r3, r3, #4
 800a544:	4413      	add	r3, r2
 800a546:	330c      	adds	r3, #12
 800a548:	89fa      	ldrh	r2, [r7, #14]
 800a54a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a54c:	89fb      	ldrh	r3, [r7, #14]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d105      	bne.n	800a55e <dec_lock+0x5a>
 800a552:	4a09      	ldr	r2, [pc, #36]	; (800a578 <dec_lock+0x74>)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	011b      	lsls	r3, r3, #4
 800a558:	4413      	add	r3, r2
 800a55a:	2200      	movs	r2, #0
 800a55c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	737b      	strb	r3, [r7, #13]
 800a562:	e001      	b.n	800a568 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a564:	2302      	movs	r3, #2
 800a566:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a568:	7b7b      	ldrb	r3, [r7, #13]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	20002318 	.word	0x20002318

0800a57c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a584:	2300      	movs	r3, #0
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	e010      	b.n	800a5ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a58a:	4a0d      	ldr	r2, [pc, #52]	; (800a5c0 <clear_lock+0x44>)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	4413      	add	r3, r2
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	429a      	cmp	r2, r3
 800a598:	d105      	bne.n	800a5a6 <clear_lock+0x2a>
 800a59a:	4a09      	ldr	r2, [pc, #36]	; (800a5c0 <clear_lock+0x44>)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	4413      	add	r3, r2
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d9eb      	bls.n	800a58a <clear_lock+0xe>
	}
}
 800a5b2:	bf00      	nop
 800a5b4:	bf00      	nop
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	20002318 	.word	0x20002318

0800a5c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	78db      	ldrb	r3, [r3, #3]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d034      	beq.n	800a642 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	7858      	ldrb	r0, [r3, #1]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	f7ff fbdc 	bl	8009da8 <disk_write>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	73fb      	strb	r3, [r7, #15]
 800a5fa:	e022      	b.n	800a642 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	1ad2      	subs	r2, r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	429a      	cmp	r2, r3
 800a610:	d217      	bcs.n	800a642 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	789b      	ldrb	r3, [r3, #2]
 800a616:	613b      	str	r3, [r7, #16]
 800a618:	e010      	b.n	800a63c <sync_window+0x78>
					wsect += fs->fsize;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	4413      	add	r3, r2
 800a622:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	7858      	ldrb	r0, [r3, #1]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a62e:	2301      	movs	r3, #1
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	f7ff fbb9 	bl	8009da8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3b01      	subs	r3, #1
 800a63a:	613b      	str	r3, [r7, #16]
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d8eb      	bhi.n	800a61a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a642:	7bfb      	ldrb	r3, [r7, #15]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d01b      	beq.n	800a69c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff ffad 	bl	800a5c4 <sync_window>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d113      	bne.n	800a69c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	7858      	ldrb	r0, [r3, #1]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a67e:	2301      	movs	r3, #1
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	f7ff fb71 	bl	8009d68 <disk_read>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d004      	beq.n	800a696 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a690:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a692:	2301      	movs	r3, #1
 800a694:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
	...

0800a6a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff ff87 	bl	800a5c4 <sync_window>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d159      	bne.n	800a774 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d149      	bne.n	800a75c <sync_fs+0xb4>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	791b      	ldrb	r3, [r3, #4]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d145      	bne.n	800a75c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	899b      	ldrh	r3, [r3, #12]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	2100      	movs	r1, #0
 800a6de:	f7ff fda7 	bl	800a230 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	333c      	adds	r3, #60	; 0x3c
 800a6e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a6ea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff fcae 	bl	800a050 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	333c      	adds	r3, #60	; 0x3c
 800a6f8:	4921      	ldr	r1, [pc, #132]	; (800a780 <sync_fs+0xd8>)
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff fcc3 	bl	800a086 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	333c      	adds	r3, #60	; 0x3c
 800a704:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a708:	491e      	ldr	r1, [pc, #120]	; (800a784 <sync_fs+0xdc>)
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7ff fcbb 	bl	800a086 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	333c      	adds	r3, #60	; 0x3c
 800a714:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f7ff fcb1 	bl	800a086 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	333c      	adds	r3, #60	; 0x3c
 800a728:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	4619      	mov	r1, r3
 800a732:	4610      	mov	r0, r2
 800a734:	f7ff fca7 	bl	800a086 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	7858      	ldrb	r0, [r3, #1]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a750:	2301      	movs	r3, #1
 800a752:	f7ff fb29 	bl	8009da8 <disk_write>
			fs->fsi_flag = 0;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	785b      	ldrb	r3, [r3, #1]
 800a760:	2200      	movs	r2, #0
 800a762:	2100      	movs	r1, #0
 800a764:	4618      	mov	r0, r3
 800a766:	f7ff fb3f 	bl	8009de8 <disk_ioctl>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <sync_fs+0xcc>
 800a770:	2301      	movs	r3, #1
 800a772:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a774:	7bfb      	ldrb	r3, [r7, #15]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	41615252 	.word	0x41615252
 800a784:	61417272 	.word	0x61417272

0800a788 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	3b02      	subs	r3, #2
 800a796:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	3b02      	subs	r3, #2
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d301      	bcc.n	800a7a8 <clust2sect+0x20>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	e008      	b.n	800a7ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	895b      	ldrh	r3, [r3, #10]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	fb03 f202 	mul.w	r2, r3, r2
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b8:	4413      	add	r3, r2
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a7c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a7cc:	b088      	sub	sp, #32
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d904      	bls.n	800a7ea <get_fat+0x22>
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	683a      	ldr	r2, [r7, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d302      	bcc.n	800a7f0 <get_fat+0x28>
		val = 1;	/* Internal error */
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	61fb      	str	r3, [r7, #28]
 800a7ee:	e13a      	b.n	800aa66 <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a7f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7f4:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	2b03      	cmp	r3, #3
 800a7fe:	f200 8126 	bhi.w	800aa4e <get_fat+0x286>
 800a802:	a201      	add	r2, pc, #4	; (adr r2, 800a808 <get_fat+0x40>)
 800a804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a808:	0800a819 	.word	0x0800a819
 800a80c:	0800a8c7 	.word	0x0800a8c7
 800a810:	0800a913 	.word	0x0800a913
 800a814:	0800a963 	.word	0x0800a963
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	085b      	lsrs	r3, r3, #1
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	4413      	add	r3, r2
 800a824:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	899b      	ldrh	r3, [r3, #12]
 800a82e:	4619      	mov	r1, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	fbb3 f3f1 	udiv	r3, r3, r1
 800a836:	4413      	add	r3, r2
 800a838:	4619      	mov	r1, r3
 800a83a:	69b8      	ldr	r0, [r7, #24]
 800a83c:	f7ff ff06 	bl	800a64c <move_window>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	f040 8106 	bne.w	800aa54 <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	60fa      	str	r2, [r7, #12]
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	8992      	ldrh	r2, [r2, #12]
 800a852:	fbb3 f1f2 	udiv	r1, r3, r2
 800a856:	fb01 f202 	mul.w	r2, r1, r2
 800a85a:	1a9b      	subs	r3, r3, r2
 800a85c:	69ba      	ldr	r2, [r7, #24]
 800a85e:	4413      	add	r3, r2
 800a860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a864:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	899b      	ldrh	r3, [r3, #12]
 800a86e:	4619      	mov	r1, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	fbb3 f3f1 	udiv	r3, r3, r1
 800a876:	4413      	add	r3, r2
 800a878:	4619      	mov	r1, r3
 800a87a:	69b8      	ldr	r0, [r7, #24]
 800a87c:	f7ff fee6 	bl	800a64c <move_window>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	f040 80e8 	bne.w	800aa58 <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	899b      	ldrh	r3, [r3, #12]
 800a88c:	461a      	mov	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	fbb3 f1f2 	udiv	r1, r3, r2
 800a894:	fb01 f202 	mul.w	r2, r1, r2
 800a898:	1a9b      	subs	r3, r3, r2
 800a89a:	69ba      	ldr	r2, [r7, #24]
 800a89c:	4413      	add	r3, r2
 800a89e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a2:	021b      	lsls	r3, r3, #8
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d002      	beq.n	800a8bc <get_fat+0xf4>
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	091b      	lsrs	r3, r3, #4
 800a8ba:	e002      	b.n	800a8c2 <get_fat+0xfa>
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8c2:	61fb      	str	r3, [r7, #28]
			break;
 800a8c4:	e0cf      	b.n	800aa66 <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	899b      	ldrh	r3, [r3, #12]
 800a8ce:	085b      	lsrs	r3, r3, #1
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8da:	4413      	add	r3, r2
 800a8dc:	4619      	mov	r1, r3
 800a8de:	69b8      	ldr	r0, [r7, #24]
 800a8e0:	f7ff feb4 	bl	800a64c <move_window>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f040 80b8 	bne.w	800aa5c <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	8992      	ldrh	r2, [r2, #12]
 800a8fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8fe:	fb00 f202 	mul.w	r2, r0, r2
 800a902:	1a9b      	subs	r3, r3, r2
 800a904:	440b      	add	r3, r1
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff fa8c 	bl	8009e24 <ld_word>
 800a90c:	4603      	mov	r3, r0
 800a90e:	61fb      	str	r3, [r7, #28]
			break;
 800a910:	e0a9      	b.n	800aa66 <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	899b      	ldrh	r3, [r3, #12]
 800a91a:	089b      	lsrs	r3, r3, #2
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	4619      	mov	r1, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	fbb3 f3f1 	udiv	r3, r3, r1
 800a926:	4413      	add	r3, r2
 800a928:	4619      	mov	r1, r3
 800a92a:	69b8      	ldr	r0, [r7, #24]
 800a92c:	f7ff fe8e 	bl	800a64c <move_window>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	f040 8094 	bne.w	800aa60 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	8992      	ldrh	r2, [r2, #12]
 800a946:	fbb3 f0f2 	udiv	r0, r3, r2
 800a94a:	fb00 f202 	mul.w	r2, r0, r2
 800a94e:	1a9b      	subs	r3, r3, r2
 800a950:	440b      	add	r3, r1
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff fa7e 	bl	8009e54 <ld_dword>
 800a958:	4603      	mov	r3, r0
 800a95a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a95e:	61fb      	str	r3, [r7, #28]
			break;
 800a960:	e081      	b.n	800aa66 <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a968:	4313      	orrs	r3, r2
 800a96a:	d070      	beq.n	800aa4e <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a97c:	1e54      	subs	r4, r2, #1
 800a97e:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	899b      	ldrh	r3, [r3, #12]
 800a986:	b29b      	uxth	r3, r3
 800a988:	2200      	movs	r2, #0
 800a98a:	4698      	mov	r8, r3
 800a98c:	4691      	mov	r9, r2
 800a98e:	4642      	mov	r2, r8
 800a990:	464b      	mov	r3, r9
 800a992:	4620      	mov	r0, r4
 800a994:	4629      	mov	r1, r5
 800a996:	f7f5 ff99 	bl	80008cc <__aeabi_uldivmod>
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	895b      	ldrh	r3, [r3, #10]
 800a9a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a6:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	79db      	ldrb	r3, [r3, #7]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d10e      	bne.n	800a9ce <get_fat+0x206>
					if (cofs <= clen) {
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d80a      	bhi.n	800a9ce <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d002      	beq.n	800a9c6 <get_fat+0x1fe>
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	e001      	b.n	800a9ca <get_fat+0x202>
 800a9c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a9ca:	61fb      	str	r3, [r7, #28]
						break;
 800a9cc:	e04b      	b.n	800aa66 <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	79db      	ldrb	r3, [r3, #7]
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d108      	bne.n	800a9e8 <get_fat+0x220>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d203      	bcs.n	800a9e8 <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	61fb      	str	r3, [r7, #28]
					break;
 800a9e6:	e03e      	b.n	800aa66 <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	79db      	ldrb	r3, [r3, #7]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d02e      	beq.n	800aa4e <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	69db      	ldr	r3, [r3, #28]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d003      	beq.n	800aa00 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a9f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a9fc:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800a9fe:	e032      	b.n	800aa66 <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	899b      	ldrh	r3, [r3, #12]
 800aa08:	089b      	lsrs	r3, r3, #2
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa14:	4413      	add	r3, r2
 800aa16:	4619      	mov	r1, r3
 800aa18:	69b8      	ldr	r0, [r7, #24]
 800aa1a:	f7ff fe17 	bl	800a64c <move_window>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d11f      	bne.n	800aa64 <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	69ba      	ldr	r2, [r7, #24]
 800aa30:	8992      	ldrh	r2, [r2, #12]
 800aa32:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa36:	fb00 f202 	mul.w	r2, r0, r2
 800aa3a:	1a9b      	subs	r3, r3, r2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7ff fa08 	bl	8009e54 <ld_dword>
 800aa44:	4603      	mov	r3, r0
 800aa46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa4a:	61fb      	str	r3, [r7, #28]
					break;
 800aa4c:	e00b      	b.n	800aa66 <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aa4e:	2301      	movs	r3, #1
 800aa50:	61fb      	str	r3, [r7, #28]
 800aa52:	e008      	b.n	800aa66 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa54:	bf00      	nop
 800aa56:	e006      	b.n	800aa66 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa58:	bf00      	nop
 800aa5a:	e004      	b.n	800aa66 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aa5c:	bf00      	nop
 800aa5e:	e002      	b.n	800aa66 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa60:	bf00      	nop
 800aa62:	e000      	b.n	800aa66 <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa64:	bf00      	nop
		}
	}

	return val;
 800aa66:	69fb      	ldr	r3, [r7, #28]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3720      	adds	r7, #32
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800aa72:	bf00      	nop

0800aa74 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aa74:	b590      	push	{r4, r7, lr}
 800aa76:	b089      	sub	sp, #36	; 0x24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aa80:	2302      	movs	r3, #2
 800aa82:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	f240 8106 	bls.w	800ac98 <put_fat+0x224>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	f080 8100 	bcs.w	800ac98 <put_fat+0x224>
		switch (fs->fs_type) {
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	f300 8104 	bgt.w	800acaa <put_fat+0x236>
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	f280 80b3 	bge.w	800ac0e <put_fat+0x19a>
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d003      	beq.n	800aab4 <put_fat+0x40>
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	f000 8083 	beq.w	800abb8 <put_fat+0x144>
 800aab2:	e0fa      	b.n	800acaa <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	61bb      	str	r3, [r7, #24]
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	085b      	lsrs	r3, r3, #1
 800aabc:	69ba      	ldr	r2, [r7, #24]
 800aabe:	4413      	add	r3, r2
 800aac0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	899b      	ldrh	r3, [r3, #12]
 800aaca:	4619      	mov	r1, r3
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	fbb3 f3f1 	udiv	r3, r3, r1
 800aad2:	4413      	add	r3, r2
 800aad4:	4619      	mov	r1, r3
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f7ff fdb8 	bl	800a64c <move_window>
 800aadc:	4603      	mov	r3, r0
 800aade:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aae0:	7ffb      	ldrb	r3, [r7, #31]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f040 80da 	bne.w	800ac9c <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	61ba      	str	r2, [r7, #24]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	8992      	ldrh	r2, [r2, #12]
 800aaf8:	fbb3 f0f2 	udiv	r0, r3, r2
 800aafc:	fb00 f202 	mul.w	r2, r0, r2
 800ab00:	1a9b      	subs	r3, r3, r2
 800ab02:	440b      	add	r3, r1
 800ab04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f003 0301 	and.w	r3, r3, #1
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00d      	beq.n	800ab2c <put_fat+0xb8>
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	b25b      	sxtb	r3, r3
 800ab16:	f003 030f 	and.w	r3, r3, #15
 800ab1a:	b25a      	sxtb	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	b25b      	sxtb	r3, r3
 800ab24:	4313      	orrs	r3, r2
 800ab26:	b25b      	sxtb	r3, r3
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	e001      	b.n	800ab30 <put_fat+0xbc>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2201      	movs	r2, #1
 800ab38:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	899b      	ldrh	r3, [r3, #12]
 800ab42:	4619      	mov	r1, r3
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab4a:	4413      	add	r3, r2
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fd7c 	bl	800a64c <move_window>
 800ab54:	4603      	mov	r3, r0
 800ab56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab58:	7ffb      	ldrb	r3, [r7, #31]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f040 80a0 	bne.w	800aca0 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	899b      	ldrh	r3, [r3, #12]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab72:	fb00 f202 	mul.w	r2, r0, r2
 800ab76:	1a9b      	subs	r3, r3, r2
 800ab78:	440b      	add	r3, r1
 800ab7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <put_fat+0x11a>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	091b      	lsrs	r3, r3, #4
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	e00e      	b.n	800abac <put_fat+0x138>
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	b25b      	sxtb	r3, r3
 800ab94:	f023 030f 	bic.w	r3, r3, #15
 800ab98:	b25a      	sxtb	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	0a1b      	lsrs	r3, r3, #8
 800ab9e:	b25b      	sxtb	r3, r3
 800aba0:	f003 030f 	and.w	r3, r3, #15
 800aba4:	b25b      	sxtb	r3, r3
 800aba6:	4313      	orrs	r3, r2
 800aba8:	b25b      	sxtb	r3, r3
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2201      	movs	r2, #1
 800abb4:	70da      	strb	r2, [r3, #3]
			break;
 800abb6:	e078      	b.n	800acaa <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	899b      	ldrh	r3, [r3, #12]
 800abc0:	085b      	lsrs	r3, r3, #1
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	4619      	mov	r1, r3
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	fbb3 f3f1 	udiv	r3, r3, r1
 800abcc:	4413      	add	r3, r2
 800abce:	4619      	mov	r1, r3
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7ff fd3b 	bl	800a64c <move_window>
 800abd6:	4603      	mov	r3, r0
 800abd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800abda:	7ffb      	ldrb	r3, [r7, #31]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d161      	bne.n	800aca4 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	8992      	ldrh	r2, [r2, #12]
 800abee:	fbb3 f0f2 	udiv	r0, r3, r2
 800abf2:	fb00 f202 	mul.w	r2, r0, r2
 800abf6:	1a9b      	subs	r3, r3, r2
 800abf8:	440b      	add	r3, r1
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	b292      	uxth	r2, r2
 800abfe:	4611      	mov	r1, r2
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff fa25 	bl	800a050 <st_word>
			fs->wflag = 1;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	70da      	strb	r2, [r3, #3]
			break;
 800ac0c:	e04d      	b.n	800acaa <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	899b      	ldrh	r3, [r3, #12]
 800ac16:	089b      	lsrs	r3, r3, #2
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac22:	4413      	add	r3, r2
 800ac24:	4619      	mov	r1, r3
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f7ff fd10 	bl	800a64c <move_window>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac30:	7ffb      	ldrb	r3, [r7, #31]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d138      	bne.n	800aca8 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	2b04      	cmp	r3, #4
 800ac3c:	d017      	beq.n	800ac6e <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	8992      	ldrh	r2, [r2, #12]
 800ac52:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac56:	fb00 f202 	mul.w	r2, r0, r2
 800ac5a:	1a9b      	subs	r3, r3, r2
 800ac5c:	440b      	add	r3, r1
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff f8f8 	bl	8009e54 <ld_dword>
 800ac64:	4603      	mov	r3, r0
 800ac66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ac6a:	4323      	orrs	r3, r4
 800ac6c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	8992      	ldrh	r2, [r2, #12]
 800ac7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac80:	fb00 f202 	mul.w	r2, r0, r2
 800ac84:	1a9b      	subs	r3, r3, r2
 800ac86:	440b      	add	r3, r1
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff f9fb 	bl	800a086 <st_dword>
			fs->wflag = 1;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2201      	movs	r2, #1
 800ac94:	70da      	strb	r2, [r3, #3]
			break;
 800ac96:	e008      	b.n	800acaa <put_fat+0x236>
		}
	}
 800ac98:	bf00      	nop
 800ac9a:	e006      	b.n	800acaa <put_fat+0x236>
			if (res != FR_OK) break;
 800ac9c:	bf00      	nop
 800ac9e:	e004      	b.n	800acaa <put_fat+0x236>
			if (res != FR_OK) break;
 800aca0:	bf00      	nop
 800aca2:	e002      	b.n	800acaa <put_fat+0x236>
			if (res != FR_OK) break;
 800aca4:	bf00      	nop
 800aca6:	e000      	b.n	800acaa <put_fat+0x236>
			if (res != FR_OK) break;
 800aca8:	bf00      	nop
	return res;
 800acaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3724      	adds	r7, #36	; 0x24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd90      	pop	{r4, r7, pc}

0800acb4 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b08a      	sub	sp, #40	; 0x28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	3b02      	subs	r3, #2
 800acc4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	3b02      	subs	r3, #2
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d301      	bcc.n	800acd6 <find_bitmap+0x22>
 800acd2:	2300      	movs	r3, #0
 800acd4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	61fb      	str	r3, [r7, #28]
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	61bb      	str	r3, [r7, #24]
 800acde:	2300      	movs	r3, #0
 800ace0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	08db      	lsrs	r3, r3, #3
 800acea:	68f9      	ldr	r1, [r7, #12]
 800acec:	8989      	ldrh	r1, [r1, #12]
 800acee:	fbb3 f3f1 	udiv	r3, r3, r1
 800acf2:	4413      	add	r3, r2
 800acf4:	4619      	mov	r1, r3
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7ff fca8 	bl	800a64c <move_window>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <find_bitmap+0x54>
 800ad02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad06:	e058      	b.n	800adba <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	08db      	lsrs	r3, r3, #3
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	8992      	ldrh	r2, [r2, #12]
 800ad10:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad14:	fb01 f202 	mul.w	r2, r1, r2
 800ad18:	1a9b      	subs	r3, r3, r2
 800ad1a:	623b      	str	r3, [r7, #32]
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	f003 0307 	and.w	r3, r3, #7
 800ad22:	2201      	movs	r2, #1
 800ad24:	fa02 f303 	lsl.w	r3, r2, r3
 800ad28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	4413      	add	r3, r2
 800ad32:	333c      	adds	r3, #60	; 0x3c
 800ad34:	781a      	ldrb	r2, [r3, #0]
 800ad36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	74fb      	strb	r3, [r7, #19]
 800ad3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	61fb      	str	r3, [r7, #28]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	3b02      	subs	r3, #2
 800ad54:	69fa      	ldr	r2, [r7, #28]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d307      	bcc.n	800ad6a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	61fb      	str	r3, [r7, #28]
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	899b      	ldrh	r3, [r3, #12]
 800ad68:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800ad6a:	7cfb      	ldrb	r3, [r7, #19]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d109      	bne.n	800ad84 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	3301      	adds	r3, #1
 800ad74:	617b      	str	r3, [r7, #20]
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d106      	bne.n	800ad8c <find_bitmap+0xd8>
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	3302      	adds	r3, #2
 800ad82:	e01a      	b.n	800adba <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	61bb      	str	r3, [r7, #24]
 800ad88:	2300      	movs	r3, #0
 800ad8a:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800ad8c:	69fa      	ldr	r2, [r7, #28]
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d101      	bne.n	800ad98 <find_bitmap+0xe4>
 800ad94:	2300      	movs	r3, #0
 800ad96:	e010      	b.n	800adba <find_bitmap+0x106>
			} while (bm);
 800ad98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1c5      	bne.n	800ad2c <find_bitmap+0x78>
			bm = 1;
 800ada0:	2301      	movs	r3, #1
 800ada2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	3301      	adds	r3, #1
 800adaa:	623b      	str	r3, [r7, #32]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	899b      	ldrh	r3, [r3, #12]
 800adb0:	461a      	mov	r2, r3
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d3b9      	bcc.n	800ad2c <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800adb8:	e793      	b.n	800ace2 <find_bitmap+0x2e>
	}
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3728      	adds	r7, #40	; 0x28
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b088      	sub	sp, #32
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	607a      	str	r2, [r7, #4]
 800adce:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	3b02      	subs	r3, #2
 800add4:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	08db      	lsrs	r3, r3, #3
 800adde:	68f9      	ldr	r1, [r7, #12]
 800ade0:	8989      	ldrh	r1, [r1, #12]
 800ade2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ade6:	4413      	add	r3, r2
 800ade8:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	08db      	lsrs	r3, r3, #3
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	8992      	ldrh	r2, [r2, #12]
 800adf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800adf6:	fb01 f202 	mul.w	r2, r1, r2
 800adfa:	1a9b      	subs	r3, r3, r2
 800adfc:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f003 0307 	and.w	r3, r3, #7
 800ae04:	2201      	movs	r2, #1
 800ae06:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	1c5a      	adds	r2, r3, #1
 800ae10:	617a      	str	r2, [r7, #20]
 800ae12:	4619      	mov	r1, r3
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7ff fc19 	bl	800a64c <move_window>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <change_bitmap+0x62>
 800ae20:	2301      	movs	r3, #1
 800ae22:	e03f      	b.n	800aea4 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	4413      	add	r3, r2
 800ae2a:	333c      	adds	r3, #60	; 0x3c
 800ae2c:	781a      	ldrb	r2, [r3, #0]
 800ae2e:	7ffb      	ldrb	r3, [r7, #31]
 800ae30:	4013      	ands	r3, r2
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	bf14      	ite	ne
 800ae38:	2301      	movne	r3, #1
 800ae3a:	2300      	moveq	r3, #0
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	461a      	mov	r2, r3
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d101      	bne.n	800ae4a <change_bitmap+0x88>
 800ae46:	2302      	movs	r3, #2
 800ae48:	e02c      	b.n	800aea4 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	4413      	add	r3, r2
 800ae50:	333c      	adds	r3, #60	; 0x3c
 800ae52:	781a      	ldrb	r2, [r3, #0]
 800ae54:	7ffb      	ldrb	r3, [r7, #31]
 800ae56:	4053      	eors	r3, r2
 800ae58:	b2d9      	uxtb	r1, r3
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	4413      	add	r3, r2
 800ae60:	333c      	adds	r3, #60	; 0x3c
 800ae62:	460a      	mov	r2, r1
 800ae64:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	607b      	str	r3, [r7, #4]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <change_bitmap+0xba>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e013      	b.n	800aea4 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800ae7c:	7ffb      	ldrb	r3, [r7, #31]
 800ae7e:	005b      	lsls	r3, r3, #1
 800ae80:	77fb      	strb	r3, [r7, #31]
 800ae82:	7ffb      	ldrb	r3, [r7, #31]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1cd      	bne.n	800ae24 <change_bitmap+0x62>
			bm = 1;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	61bb      	str	r3, [r7, #24]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	899b      	ldrh	r3, [r3, #12]
 800ae96:	461a      	mov	r2, r3
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d3c2      	bcc.n	800ae24 <change_bitmap+0x62>
		i = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800aea2:	e7b3      	b.n	800ae0c <change_bitmap+0x4a>
	}
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3720      	adds	r7, #32
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	79db      	ldrb	r3, [r3, #7]
 800aeb8:	2b03      	cmp	r3, #3
 800aeba:	d121      	bne.n	800af00 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	617b      	str	r3, [r7, #20]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	613b      	str	r3, [r7, #16]
 800aec8:	e014      	b.n	800aef4 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	3301      	adds	r3, #1
 800aed2:	461a      	mov	r2, r3
 800aed4:	6979      	ldr	r1, [r7, #20]
 800aed6:	f7ff fdcd 	bl	800aa74 <put_fat>
 800aeda:	4603      	mov	r3, r0
 800aedc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800aede:	7bfb      	ldrb	r3, [r7, #15]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <fill_first_frag+0x3c>
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	e00c      	b.n	800af02 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	3301      	adds	r3, #1
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	3b01      	subs	r3, #1
 800aef2:	613b      	str	r3, [r7, #16]
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1e7      	bne.n	800aeca <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3718      	adds	r7, #24
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b086      	sub	sp, #24
 800af0e:	af00      	add	r7, sp, #0
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800af16:	e020      	b.n	800af5a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6818      	ldr	r0, [r3, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	69db      	ldr	r3, [r3, #28]
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	1c59      	adds	r1, r3, #1
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	69db      	ldr	r3, [r3, #28]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d905      	bls.n	800af3a <fill_last_frag+0x30>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	3302      	adds	r3, #2
 800af38:	e000      	b.n	800af3c <fill_last_frag+0x32>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	461a      	mov	r2, r3
 800af3e:	f7ff fd99 	bl	800aa74 <put_fat>
 800af42:	4603      	mov	r3, r0
 800af44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800af46:	7dfb      	ldrb	r3, [r7, #23]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <fill_last_frag+0x46>
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	e009      	b.n	800af64 <fill_last_frag+0x5a>
		obj->n_frag--;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	1e5a      	subs	r2, r3, #1
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1da      	bne.n	800af18 <fill_last_frag+0xe>
	}
	return FR_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08a      	sub	sp, #40	; 0x28
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	627b      	str	r3, [r7, #36]	; 0x24
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d904      	bls.n	800af9a <remove_chain+0x2e>
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	6a1b      	ldr	r3, [r3, #32]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	429a      	cmp	r2, r3
 800af98:	d301      	bcc.n	800af9e <remove_chain+0x32>
 800af9a:	2302      	movs	r3, #2
 800af9c:	e096      	b.n	800b0cc <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d014      	beq.n	800afce <remove_chain+0x62>
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2b04      	cmp	r3, #4
 800afaa:	d103      	bne.n	800afb4 <remove_chain+0x48>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	79db      	ldrb	r3, [r3, #7]
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d00c      	beq.n	800afce <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800afb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afb8:	6879      	ldr	r1, [r7, #4]
 800afba:	69b8      	ldr	r0, [r7, #24]
 800afbc:	f7ff fd5a 	bl	800aa74 <put_fat>
 800afc0:	4603      	mov	r3, r0
 800afc2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800afc4:	7ffb      	ldrb	r3, [r7, #31]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <remove_chain+0x62>
 800afca:	7ffb      	ldrb	r3, [r7, #31]
 800afcc:	e07e      	b.n	800b0cc <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800afce:	68b9      	ldr	r1, [r7, #8]
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f7ff fbf9 	bl	800a7c8 <get_fat>
 800afd6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d055      	beq.n	800b08a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d101      	bne.n	800afe8 <remove_chain+0x7c>
 800afe4:	2302      	movs	r3, #2
 800afe6:	e071      	b.n	800b0cc <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afee:	d101      	bne.n	800aff4 <remove_chain+0x88>
 800aff0:	2301      	movs	r3, #1
 800aff2:	e06b      	b.n	800b0cc <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d00b      	beq.n	800b014 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800affc:	2200      	movs	r2, #0
 800affe:	68b9      	ldr	r1, [r7, #8]
 800b000:	69b8      	ldr	r0, [r7, #24]
 800b002:	f7ff fd37 	bl	800aa74 <put_fat>
 800b006:	4603      	mov	r3, r0
 800b008:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b00a:	7ffb      	ldrb	r3, [r7, #31]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <remove_chain+0xa8>
 800b010:	7ffb      	ldrb	r3, [r7, #31]
 800b012:	e05b      	b.n	800b0cc <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	69da      	ldr	r2, [r3, #28]
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	6a1b      	ldr	r3, [r3, #32]
 800b01c:	3b02      	subs	r3, #2
 800b01e:	429a      	cmp	r2, r3
 800b020:	d20b      	bcs.n	800b03a <remove_chain+0xce>
			fs->free_clst++;
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	791b      	ldrb	r3, [r3, #4]
 800b030:	f043 0301 	orr.w	r3, r3, #1
 800b034:	b2da      	uxtb	r2, r3
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	3301      	adds	r3, #1
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	429a      	cmp	r2, r3
 800b042:	d102      	bne.n	800b04a <remove_chain+0xde>
			ecl = nxt;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	623b      	str	r3, [r7, #32]
 800b048:	e017      	b.n	800b07a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	2b04      	cmp	r3, #4
 800b050:	d10f      	bne.n	800b072 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800b052:	6a3a      	ldr	r2, [r7, #32]
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	1c5a      	adds	r2, r3, #1
 800b05a:	2300      	movs	r3, #0
 800b05c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b05e:	69b8      	ldr	r0, [r7, #24]
 800b060:	f7ff feaf 	bl	800adc2 <change_bitmap>
 800b064:	4603      	mov	r3, r0
 800b066:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800b068:	7ffb      	ldrb	r3, [r7, #31]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <remove_chain+0x106>
 800b06e:	7ffb      	ldrb	r3, [r7, #31]
 800b070:	e02c      	b.n	800b0cc <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	623b      	str	r3, [r7, #32]
 800b076:	6a3b      	ldr	r3, [r7, #32]
 800b078:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	429a      	cmp	r2, r3
 800b086:	d3a2      	bcc.n	800afce <remove_chain+0x62>
 800b088:	e000      	b.n	800b08c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800b08a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2b04      	cmp	r3, #4
 800b092:	d11a      	bne.n	800b0ca <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d103      	bne.n	800b0a2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	71da      	strb	r2, [r3, #7]
 800b0a0:	e013      	b.n	800b0ca <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	79db      	ldrb	r3, [r3, #7]
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d10f      	bne.n	800b0ca <remove_chain+0x15e>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d30a      	bcc.n	800b0ca <remove_chain+0x15e>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	689a      	ldr	r2, [r3, #8]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	4413      	add	r3, r2
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d802      	bhi.n	800b0ca <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3728      	adds	r7, #40	; 0x28
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b088      	sub	sp, #32
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10d      	bne.n	800b106 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d004      	beq.n	800b100 <create_chain+0x2c>
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d31b      	bcc.n	800b138 <create_chain+0x64>
 800b100:	2301      	movs	r3, #1
 800b102:	61bb      	str	r3, [r7, #24]
 800b104:	e018      	b.n	800b138 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff fb5d 	bl	800a7c8 <get_fat>
 800b10e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d801      	bhi.n	800b11a <create_chain+0x46>
 800b116:	2301      	movs	r3, #1
 800b118:	e0d9      	b.n	800b2ce <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b120:	d101      	bne.n	800b126 <create_chain+0x52>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	e0d3      	b.n	800b2ce <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d201      	bcs.n	800b134 <create_chain+0x60>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	e0cc      	b.n	800b2ce <create_chain+0x1fa>
		scl = clst;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	d164      	bne.n	800b20a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800b140:	2201      	movs	r2, #1
 800b142:	69b9      	ldr	r1, [r7, #24]
 800b144:	6938      	ldr	r0, [r7, #16]
 800b146:	f7ff fdb5 	bl	800acb4 <find_bitmap>
 800b14a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d003      	beq.n	800b15a <create_chain+0x86>
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b158:	d101      	bne.n	800b15e <create_chain+0x8a>
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	e0b7      	b.n	800b2ce <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800b15e:	2301      	movs	r3, #1
 800b160:	2201      	movs	r2, #1
 800b162:	69f9      	ldr	r1, [r7, #28]
 800b164:	6938      	ldr	r0, [r7, #16]
 800b166:	f7ff fe2c 	bl	800adc2 <change_bitmap>
 800b16a:	4603      	mov	r3, r0
 800b16c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	2b02      	cmp	r3, #2
 800b172:	d101      	bne.n	800b178 <create_chain+0xa4>
 800b174:	2301      	movs	r3, #1
 800b176:	e0aa      	b.n	800b2ce <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800b178:	7dfb      	ldrb	r3, [r7, #23]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d102      	bne.n	800b184 <create_chain+0xb0>
 800b17e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b182:	e0a4      	b.n	800b2ce <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d103      	bne.n	800b192 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2202      	movs	r2, #2
 800b18e:	71da      	strb	r2, [r3, #7]
 800b190:	e011      	b.n	800b1b6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	79db      	ldrb	r3, [r3, #7]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d10d      	bne.n	800b1b6 <create_chain+0xe2>
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	3301      	adds	r3, #1
 800b19e:	69fa      	ldr	r2, [r7, #28]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d008      	beq.n	800b1b6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	1ad2      	subs	r2, r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2203      	movs	r2, #3
 800b1b4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	79db      	ldrb	r3, [r3, #7]
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d064      	beq.n	800b288 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	69fa      	ldr	r2, [r7, #28]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d10b      	bne.n	800b1e0 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <create_chain+0x104>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	e000      	b.n	800b1da <create_chain+0x106>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	61d3      	str	r3, [r2, #28]
 800b1de:	e053      	b.n	800b288 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	69db      	ldr	r3, [r3, #28]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d102      	bne.n	800b1ee <create_chain+0x11a>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800b1ee:	69fa      	ldr	r2, [r7, #28]
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7ff fe89 	bl	800af0a <fill_last_frag>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d142      	bne.n	800b288 <create_chain+0x1b4>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2201      	movs	r2, #1
 800b206:	61da      	str	r2, [r3, #28]
 800b208:	e03e      	b.n	800b288 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	3301      	adds	r3, #1
 800b212:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	6a1b      	ldr	r3, [r3, #32]
 800b218:	69fa      	ldr	r2, [r7, #28]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d307      	bcc.n	800b22e <create_chain+0x15a>
				ncl = 2;
 800b21e:	2302      	movs	r3, #2
 800b220:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b222:	69fa      	ldr	r2, [r7, #28]
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	429a      	cmp	r2, r3
 800b228:	d901      	bls.n	800b22e <create_chain+0x15a>
 800b22a:	2300      	movs	r3, #0
 800b22c:	e04f      	b.n	800b2ce <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b22e:	69f9      	ldr	r1, [r7, #28]
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7ff fac9 	bl	800a7c8 <get_fat>
 800b236:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00e      	beq.n	800b25c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d003      	beq.n	800b24c <create_chain+0x178>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b24a:	d101      	bne.n	800b250 <create_chain+0x17c>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	e03e      	b.n	800b2ce <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800b250:	69fa      	ldr	r2, [r7, #28]
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	429a      	cmp	r2, r3
 800b256:	d1da      	bne.n	800b20e <create_chain+0x13a>
 800b258:	2300      	movs	r3, #0
 800b25a:	e038      	b.n	800b2ce <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800b25c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b25e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b262:	69f9      	ldr	r1, [r7, #28]
 800b264:	6938      	ldr	r0, [r7, #16]
 800b266:	f7ff fc05 	bl	800aa74 <put_fat>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d109      	bne.n	800b288 <create_chain+0x1b4>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d006      	beq.n	800b288 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b27a:	69fa      	ldr	r2, [r7, #28]
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6938      	ldr	r0, [r7, #16]
 800b280:	f7ff fbf8 	bl	800aa74 <put_fat>
 800b284:	4603      	mov	r3, r0
 800b286:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d116      	bne.n	800b2bc <create_chain+0x1e8>
		fs->last_clst = ncl;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	69fa      	ldr	r2, [r7, #28]
 800b292:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	69da      	ldr	r2, [r3, #28]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	3b02      	subs	r3, #2
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d804      	bhi.n	800b2ac <create_chain+0x1d8>
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	1e5a      	subs	r2, r3, #1
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	791b      	ldrb	r3, [r3, #4]
 800b2b0:	f043 0301 	orr.w	r3, r3, #1
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	711a      	strb	r2, [r3, #4]
 800b2ba:	e007      	b.n	800b2cc <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d102      	bne.n	800b2c8 <create_chain+0x1f4>
 800b2c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2c6:	e000      	b.n	800b2ca <create_chain+0x1f6>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b2cc:	69fb      	ldr	r3, [r7, #28]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3720      	adds	r7, #32
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b2d6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b2da:	b088      	sub	sp, #32
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ee:	3304      	adds	r3, #4
 800b2f0:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	899b      	ldrh	r3, [r3, #12]
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	4698      	mov	r8, r3
 800b2fc:	4691      	mov	r9, r2
 800b2fe:	4642      	mov	r2, r8
 800b300:	464b      	mov	r3, r9
 800b302:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b306:	f7f5 fae1 	bl	80008cc <__aeabi_uldivmod>
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	4610      	mov	r0, r2
 800b310:	4619      	mov	r1, r3
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	895b      	ldrh	r3, [r3, #10]
 800b316:	b29b      	uxth	r3, r3
 800b318:	2200      	movs	r2, #0
 800b31a:	461c      	mov	r4, r3
 800b31c:	4615      	mov	r5, r2
 800b31e:	4622      	mov	r2, r4
 800b320:	462b      	mov	r3, r5
 800b322:	f7f5 fad3 	bl	80008cc <__aeabi_uldivmod>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	4613      	mov	r3, r2
 800b32c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	1d1a      	adds	r2, r3, #4
 800b332:	61ba      	str	r2, [r7, #24]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d101      	bne.n	800b342 <clmt_clust+0x6c>
 800b33e:	2300      	movs	r3, #0
 800b340:	e010      	b.n	800b364 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800b342:	69fa      	ldr	r2, [r7, #28]
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	429a      	cmp	r2, r3
 800b348:	d307      	bcc.n	800b35a <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800b34a:	69fa      	ldr	r2, [r7, #28]
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	61fb      	str	r3, [r7, #28]
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	3304      	adds	r3, #4
 800b356:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b358:	e7e9      	b.n	800b32e <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800b35a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	4413      	add	r3, r2
}
 800b364:	4618      	mov	r0, r3
 800b366:	3720      	adds	r7, #32
 800b368:	46bd      	mov	sp, r7
 800b36a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b36e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b086      	sub	sp, #24
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	2b04      	cmp	r3, #4
 800b384:	d102      	bne.n	800b38c <dir_sdi+0x1e>
 800b386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b38a:	e001      	b.n	800b390 <dir_sdi+0x22>
 800b38c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d904      	bls.n	800b3a0 <dir_sdi+0x32>
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	f003 031f 	and.w	r3, r3, #31
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e074      	b.n	800b48e <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d109      	bne.n	800b3ca <dir_sdi+0x5c>
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d905      	bls.n	800b3ca <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10c      	bne.n	800b3ea <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	095b      	lsrs	r3, r3, #5
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	8912      	ldrh	r2, [r2, #8]
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d301      	bcc.n	800b3e0 <dir_sdi+0x72>
 800b3dc:	2302      	movs	r3, #2
 800b3de:	e056      	b.n	800b48e <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	639a      	str	r2, [r3, #56]	; 0x38
 800b3e8:	e02d      	b.n	800b446 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	895b      	ldrh	r3, [r3, #10]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	899b      	ldrh	r3, [r3, #12]
 800b3f4:	fb02 f303 	mul.w	r3, r2, r3
 800b3f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b3fa:	e019      	b.n	800b430 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6979      	ldr	r1, [r7, #20]
 800b400:	4618      	mov	r0, r3
 800b402:	f7ff f9e1 	bl	800a7c8 <get_fat>
 800b406:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b40e:	d101      	bne.n	800b414 <dir_sdi+0xa6>
 800b410:	2301      	movs	r3, #1
 800b412:	e03c      	b.n	800b48e <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d904      	bls.n	800b424 <dir_sdi+0xb6>
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	429a      	cmp	r2, r3
 800b422:	d301      	bcc.n	800b428 <dir_sdi+0xba>
 800b424:	2302      	movs	r3, #2
 800b426:	e032      	b.n	800b48e <dir_sdi+0x120>
			ofs -= csz;
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	429a      	cmp	r2, r3
 800b436:	d2e1      	bcs.n	800b3fc <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800b438:	6979      	ldr	r1, [r7, #20]
 800b43a:	6938      	ldr	r0, [r7, #16]
 800b43c:	f7ff f9a4 	bl	800a788 <clust2sect>
 800b440:	4602      	mov	r2, r0
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <dir_sdi+0xea>
 800b454:	2302      	movs	r3, #2
 800b456:	e01a      	b.n	800b48e <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	899b      	ldrh	r3, [r3, #12]
 800b460:	4619      	mov	r1, r3
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	fbb3 f3f1 	udiv	r3, r3, r1
 800b468:	441a      	add	r2, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	899b      	ldrh	r3, [r3, #12]
 800b478:	461a      	mov	r2, r3
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b480:	fb00 f202 	mul.w	r2, r0, r2
 800b484:	1a9b      	subs	r3, r3, r2
 800b486:	18ca      	adds	r2, r1, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b086      	sub	sp, #24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4aa:	3320      	adds	r3, #32
 800b4ac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00b      	beq.n	800b4ce <dir_next+0x38>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	d102      	bne.n	800b4c4 <dir_next+0x2e>
 800b4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c2:	e001      	b.n	800b4c8 <dir_next+0x32>
 800b4c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d801      	bhi.n	800b4d2 <dir_next+0x3c>
 800b4ce:	2304      	movs	r3, #4
 800b4d0:	e0c3      	b.n	800b65a <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	899b      	ldrh	r3, [r3, #12]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4de:	fb01 f202 	mul.w	r2, r1, r2
 800b4e2:	1a9b      	subs	r3, r3, r2
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f040 80a5 	bne.w	800b634 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10b      	bne.n	800b514 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	095b      	lsrs	r3, r3, #5
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	8912      	ldrh	r2, [r2, #8]
 800b504:	4293      	cmp	r3, r2
 800b506:	f0c0 8095 	bcc.w	800b634 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38
 800b510:	2304      	movs	r3, #4
 800b512:	e0a2      	b.n	800b65a <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	899b      	ldrh	r3, [r3, #12]
 800b518:	461a      	mov	r2, r3
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	8952      	ldrh	r2, [r2, #10]
 800b524:	3a01      	subs	r2, #1
 800b526:	4013      	ands	r3, r2
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f040 8083 	bne.w	800b634 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b534:	4619      	mov	r1, r3
 800b536:	4610      	mov	r0, r2
 800b538:	f7ff f946 	bl	800a7c8 <get_fat>
 800b53c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d801      	bhi.n	800b548 <dir_next+0xb2>
 800b544:	2302      	movs	r3, #2
 800b546:	e088      	b.n	800b65a <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b54e:	d101      	bne.n	800b554 <dir_next+0xbe>
 800b550:	2301      	movs	r3, #1
 800b552:	e082      	b.n	800b65a <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6a1b      	ldr	r3, [r3, #32]
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d360      	bcc.n	800b620 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d104      	bne.n	800b56e <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	639a      	str	r2, [r3, #56]	; 0x38
 800b56a:	2304      	movs	r3, #4
 800b56c:	e075      	b.n	800b65a <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b574:	4619      	mov	r1, r3
 800b576:	4610      	mov	r0, r2
 800b578:	f7ff fdac 	bl	800b0d4 <create_chain>
 800b57c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <dir_next+0xf2>
 800b584:	2307      	movs	r3, #7
 800b586:	e068      	b.n	800b65a <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d101      	bne.n	800b592 <dir_next+0xfc>
 800b58e:	2302      	movs	r3, #2
 800b590:	e063      	b.n	800b65a <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b598:	d101      	bne.n	800b59e <dir_next+0x108>
 800b59a:	2301      	movs	r3, #1
 800b59c:	e05d      	b.n	800b65a <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	79db      	ldrb	r3, [r3, #7]
 800b5a2:	f043 0304 	orr.w	r3, r3, #4
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7ff f809 	bl	800a5c4 <sync_window>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <dir_next+0x126>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e04e      	b.n	800b65a <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	899b      	ldrh	r3, [r3, #12]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	f7fe fe31 	bl	800a230 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	613b      	str	r3, [r7, #16]
 800b5d2:	6979      	ldr	r1, [r7, #20]
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff f8d7 	bl	800a788 <clust2sect>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	639a      	str	r2, [r3, #56]	; 0x38
 800b5e0:	e012      	b.n	800b608 <dir_next+0x172>
						fs->wflag = 1;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f7fe ffeb 	bl	800a5c4 <sync_window>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <dir_next+0x162>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e030      	b.n	800b65a <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	613b      	str	r3, [r7, #16]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	639a      	str	r2, [r3, #56]	; 0x38
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	895b      	ldrh	r3, [r3, #10]
 800b60c:	461a      	mov	r2, r3
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	4293      	cmp	r3, r2
 800b612:	d3e6      	bcc.n	800b5e2 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	1ad2      	subs	r2, r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800b626:	6979      	ldr	r1, [r7, #20]
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7ff f8ad 	bl	800a788 <clust2sect>
 800b62e:	4602      	mov	r2, r0
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	899b      	ldrh	r3, [r3, #12]
 800b644:	461a      	mov	r2, r3
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	fbb3 f0f2 	udiv	r0, r3, r2
 800b64c:	fb00 f202 	mul.w	r2, r0, r2
 800b650:	1a9b      	subs	r3, r3, r2
 800b652:	18ca      	adds	r2, r1, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b086      	sub	sp, #24
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b672:	2100      	movs	r1, #0
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff fe7a 	bl	800b36e <dir_sdi>
 800b67a:	4603      	mov	r3, r0
 800b67c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d140      	bne.n	800b706 <dir_alloc+0xa4>
		n = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68c:	4619      	mov	r1, r3
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f7fe ffdc 	bl	800a64c <move_window>
 800b694:	4603      	mov	r3, r0
 800b696:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b698:	7dfb      	ldrb	r3, [r7, #23]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d132      	bne.n	800b704 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	d108      	bne.n	800b6b8 <dir_alloc+0x56>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	b25b      	sxtb	r3, r3
 800b6ae:	43db      	mvns	r3, r3
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	09db      	lsrs	r3, r3, #7
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	e00f      	b.n	800b6d8 <dir_alloc+0x76>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	2be5      	cmp	r3, #229	; 0xe5
 800b6c0:	d004      	beq.n	800b6cc <dir_alloc+0x6a>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <dir_alloc+0x6e>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e000      	b.n	800b6d2 <dir_alloc+0x70>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d007      	beq.n	800b6ec <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	613b      	str	r3, [r7, #16]
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d102      	bne.n	800b6f0 <dir_alloc+0x8e>
 800b6ea:	e00c      	b.n	800b706 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7ff fecf 	bl	800b496 <dir_next>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0c2      	beq.n	800b688 <dir_alloc+0x26>
 800b702:	e000      	b.n	800b706 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b704:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	2b04      	cmp	r3, #4
 800b70a:	d101      	bne.n	800b710 <dir_alloc+0xae>
 800b70c:	2307      	movs	r3, #7
 800b70e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b710:	7dfb      	ldrb	r3, [r7, #23]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3718      	adds	r7, #24
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b084      	sub	sp, #16
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	331a      	adds	r3, #26
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe fb7b 	bl	8009e24 <ld_word>
 800b72e:	4603      	mov	r3, r0
 800b730:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b03      	cmp	r3, #3
 800b738:	d109      	bne.n	800b74e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	3314      	adds	r3, #20
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fe fb70 	bl	8009e24 <ld_word>
 800b744:	4603      	mov	r3, r0
 800b746:	041b      	lsls	r3, r3, #16
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b74e:	68fb      	ldr	r3, [r7, #12]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	331a      	adds	r3, #26
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	b292      	uxth	r2, r2
 800b76c:	4611      	mov	r1, r2
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe fc6e 	bl	800a050 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	2b03      	cmp	r3, #3
 800b77a:	d109      	bne.n	800b790 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	f103 0214 	add.w	r2, r3, #20
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	0c1b      	lsrs	r3, r3, #16
 800b786:	b29b      	uxth	r3, r3
 800b788:	4619      	mov	r1, r3
 800b78a:	4610      	mov	r0, r2
 800b78c:	f7fe fc60 	bl	800a050 <st_word>
	}
}
 800b790:	bf00      	nop
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b798:	b590      	push	{r4, r7, lr}
 800b79a:	b087      	sub	sp, #28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	331a      	adds	r3, #26
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fe fb3c 	bl	8009e24 <ld_word>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <cmp_lfn+0x1e>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e059      	b.n	800b86a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7be:	1e5a      	subs	r2, r3, #1
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	4413      	add	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	81fb      	strh	r3, [r7, #14]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	613b      	str	r3, [r7, #16]
 800b7d4:	e033      	b.n	800b83e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b7d6:	4a27      	ldr	r2, [pc, #156]	; (800b874 <cmp_lfn+0xdc>)
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	4413      	add	r3, r2
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fe fb1d 	bl	8009e24 <ld_word>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b7ee:	89fb      	ldrh	r3, [r7, #14]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d01a      	beq.n	800b82a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2bfe      	cmp	r3, #254	; 0xfe
 800b7f8:	d812      	bhi.n	800b820 <cmp_lfn+0x88>
 800b7fa:	89bb      	ldrh	r3, [r7, #12]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f003 fa23 	bl	800ec48 <ff_wtoupper>
 800b802:	4603      	mov	r3, r0
 800b804:	461c      	mov	r4, r3
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	1c5a      	adds	r2, r3, #1
 800b80a:	617a      	str	r2, [r7, #20]
 800b80c:	005b      	lsls	r3, r3, #1
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	4413      	add	r3, r2
 800b812:	881b      	ldrh	r3, [r3, #0]
 800b814:	4618      	mov	r0, r3
 800b816:	f003 fa17 	bl	800ec48 <ff_wtoupper>
 800b81a:	4603      	mov	r3, r0
 800b81c:	429c      	cmp	r4, r3
 800b81e:	d001      	beq.n	800b824 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b820:	2300      	movs	r3, #0
 800b822:	e022      	b.n	800b86a <cmp_lfn+0xd2>
			}
			wc = uc;
 800b824:	89bb      	ldrh	r3, [r7, #12]
 800b826:	81fb      	strh	r3, [r7, #14]
 800b828:	e006      	b.n	800b838 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b82a:	89bb      	ldrh	r3, [r7, #12]
 800b82c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b830:	4293      	cmp	r3, r2
 800b832:	d001      	beq.n	800b838 <cmp_lfn+0xa0>
 800b834:	2300      	movs	r3, #0
 800b836:	e018      	b.n	800b86a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	3301      	adds	r3, #1
 800b83c:	613b      	str	r3, [r7, #16]
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	2b0c      	cmp	r3, #12
 800b842:	d9c8      	bls.n	800b7d6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00b      	beq.n	800b868 <cmp_lfn+0xd0>
 800b850:	89fb      	ldrh	r3, [r7, #14]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d008      	beq.n	800b868 <cmp_lfn+0xd0>
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	4413      	add	r3, r2
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <cmp_lfn+0xd0>
 800b864:	2300      	movs	r3, #0
 800b866:	e000      	b.n	800b86a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b868:	2301      	movs	r3, #1
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	371c      	adds	r7, #28
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd90      	pop	{r4, r7, pc}
 800b872:	bf00      	nop
 800b874:	08010c60 	.word	0x08010c60

0800b878 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	331a      	adds	r3, #26
 800b886:	4618      	mov	r0, r3
 800b888:	f7fe facc 	bl	8009e24 <ld_word>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <pick_lfn+0x1e>
 800b892:	2300      	movs	r3, #0
 800b894:	e04d      	b.n	800b932 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b89e:	1e5a      	subs	r2, r3, #1
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	4413      	add	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	81fb      	strh	r3, [r7, #14]
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	613b      	str	r3, [r7, #16]
 800b8b4:	e028      	b.n	800b908 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b8b6:	4a21      	ldr	r2, [pc, #132]	; (800b93c <pick_lfn+0xc4>)
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fe faad 	bl	8009e24 <ld_word>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b8ce:	89fb      	ldrh	r3, [r7, #14]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00f      	beq.n	800b8f4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	2bfe      	cmp	r3, #254	; 0xfe
 800b8d8:	d901      	bls.n	800b8de <pick_lfn+0x66>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e029      	b.n	800b932 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b8de:	89bb      	ldrh	r3, [r7, #12]
 800b8e0:	81fb      	strh	r3, [r7, #14]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	1c5a      	adds	r2, r3, #1
 800b8e6:	617a      	str	r2, [r7, #20]
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	89fa      	ldrh	r2, [r7, #14]
 800b8f0:	801a      	strh	r2, [r3, #0]
 800b8f2:	e006      	b.n	800b902 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b8f4:	89bb      	ldrh	r3, [r7, #12]
 800b8f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d001      	beq.n	800b902 <pick_lfn+0x8a>
 800b8fe:	2300      	movs	r3, #0
 800b900:	e017      	b.n	800b932 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	3301      	adds	r3, #1
 800b906:	613b      	str	r3, [r7, #16]
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2b0c      	cmp	r3, #12
 800b90c:	d9d3      	bls.n	800b8b6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00a      	beq.n	800b930 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2bfe      	cmp	r3, #254	; 0xfe
 800b91e:	d901      	bls.n	800b924 <pick_lfn+0xac>
 800b920:	2300      	movs	r3, #0
 800b922:	e006      	b.n	800b932 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	005b      	lsls	r3, r3, #1
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	4413      	add	r3, r2
 800b92c:	2200      	movs	r2, #0
 800b92e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b930:	2301      	movs	r3, #1
}
 800b932:	4618      	mov	r0, r3
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	08010c60 	.word	0x08010c60

0800b940 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4611      	mov	r1, r2
 800b94c:	461a      	mov	r2, r3
 800b94e:	460b      	mov	r3, r1
 800b950:	71fb      	strb	r3, [r7, #7]
 800b952:	4613      	mov	r3, r2
 800b954:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	330d      	adds	r3, #13
 800b95a:	79ba      	ldrb	r2, [r7, #6]
 800b95c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	330b      	adds	r3, #11
 800b962:	220f      	movs	r2, #15
 800b964:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	330c      	adds	r3, #12
 800b96a:	2200      	movs	r2, #0
 800b96c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	331a      	adds	r3, #26
 800b972:	2100      	movs	r1, #0
 800b974:	4618      	mov	r0, r3
 800b976:	f7fe fb6b 	bl	800a050 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b97a:	79fb      	ldrb	r3, [r7, #7]
 800b97c:	1e5a      	subs	r2, r3, #1
 800b97e:	4613      	mov	r3, r2
 800b980:	005b      	lsls	r3, r3, #1
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b98a:	2300      	movs	r3, #0
 800b98c:	82fb      	strh	r3, [r7, #22]
 800b98e:	2300      	movs	r3, #0
 800b990:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b992:	8afb      	ldrh	r3, [r7, #22]
 800b994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b998:	4293      	cmp	r3, r2
 800b99a:	d007      	beq.n	800b9ac <put_lfn+0x6c>
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	61fa      	str	r2, [r7, #28]
 800b9a2:	005b      	lsls	r3, r3, #1
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	881b      	ldrh	r3, [r3, #0]
 800b9aa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b9ac:	4a17      	ldr	r2, [pc, #92]	; (800ba0c <put_lfn+0xcc>)
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	8afa      	ldrh	r2, [r7, #22]
 800b9bc:	4611      	mov	r1, r2
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fe fb46 	bl	800a050 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b9c4:	8afb      	ldrh	r3, [r7, #22]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d102      	bne.n	800b9d0 <put_lfn+0x90>
 800b9ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9ce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	61bb      	str	r3, [r7, #24]
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	2b0c      	cmp	r3, #12
 800b9da:	d9da      	bls.n	800b992 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b9dc:	8afb      	ldrh	r3, [r7, #22]
 800b9de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d006      	beq.n	800b9f4 <put_lfn+0xb4>
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <put_lfn+0xbc>
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9fa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	79fa      	ldrb	r2, [r7, #7]
 800ba00:	701a      	strb	r2, [r3, #0]
}
 800ba02:	bf00      	nop
 800ba04:	3720      	adds	r7, #32
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	08010c60 	.word	0x08010c60

0800ba10 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b08c      	sub	sp, #48	; 0x30
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
 800ba1c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ba1e:	220b      	movs	r2, #11
 800ba20:	68b9      	ldr	r1, [r7, #8]
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7fe fbe3 	bl	800a1ee <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	2b05      	cmp	r3, #5
 800ba2c:	d92b      	bls.n	800ba86 <gen_numname+0x76>
		sr = seq;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ba32:	e022      	b.n	800ba7a <gen_numname+0x6a>
			wc = *lfn++;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	1c9a      	adds	r2, r3, #2
 800ba38:	607a      	str	r2, [r7, #4]
 800ba3a:	881b      	ldrh	r3, [r3, #0]
 800ba3c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ba3e:	2300      	movs	r3, #0
 800ba40:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba42:	e017      	b.n	800ba74 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	005a      	lsls	r2, r3, #1
 800ba48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	4413      	add	r3, r2
 800ba50:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ba52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba54:	085b      	lsrs	r3, r3, #1
 800ba56:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d005      	beq.n	800ba6e <gen_numname+0x5e>
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ba68:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ba6c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba70:	3301      	adds	r3, #1
 800ba72:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	2b0f      	cmp	r3, #15
 800ba78:	d9e4      	bls.n	800ba44 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	881b      	ldrh	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1d8      	bne.n	800ba34 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ba86:	2307      	movs	r3, #7
 800ba88:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	f003 030f 	and.w	r3, r3, #15
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	3330      	adds	r3, #48	; 0x30
 800ba96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ba9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba9e:	2b39      	cmp	r3, #57	; 0x39
 800baa0:	d904      	bls.n	800baac <gen_numname+0x9c>
 800baa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baa6:	3307      	adds	r3, #7
 800baa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	1e5a      	subs	r2, r3, #1
 800bab0:	62ba      	str	r2, [r7, #40]	; 0x28
 800bab2:	3330      	adds	r3, #48	; 0x30
 800bab4:	443b      	add	r3, r7
 800bab6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800baba:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	091b      	lsrs	r3, r3, #4
 800bac2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1df      	bne.n	800ba8a <gen_numname+0x7a>
	ns[i] = '~';
 800baca:	f107 0214 	add.w	r2, r7, #20
 800bace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad0:	4413      	add	r3, r2
 800bad2:	227e      	movs	r2, #126	; 0x7e
 800bad4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bad6:	2300      	movs	r3, #0
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24
 800bada:	e002      	b.n	800bae2 <gen_numname+0xd2>
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	3301      	adds	r3, #1
 800bae0:	627b      	str	r3, [r7, #36]	; 0x24
 800bae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d205      	bcs.n	800baf6 <gen_numname+0xe6>
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	4413      	add	r3, r2
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b20      	cmp	r3, #32
 800baf4:	d1f2      	bne.n	800badc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf8:	2b07      	cmp	r3, #7
 800bafa:	d807      	bhi.n	800bb0c <gen_numname+0xfc>
 800bafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	62ba      	str	r2, [r7, #40]	; 0x28
 800bb02:	3330      	adds	r3, #48	; 0x30
 800bb04:	443b      	add	r3, r7
 800bb06:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bb0a:	e000      	b.n	800bb0e <gen_numname+0xfe>
 800bb0c:	2120      	movs	r1, #32
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	627a      	str	r2, [r7, #36]	; 0x24
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	4413      	add	r3, r2
 800bb18:	460a      	mov	r2, r1
 800bb1a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	2b07      	cmp	r3, #7
 800bb20:	d9e9      	bls.n	800baf6 <gen_numname+0xe6>
}
 800bb22:	bf00      	nop
 800bb24:	bf00      	nop
 800bb26:	3730      	adds	r7, #48	; 0x30
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bb38:	230b      	movs	r3, #11
 800bb3a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	0852      	lsrs	r2, r2, #1
 800bb42:	01db      	lsls	r3, r3, #7
 800bb44:	4313      	orrs	r3, r2
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	1c59      	adds	r1, r3, #1
 800bb4c:	6079      	str	r1, [r7, #4]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	4413      	add	r3, r2
 800bb52:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	60bb      	str	r3, [r7, #8]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1ed      	bne.n	800bb3c <sum_sfn+0x10>
	return sum;
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b087      	sub	sp, #28
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	015b      	lsls	r3, r3, #5
 800bb80:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800bb82:	2300      	movs	r3, #0
 800bb84:	827b      	strh	r3, [r7, #18]
 800bb86:	2300      	movs	r3, #0
 800bb88:	617b      	str	r3, [r7, #20]
 800bb8a:	e018      	b.n	800bbbe <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d103      	bne.n	800bb9a <xdir_sum+0x2c>
			i++;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	3301      	adds	r3, #1
 800bb96:	617b      	str	r3, [r7, #20]
 800bb98:	e00e      	b.n	800bbb8 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800bb9a:	8a7b      	ldrh	r3, [r7, #18]
 800bb9c:	03db      	lsls	r3, r3, #15
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	8a7b      	ldrh	r3, [r7, #18]
 800bba2:	085b      	lsrs	r3, r3, #1
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	4413      	add	r3, r2
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	6879      	ldr	r1, [r7, #4]
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	440b      	add	r3, r1
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	4413      	add	r3, r2
 800bbb6:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	617b      	str	r3, [r7, #20]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d3e2      	bcc.n	800bb8c <xdir_sum+0x1e>
		}
	}
	return sum;
 800bbc6:	8a7b      	ldrh	r3, [r7, #18]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	371c      	adds	r7, #28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800bbe0:	e01f      	b.n	800bc22 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800bbe2:	89bb      	ldrh	r3, [r7, #12]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f003 f82f 	bl	800ec48 <ff_wtoupper>
 800bbea:	4603      	mov	r3, r0
 800bbec:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800bbee:	89fb      	ldrh	r3, [r7, #14]
 800bbf0:	03db      	lsls	r3, r3, #15
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	89fb      	ldrh	r3, [r7, #14]
 800bbf6:	085b      	lsrs	r3, r3, #1
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	4413      	add	r3, r2
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	89bb      	ldrh	r3, [r7, #12]
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	4413      	add	r3, r2
 800bc06:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800bc08:	89fb      	ldrh	r3, [r7, #14]
 800bc0a:	03db      	lsls	r3, r3, #15
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	89fb      	ldrh	r3, [r7, #14]
 800bc10:	085b      	lsrs	r3, r3, #1
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	4413      	add	r3, r2
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	89bb      	ldrh	r3, [r7, #12]
 800bc1a:	0a1b      	lsrs	r3, r3, #8
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	4413      	add	r3, r2
 800bc20:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	1c9a      	adds	r2, r3, #2
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	81bb      	strh	r3, [r7, #12]
 800bc2c:	89bb      	ldrh	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1d7      	bne.n	800bbe2 <xname_sum+0xe>
	}
	return sum;
 800bc32:	89fb      	ldrh	r3, [r7, #14]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bc4a:	2340      	movs	r3, #64	; 0x40
 800bc4c:	613b      	str	r3, [r7, #16]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	e02c      	b.n	800bcae <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	f003 031f 	and.w	r3, r3, #31
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d102      	bne.n	800bc64 <get_xdir_info+0x28>
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	3302      	adds	r3, #2
 800bc62:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	4413      	add	r3, r2
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fe f8da 	bl	8009e24 <ld_word>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2100      	movs	r1, #0
 800bc74:	4618      	mov	r0, r3
 800bc76:	f002 ffab 	bl	800ebd0 <ff_convert>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800bc7e:	897b      	ldrh	r3, [r7, #10]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d002      	beq.n	800bc8a <get_xdir_info+0x4e>
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2bfe      	cmp	r3, #254	; 0xfe
 800bc88:	d902      	bls.n	800bc90 <get_xdir_info+0x54>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	617b      	str	r3, [r7, #20]
 800bc8e:	e015      	b.n	800bcbc <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	617a      	str	r2, [r7, #20]
 800bc96:	897a      	ldrh	r2, [r7, #10]
 800bc98:	b2d1      	uxtb	r1, r2
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	460a      	mov	r2, r1
 800bca0:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	3302      	adds	r3, #2
 800bca6:	613b      	str	r3, [r7, #16]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	60fb      	str	r3, [r7, #12]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3323      	adds	r3, #35	; 0x23
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d3cb      	bcc.n	800bc54 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d106      	bne.n	800bcd0 <get_xdir_info+0x94>
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	617a      	str	r2, [r7, #20]
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	4413      	add	r3, r2
 800bccc:	223f      	movs	r2, #63	; 0x3f
 800bcce:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	331a      	adds	r3, #26
 800bcd8:	2200      	movs	r2, #0
 800bcda:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	2200      	movs	r2, #0
 800bce0:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	791a      	ldrb	r2, [r3, #4]
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	7b1b      	ldrb	r3, [r3, #12]
 800bcee:	f003 0310 	and.w	r3, r3, #16
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d107      	bne.n	800bd06 <get_xdir_info+0xca>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	3338      	adds	r3, #56	; 0x38
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fe f8cd 	bl	8009e9a <ld_qword>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	e003      	b.n	800bd0e <get_xdir_info+0xd2>
 800bd06:	f04f 0200 	mov.w	r2, #0
 800bd0a:	f04f 0300 	mov.w	r3, #0
 800bd0e:	6839      	ldr	r1, [r7, #0]
 800bd10:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	330c      	adds	r3, #12
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fe f883 	bl	8009e24 <ld_word>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	461a      	mov	r2, r3
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	330e      	adds	r3, #14
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe f87a 	bl	8009e24 <ld_word>
 800bd30:	4603      	mov	r3, r0
 800bd32:	461a      	mov	r2, r3
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	811a      	strh	r2, [r3, #8]
}
 800bd38:	bf00      	nop
 800bd3a:	3718      	adds	r7, #24
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800bd40:	b590      	push	{r4, r7, lr}
 800bd42:	b087      	sub	sp, #28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd58:	4619      	mov	r1, r3
 800bd5a:	4610      	mov	r0, r2
 800bd5c:	f7fe fc76 	bl	800a64c <move_window>
 800bd60:	4603      	mov	r3, r0
 800bd62:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <load_xdir+0x2e>
 800bd6a:	7bfb      	ldrb	r3, [r7, #15]
 800bd6c:	e09f      	b.n	800beae <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	2b85      	cmp	r3, #133	; 0x85
 800bd76:	d001      	beq.n	800bd7c <load_xdir+0x3c>
 800bd78:	2302      	movs	r3, #2
 800bd7a:	e098      	b.n	800beae <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd80:	2220      	movs	r2, #32
 800bd82:	4619      	mov	r1, r3
 800bd84:	6938      	ldr	r0, [r7, #16]
 800bd86:	f7fe fa32 	bl	800a1ee <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	3301      	adds	r3, #1
 800bd92:	015b      	lsls	r3, r3, #5
 800bd94:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2b5f      	cmp	r3, #95	; 0x5f
 800bd9a:	d903      	bls.n	800bda4 <load_xdir+0x64>
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800bda2:	d901      	bls.n	800bda8 <load_xdir+0x68>
 800bda4:	2302      	movs	r3, #2
 800bda6:	e082      	b.n	800beae <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800bda8:	2100      	movs	r1, #0
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f7ff fb73 	bl	800b496 <dir_next>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d001      	beq.n	800bdbe <load_xdir+0x7e>
 800bdba:	7bfb      	ldrb	r3, [r7, #15]
 800bdbc:	e077      	b.n	800beae <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	4610      	mov	r0, r2
 800bdca:	f7fe fc3f 	bl	800a64c <move_window>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d001      	beq.n	800bddc <load_xdir+0x9c>
 800bdd8:	7bfb      	ldrb	r3, [r7, #15]
 800bdda:	e068      	b.n	800beae <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2bc0      	cmp	r3, #192	; 0xc0
 800bde4:	d001      	beq.n	800bdea <load_xdir+0xaa>
 800bde6:	2302      	movs	r3, #2
 800bde8:	e061      	b.n	800beae <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f103 0020 	add.w	r0, r3, #32
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	f7fe f9f9 	bl	800a1ee <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	3323      	adds	r3, #35	; 0x23
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	332c      	adds	r3, #44	; 0x2c
 800be04:	4a2c      	ldr	r2, [pc, #176]	; (800beb8 <load_xdir+0x178>)
 800be06:	fba2 2303 	umull	r2, r3, r2, r3
 800be0a:	08db      	lsrs	r3, r3, #3
 800be0c:	015b      	lsls	r3, r3, #5
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	429a      	cmp	r2, r3
 800be12:	d201      	bcs.n	800be18 <load_xdir+0xd8>
 800be14:	2302      	movs	r3, #2
 800be16:	e04a      	b.n	800beae <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800be18:	2340      	movs	r3, #64	; 0x40
 800be1a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800be1c:	2100      	movs	r1, #0
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7ff fb39 	bl	800b496 <dir_next>
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800be28:	7bfb      	ldrb	r3, [r7, #15]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <load_xdir+0xf2>
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
 800be30:	e03d      	b.n	800beae <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3a:	4619      	mov	r1, r3
 800be3c:	4610      	mov	r0, r2
 800be3e:	f7fe fc05 	bl	800a64c <move_window>
 800be42:	4603      	mov	r3, r0
 800be44:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d001      	beq.n	800be50 <load_xdir+0x110>
 800be4c:	7bfb      	ldrb	r3, [r7, #15]
 800be4e:	e02e      	b.n	800beae <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2bc1      	cmp	r3, #193	; 0xc1
 800be58:	d001      	beq.n	800be5e <load_xdir+0x11e>
 800be5a:	2302      	movs	r3, #2
 800be5c:	e027      	b.n	800beae <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800be64:	d208      	bcs.n	800be78 <load_xdir+0x138>
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	18d0      	adds	r0, r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be70:	2220      	movs	r2, #32
 800be72:	4619      	mov	r1, r3
 800be74:	f7fe f9bb 	bl	800a1ee <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	3320      	adds	r3, #32
 800be7c:	617b      	str	r3, [r7, #20]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	429a      	cmp	r2, r3
 800be84:	d3ca      	bcc.n	800be1c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800be8c:	d80e      	bhi.n	800beac <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800be8e:	6938      	ldr	r0, [r7, #16]
 800be90:	f7ff fe6d 	bl	800bb6e <xdir_sum>
 800be94:	4603      	mov	r3, r0
 800be96:	461c      	mov	r4, r3
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	3302      	adds	r3, #2
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fd ffc1 	bl	8009e24 <ld_word>
 800bea2:	4603      	mov	r3, r0
 800bea4:	429c      	cmp	r4, r3
 800bea6:	d001      	beq.n	800beac <load_xdir+0x16c>
 800bea8:	2302      	movs	r3, #2
 800beaa:	e000      	b.n	800beae <load_xdir+0x16e>
	}
	return FR_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	371c      	adds	r7, #28
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd90      	pop	{r4, r7, pc}
 800beb6:	bf00      	nop
 800beb8:	88888889 	.word	0x88888889

0800bebc <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800bebc:	b5b0      	push	{r4, r5, r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6808      	ldr	r0, [r1, #0]
 800beca:	6879      	ldr	r1, [r7, #4]
 800becc:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6a08      	ldr	r0, [r1, #32]
 800bed2:	6879      	ldr	r1, [r7, #4]
 800bed4:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800beda:	b2c8      	uxtb	r0, r1
 800bedc:	6879      	ldr	r1, [r7, #4]
 800bede:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800bee4:	2000      	movs	r0, #0
 800bee6:	460c      	mov	r4, r1
 800bee8:	4605      	mov	r5, r0
 800beea:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800beee:	2300      	movs	r3, #0
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf02:	4619      	mov	r1, r3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7ff fa32 	bl	800b36e <dir_sdi>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d104      	bne.n	800bf1e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff ff13 	bl	800bd40 <load_xdir>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bdb0      	pop	{r4, r5, r7, pc}

0800bf28 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800bf28:	b590      	push	{r4, r7, lr}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	1c9c      	adds	r4, r3, #2
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f7ff fe16 	bl	800bb6e <xdir_sum>
 800bf42:	4603      	mov	r3, r0
 800bf44:	4619      	mov	r1, r3
 800bf46:	4620      	mov	r0, r4
 800bf48:	f7fe f882 	bl	800a050 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	3301      	adds	r3, #1
 800bf54:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7ff fa06 	bl	800b36e <dir_sdi>
 800bf62:	4603      	mov	r3, r0
 800bf64:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bf66:	e026      	b.n	800bfb6 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf70:	4619      	mov	r1, r3
 800bf72:	4610      	mov	r0, r2
 800bf74:	f7fe fb6a 	bl	800a64c <move_window>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf7c:	7dfb      	ldrb	r3, [r7, #23]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d11d      	bne.n	800bfbe <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf86:	2220      	movs	r2, #32
 800bf88:	68f9      	ldr	r1, [r7, #12]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe f92f 	bl	800a1ee <mem_cpy>
		dp->obj.fs->wflag = 1;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2201      	movs	r2, #1
 800bf96:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	613b      	str	r3, [r7, #16]
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00e      	beq.n	800bfc2 <store_xdir+0x9a>
		dirb += SZDIRE;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	3320      	adds	r3, #32
 800bfa8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800bfaa:	2100      	movs	r1, #0
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7ff fa72 	bl	800b496 <dir_next>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d0d5      	beq.n	800bf68 <store_xdir+0x40>
 800bfbc:	e002      	b.n	800bfc4 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800bfbe:	bf00      	nop
 800bfc0:	e000      	b.n	800bfc4 <store_xdir+0x9c>
		if (--nent == 0) break;
 800bfc2:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800bfc4:	7dfb      	ldrb	r3, [r7, #23]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d002      	beq.n	800bfd0 <store_xdir+0xa8>
 800bfca:	7dfb      	ldrb	r3, [r7, #23]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d101      	bne.n	800bfd4 <store_xdir+0xac>
 800bfd0:	7dfb      	ldrb	r3, [r7, #23]
 800bfd2:	e000      	b.n	800bfd6 <store_xdir+0xae>
 800bfd4:	2302      	movs	r3, #2
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	371c      	adds	r7, #28
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd90      	pop	{r4, r7, pc}

0800bfde <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800bfde:	b590      	push	{r4, r7, lr}
 800bfe0:	b085      	sub	sp, #20
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800bfe8:	2240      	movs	r2, #64	; 0x40
 800bfea:	2100      	movs	r1, #0
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f7fe f91f 	bl	800a230 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2285      	movs	r2, #133	; 0x85
 800bff6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3320      	adds	r3, #32
 800bffc:	22c0      	movs	r2, #192	; 0xc0
 800bffe:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800c000:	2300      	movs	r3, #0
 800c002:	72bb      	strb	r3, [r7, #10]
 800c004:	2301      	movs	r3, #1
 800c006:	72fb      	strb	r3, [r7, #11]
 800c008:	2301      	movs	r3, #1
 800c00a:	813b      	strh	r3, [r7, #8]
 800c00c:	2340      	movs	r3, #64	; 0x40
 800c00e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	1c5a      	adds	r2, r3, #1
 800c014:	60fa      	str	r2, [r7, #12]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	4413      	add	r3, r2
 800c01a:	22c1      	movs	r2, #193	; 0xc1
 800c01c:	701a      	strb	r2, [r3, #0]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	1c5a      	adds	r2, r3, #1
 800c022:	60fa      	str	r2, [r7, #12]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	4413      	add	r3, r2
 800c028:	2200      	movs	r2, #0
 800c02a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c02c:	893b      	ldrh	r3, [r7, #8]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00b      	beq.n	800c04a <create_xdir+0x6c>
 800c032:	7abb      	ldrb	r3, [r7, #10]
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	4413      	add	r3, r2
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	813b      	strh	r3, [r7, #8]
 800c03e:	893b      	ldrh	r3, [r7, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d002      	beq.n	800c04a <create_xdir+0x6c>
 800c044:	7abb      	ldrb	r3, [r7, #10]
 800c046:	3301      	adds	r3, #1
 800c048:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	893a      	ldrh	r2, [r7, #8]
 800c052:	4611      	mov	r1, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f7fd fffb 	bl	800a050 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	3302      	adds	r3, #2
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f003 031f 	and.w	r3, r3, #31
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1e0      	bne.n	800c02c <create_xdir+0x4e>
		nb++;
 800c06a:	7afb      	ldrb	r3, [r7, #11]
 800c06c:	3301      	adds	r3, #1
 800c06e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c070:	7abb      	ldrb	r3, [r7, #10]
 800c072:	005b      	lsls	r3, r3, #1
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	4413      	add	r3, r2
 800c078:	881b      	ldrh	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1c8      	bne.n	800c010 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3323      	adds	r3, #35	; 0x23
 800c082:	7aba      	ldrb	r2, [r7, #10]
 800c084:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3301      	adds	r3, #1
 800c08a:	7afa      	ldrb	r2, [r7, #11]
 800c08c:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800c094:	6838      	ldr	r0, [r7, #0]
 800c096:	f7ff fd9d 	bl	800bbd4 <xname_sum>
 800c09a:	4603      	mov	r3, r0
 800c09c:	4619      	mov	r1, r3
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f7fd ffd6 	bl	800a050 <st_word>
}
 800c0a4:	bf00      	nop
 800c0a6:	3714      	adds	r7, #20
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd90      	pop	{r4, r7, pc}

0800c0ac <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c0b6:	2304      	movs	r3, #4
 800c0b8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c0c0:	23ff      	movs	r3, #255	; 0xff
 800c0c2:	757b      	strb	r3, [r7, #21]
 800c0c4:	23ff      	movs	r3, #255	; 0xff
 800c0c6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c0c8:	e09f      	b.n	800c20a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	6938      	ldr	r0, [r7, #16]
 800c0d2:	f7fe fabb 	bl	800a64c <move_window>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f040 809a 	bne.w	800c216 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c0ea:	7dbb      	ldrb	r3, [r7, #22]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d102      	bne.n	800c0f6 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c0f0:	2304      	movs	r3, #4
 800c0f2:	75fb      	strb	r3, [r7, #23]
 800c0f4:	e096      	b.n	800c224 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	2b04      	cmp	r3, #4
 800c0fc:	d118      	bne.n	800c130 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800c0fe:	7dbb      	ldrb	r3, [r7, #22]
 800c100:	2b85      	cmp	r3, #133	; 0x85
 800c102:	d179      	bne.n	800c1f8 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7ff fe17 	bl	800bd40 <load_xdir>
 800c112:	4603      	mov	r3, r0
 800c114:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800c116:	7dfb      	ldrb	r3, [r7, #23]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d17e      	bne.n	800c21a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	3304      	adds	r3, #4
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800c12e:	e074      	b.n	800c21a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c134:	330b      	adds	r3, #11
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c13c:	73fb      	strb	r3, [r7, #15]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	7bfa      	ldrb	r2, [r7, #15]
 800c142:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c144:	7dbb      	ldrb	r3, [r7, #22]
 800c146:	2be5      	cmp	r3, #229	; 0xe5
 800c148:	d00e      	beq.n	800c168 <dir_read+0xbc>
 800c14a:	7dbb      	ldrb	r3, [r7, #22]
 800c14c:	2b2e      	cmp	r3, #46	; 0x2e
 800c14e:	d00b      	beq.n	800c168 <dir_read+0xbc>
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	f023 0320 	bic.w	r3, r3, #32
 800c156:	2b08      	cmp	r3, #8
 800c158:	bf0c      	ite	eq
 800c15a:	2301      	moveq	r3, #1
 800c15c:	2300      	movne	r3, #0
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	461a      	mov	r2, r3
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	4293      	cmp	r3, r2
 800c166:	d002      	beq.n	800c16e <dir_read+0xc2>
				ord = 0xFF;
 800c168:	23ff      	movs	r3, #255	; 0xff
 800c16a:	757b      	strb	r3, [r7, #21]
 800c16c:	e044      	b.n	800c1f8 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
 800c170:	2b0f      	cmp	r3, #15
 800c172:	d12f      	bne.n	800c1d4 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c174:	7dbb      	ldrb	r3, [r7, #22]
 800c176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00d      	beq.n	800c19a <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c182:	7b5b      	ldrb	r3, [r3, #13]
 800c184:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c186:	7dbb      	ldrb	r3, [r7, #22]
 800c188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c18c:	75bb      	strb	r3, [r7, #22]
 800c18e:	7dbb      	ldrb	r3, [r7, #22]
 800c190:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c19a:	7dba      	ldrb	r2, [r7, #22]
 800c19c:	7d7b      	ldrb	r3, [r7, #21]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d115      	bne.n	800c1ce <dir_read+0x122>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a6:	330d      	adds	r3, #13
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	7d3a      	ldrb	r2, [r7, #20]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d10e      	bne.n	800c1ce <dir_read+0x122>
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	691a      	ldr	r2, [r3, #16]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	f7ff fb5c 	bl	800b878 <pick_lfn>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <dir_read+0x122>
 800c1c6:	7d7b      	ldrb	r3, [r7, #21]
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	e000      	b.n	800c1d0 <dir_read+0x124>
 800c1ce:	23ff      	movs	r3, #255	; 0xff
 800c1d0:	757b      	strb	r3, [r7, #21]
 800c1d2:	e011      	b.n	800c1f8 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c1d4:	7d7b      	ldrb	r3, [r7, #21]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d109      	bne.n	800c1ee <dir_read+0x142>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff fca4 	bl	800bb2c <sum_sfn>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	7d3b      	ldrb	r3, [r7, #20]
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d017      	beq.n	800c21e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1f4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800c1f6:	e012      	b.n	800c21e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7ff f94b 	bl	800b496 <dir_next>
 800c200:	4603      	mov	r3, r0
 800c202:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c204:	7dfb      	ldrb	r3, [r7, #23]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10b      	bne.n	800c222 <dir_read+0x176>
	while (dp->sect) {
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f47f af5b 	bne.w	800c0ca <dir_read+0x1e>
 800c214:	e006      	b.n	800c224 <dir_read+0x178>
		if (res != FR_OK) break;
 800c216:	bf00      	nop
 800c218:	e004      	b.n	800c224 <dir_read+0x178>
					break;
 800c21a:	bf00      	nop
 800c21c:	e002      	b.n	800c224 <dir_read+0x178>
					break;
 800c21e:	bf00      	nop
 800c220:	e000      	b.n	800c224 <dir_read+0x178>
		if (res != FR_OK) break;
 800c222:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d002      	beq.n	800c230 <dir_read+0x184>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800c230:	7dfb      	ldrb	r3, [r7, #23]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c23a:	b590      	push	{r4, r7, lr}
 800c23c:	b089      	sub	sp, #36	; 0x24
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c248:	2100      	movs	r1, #0
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7ff f88f 	bl	800b36e <dir_sdi>
 800c250:	4603      	mov	r3, r0
 800c252:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800c254:	7ffb      	ldrb	r3, [r7, #31]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <dir_find+0x24>
 800c25a:	7ffb      	ldrb	r3, [r7, #31]
 800c25c:	e112      	b.n	800c484 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b04      	cmp	r3, #4
 800c264:	d164      	bne.n	800c330 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff fcb2 	bl	800bbd4 <xname_sum>
 800c270:	4603      	mov	r3, r0
 800c272:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c274:	e04f      	b.n	800c316 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	695b      	ldr	r3, [r3, #20]
 800c27a:	3324      	adds	r3, #36	; 0x24
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7fd fdd1 	bl	8009e24 <ld_word>
 800c282:	4603      	mov	r3, r0
 800c284:	461a      	mov	r2, r3
 800c286:	893b      	ldrh	r3, [r7, #8]
 800c288:	4293      	cmp	r3, r2
 800c28a:	d000      	beq.n	800c28e <dir_find+0x54>
 800c28c:	e043      	b.n	800c316 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	695b      	ldr	r3, [r3, #20]
 800c292:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c296:	76fb      	strb	r3, [r7, #27]
 800c298:	2340      	movs	r3, #64	; 0x40
 800c29a:	617b      	str	r3, [r7, #20]
 800c29c:	2300      	movs	r3, #0
 800c29e:	613b      	str	r3, [r7, #16]
 800c2a0:	e029      	b.n	800c2f6 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	f003 031f 	and.w	r3, r3, #31
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d102      	bne.n	800c2b2 <dir_find+0x78>
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	3302      	adds	r3, #2
 800c2b0:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	695a      	ldr	r2, [r3, #20]
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fd fdb2 	bl	8009e24 <ld_word>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f002 fcc0 	bl	800ec48 <ff_wtoupper>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	461c      	mov	r4, r3
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	691a      	ldr	r2, [r3, #16]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	4413      	add	r3, r2
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f002 fcb5 	bl	800ec48 <ff_wtoupper>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	429c      	cmp	r4, r3
 800c2e2:	d10c      	bne.n	800c2fe <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c2e4:	7efb      	ldrb	r3, [r7, #27]
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	76fb      	strb	r3, [r7, #27]
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	3302      	adds	r3, #2
 800c2ee:	617b      	str	r3, [r7, #20]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	613b      	str	r3, [r7, #16]
 800c2f6:	7efb      	ldrb	r3, [r7, #27]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1d2      	bne.n	800c2a2 <dir_find+0x68>
 800c2fc:	e000      	b.n	800c300 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c2fe:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c300:	7efb      	ldrb	r3, [r7, #27]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d107      	bne.n	800c316 <dir_find+0xdc>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	691a      	ldr	r2, [r3, #16]
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	4413      	add	r3, r2
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d009      	beq.n	800c32a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c316:	2100      	movs	r1, #0
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7ff fec7 	bl	800c0ac <dir_read>
 800c31e:	4603      	mov	r3, r0
 800c320:	77fb      	strb	r3, [r7, #31]
 800c322:	7ffb      	ldrb	r3, [r7, #31]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d0a6      	beq.n	800c276 <dir_find+0x3c>
 800c328:	e000      	b.n	800c32c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c32a:	bf00      	nop
		}
		return res;
 800c32c:	7ffb      	ldrb	r3, [r7, #31]
 800c32e:	e0a9      	b.n	800c484 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c330:	23ff      	movs	r3, #255	; 0xff
 800c332:	773b      	strb	r3, [r7, #28]
 800c334:	7f3b      	ldrb	r3, [r7, #28]
 800c336:	777b      	strb	r3, [r7, #29]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c33e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c344:	4619      	mov	r1, r3
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f7fe f980 	bl	800a64c <move_window>
 800c34c:	4603      	mov	r3, r0
 800c34e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c350:	7ffb      	ldrb	r3, [r7, #31]
 800c352:	2b00      	cmp	r3, #0
 800c354:	f040 8090 	bne.w	800c478 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c360:	7fbb      	ldrb	r3, [r7, #30]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d102      	bne.n	800c36c <dir_find+0x132>
 800c366:	2304      	movs	r3, #4
 800c368:	77fb      	strb	r3, [r7, #31]
 800c36a:	e08a      	b.n	800c482 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c370:	330b      	adds	r3, #11
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c378:	72fb      	strb	r3, [r7, #11]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	7afa      	ldrb	r2, [r7, #11]
 800c37e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c380:	7fbb      	ldrb	r3, [r7, #30]
 800c382:	2be5      	cmp	r3, #229	; 0xe5
 800c384:	d007      	beq.n	800c396 <dir_find+0x15c>
 800c386:	7afb      	ldrb	r3, [r7, #11]
 800c388:	f003 0308 	and.w	r3, r3, #8
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d009      	beq.n	800c3a4 <dir_find+0x16a>
 800c390:	7afb      	ldrb	r3, [r7, #11]
 800c392:	2b0f      	cmp	r3, #15
 800c394:	d006      	beq.n	800c3a4 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c396:	23ff      	movs	r3, #255	; 0xff
 800c398:	777b      	strb	r3, [r7, #29]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3a0:	64da      	str	r2, [r3, #76]	; 0x4c
 800c3a2:	e05e      	b.n	800c462 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c3a4:	7afb      	ldrb	r3, [r7, #11]
 800c3a6:	2b0f      	cmp	r3, #15
 800c3a8:	d136      	bne.n	800c418 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d154      	bne.n	800c462 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c3b8:	7fbb      	ldrb	r3, [r7, #30]
 800c3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00d      	beq.n	800c3de <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c6:	7b5b      	ldrb	r3, [r3, #13]
 800c3c8:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c3ca:	7fbb      	ldrb	r3, [r7, #30]
 800c3cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3d0:	77bb      	strb	r3, [r7, #30]
 800c3d2:	7fbb      	ldrb	r3, [r7, #30]
 800c3d4:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c3de:	7fba      	ldrb	r2, [r7, #30]
 800c3e0:	7f7b      	ldrb	r3, [r7, #29]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d115      	bne.n	800c412 <dir_find+0x1d8>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ea:	330d      	adds	r3, #13
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	7f3a      	ldrb	r2, [r7, #28]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d10e      	bne.n	800c412 <dir_find+0x1d8>
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	691a      	ldr	r2, [r3, #16]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	4610      	mov	r0, r2
 800c400:	f7ff f9ca 	bl	800b798 <cmp_lfn>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d003      	beq.n	800c412 <dir_find+0x1d8>
 800c40a:	7f7b      	ldrb	r3, [r7, #29]
 800c40c:	3b01      	subs	r3, #1
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	e000      	b.n	800c414 <dir_find+0x1da>
 800c412:	23ff      	movs	r3, #255	; 0xff
 800c414:	777b      	strb	r3, [r7, #29]
 800c416:	e024      	b.n	800c462 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c418:	7f7b      	ldrb	r3, [r7, #29]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d109      	bne.n	800c432 <dir_find+0x1f8>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c422:	4618      	mov	r0, r3
 800c424:	f7ff fb82 	bl	800bb2c <sum_sfn>
 800c428:	4603      	mov	r3, r0
 800c42a:	461a      	mov	r2, r3
 800c42c:	7f3b      	ldrb	r3, [r7, #28]
 800c42e:	4293      	cmp	r3, r2
 800c430:	d024      	beq.n	800c47c <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10a      	bne.n	800c456 <dir_find+0x21c>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	3340      	adds	r3, #64	; 0x40
 800c448:	220b      	movs	r2, #11
 800c44a:	4619      	mov	r1, r3
 800c44c:	f7fd ff0b 	bl	800a266 <mem_cmp>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d014      	beq.n	800c480 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c456:	23ff      	movs	r3, #255	; 0xff
 800c458:	777b      	strb	r3, [r7, #29]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c460:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c462:	2100      	movs	r1, #0
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7ff f816 	bl	800b496 <dir_next>
 800c46a:	4603      	mov	r3, r0
 800c46c:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c46e:	7ffb      	ldrb	r3, [r7, #31]
 800c470:	2b00      	cmp	r3, #0
 800c472:	f43f af65 	beq.w	800c340 <dir_find+0x106>
 800c476:	e004      	b.n	800c482 <dir_find+0x248>
		if (res != FR_OK) break;
 800c478:	bf00      	nop
 800c47a:	e002      	b.n	800c482 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c47c:	bf00      	nop
 800c47e:	e000      	b.n	800c482 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c480:	bf00      	nop

	return res;
 800c482:	7ffb      	ldrb	r3, [r7, #31]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3724      	adds	r7, #36	; 0x24
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd90      	pop	{r4, r7, pc}

0800c48c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c48c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c490:	b0a0      	sub	sp, #128	; 0x80
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c4a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d001      	beq.n	800c4ae <dir_register+0x22>
 800c4aa:	2306      	movs	r3, #6
 800c4ac:	e192      	b.n	800c7d4 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	677b      	str	r3, [r7, #116]	; 0x74
 800c4b2:	e002      	b.n	800c4ba <dir_register+0x2e>
 800c4b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	677b      	str	r3, [r7, #116]	; 0x74
 800c4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4bc:	691a      	ldr	r2, [r3, #16]
 800c4be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4c0:	005b      	lsls	r3, r3, #1
 800c4c2:	4413      	add	r3, r2
 800c4c4:	881b      	ldrh	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1f4      	bne.n	800c4b4 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	2b04      	cmp	r3, #4
 800c4d0:	f040 80a3 	bne.w	800c61a <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c4d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4d6:	330e      	adds	r3, #14
 800c4d8:	4aa4      	ldr	r2, [pc, #656]	; (800c76c <dir_register+0x2e0>)
 800c4da:	fba2 2303 	umull	r2, r3, r2, r3
 800c4de:	08db      	lsrs	r3, r3, #3
 800c4e0:	3302      	adds	r3, #2
 800c4e2:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c4e4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7ff f8bb 	bl	800b662 <dir_alloc>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800c4f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d002      	beq.n	800c500 <dir_register+0x74>
 800c4fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c4fe:	e169      	b.n	800c7d4 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c506:	3b01      	subs	r3, #1
 800c508:	015b      	lsls	r3, r3, #5
 800c50a:	1ad2      	subs	r2, r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d076      	beq.n	800c606 <dir_register+0x17a>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	79db      	ldrb	r3, [r3, #7]
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d070      	beq.n	800c606 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c52a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c52c:	8949      	ldrh	r1, [r1, #10]
 800c52e:	4608      	mov	r0, r1
 800c530:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c532:	8989      	ldrh	r1, [r1, #12]
 800c534:	fb00 f101 	mul.w	r1, r0, r1
 800c538:	2000      	movs	r0, #0
 800c53a:	460c      	mov	r4, r1
 800c53c:	4605      	mov	r5, r0
 800c53e:	eb12 0804 	adds.w	r8, r2, r4
 800c542:	eb43 0905 	adc.w	r9, r3, r5
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fe fcac 	bl	800aeac <fill_first_frag>
 800c554:	4603      	mov	r3, r0
 800c556:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c55a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d002      	beq.n	800c568 <dir_register+0xdc>
 800c562:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c566:	e135      	b.n	800c7d4 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c56e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c572:	4619      	mov	r1, r3
 800c574:	f7fe fcc9 	bl	800af0a <fill_last_frag>
 800c578:	4603      	mov	r3, r0
 800c57a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c57e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <dir_register+0x100>
 800c586:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c58a:	e123      	b.n	800c7d4 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	f107 0308 	add.w	r3, r7, #8
 800c592:	4611      	mov	r1, r2
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff fc91 	bl	800bebc <load_obj_dir>
 800c59a:	4603      	mov	r3, r0
 800c59c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c5a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <dir_register+0x122>
 800c5a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c5ac:	e112      	b.n	800c7d4 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5b0:	695b      	ldr	r3, [r3, #20]
 800c5b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c5bc:	4608      	mov	r0, r1
 800c5be:	f7fd fd8e 	bl	800a0de <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c5c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5c4:	695b      	ldr	r3, [r3, #20]
 800c5c6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	f7fd fd84 	bl	800a0de <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	79da      	ldrb	r2, [r3, #7]
 800c5da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	3321      	adds	r3, #33	; 0x21
 800c5e0:	f042 0201 	orr.w	r2, r2, #1
 800c5e4:	b2d2      	uxtb	r2, r2
 800c5e6:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c5e8:	f107 0308 	add.w	r3, r7, #8
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff fc9b 	bl	800bf28 <store_xdir>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c5f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <dir_register+0x17a>
 800c600:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c604:	e0e6      	b.n	800c7d4 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c608:	695a      	ldr	r2, [r3, #20]
 800c60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	4619      	mov	r1, r3
 800c610:	4610      	mov	r0, r2
 800c612:	f7ff fce4 	bl	800bfde <create_xdir>
		return FR_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	e0dc      	b.n	800c7d4 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c620:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c624:	220c      	movs	r2, #12
 800c626:	4618      	mov	r0, r3
 800c628:	f7fd fde1 	bl	800a1ee <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c62c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c630:	f003 0301 	and.w	r3, r3, #1
 800c634:	2b00      	cmp	r3, #0
 800c636:	d033      	beq.n	800c6a0 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2240      	movs	r2, #64	; 0x40
 800c63c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800c640:	2301      	movs	r3, #1
 800c642:	67bb      	str	r3, [r7, #120]	; 0x78
 800c644:	e016      	b.n	800c674 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c64c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c64e:	691a      	ldr	r2, [r3, #16]
 800c650:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800c654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c656:	f7ff f9db 	bl	800ba10 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7ff fded 	bl	800c23a <dir_find>
 800c660:	4603      	mov	r3, r0
 800c662:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800c666:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d106      	bne.n	800c67c <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800c66e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c670:	3301      	adds	r3, #1
 800c672:	67bb      	str	r3, [r7, #120]	; 0x78
 800c674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c676:	2b63      	cmp	r3, #99	; 0x63
 800c678:	d9e5      	bls.n	800c646 <dir_register+0x1ba>
 800c67a:	e000      	b.n	800c67e <dir_register+0x1f2>
			if (res != FR_OK) break;
 800c67c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c67e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c680:	2b64      	cmp	r3, #100	; 0x64
 800c682:	d101      	bne.n	800c688 <dir_register+0x1fc>
 800c684:	2307      	movs	r3, #7
 800c686:	e0a5      	b.n	800c7d4 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c688:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c68c:	2b04      	cmp	r3, #4
 800c68e:	d002      	beq.n	800c696 <dir_register+0x20a>
 800c690:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c694:	e09e      	b.n	800c7d4 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c696:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c6a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c6a4:	f003 0302 	and.w	r3, r3, #2
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d007      	beq.n	800c6bc <dir_register+0x230>
 800c6ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6ae:	330c      	adds	r3, #12
 800c6b0:	4a2f      	ldr	r2, [pc, #188]	; (800c770 <dir_register+0x2e4>)
 800c6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b6:	089b      	lsrs	r3, r3, #2
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	e000      	b.n	800c6be <dir_register+0x232>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c6c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7fe ffcd 	bl	800b662 <dir_alloc>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c6ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d14f      	bne.n	800c776 <dir_register+0x2ea>
 800c6d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	673b      	str	r3, [r7, #112]	; 0x70
 800c6dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d049      	beq.n	800c776 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6e8:	015b      	lsls	r3, r3, #5
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7fe fe3d 	bl	800b36e <dir_sdi>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800c6fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d139      	bne.n	800c776 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	3340      	adds	r3, #64	; 0x40
 800c706:	4618      	mov	r0, r3
 800c708:	f7ff fa10 	bl	800bb2c <sum_sfn>
 800c70c:	4603      	mov	r3, r0
 800c70e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c716:	4619      	mov	r1, r3
 800c718:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c71a:	f7fd ff97 	bl	800a64c <move_window>
 800c71e:	4603      	mov	r3, r0
 800c720:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800c724:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d123      	bne.n	800c774 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c72c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c72e:	6918      	ldr	r0, [r3, #16]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c736:	b2da      	uxtb	r2, r3
 800c738:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800c73c:	f7ff f900 	bl	800b940 <put_lfn>
				fs->wflag = 1;
 800c740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c742:	2201      	movs	r2, #1
 800c744:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c746:	2100      	movs	r1, #0
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7fe fea4 	bl	800b496 <dir_next>
 800c74e:	4603      	mov	r3, r0
 800c750:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800c754:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10c      	bne.n	800c776 <dir_register+0x2ea>
 800c75c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c75e:	3b01      	subs	r3, #1
 800c760:	673b      	str	r3, [r7, #112]	; 0x70
 800c762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1d4      	bne.n	800c712 <dir_register+0x286>
 800c768:	e005      	b.n	800c776 <dir_register+0x2ea>
 800c76a:	bf00      	nop
 800c76c:	88888889 	.word	0x88888889
 800c770:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800c774:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c776:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d128      	bne.n	800c7d0 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c782:	4619      	mov	r1, r3
 800c784:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c786:	f7fd ff61 	bl	800a64c <move_window>
 800c78a:	4603      	mov	r3, r0
 800c78c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800c790:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c794:	2b00      	cmp	r3, #0
 800c796:	d11b      	bne.n	800c7d0 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c79c:	2220      	movs	r2, #32
 800c79e:	2100      	movs	r1, #0
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7fd fd45 	bl	800a230 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	3340      	adds	r3, #64	; 0x40
 800c7ae:	220b      	movs	r2, #11
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	f7fd fd1c 	bl	800a1ee <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c0:	330c      	adds	r3, #12
 800c7c2:	f002 0218 	and.w	r2, r2, #24
 800c7c6:	b2d2      	uxtb	r2, r2
 800c7c8:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c7ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c7d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3780      	adds	r7, #128	; 0x80
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c7de:	bf00      	nop

0800c7e0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c7e0:	b5b0      	push	{r4, r5, r7, lr}
 800c7e2:	b088      	sub	sp, #32
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 80d8 	beq.w	800c9b0 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b04      	cmp	r3, #4
 800c806:	d106      	bne.n	800c816 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	4618      	mov	r0, r3
 800c810:	f7ff fa14 	bl	800bc3c <get_xdir_info>
		return;
 800c814:	e0cd      	b.n	800c9b2 <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c81a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c81e:	d032      	beq.n	800c886 <get_fileinfo+0xa6>
			i = j = 0;
 800c820:	2300      	movs	r3, #0
 800c822:	61bb      	str	r3, [r7, #24]
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c828:	e01b      	b.n	800c862 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c82a:	89fb      	ldrh	r3, [r7, #14]
 800c82c:	2100      	movs	r1, #0
 800c82e:	4618      	mov	r0, r3
 800c830:	f002 f9ce 	bl	800ebd0 <ff_convert>
 800c834:	4603      	mov	r3, r0
 800c836:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c838:	89fb      	ldrh	r3, [r7, #14]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d102      	bne.n	800c844 <get_fileinfo+0x64>
 800c83e:	2300      	movs	r3, #0
 800c840:	61fb      	str	r3, [r7, #28]
 800c842:	e01a      	b.n	800c87a <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	2bfe      	cmp	r3, #254	; 0xfe
 800c848:	d902      	bls.n	800c850 <get_fileinfo+0x70>
 800c84a:	2300      	movs	r3, #0
 800c84c:	61fb      	str	r3, [r7, #28]
 800c84e:	e014      	b.n	800c87a <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	61fa      	str	r2, [r7, #28]
 800c856:	89fa      	ldrh	r2, [r7, #14]
 800c858:	b2d1      	uxtb	r1, r2
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	4413      	add	r3, r2
 800c85e:	460a      	mov	r2, r1
 800c860:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	691a      	ldr	r2, [r3, #16]
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	1c59      	adds	r1, r3, #1
 800c86a:	61b9      	str	r1, [r7, #24]
 800c86c:	005b      	lsls	r3, r3, #1
 800c86e:	4413      	add	r3, r2
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	81fb      	strh	r3, [r7, #14]
 800c874:	89fb      	ldrh	r3, [r7, #14]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1d7      	bne.n	800c82a <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	4413      	add	r3, r2
 800c880:	331a      	adds	r3, #26
 800c882:	2200      	movs	r2, #0
 800c884:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	61bb      	str	r3, [r7, #24]
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c88e:	683a      	ldr	r2, [r7, #0]
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	4413      	add	r3, r2
 800c894:	331a      	adds	r3, #26
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c89a:	e04c      	b.n	800c936 <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	1c59      	adds	r1, r3, #1
 800c8a4:	61f9      	str	r1, [r7, #28]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c8ac:	7dfb      	ldrb	r3, [r7, #23]
 800c8ae:	2b20      	cmp	r3, #32
 800c8b0:	d100      	bne.n	800c8b4 <get_fileinfo+0xd4>
 800c8b2:	e040      	b.n	800c936 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	2b05      	cmp	r3, #5
 800c8b8:	d101      	bne.n	800c8be <get_fileinfo+0xde>
 800c8ba:	23e5      	movs	r3, #229	; 0xe5
 800c8bc:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	2b09      	cmp	r3, #9
 800c8c2:	d10f      	bne.n	800c8e4 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800c8c4:	89bb      	ldrh	r3, [r7, #12]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d105      	bne.n	800c8d6 <get_fileinfo+0xf6>
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	331a      	adds	r3, #26
 800c8d2:	222e      	movs	r2, #46	; 0x2e
 800c8d4:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	1c5a      	adds	r2, r3, #1
 800c8da:	61ba      	str	r2, [r7, #24]
 800c8dc:	683a      	ldr	r2, [r7, #0]
 800c8de:	4413      	add	r3, r2
 800c8e0:	222e      	movs	r2, #46	; 0x2e
 800c8e2:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c8e4:	683a      	ldr	r2, [r7, #0]
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	330d      	adds	r3, #13
 800c8ec:	7dfa      	ldrb	r2, [r7, #23]
 800c8ee:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c8f0:	89bb      	ldrh	r3, [r7, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d11c      	bne.n	800c930 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	2b40      	cmp	r3, #64	; 0x40
 800c8fa:	d913      	bls.n	800c924 <get_fileinfo+0x144>
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
 800c8fe:	2b5a      	cmp	r3, #90	; 0x5a
 800c900:	d810      	bhi.n	800c924 <get_fileinfo+0x144>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c906:	330c      	adds	r3, #12
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	2b08      	cmp	r3, #8
 800c910:	d901      	bls.n	800c916 <get_fileinfo+0x136>
 800c912:	2310      	movs	r3, #16
 800c914:	e000      	b.n	800c918 <get_fileinfo+0x138>
 800c916:	2308      	movs	r3, #8
 800c918:	4013      	ands	r3, r2
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800c91e:	7dfb      	ldrb	r3, [r7, #23]
 800c920:	3320      	adds	r3, #32
 800c922:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	4413      	add	r3, r2
 800c92a:	331a      	adds	r3, #26
 800c92c:	7dfa      	ldrb	r2, [r7, #23]
 800c92e:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	3301      	adds	r3, #1
 800c934:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800c936:	69fb      	ldr	r3, [r7, #28]
 800c938:	2b0a      	cmp	r3, #10
 800c93a:	d9af      	bls.n	800c89c <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800c93c:	89bb      	ldrh	r3, [r7, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10d      	bne.n	800c95e <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800c942:	683a      	ldr	r2, [r7, #0]
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	4413      	add	r3, r2
 800c948:	331a      	adds	r3, #26
 800c94a:	2200      	movs	r2, #0
 800c94c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c952:	330c      	adds	r3, #12
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <get_fileinfo+0x17e>
 800c95a:	2300      	movs	r3, #0
 800c95c:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	4413      	add	r3, r2
 800c964:	330d      	adds	r3, #13
 800c966:	2200      	movs	r2, #0
 800c968:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96e:	7ada      	ldrb	r2, [r3, #11]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c978:	331c      	adds	r3, #28
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7fd fa6a 	bl	8009e54 <ld_dword>
 800c980:	4603      	mov	r3, r0
 800c982:	2200      	movs	r2, #0
 800c984:	461c      	mov	r4, r3
 800c986:	4615      	mov	r5, r2
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c992:	3316      	adds	r3, #22
 800c994:	4618      	mov	r0, r3
 800c996:	f7fd fa5d 	bl	8009e54 <ld_dword>
 800c99a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	815a      	strh	r2, [r3, #10]
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	0c1b      	lsrs	r3, r3, #16
 800c9a8:	b29a      	uxth	r2, r3
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	811a      	strh	r2, [r3, #8]
 800c9ae:	e000      	b.n	800c9b2 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c9b0:	bf00      	nop
}
 800c9b2:	3720      	adds	r7, #32
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bdb0      	pop	{r4, r5, r7, pc}

0800c9b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08a      	sub	sp, #40	; 0x28
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	613b      	str	r3, [r7, #16]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	60fb      	str	r3, [r7, #12]
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	617b      	str	r3, [r7, #20]
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	61ba      	str	r2, [r7, #24]
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c9e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9e8:	2b1f      	cmp	r3, #31
 800c9ea:	d940      	bls.n	800ca6e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c9ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9ee:	2b2f      	cmp	r3, #47	; 0x2f
 800c9f0:	d006      	beq.n	800ca00 <create_name+0x48>
 800c9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9f4:	2b5c      	cmp	r3, #92	; 0x5c
 800c9f6:	d110      	bne.n	800ca1a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c9f8:	e002      	b.n	800ca00 <create_name+0x48>
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	61bb      	str	r3, [r7, #24]
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	4413      	add	r3, r2
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	2b2f      	cmp	r3, #47	; 0x2f
 800ca0a:	d0f6      	beq.n	800c9fa <create_name+0x42>
 800ca0c:	693a      	ldr	r2, [r7, #16]
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	4413      	add	r3, r2
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	2b5c      	cmp	r3, #92	; 0x5c
 800ca16:	d0f0      	beq.n	800c9fa <create_name+0x42>
			break;
 800ca18:	e02a      	b.n	800ca70 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2bfe      	cmp	r3, #254	; 0xfe
 800ca1e:	d901      	bls.n	800ca24 <create_name+0x6c>
 800ca20:	2306      	movs	r3, #6
 800ca22:	e17d      	b.n	800cd20 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ca24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ca2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca2c:	2101      	movs	r1, #1
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f002 f8ce 	bl	800ebd0 <ff_convert>
 800ca34:	4603      	mov	r3, r0
 800ca36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ca38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <create_name+0x8a>
 800ca3e:	2306      	movs	r3, #6
 800ca40:	e16e      	b.n	800cd20 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ca42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca44:	2b7f      	cmp	r3, #127	; 0x7f
 800ca46:	d809      	bhi.n	800ca5c <create_name+0xa4>
 800ca48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	488d      	ldr	r0, [pc, #564]	; (800cc84 <create_name+0x2cc>)
 800ca4e:	f7fd fc31 	bl	800a2b4 <chk_chr>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <create_name+0xa4>
 800ca58:	2306      	movs	r3, #6
 800ca5a:	e161      	b.n	800cd20 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	617a      	str	r2, [r7, #20]
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	4413      	add	r3, r2
 800ca68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca6a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ca6c:	e7b4      	b.n	800c9d8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ca6e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	441a      	add	r2, r3
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ca7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca7c:	2b1f      	cmp	r3, #31
 800ca7e:	d801      	bhi.n	800ca84 <create_name+0xcc>
 800ca80:	2304      	movs	r3, #4
 800ca82:	e000      	b.n	800ca86 <create_name+0xce>
 800ca84:	2300      	movs	r3, #0
 800ca86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ca8a:	e011      	b.n	800cab0 <create_name+0xf8>
		w = lfn[di - 1];
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca92:	3b01      	subs	r3, #1
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	4413      	add	r3, r2
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ca9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caa0:	2b20      	cmp	r3, #32
 800caa2:	d002      	beq.n	800caaa <create_name+0xf2>
 800caa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caa6:	2b2e      	cmp	r3, #46	; 0x2e
 800caa8:	d106      	bne.n	800cab8 <create_name+0x100>
		di--;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	3b01      	subs	r3, #1
 800caae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1ea      	bne.n	800ca8c <create_name+0xd4>
 800cab6:	e000      	b.n	800caba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cab8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	005b      	lsls	r3, r3, #1
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	4413      	add	r3, r2
 800cac2:	2200      	movs	r2, #0
 800cac4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d101      	bne.n	800cad0 <create_name+0x118>
 800cacc:	2306      	movs	r3, #6
 800cace:	e127      	b.n	800cd20 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	3340      	adds	r3, #64	; 0x40
 800cad4:	220b      	movs	r2, #11
 800cad6:	2120      	movs	r1, #32
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fd fba9 	bl	800a230 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cade:	2300      	movs	r3, #0
 800cae0:	61bb      	str	r3, [r7, #24]
 800cae2:	e002      	b.n	800caea <create_name+0x132>
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	3301      	adds	r3, #1
 800cae8:	61bb      	str	r3, [r7, #24]
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	005b      	lsls	r3, r3, #1
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	4413      	add	r3, r2
 800caf2:	881b      	ldrh	r3, [r3, #0]
 800caf4:	2b20      	cmp	r3, #32
 800caf6:	d0f5      	beq.n	800cae4 <create_name+0x12c>
 800caf8:	69bb      	ldr	r3, [r7, #24]
 800cafa:	005b      	lsls	r3, r3, #1
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	4413      	add	r3, r2
 800cb00:	881b      	ldrh	r3, [r3, #0]
 800cb02:	2b2e      	cmp	r3, #46	; 0x2e
 800cb04:	d0ee      	beq.n	800cae4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d009      	beq.n	800cb20 <create_name+0x168>
 800cb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb10:	f043 0303 	orr.w	r3, r3, #3
 800cb14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cb18:	e002      	b.n	800cb20 <create_name+0x168>
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	617b      	str	r3, [r7, #20]
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d009      	beq.n	800cb3a <create_name+0x182>
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4413      	add	r3, r2
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	2b2e      	cmp	r3, #46	; 0x2e
 800cb38:	d1ef      	bne.n	800cb1a <create_name+0x162>

	i = b = 0; ni = 8;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cb40:	2300      	movs	r3, #0
 800cb42:	623b      	str	r3, [r7, #32]
 800cb44:	2308      	movs	r3, #8
 800cb46:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	1c5a      	adds	r2, r3, #1
 800cb4c:	61ba      	str	r2, [r7, #24]
 800cb4e:	005b      	lsls	r3, r3, #1
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	4413      	add	r3, r2
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cb58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 8090 	beq.w	800cc80 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cb60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb62:	2b20      	cmp	r3, #32
 800cb64:	d006      	beq.n	800cb74 <create_name+0x1bc>
 800cb66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb68:	2b2e      	cmp	r3, #46	; 0x2e
 800cb6a:	d10a      	bne.n	800cb82 <create_name+0x1ca>
 800cb6c:	69ba      	ldr	r2, [r7, #24]
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d006      	beq.n	800cb82 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cb74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb78:	f043 0303 	orr.w	r3, r3, #3
 800cb7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb80:	e07d      	b.n	800cc7e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cb82:	6a3a      	ldr	r2, [r7, #32]
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d203      	bcs.n	800cb92 <create_name+0x1da>
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d123      	bne.n	800cbda <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	2b0b      	cmp	r3, #11
 800cb96:	d106      	bne.n	800cba6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cb98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb9c:	f043 0303 	orr.w	r3, r3, #3
 800cba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cba4:	e075      	b.n	800cc92 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cba6:	69ba      	ldr	r2, [r7, #24]
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d005      	beq.n	800cbba <create_name+0x202>
 800cbae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbb2:	f043 0303 	orr.w	r3, r3, #3
 800cbb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d866      	bhi.n	800cc90 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	61bb      	str	r3, [r7, #24]
 800cbc6:	2308      	movs	r3, #8
 800cbc8:	623b      	str	r3, [r7, #32]
 800cbca:	230b      	movs	r3, #11
 800cbcc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cbce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cbd8:	e051      	b.n	800cc7e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cbda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbdc:	2b7f      	cmp	r3, #127	; 0x7f
 800cbde:	d914      	bls.n	800cc0a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cbe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f001 fff3 	bl	800ebd0 <ff_convert>
 800cbea:	4603      	mov	r3, r0
 800cbec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cbee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d004      	beq.n	800cbfe <create_name+0x246>
 800cbf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbf6:	3b80      	subs	r3, #128	; 0x80
 800cbf8:	4a23      	ldr	r2, [pc, #140]	; (800cc88 <create_name+0x2d0>)
 800cbfa:	5cd3      	ldrb	r3, [r2, r3]
 800cbfc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cbfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc02:	f043 0302 	orr.w	r3, r3, #2
 800cc06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cc0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d007      	beq.n	800cc20 <create_name+0x268>
 800cc10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc12:	4619      	mov	r1, r3
 800cc14:	481d      	ldr	r0, [pc, #116]	; (800cc8c <create_name+0x2d4>)
 800cc16:	f7fd fb4d 	bl	800a2b4 <chk_chr>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d008      	beq.n	800cc32 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cc20:	235f      	movs	r3, #95	; 0x5f
 800cc22:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cc24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc28:	f043 0303 	orr.w	r3, r3, #3
 800cc2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc30:	e01b      	b.n	800cc6a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cc32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc34:	2b40      	cmp	r3, #64	; 0x40
 800cc36:	d909      	bls.n	800cc4c <create_name+0x294>
 800cc38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc3a:	2b5a      	cmp	r3, #90	; 0x5a
 800cc3c:	d806      	bhi.n	800cc4c <create_name+0x294>
					b |= 2;
 800cc3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc42:	f043 0302 	orr.w	r3, r3, #2
 800cc46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc4a:	e00e      	b.n	800cc6a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cc4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc4e:	2b60      	cmp	r3, #96	; 0x60
 800cc50:	d90b      	bls.n	800cc6a <create_name+0x2b2>
 800cc52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc54:	2b7a      	cmp	r3, #122	; 0x7a
 800cc56:	d808      	bhi.n	800cc6a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cc58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc5c:	f043 0301 	orr.w	r3, r3, #1
 800cc60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc66:	3b20      	subs	r3, #32
 800cc68:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	1c5a      	adds	r2, r3, #1
 800cc6e:	623a      	str	r2, [r7, #32]
 800cc70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc72:	b2d1      	uxtb	r1, r2
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	4413      	add	r3, r2
 800cc78:	460a      	mov	r2, r1
 800cc7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800cc7e:	e763      	b.n	800cb48 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cc80:	bf00      	nop
 800cc82:	e006      	b.n	800cc92 <create_name+0x2da>
 800cc84:	08010aec 	.word	0x08010aec
 800cc88:	08010be0 	.word	0x08010be0
 800cc8c:	08010af8 	.word	0x08010af8
			if (si > di) break;			/* No extension */
 800cc90:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc98:	2be5      	cmp	r3, #229	; 0xe5
 800cc9a:	d103      	bne.n	800cca4 <create_name+0x2ec>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2205      	movs	r2, #5
 800cca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	2b08      	cmp	r3, #8
 800cca8:	d104      	bne.n	800ccb4 <create_name+0x2fc>
 800ccaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ccb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccb8:	f003 030c 	and.w	r3, r3, #12
 800ccbc:	2b0c      	cmp	r3, #12
 800ccbe:	d005      	beq.n	800cccc <create_name+0x314>
 800ccc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccc4:	f003 0303 	and.w	r3, r3, #3
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	d105      	bne.n	800ccd8 <create_name+0x320>
 800cccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccd0:	f043 0302 	orr.w	r3, r3, #2
 800ccd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ccd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccdc:	f003 0302 	and.w	r3, r3, #2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d117      	bne.n	800cd14 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cce4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cce8:	f003 0303 	and.w	r3, r3, #3
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d105      	bne.n	800ccfc <create_name+0x344>
 800ccf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccf4:	f043 0310 	orr.w	r3, r3, #16
 800ccf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ccfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd00:	f003 030c 	and.w	r3, r3, #12
 800cd04:	2b04      	cmp	r3, #4
 800cd06:	d105      	bne.n	800cd14 <create_name+0x35c>
 800cd08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd0c:	f043 0308 	orr.w	r3, r3, #8
 800cd10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cd1a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800cd1e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3728      	adds	r7, #40	; 0x28
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cd3c:	e002      	b.n	800cd44 <follow_path+0x1c>
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	3301      	adds	r3, #1
 800cd42:	603b      	str	r3, [r7, #0]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b2f      	cmp	r3, #47	; 0x2f
 800cd4a:	d0f8      	beq.n	800cd3e <follow_path+0x16>
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b5c      	cmp	r3, #92	; 0x5c
 800cd52:	d0f4      	beq.n	800cd3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	2200      	movs	r2, #0
 800cd58:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2b1f      	cmp	r3, #31
 800cd66:	d80a      	bhi.n	800cd7e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2280      	movs	r2, #128	; 0x80
 800cd6c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800cd70:	2100      	movs	r1, #0
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7fe fafb 	bl	800b36e <dir_sdi>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	75fb      	strb	r3, [r7, #23]
 800cd7c:	e07d      	b.n	800ce7a <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd7e:	463b      	mov	r3, r7
 800cd80:	4619      	mov	r1, r3
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7ff fe18 	bl	800c9b8 <create_name>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd8c:	7dfb      	ldrb	r3, [r7, #23]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d16e      	bne.n	800ce70 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7ff fa51 	bl	800c23a <dir_find>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800cda2:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cda4:	7dfb      	ldrb	r3, [r7, #23]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00a      	beq.n	800cdc0 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	2b04      	cmp	r3, #4
 800cdae:	d161      	bne.n	800ce74 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cdb0:	7afb      	ldrb	r3, [r7, #11]
 800cdb2:	f003 0304 	and.w	r3, r3, #4
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d15c      	bne.n	800ce74 <follow_path+0x14c>
 800cdba:	2305      	movs	r3, #5
 800cdbc:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cdbe:	e059      	b.n	800ce74 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cdc0:	7afb      	ldrb	r3, [r7, #11]
 800cdc2:	f003 0304 	and.w	r3, r3, #4
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d156      	bne.n	800ce78 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	799b      	ldrb	r3, [r3, #6]
 800cdce:	f003 0310 	and.w	r3, r3, #16
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d102      	bne.n	800cddc <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800cdd6:	2305      	movs	r3, #5
 800cdd8:	75fb      	strb	r3, [r7, #23]
 800cdda:	e04e      	b.n	800ce7a <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b04      	cmp	r3, #4
 800cde2:	d130      	bne.n	800ce46 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	689a      	ldr	r2, [r3, #8]
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdf8:	693a      	ldr	r2, [r7, #16]
 800cdfa:	79d2      	ldrb	r2, [r2, #7]
 800cdfc:	431a      	orrs	r2, r3
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	3334      	adds	r3, #52	; 0x34
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fd f81f 	bl	8009e54 <ld_dword>
 800ce16:	4602      	mov	r2, r0
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	695b      	ldr	r3, [r3, #20]
 800ce20:	3321      	adds	r3, #33	; 0x21
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	f003 0302 	and.w	r3, r3, #2
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	695b      	ldr	r3, [r3, #20]
 800ce32:	3338      	adds	r3, #56	; 0x38
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7fd f830 	bl	8009e9a <ld_qword>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	6939      	ldr	r1, [r7, #16]
 800ce40:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ce44:	e79b      	b.n	800cd7e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	8992      	ldrh	r2, [r2, #12]
 800ce54:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce58:	fb00 f202 	mul.w	r2, r0, r2
 800ce5c:	1a9b      	subs	r3, r3, r2
 800ce5e:	440b      	add	r3, r1
 800ce60:	4619      	mov	r1, r3
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7fe fc59 	bl	800b71a <ld_clust>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce6e:	e786      	b.n	800cd7e <follow_path+0x56>
			if (res != FR_OK) break;
 800ce70:	bf00      	nop
 800ce72:	e002      	b.n	800ce7a <follow_path+0x152>
				break;
 800ce74:	bf00      	nop
 800ce76:	e000      	b.n	800ce7a <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce78:	bf00      	nop
			}
		}
	}

	return res;
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b087      	sub	sp, #28
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ce8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce90:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d031      	beq.n	800cefe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	617b      	str	r3, [r7, #20]
 800cea0:	e002      	b.n	800cea8 <get_ldnumber+0x24>
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	3301      	adds	r3, #1
 800cea6:	617b      	str	r3, [r7, #20]
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	2b1f      	cmp	r3, #31
 800ceae:	d903      	bls.n	800ceb8 <get_ldnumber+0x34>
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b3a      	cmp	r3, #58	; 0x3a
 800ceb6:	d1f4      	bne.n	800cea2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	2b3a      	cmp	r3, #58	; 0x3a
 800cebe:	d11c      	bne.n	800cefa <get_ldnumber+0x76>
			tp = *path;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	1c5a      	adds	r2, r3, #1
 800ceca:	60fa      	str	r2, [r7, #12]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	3b30      	subs	r3, #48	; 0x30
 800ced0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	2b09      	cmp	r3, #9
 800ced6:	d80e      	bhi.n	800cef6 <get_ldnumber+0x72>
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d10a      	bne.n	800cef6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d107      	bne.n	800cef6 <get_ldnumber+0x72>
					vol = (int)i;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	3301      	adds	r3, #1
 800ceee:	617b      	str	r3, [r7, #20]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	697a      	ldr	r2, [r7, #20]
 800cef4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	e002      	b.n	800cf00 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cefa:	2300      	movs	r3, #0
 800cefc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cefe:	693b      	ldr	r3, [r7, #16]
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	371c      	adds	r7, #28
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	70da      	strb	r2, [r3, #3]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf22:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cf24:	6839      	ldr	r1, [r7, #0]
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7fd fb90 	bl	800a64c <move_window>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <check_fs+0x2a>
 800cf32:	2304      	movs	r3, #4
 800cf34:	e044      	b.n	800cfc0 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	333c      	adds	r3, #60	; 0x3c
 800cf3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fc ff70 	bl	8009e24 <ld_word>
 800cf44:	4603      	mov	r3, r0
 800cf46:	461a      	mov	r2, r3
 800cf48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d001      	beq.n	800cf54 <check_fs+0x48>
 800cf50:	2303      	movs	r3, #3
 800cf52:	e035      	b.n	800cfc0 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf5a:	2be9      	cmp	r3, #233	; 0xe9
 800cf5c:	d009      	beq.n	800cf72 <check_fs+0x66>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf64:	2beb      	cmp	r3, #235	; 0xeb
 800cf66:	d11e      	bne.n	800cfa6 <check_fs+0x9a>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf6e:	2b90      	cmp	r3, #144	; 0x90
 800cf70:	d119      	bne.n	800cfa6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	333c      	adds	r3, #60	; 0x3c
 800cf76:	3336      	adds	r3, #54	; 0x36
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7fc ff6b 	bl	8009e54 <ld_dword>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf84:	4a10      	ldr	r2, [pc, #64]	; (800cfc8 <check_fs+0xbc>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d101      	bne.n	800cf8e <check_fs+0x82>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	e018      	b.n	800cfc0 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	333c      	adds	r3, #60	; 0x3c
 800cf92:	3352      	adds	r3, #82	; 0x52
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fc ff5d 	bl	8009e54 <ld_dword>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	4a0b      	ldr	r2, [pc, #44]	; (800cfcc <check_fs+0xc0>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d101      	bne.n	800cfa6 <check_fs+0x9a>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	e00c      	b.n	800cfc0 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	333c      	adds	r3, #60	; 0x3c
 800cfaa:	220b      	movs	r2, #11
 800cfac:	4908      	ldr	r1, [pc, #32]	; (800cfd0 <check_fs+0xc4>)
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fd f959 	bl	800a266 <mem_cmp>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <check_fs+0xb2>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e000      	b.n	800cfc0 <check_fs+0xb4>
#endif
	return 2;
 800cfbe:	2302      	movs	r3, #2
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	00544146 	.word	0x00544146
 800cfcc:	33544146 	.word	0x33544146
 800cfd0:	08010b00 	.word	0x08010b00

0800cfd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cfd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfd8:	b09c      	sub	sp, #112	; 0x70
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	61f8      	str	r0, [r7, #28]
 800cfde:	61b9      	str	r1, [r7, #24]
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cfea:	69f8      	ldr	r0, [r7, #28]
 800cfec:	f7ff ff4a 	bl	800ce84 <get_ldnumber>
 800cff0:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800cff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	da01      	bge.n	800cffc <find_volume+0x28>
 800cff8:	230b      	movs	r3, #11
 800cffa:	e376      	b.n	800d6ea <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cffc:	4aa6      	ldr	r2, [pc, #664]	; (800d298 <find_volume+0x2c4>)
 800cffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d004:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d101      	bne.n	800d010 <find_volume+0x3c>
 800d00c:	230c      	movs	r3, #12
 800d00e:	e36c      	b.n	800d6ea <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d014:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d016:	7dfb      	ldrb	r3, [r7, #23]
 800d018:	f023 0301 	bic.w	r3, r3, #1
 800d01c:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d01e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d01a      	beq.n	800d05c <find_volume+0x88>
		stat = disk_status(fs->drv);
 800d026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d028:	785b      	ldrb	r3, [r3, #1]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fc fe5c 	bl	8009ce8 <disk_status>
 800d030:	4603      	mov	r3, r0
 800d032:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d036:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d03a:	f003 0301 	and.w	r3, r3, #1
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10c      	bne.n	800d05c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d042:	7dfb      	ldrb	r3, [r7, #23]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d007      	beq.n	800d058 <find_volume+0x84>
 800d048:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d04c:	f003 0304 	and.w	r3, r3, #4
 800d050:	2b00      	cmp	r3, #0
 800d052:	d001      	beq.n	800d058 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800d054:	230a      	movs	r3, #10
 800d056:	e348      	b.n	800d6ea <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800d058:	2300      	movs	r3, #0
 800d05a:	e346      	b.n	800d6ea <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d05c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d05e:	2200      	movs	r2, #0
 800d060:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d064:	b2da      	uxtb	r2, r3
 800d066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d068:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d06a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d06c:	785b      	ldrb	r3, [r3, #1]
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fc fe54 	bl	8009d1c <disk_initialize>
 800d074:	4603      	mov	r3, r0
 800d076:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d07a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d07e:	f003 0301 	and.w	r3, r3, #1
 800d082:	2b00      	cmp	r3, #0
 800d084:	d001      	beq.n	800d08a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d086:	2303      	movs	r3, #3
 800d088:	e32f      	b.n	800d6ea <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d08a:	7dfb      	ldrb	r3, [r7, #23]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d007      	beq.n	800d0a0 <find_volume+0xcc>
 800d090:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d094:	f003 0304 	and.w	r3, r3, #4
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800d09c:	230a      	movs	r3, #10
 800d09e:	e324      	b.n	800d6ea <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a2:	7858      	ldrb	r0, [r3, #1]
 800d0a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a6:	330c      	adds	r3, #12
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	2102      	movs	r1, #2
 800d0ac:	f7fc fe9c 	bl	8009de8 <disk_ioctl>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d001      	beq.n	800d0ba <find_volume+0xe6>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e317      	b.n	800d6ea <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0bc:	899b      	ldrh	r3, [r3, #12]
 800d0be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0c2:	d80d      	bhi.n	800d0e0 <find_volume+0x10c>
 800d0c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0c6:	899b      	ldrh	r3, [r3, #12]
 800d0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0cc:	d308      	bcc.n	800d0e0 <find_volume+0x10c>
 800d0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0d0:	899b      	ldrh	r3, [r3, #12]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0d6:	899b      	ldrh	r3, [r3, #12]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	4013      	ands	r3, r2
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d001      	beq.n	800d0e4 <find_volume+0x110>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e302      	b.n	800d6ea <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d0e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d0ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d0ec:	f7ff ff0e 	bl	800cf0c <check_fs>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d0f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d14d      	bne.n	800d19a <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d0fe:	2300      	movs	r3, #0
 800d100:	65bb      	str	r3, [r7, #88]	; 0x58
 800d102:	e020      	b.n	800d146 <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d106:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d10a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d10c:	011b      	lsls	r3, r3, #4
 800d10e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d112:	4413      	add	r3, r2
 800d114:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d118:	3304      	adds	r3, #4
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d006      	beq.n	800d12e <find_volume+0x15a>
 800d120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d122:	3308      	adds	r3, #8
 800d124:	4618      	mov	r0, r3
 800d126:	f7fc fe95 	bl	8009e54 <ld_dword>
 800d12a:	4602      	mov	r2, r0
 800d12c:	e000      	b.n	800d130 <find_volume+0x15c>
 800d12e:	2200      	movs	r2, #0
 800d130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	3360      	adds	r3, #96	; 0x60
 800d136:	f107 0110 	add.w	r1, r7, #16
 800d13a:	440b      	add	r3, r1
 800d13c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d142:	3301      	adds	r3, #1
 800d144:	65bb      	str	r3, [r7, #88]	; 0x58
 800d146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d148:	2b03      	cmp	r3, #3
 800d14a:	d9db      	bls.n	800d104 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d14c:	2300      	movs	r3, #0
 800d14e:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800d150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d152:	2b00      	cmp	r3, #0
 800d154:	d002      	beq.n	800d15c <find_volume+0x188>
 800d156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d158:	3b01      	subs	r3, #1
 800d15a:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d15c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	3360      	adds	r3, #96	; 0x60
 800d162:	f107 0210 	add.w	r2, r7, #16
 800d166:	4413      	add	r3, r2
 800d168:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d16c:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d16e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d170:	2b00      	cmp	r3, #0
 800d172:	d005      	beq.n	800d180 <find_volume+0x1ac>
 800d174:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d176:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d178:	f7ff fec8 	bl	800cf0c <check_fs>
 800d17c:	4603      	mov	r3, r0
 800d17e:	e000      	b.n	800d182 <find_volume+0x1ae>
 800d180:	2303      	movs	r3, #3
 800d182:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d905      	bls.n	800d19a <find_volume+0x1c6>
 800d18e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d190:	3301      	adds	r3, #1
 800d192:	65bb      	str	r3, [r7, #88]	; 0x58
 800d194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d196:	2b03      	cmp	r3, #3
 800d198:	d9e0      	bls.n	800d15c <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d19a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d19e:	2b04      	cmp	r3, #4
 800d1a0:	d101      	bne.n	800d1a6 <find_volume+0x1d2>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e2a1      	b.n	800d6ea <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d1a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d901      	bls.n	800d1b2 <find_volume+0x1de>
 800d1ae:	230d      	movs	r3, #13
 800d1b0:	e29b      	b.n	800d6ea <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d1b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	f040 8101 	bne.w	800d3be <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d1bc:	230b      	movs	r3, #11
 800d1be:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1c0:	e002      	b.n	800d1c8 <find_volume+0x1f4>
 800d1c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1ca:	2b3f      	cmp	r3, #63	; 0x3f
 800d1cc:	d806      	bhi.n	800d1dc <find_volume+0x208>
 800d1ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1d2:	4413      	add	r3, r2
 800d1d4:	333c      	adds	r3, #60	; 0x3c
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d0f2      	beq.n	800d1c2 <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d1dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1de:	2b3f      	cmp	r3, #63	; 0x3f
 800d1e0:	d801      	bhi.n	800d1e6 <find_volume+0x212>
 800d1e2:	230d      	movs	r3, #13
 800d1e4:	e281      	b.n	800d6ea <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1e8:	333c      	adds	r3, #60	; 0x3c
 800d1ea:	3368      	adds	r3, #104	; 0x68
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fc fe19 	bl	8009e24 <ld_word>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1f8:	d001      	beq.n	800d1fe <find_volume+0x22a>
 800d1fa:	230d      	movs	r3, #13
 800d1fc:	e275      	b.n	800d6ea <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d200:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800d204:	461a      	mov	r2, r3
 800d206:	2301      	movs	r3, #1
 800d208:	4093      	lsls	r3, r2
 800d20a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d20c:	8992      	ldrh	r2, [r2, #12]
 800d20e:	4293      	cmp	r3, r2
 800d210:	d001      	beq.n	800d216 <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800d212:	230d      	movs	r3, #13
 800d214:	e269      	b.n	800d6ea <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d218:	333c      	adds	r3, #60	; 0x3c
 800d21a:	3348      	adds	r3, #72	; 0x48
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fc fe3c 	bl	8009e9a <ld_qword>
 800d222:	4602      	mov	r2, r0
 800d224:	460b      	mov	r3, r1
 800d226:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d228:	2000      	movs	r0, #0
 800d22a:	60b9      	str	r1, [r7, #8]
 800d22c:	60f8      	str	r0, [r7, #12]
 800d22e:	68b9      	ldr	r1, [r7, #8]
 800d230:	1851      	adds	r1, r2, r1
 800d232:	6039      	str	r1, [r7, #0]
 800d234:	68f9      	ldr	r1, [r7, #12]
 800d236:	eb43 0101 	adc.w	r1, r3, r1
 800d23a:	6079      	str	r1, [r7, #4]
 800d23c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d240:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d244:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d301      	bcc.n	800d250 <find_volume+0x27c>
 800d24c:	230d      	movs	r3, #13
 800d24e:	e24c      	b.n	800d6ea <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d252:	333c      	adds	r3, #60	; 0x3c
 800d254:	3354      	adds	r3, #84	; 0x54
 800d256:	4618      	mov	r0, r3
 800d258:	f7fc fdfc 	bl	8009e54 <ld_dword>
 800d25c:	4602      	mov	r2, r0
 800d25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d260:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d264:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800d268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d26a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d26c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d26e:	789b      	ldrb	r3, [r3, #2]
 800d270:	2b01      	cmp	r3, #1
 800d272:	d001      	beq.n	800d278 <find_volume+0x2a4>
 800d274:	230d      	movs	r3, #13
 800d276:	e238      	b.n	800d6ea <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d27a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800d27e:	461a      	mov	r2, r3
 800d280:	2301      	movs	r3, #1
 800d282:	4093      	lsls	r3, r2
 800d284:	b29a      	uxth	r2, r3
 800d286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d288:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d28c:	895b      	ldrh	r3, [r3, #10]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d104      	bne.n	800d29c <find_volume+0x2c8>
 800d292:	230d      	movs	r3, #13
 800d294:	e229      	b.n	800d6ea <find_volume+0x716>
 800d296:	bf00      	nop
 800d298:	20002310 	.word	0x20002310

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d29c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d29e:	333c      	adds	r3, #60	; 0x3c
 800d2a0:	335c      	adds	r3, #92	; 0x5c
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fc fdd6 	bl	8009e54 <ld_dword>
 800d2a8:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ac:	4a99      	ldr	r2, [pc, #612]	; (800d514 <find_volume+0x540>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d901      	bls.n	800d2b6 <find_volume+0x2e2>
 800d2b2:	230d      	movs	r3, #13
 800d2b4:	e219      	b.n	800d6ea <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800d2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b8:	1c9a      	adds	r2, r3, #2
 800d2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2bc:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d2be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d2c2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d2c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2c6:	333c      	adds	r3, #60	; 0x3c
 800d2c8:	3358      	adds	r3, #88	; 0x58
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7fc fdc2 	bl	8009e54 <ld_dword>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2d4:	441a      	add	r2, r3
 800d2d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2d8:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2dc:	333c      	adds	r3, #60	; 0x3c
 800d2de:	3350      	adds	r3, #80	; 0x50
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fc fdb7 	bl	8009e54 <ld_dword>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2ea:	441a      	add	r2, r3
 800d2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2ee:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d2f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	469a      	mov	sl, r3
 800d2f8:	4693      	mov	fp, r2
 800d2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2fc:	895b      	ldrh	r3, [r3, #10]
 800d2fe:	461a      	mov	r2, r3
 800d300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d302:	fb02 f303 	mul.w	r3, r2, r3
 800d306:	2200      	movs	r2, #0
 800d308:	4698      	mov	r8, r3
 800d30a:	4691      	mov	r9, r2
 800d30c:	eb1a 0408 	adds.w	r4, sl, r8
 800d310:	eb4b 0509 	adc.w	r5, fp, r9
 800d314:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d318:	42a2      	cmp	r2, r4
 800d31a:	41ab      	sbcs	r3, r5
 800d31c:	d201      	bcs.n	800d322 <find_volume+0x34e>
 800d31e:	230d      	movs	r3, #13
 800d320:	e1e3      	b.n	800d6ea <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d324:	333c      	adds	r3, #60	; 0x3c
 800d326:	3360      	adds	r3, #96	; 0x60
 800d328:	4618      	mov	r0, r3
 800d32a:	f7fc fd93 	bl	8009e54 <ld_dword>
 800d32e:	4602      	mov	r2, r0
 800d330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d332:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d338:	4619      	mov	r1, r3
 800d33a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d33c:	f7fd fa24 	bl	800a788 <clust2sect>
 800d340:	4603      	mov	r3, r0
 800d342:	4619      	mov	r1, r3
 800d344:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d346:	f7fd f981 	bl	800a64c <move_window>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d001      	beq.n	800d354 <find_volume+0x380>
 800d350:	2301      	movs	r3, #1
 800d352:	e1ca      	b.n	800d6ea <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d354:	2300      	movs	r3, #0
 800d356:	65bb      	str	r3, [r7, #88]	; 0x58
 800d358:	e015      	b.n	800d386 <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d35a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d35c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d35e:	4413      	add	r3, r2
 800d360:	333c      	adds	r3, #60	; 0x3c
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b81      	cmp	r3, #129	; 0x81
 800d366:	d10b      	bne.n	800d380 <find_volume+0x3ac>
 800d368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d36a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d36e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d370:	3314      	adds	r3, #20
 800d372:	4413      	add	r3, r2
 800d374:	4618      	mov	r0, r3
 800d376:	f7fc fd6d 	bl	8009e54 <ld_dword>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d009      	beq.n	800d394 <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d382:	3320      	adds	r3, #32
 800d384:	65bb      	str	r3, [r7, #88]	; 0x58
 800d386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d388:	899b      	ldrh	r3, [r3, #12]
 800d38a:	461a      	mov	r2, r3
 800d38c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d38e:	4293      	cmp	r3, r2
 800d390:	d3e3      	bcc.n	800d35a <find_volume+0x386>
 800d392:	e000      	b.n	800d396 <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d394:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d398:	899b      	ldrh	r3, [r3, #12]
 800d39a:	461a      	mov	r2, r3
 800d39c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d101      	bne.n	800d3a6 <find_volume+0x3d2>
 800d3a2:	230d      	movs	r3, #13
 800d3a4:	e1a1      	b.n	800d6ea <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3ac:	61da      	str	r2, [r3, #28]
 800d3ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3b0:	69da      	ldr	r2, [r3, #28]
 800d3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3b4:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d3b6:	2304      	movs	r3, #4
 800d3b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800d3bc:	e17d      	b.n	800d6ba <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3c0:	333c      	adds	r3, #60	; 0x3c
 800d3c2:	330b      	adds	r3, #11
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fc fd2d 	bl	8009e24 <ld_word>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3d0:	899b      	ldrh	r3, [r3, #12]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d001      	beq.n	800d3da <find_volume+0x406>
 800d3d6:	230d      	movs	r3, #13
 800d3d8:	e187      	b.n	800d6ea <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3dc:	333c      	adds	r3, #60	; 0x3c
 800d3de:	3316      	adds	r3, #22
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fc fd1f 	bl	8009e24 <ld_word>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d3ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d106      	bne.n	800d3fe <find_volume+0x42a>
 800d3f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f2:	333c      	adds	r3, #60	; 0x3c
 800d3f4:	3324      	adds	r3, #36	; 0x24
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fc fd2c 	bl	8009e54 <ld_dword>
 800d3fc:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800d3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d400:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d402:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d406:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800d40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d40c:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d40e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d410:	789b      	ldrb	r3, [r3, #2]
 800d412:	2b01      	cmp	r3, #1
 800d414:	d005      	beq.n	800d422 <find_volume+0x44e>
 800d416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d418:	789b      	ldrb	r3, [r3, #2]
 800d41a:	2b02      	cmp	r3, #2
 800d41c:	d001      	beq.n	800d422 <find_volume+0x44e>
 800d41e:	230d      	movs	r3, #13
 800d420:	e163      	b.n	800d6ea <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d424:	789b      	ldrb	r3, [r3, #2]
 800d426:	461a      	mov	r2, r3
 800d428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d42a:	fb02 f303 	mul.w	r3, r2, r3
 800d42e:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d432:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d436:	b29a      	uxth	r2, r3
 800d438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d43a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d43e:	895b      	ldrh	r3, [r3, #10]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d008      	beq.n	800d456 <find_volume+0x482>
 800d444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d446:	895b      	ldrh	r3, [r3, #10]
 800d448:	461a      	mov	r2, r3
 800d44a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d44c:	895b      	ldrh	r3, [r3, #10]
 800d44e:	3b01      	subs	r3, #1
 800d450:	4013      	ands	r3, r2
 800d452:	2b00      	cmp	r3, #0
 800d454:	d001      	beq.n	800d45a <find_volume+0x486>
 800d456:	230d      	movs	r3, #13
 800d458:	e147      	b.n	800d6ea <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d45a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d45c:	333c      	adds	r3, #60	; 0x3c
 800d45e:	3311      	adds	r3, #17
 800d460:	4618      	mov	r0, r3
 800d462:	f7fc fcdf 	bl	8009e24 <ld_word>
 800d466:	4603      	mov	r3, r0
 800d468:	461a      	mov	r2, r3
 800d46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d46c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d46e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d470:	891b      	ldrh	r3, [r3, #8]
 800d472:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d474:	8992      	ldrh	r2, [r2, #12]
 800d476:	0952      	lsrs	r2, r2, #5
 800d478:	b292      	uxth	r2, r2
 800d47a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d47e:	fb01 f202 	mul.w	r2, r1, r2
 800d482:	1a9b      	subs	r3, r3, r2
 800d484:	b29b      	uxth	r3, r3
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <find_volume+0x4ba>
 800d48a:	230d      	movs	r3, #13
 800d48c:	e12d      	b.n	800d6ea <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d490:	333c      	adds	r3, #60	; 0x3c
 800d492:	3313      	adds	r3, #19
 800d494:	4618      	mov	r0, r3
 800d496:	f7fc fcc5 	bl	8009e24 <ld_word>
 800d49a:	4603      	mov	r3, r0
 800d49c:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d49e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d106      	bne.n	800d4b2 <find_volume+0x4de>
 800d4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4a6:	333c      	adds	r3, #60	; 0x3c
 800d4a8:	3320      	adds	r3, #32
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fc fcd2 	bl	8009e54 <ld_dword>
 800d4b0:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4b4:	333c      	adds	r3, #60	; 0x3c
 800d4b6:	330e      	adds	r3, #14
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7fc fcb3 	bl	8009e24 <ld_word>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d4c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d101      	bne.n	800d4d0 <find_volume+0x4fc>
 800d4cc:	230d      	movs	r3, #13
 800d4ce:	e10c      	b.n	800d6ea <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d4d0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4d6:	4413      	add	r3, r2
 800d4d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4da:	8911      	ldrh	r1, [r2, #8]
 800d4dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4de:	8992      	ldrh	r2, [r2, #12]
 800d4e0:	0952      	lsrs	r2, r2, #5
 800d4e2:	b292      	uxth	r2, r2
 800d4e4:	fbb1 f2f2 	udiv	r2, r1, r2
 800d4e8:	b292      	uxth	r2, r2
 800d4ea:	4413      	add	r3, r2
 800d4ec:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d4ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d201      	bcs.n	800d4fa <find_volume+0x526>
 800d4f6:	230d      	movs	r3, #13
 800d4f8:	e0f7      	b.n	800d6ea <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d4fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d502:	8952      	ldrh	r2, [r2, #10]
 800d504:	fbb3 f3f2 	udiv	r3, r3, r2
 800d508:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d103      	bne.n	800d518 <find_volume+0x544>
 800d510:	230d      	movs	r3, #13
 800d512:	e0ea      	b.n	800d6ea <find_volume+0x716>
 800d514:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800d518:	2303      	movs	r3, #3
 800d51a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d520:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d524:	4293      	cmp	r3, r2
 800d526:	d802      	bhi.n	800d52e <find_volume+0x55a>
 800d528:	2302      	movs	r3, #2
 800d52a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d530:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d534:	4293      	cmp	r3, r2
 800d536:	d802      	bhi.n	800d53e <find_volume+0x56a>
 800d538:	2301      	movs	r3, #1
 800d53a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d540:	1c9a      	adds	r2, r3, #2
 800d542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d544:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800d546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d548:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d54a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d54c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d552:	441a      	add	r2, r3
 800d554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d556:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800d558:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d55c:	441a      	add	r2, r3
 800d55e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d560:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800d562:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d566:	2b03      	cmp	r3, #3
 800d568:	d11e      	bne.n	800d5a8 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d56a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d56c:	333c      	adds	r3, #60	; 0x3c
 800d56e:	332a      	adds	r3, #42	; 0x2a
 800d570:	4618      	mov	r0, r3
 800d572:	f7fc fc57 	bl	8009e24 <ld_word>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d001      	beq.n	800d580 <find_volume+0x5ac>
 800d57c:	230d      	movs	r3, #13
 800d57e:	e0b4      	b.n	800d6ea <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d582:	891b      	ldrh	r3, [r3, #8]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d001      	beq.n	800d58c <find_volume+0x5b8>
 800d588:	230d      	movs	r3, #13
 800d58a:	e0ae      	b.n	800d6ea <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d58c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d58e:	333c      	adds	r3, #60	; 0x3c
 800d590:	332c      	adds	r3, #44	; 0x2c
 800d592:	4618      	mov	r0, r3
 800d594:	f7fc fc5e 	bl	8009e54 <ld_dword>
 800d598:	4602      	mov	r2, r0
 800d59a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d59c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d59e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5a0:	6a1b      	ldr	r3, [r3, #32]
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5a6:	e01f      	b.n	800d5e8 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5aa:	891b      	ldrh	r3, [r3, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <find_volume+0x5e0>
 800d5b0:	230d      	movs	r3, #13
 800d5b2:	e09a      	b.n	800d6ea <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d5b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5ba:	441a      	add	r2, r3
 800d5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5be:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d5c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d103      	bne.n	800d5d0 <find_volume+0x5fc>
 800d5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ca:	6a1b      	ldr	r3, [r3, #32]
 800d5cc:	005b      	lsls	r3, r3, #1
 800d5ce:	e00a      	b.n	800d5e6 <find_volume+0x612>
 800d5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5d2:	6a1a      	ldr	r2, [r3, #32]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	005b      	lsls	r3, r3, #1
 800d5d8:	4413      	add	r3, r2
 800d5da:	085a      	lsrs	r2, r3, #1
 800d5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5de:	6a1b      	ldr	r3, [r3, #32]
 800d5e0:	f003 0301 	and.w	r3, r3, #1
 800d5e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d5e6:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ee:	899b      	ldrh	r3, [r3, #12]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5f4:	440b      	add	r3, r1
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d5fa:	8989      	ldrh	r1, [r1, #12]
 800d5fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800d600:	429a      	cmp	r2, r3
 800d602:	d201      	bcs.n	800d608 <find_volume+0x634>
 800d604:	230d      	movs	r3, #13
 800d606:	e070      	b.n	800d6ea <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d60a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d60e:	61da      	str	r2, [r3, #28]
 800d610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d612:	69da      	ldr	r2, [r3, #28]
 800d614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d616:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800d618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d61a:	2280      	movs	r2, #128	; 0x80
 800d61c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d61e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d622:	2b03      	cmp	r3, #3
 800d624:	d149      	bne.n	800d6ba <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d628:	333c      	adds	r3, #60	; 0x3c
 800d62a:	3330      	adds	r3, #48	; 0x30
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fc fbf9 	bl	8009e24 <ld_word>
 800d632:	4603      	mov	r3, r0
 800d634:	2b01      	cmp	r3, #1
 800d636:	d140      	bne.n	800d6ba <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d63a:	3301      	adds	r3, #1
 800d63c:	4619      	mov	r1, r3
 800d63e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d640:	f7fd f804 	bl	800a64c <move_window>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d137      	bne.n	800d6ba <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800d64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d64c:	2200      	movs	r2, #0
 800d64e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d652:	333c      	adds	r3, #60	; 0x3c
 800d654:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fc fbe3 	bl	8009e24 <ld_word>
 800d65e:	4603      	mov	r3, r0
 800d660:	461a      	mov	r2, r3
 800d662:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d666:	429a      	cmp	r2, r3
 800d668:	d127      	bne.n	800d6ba <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d66c:	333c      	adds	r3, #60	; 0x3c
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fc fbf0 	bl	8009e54 <ld_dword>
 800d674:	4603      	mov	r3, r0
 800d676:	4a1f      	ldr	r2, [pc, #124]	; (800d6f4 <find_volume+0x720>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d11e      	bne.n	800d6ba <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d67c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d67e:	333c      	adds	r3, #60	; 0x3c
 800d680:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d684:	4618      	mov	r0, r3
 800d686:	f7fc fbe5 	bl	8009e54 <ld_dword>
 800d68a:	4603      	mov	r3, r0
 800d68c:	4a1a      	ldr	r2, [pc, #104]	; (800d6f8 <find_volume+0x724>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d113      	bne.n	800d6ba <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d694:	333c      	adds	r3, #60	; 0x3c
 800d696:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fc fbda 	bl	8009e54 <ld_dword>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a4:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a8:	333c      	adds	r3, #60	; 0x3c
 800d6aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fc fbd0 	bl	8009e54 <ld_dword>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6b8:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6bc:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800d6c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d6c2:	4b0e      	ldr	r3, [pc, #56]	; (800d6fc <find_volume+0x728>)
 800d6c4:	881b      	ldrh	r3, [r3, #0]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	4b0c      	ldr	r3, [pc, #48]	; (800d6fc <find_volume+0x728>)
 800d6cc:	801a      	strh	r2, [r3, #0]
 800d6ce:	4b0b      	ldr	r3, [pc, #44]	; (800d6fc <find_volume+0x728>)
 800d6d0:	881a      	ldrh	r2, [r3, #0]
 800d6d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d6d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d8:	4a09      	ldr	r2, [pc, #36]	; (800d700 <find_volume+0x72c>)
 800d6da:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800d6dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6de:	4a09      	ldr	r2, [pc, #36]	; (800d704 <find_volume+0x730>)
 800d6e0:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d6e2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d6e4:	f7fc ff4a 	bl	800a57c <clear_lock>
#endif
	return FR_OK;
 800d6e8:	2300      	movs	r3, #0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3770      	adds	r7, #112	; 0x70
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d6f4:	41615252 	.word	0x41615252
 800d6f8:	61417272 	.word	0x61417272
 800d6fc:	20002314 	.word	0x20002314
 800d700:	20002598 	.word	0x20002598
 800d704:	20002338 	.word	0x20002338

0800d708 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d712:	2309      	movs	r3, #9
 800d714:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d01c      	beq.n	800d756 <validate+0x4e>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d018      	beq.n	800d756 <validate+0x4e>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d013      	beq.n	800d756 <validate+0x4e>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	889a      	ldrh	r2, [r3, #4]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	88db      	ldrh	r3, [r3, #6]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d10c      	bne.n	800d756 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	785b      	ldrb	r3, [r3, #1]
 800d742:	4618      	mov	r0, r3
 800d744:	f7fc fad0 	bl	8009ce8 <disk_status>
 800d748:	4603      	mov	r3, r0
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d101      	bne.n	800d756 <validate+0x4e>
			res = FR_OK;
 800d752:	2300      	movs	r3, #0
 800d754:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d756:	7bfb      	ldrb	r3, [r7, #15]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d102      	bne.n	800d762 <validate+0x5a>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	e000      	b.n	800d764 <validate+0x5c>
 800d762:	2300      	movs	r3, #0
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	6013      	str	r3, [r2, #0]
	return res;
 800d768:	7bfb      	ldrb	r3, [r7, #15]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
	...

0800d774 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b088      	sub	sp, #32
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	4613      	mov	r3, r2
 800d780:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d786:	f107 0310 	add.w	r3, r7, #16
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7ff fb7a 	bl	800ce84 <get_ldnumber>
 800d790:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	2b00      	cmp	r3, #0
 800d796:	da01      	bge.n	800d79c <f_mount+0x28>
 800d798:	230b      	movs	r3, #11
 800d79a:	e02b      	b.n	800d7f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d79c:	4a17      	ldr	r2, [pc, #92]	; (800d7fc <f_mount+0x88>)
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d005      	beq.n	800d7b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d7ac:	69b8      	ldr	r0, [r7, #24]
 800d7ae:	f7fc fee5 	bl	800a57c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	490d      	ldr	r1, [pc, #52]	; (800d7fc <f_mount+0x88>)
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d002      	beq.n	800d7da <f_mount+0x66>
 800d7d4:	79fb      	ldrb	r3, [r7, #7]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d001      	beq.n	800d7de <f_mount+0x6a>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	e00a      	b.n	800d7f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d7de:	f107 010c 	add.w	r1, r7, #12
 800d7e2:	f107 0308 	add.w	r3, r7, #8
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff fbf3 	bl	800cfd4 <find_volume>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3720      	adds	r7, #32
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	20002310 	.word	0x20002310

0800d800 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d804:	b0a8      	sub	sp, #160	; 0xa0
 800d806:	af00      	add	r7, sp, #0
 800d808:	6278      	str	r0, [r7, #36]	; 0x24
 800d80a:	6239      	str	r1, [r7, #32]
 800d80c:	4613      	mov	r3, r2
 800d80e:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d812:	2b00      	cmp	r3, #0
 800d814:	d101      	bne.n	800d81a <f_open+0x1a>
 800d816:	2309      	movs	r3, #9
 800d818:	e2c0      	b.n	800dd9c <f_open+0x59c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d81a:	7ffb      	ldrb	r3, [r7, #31]
 800d81c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d820:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800d822:	7ffb      	ldrb	r3, [r7, #31]
 800d824:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800d828:	f107 0020 	add.w	r0, r7, #32
 800d82c:	461a      	mov	r2, r3
 800d82e:	f7ff fbd1 	bl	800cfd4 <find_volume>
 800d832:	4603      	mov	r3, r0
 800d834:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800d838:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f040 82a4 	bne.w	800dd8a <f_open+0x58a>
		dj.obj.fs = fs;
 800d842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d844:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d846:	6a3b      	ldr	r3, [r7, #32]
 800d848:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d84c:	4619      	mov	r1, r3
 800d84e:	4610      	mov	r0, r2
 800d850:	f7ff fa6a 	bl	800cd28 <follow_path>
 800d854:	4603      	mov	r3, r0
 800d856:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d85a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d11a      	bne.n	800d898 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d862:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800d866:	b25b      	sxtb	r3, r3
 800d868:	2b00      	cmp	r3, #0
 800d86a:	da03      	bge.n	800d874 <f_open+0x74>
				res = FR_INVALID_NAME;
 800d86c:	2306      	movs	r3, #6
 800d86e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800d872:	e011      	b.n	800d898 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d874:	7ffb      	ldrb	r3, [r7, #31]
 800d876:	f023 0301 	bic.w	r3, r3, #1
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	bf14      	ite	ne
 800d87e:	2301      	movne	r3, #1
 800d880:	2300      	moveq	r3, #0
 800d882:	b2db      	uxtb	r3, r3
 800d884:	461a      	mov	r2, r3
 800d886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d88a:	4611      	mov	r1, r2
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7fc fd2d 	bl	800a2ec <chk_lock>
 800d892:	4603      	mov	r3, r0
 800d894:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d898:	7ffb      	ldrb	r3, [r7, #31]
 800d89a:	f003 031c 	and.w	r3, r3, #28
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 8117 	beq.w	800dad2 <f_open+0x2d2>
			if (res != FR_OK) {					/* No file, create new */
 800d8a4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d017      	beq.n	800d8dc <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d8ac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d8b0:	2b04      	cmp	r3, #4
 800d8b2:	d10e      	bne.n	800d8d2 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d8b4:	f7fc fd76 	bl	800a3a4 <enq_lock>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d006      	beq.n	800d8cc <f_open+0xcc>
 800d8be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fe fde2 	bl	800c48c <dir_register>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	e000      	b.n	800d8ce <f_open+0xce>
 800d8cc:	2312      	movs	r3, #18
 800d8ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d8d2:	7ffb      	ldrb	r3, [r7, #31]
 800d8d4:	f043 0308 	orr.w	r3, r3, #8
 800d8d8:	77fb      	strb	r3, [r7, #31]
 800d8da:	e011      	b.n	800d900 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d8dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d8e0:	f003 0311 	and.w	r3, r3, #17
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d003      	beq.n	800d8f0 <f_open+0xf0>
					res = FR_DENIED;
 800d8e8:	2307      	movs	r3, #7
 800d8ea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800d8ee:	e007      	b.n	800d900 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d8f0:	7ffb      	ldrb	r3, [r7, #31]
 800d8f2:	f003 0304 	and.w	r3, r3, #4
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <f_open+0x100>
 800d8fa:	2308      	movs	r3, #8
 800d8fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d900:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d904:	2b00      	cmp	r3, #0
 800d906:	f040 8100 	bne.w	800db0a <f_open+0x30a>
 800d90a:	7ffb      	ldrb	r3, [r7, #31]
 800d90c:	f003 0308 	and.w	r3, r3, #8
 800d910:	2b00      	cmp	r3, #0
 800d912:	f000 80fa 	beq.w	800db0a <f_open+0x30a>
				dw = GET_FATTIME();
 800d916:	f7f9 f9eb 	bl	8006cf0 <get_fattime>
 800d91a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	2b04      	cmp	r3, #4
 800d924:	f040 8085 	bne.w	800da32 <f_open+0x232>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d930:	695b      	ldr	r3, [r3, #20]
 800d932:	3334      	adds	r3, #52	; 0x34
 800d934:	4618      	mov	r0, r3
 800d936:	f7fc fa8d 	bl	8009e54 <ld_dword>
 800d93a:	4602      	mov	r2, r0
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d942:	695b      	ldr	r3, [r3, #20]
 800d944:	3338      	adds	r3, #56	; 0x38
 800d946:	4618      	mov	r0, r3
 800d948:	f7fc faa7 	bl	8009e9a <ld_qword>
 800d94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94e:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d954:	695b      	ldr	r3, [r3, #20]
 800d956:	3321      	adds	r3, #33	; 0x21
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	f003 0302 	and.w	r3, r3, #2
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d962:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	2200      	movs	r2, #0
 800d968:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96c:	695b      	ldr	r3, [r3, #20]
 800d96e:	3308      	adds	r3, #8
 800d970:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d974:	4618      	mov	r0, r3
 800d976:	f7fc fb86 	bl	800a086 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97c:	695b      	ldr	r3, [r3, #20]
 800d97e:	f103 0214 	add.w	r2, r3, #20
 800d982:	2300      	movs	r3, #0
 800d984:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d988:	695b      	ldr	r3, [r3, #20]
 800d98a:	330c      	adds	r3, #12
 800d98c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d990:	4618      	mov	r0, r3
 800d992:	f7fc fb78 	bl	800a086 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d998:	695b      	ldr	r3, [r3, #20]
 800d99a:	f103 0215 	add.w	r2, r3, #21
 800d99e:	2300      	movs	r3, #0
 800d9a0:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a4:	695b      	ldr	r3, [r3, #20]
 800d9a6:	1d1a      	adds	r2, r3, #4
 800d9a8:	2320      	movs	r3, #32
 800d9aa:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ae:	695b      	ldr	r3, [r3, #20]
 800d9b0:	3334      	adds	r3, #52	; 0x34
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7fc fb66 	bl	800a086 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9bc:	695b      	ldr	r3, [r3, #20]
 800d9be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d9c2:	f04f 0200 	mov.w	r2, #0
 800d9c6:	f04f 0300 	mov.w	r3, #0
 800d9ca:	4608      	mov	r0, r1
 800d9cc:	f7fc fb87 	bl	800a0de <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d2:	695b      	ldr	r3, [r3, #20]
 800d9d4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d9d8:	f04f 0200 	mov.w	r2, #0
 800d9dc:	f04f 0300 	mov.w	r3, #0
 800d9e0:	4608      	mov	r0, r1
 800d9e2:	f7fc fb7c 	bl	800a0de <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e8:	695b      	ldr	r3, [r3, #20]
 800d9ea:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800d9f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fe fa96 	bl	800bf28 <store_xdir>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800da02:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800da06:	2b00      	cmp	r3, #0
 800da08:	d17f      	bne.n	800db0a <f_open+0x30a>
 800da0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0c:	689b      	ldr	r3, [r3, #8]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d07b      	beq.n	800db0a <f_open+0x30a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800da12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	2200      	movs	r2, #0
 800da1a:	4619      	mov	r1, r3
 800da1c:	f7fd faa6 	bl	800af6c <remove_chain>
 800da20:	4603      	mov	r3, r0
 800da22:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da2c:	3b01      	subs	r3, #1
 800da2e:	6193      	str	r3, [r2, #24]
 800da30:	e06b      	b.n	800db0a <f_open+0x30a>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800da32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da34:	330e      	adds	r3, #14
 800da36:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fc fb23 	bl	800a086 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800da40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da42:	3316      	adds	r3, #22
 800da44:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800da48:	4618      	mov	r0, r3
 800da4a:	f7fc fb1c 	bl	800a086 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800da4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da50:	f103 020b 	add.w	r2, r3, #11
 800da54:	2320      	movs	r3, #32
 800da56:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800da58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da5c:	4619      	mov	r1, r3
 800da5e:	4610      	mov	r0, r2
 800da60:	f7fd fe5b 	bl	800b71a <ld_clust>
 800da64:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800da68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da6c:	2200      	movs	r2, #0
 800da6e:	4619      	mov	r1, r3
 800da70:	f7fd fe72 	bl	800b758 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800da74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da76:	331c      	adds	r3, #28
 800da78:	2100      	movs	r1, #0
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fc fb03 	bl	800a086 <st_dword>
					fs->wflag = 1;
 800da80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da82:	2301      	movs	r3, #1
 800da84:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800da86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d03d      	beq.n	800db0a <f_open+0x30a>
						dw = fs->winsect;
 800da8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800da96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da9a:	2200      	movs	r2, #0
 800da9c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fd fa63 	bl	800af6c <remove_chain>
 800daa6:	4603      	mov	r3, r0
 800daa8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800daac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d12a      	bne.n	800db0a <f_open+0x30a>
							res = move_window(fs, dw);
 800dab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800daba:	4618      	mov	r0, r3
 800dabc:	f7fc fdc6 	bl	800a64c <move_window>
 800dac0:	4603      	mov	r3, r0
 800dac2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dacc:	3b01      	subs	r3, #1
 800dace:	6193      	str	r3, [r2, #24]
 800dad0:	e01b      	b.n	800db0a <f_open+0x30a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dad2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d117      	bne.n	800db0a <f_open+0x30a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dada:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800dade:	f003 0310 	and.w	r3, r3, #16
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d003      	beq.n	800daee <f_open+0x2ee>
					res = FR_NO_FILE;
 800dae6:	2304      	movs	r3, #4
 800dae8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800daec:	e00d      	b.n	800db0a <f_open+0x30a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800daee:	7ffb      	ldrb	r3, [r7, #31]
 800daf0:	f003 0302 	and.w	r3, r3, #2
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d008      	beq.n	800db0a <f_open+0x30a>
 800daf8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800dafc:	f003 0301 	and.w	r3, r3, #1
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <f_open+0x30a>
						res = FR_DENIED;
 800db04:	2307      	movs	r3, #7
 800db06:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800db0a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d128      	bne.n	800db64 <f_open+0x364>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800db12:	7ffb      	ldrb	r3, [r7, #31]
 800db14:	f003 0308 	and.w	r3, r3, #8
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d003      	beq.n	800db24 <f_open+0x324>
				mode |= FA_MODIFIED;
 800db1c:	7ffb      	ldrb	r3, [r7, #31]
 800db1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db22:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800db24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800db2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800db32:	7ffb      	ldrb	r3, [r7, #31]
 800db34:	f023 0301 	bic.w	r3, r3, #1
 800db38:	2b00      	cmp	r3, #0
 800db3a:	bf14      	ite	ne
 800db3c:	2301      	movne	r3, #1
 800db3e:	2300      	moveq	r3, #0
 800db40:	b2db      	uxtb	r3, r3
 800db42:	461a      	mov	r2, r3
 800db44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db48:	4611      	mov	r1, r2
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fc fc4c 	bl	800a3e8 <inc_lock>
 800db50:	4602      	mov	r2, r0
 800db52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db54:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d102      	bne.n	800db64 <f_open+0x364>
 800db5e:	2302      	movs	r3, #2
 800db60:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800db64:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f040 810e 	bne.w	800dd8a <f_open+0x58a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800db6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	2b04      	cmp	r3, #4
 800db74:	d12d      	bne.n	800dbd2 <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800db76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800db7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800db80:	4613      	mov	r3, r2
 800db82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db86:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800db8a:	431a      	orrs	r2, r3
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800db90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800db96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db98:	695b      	ldr	r3, [r3, #20]
 800db9a:	3334      	adds	r3, #52	; 0x34
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fc f959 	bl	8009e54 <ld_dword>
 800dba2:	4602      	mov	r2, r0
 800dba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbaa:	695b      	ldr	r3, [r3, #20]
 800dbac:	3338      	adds	r3, #56	; 0x38
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fc f973 	bl	8009e9a <ld_qword>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbba:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc0:	695b      	ldr	r3, [r3, #20]
 800dbc2:	3321      	adds	r3, #33	; 0x21
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	f003 0302 	and.w	r3, r3, #2
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	71da      	strb	r2, [r3, #7]
 800dbd0:	e016      	b.n	800dc00 <f_open+0x400>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dbd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	4610      	mov	r0, r2
 800dbda:	f7fd fd9e 	bl	800b71a <ld_clust>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dbe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbe6:	331c      	adds	r3, #28
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7fc f933 	bl	8009e54 <ld_dword>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	613b      	str	r3, [r7, #16]
 800dbf4:	617a      	str	r2, [r7, #20]
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dbfc:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	2200      	movs	r2, #0
 800dc04:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dc06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0e:	88da      	ldrh	r2, [r3, #6]
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc16:	7ffa      	ldrb	r2, [r7, #31]
 800dc18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	2200      	movs	r2, #0
 800dc28:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dc2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc2c:	f04f 0200 	mov.w	r2, #0
 800dc30:	f04f 0300 	mov.w	r3, #0
 800dc34:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	3354      	adds	r3, #84	; 0x54
 800dc3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dc40:	2100      	movs	r1, #0
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fc faf4 	bl	800a230 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dc48:	7ffb      	ldrb	r3, [r7, #31]
 800dc4a:	f003 0320 	and.w	r3, r3, #32
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f000 809b 	beq.w	800dd8a <f_open+0x58a>
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	f000 8095 	beq.w	800dd8a <f_open+0x58a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dc66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc68:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6e:	895b      	ldrh	r3, [r3, #10]
 800dc70:	461a      	mov	r2, r3
 800dc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc74:	899b      	ldrh	r3, [r3, #12]
 800dc76:	fb02 f303 	mul.w	r3, r2, r3
 800dc7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dc8c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800dc90:	e023      	b.n	800dcda <f_open+0x4da>
					clst = get_fat(&fp->obj, clst);
 800dc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc94:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fc fd95 	bl	800a7c8 <get_fat>
 800dc9e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800dca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d802      	bhi.n	800dcb0 <f_open+0x4b0>
 800dcaa:	2302      	movs	r3, #2
 800dcac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dcb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dcb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcb8:	d102      	bne.n	800dcc0 <f_open+0x4c0>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dcc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	4698      	mov	r8, r3
 800dcc8:	4691      	mov	r9, r2
 800dcca:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800dcce:	ebb2 0a08 	subs.w	sl, r2, r8
 800dcd2:	eb63 0b09 	sbc.w	fp, r3, r9
 800dcd6:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
 800dcda:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d10a      	bne.n	800dcf8 <f_open+0x4f8>
 800dce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dce6:	2200      	movs	r2, #0
 800dce8:	461c      	mov	r4, r3
 800dcea:	4615      	mov	r5, r2
 800dcec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800dcf0:	4294      	cmp	r4, r2
 800dcf2:	eb75 0303 	sbcs.w	r3, r5, r3
 800dcf6:	d3cc      	bcc.n	800dc92 <f_open+0x492>
				}
				fp->clust = clst;
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dcfe:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dd00:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d140      	bne.n	800dd8a <f_open+0x58a>
 800dd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0a:	899b      	ldrh	r3, [r3, #12]
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	2200      	movs	r2, #0
 800dd10:	60bb      	str	r3, [r7, #8]
 800dd12:	60fa      	str	r2, [r7, #12]
 800dd14:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800dd18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dd1c:	f7f2 fdd6 	bl	80008cc <__aeabi_uldivmod>
 800dd20:	4313      	orrs	r3, r2
 800dd22:	d032      	beq.n	800dd8a <f_open+0x58a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd26:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fc fd2c 	bl	800a788 <clust2sect>
 800dd30:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800dd34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d103      	bne.n	800dd44 <f_open+0x544>
						res = FR_INT_ERR;
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800dd42:	e022      	b.n	800dd8a <f_open+0x58a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd46:	899b      	ldrh	r3, [r3, #12]
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	603b      	str	r3, [r7, #0]
 800dd4e:	607a      	str	r2, [r7, #4]
 800dd50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd54:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800dd58:	f7f2 fdb8 	bl	80008cc <__aeabi_uldivmod>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	460b      	mov	r3, r1
 800dd60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd64:	441a      	add	r2, r3
 800dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd68:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	7858      	ldrb	r0, [r3, #1]
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800dd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd78:	2301      	movs	r3, #1
 800dd7a:	f7fb fff5 	bl	8009d68 <disk_read>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <f_open+0x58a>
 800dd84:	2301      	movs	r3, #1
 800dd86:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dd8a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d002      	beq.n	800dd98 <f_open+0x598>
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	2200      	movs	r2, #0
 800dd96:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dd98:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	37a0      	adds	r7, #160	; 0xa0
 800dda0:	46bd      	mov	sp, r7
 800dda2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dda6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dda6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddaa:	b091      	sub	sp, #68	; 0x44
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	61f8      	str	r0, [r7, #28]
 800ddb0:	61b9      	str	r1, [r7, #24]
 800ddb2:	617a      	str	r2, [r7, #20]
 800ddb4:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ddb6:	69bb      	ldr	r3, [r7, #24]
 800ddb8:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	f107 0220 	add.w	r2, r7, #32
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7ff fc9d 	bl	800d708 <validate>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ddd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d108      	bne.n	800ddee <f_write+0x48>
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dde2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dde6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d002      	beq.n	800ddf4 <f_write+0x4e>
 800ddee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ddf2:	e1aa      	b.n	800e14a <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddfa:	f003 0302 	and.w	r3, r3, #2
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d101      	bne.n	800de06 <f_write+0x60>
 800de02:	2307      	movs	r3, #7
 800de04:	e1a1      	b.n	800e14a <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800de06:	6a3b      	ldr	r3, [r7, #32]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	2b04      	cmp	r3, #4
 800de0c:	f000 818d 	beq.w	800e12a <f_write+0x384>
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	18d1      	adds	r1, r2, r3
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800de20:	4613      	mov	r3, r2
 800de22:	4299      	cmp	r1, r3
 800de24:	f080 8181 	bcs.w	800e12a <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800de2e:	4613      	mov	r3, r2
 800de30:	43db      	mvns	r3, r3
 800de32:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800de34:	e179      	b.n	800e12a <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800de3c:	6a3b      	ldr	r3, [r7, #32]
 800de3e:	899b      	ldrh	r3, [r3, #12]
 800de40:	b29b      	uxth	r3, r3
 800de42:	2200      	movs	r2, #0
 800de44:	461d      	mov	r5, r3
 800de46:	4616      	mov	r6, r2
 800de48:	462a      	mov	r2, r5
 800de4a:	4633      	mov	r3, r6
 800de4c:	f7f2 fd3e 	bl	80008cc <__aeabi_uldivmod>
 800de50:	4313      	orrs	r3, r2
 800de52:	f040 810a 	bne.w	800e06a <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	899b      	ldrh	r3, [r3, #12]
 800de60:	b29b      	uxth	r3, r3
 800de62:	2200      	movs	r2, #0
 800de64:	60bb      	str	r3, [r7, #8]
 800de66:	60fa      	str	r2, [r7, #12]
 800de68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800de6c:	f7f2 fd2e 	bl	80008cc <__aeabi_uldivmod>
 800de70:	4602      	mov	r2, r0
 800de72:	460b      	mov	r3, r1
 800de74:	6a3b      	ldr	r3, [r7, #32]
 800de76:	895b      	ldrh	r3, [r3, #10]
 800de78:	3b01      	subs	r3, #1
 800de7a:	4013      	ands	r3, r2
 800de7c:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	2b00      	cmp	r3, #0
 800de82:	d146      	bne.n	800df12 <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800de8a:	4313      	orrs	r3, r2
 800de8c:	d10c      	bne.n	800dea8 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800de94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de96:	2b00      	cmp	r3, #0
 800de98:	d11a      	bne.n	800ded0 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	2100      	movs	r1, #0
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fd f918 	bl	800b0d4 <create_chain>
 800dea4:	63b8      	str	r0, [r7, #56]	; 0x38
 800dea6:	e013      	b.n	800ded0 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deac:	2b00      	cmp	r3, #0
 800deae:	d007      	beq.n	800dec0 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800deb6:	69f8      	ldr	r0, [r7, #28]
 800deb8:	f7fd fa0d 	bl	800b2d6 <clmt_clust>
 800debc:	63b8      	str	r0, [r7, #56]	; 0x38
 800debe:	e007      	b.n	800ded0 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dec0:	69fa      	ldr	r2, [r7, #28]
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec6:	4619      	mov	r1, r3
 800dec8:	4610      	mov	r0, r2
 800deca:	f7fd f903 	bl	800b0d4 <create_chain>
 800dece:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ded0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f000 812e 	beq.w	800e134 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ded8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d105      	bne.n	800deea <f_write+0x144>
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	2202      	movs	r2, #2
 800dee2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dee6:	2302      	movs	r3, #2
 800dee8:	e12f      	b.n	800e14a <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800deea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800def0:	d105      	bne.n	800defe <f_write+0x158>
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	2201      	movs	r2, #1
 800def6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800defa:	2301      	movs	r3, #1
 800defc:	e125      	b.n	800e14a <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df02:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d102      	bne.n	800df12 <f_write+0x16c>
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df10:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df18:	b25b      	sxtb	r3, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	da1b      	bge.n	800df56 <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	7858      	ldrb	r0, [r3, #1]
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df2c:	2301      	movs	r3, #1
 800df2e:	f7fb ff3b 	bl	8009da8 <disk_write>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d005      	beq.n	800df44 <f_write+0x19e>
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	2201      	movs	r2, #1
 800df3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800df40:	2301      	movs	r3, #1
 800df42:	e102      	b.n	800e14a <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df4e:	b2da      	uxtb	r2, r3
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800df56:	6a3a      	ldr	r2, [r7, #32]
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df5c:	4619      	mov	r1, r3
 800df5e:	4610      	mov	r0, r2
 800df60:	f7fc fc12 	bl	800a788 <clust2sect>
 800df64:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800df66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d105      	bne.n	800df78 <f_write+0x1d2>
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	2202      	movs	r2, #2
 800df70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800df74:	2302      	movs	r3, #2
 800df76:	e0e8      	b.n	800e14a <f_write+0x3a4>
			sect += csect;
 800df78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7c:	4413      	add	r3, r2
 800df7e:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800df80:	6a3b      	ldr	r3, [r7, #32]
 800df82:	899b      	ldrh	r3, [r3, #12]
 800df84:	461a      	mov	r2, r3
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	fbb3 f3f2 	udiv	r3, r3, r2
 800df8c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df90:	2b00      	cmp	r3, #0
 800df92:	d046      	beq.n	800e022 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800df94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df98:	4413      	add	r3, r2
 800df9a:	6a3a      	ldr	r2, [r7, #32]
 800df9c:	8952      	ldrh	r2, [r2, #10]
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d905      	bls.n	800dfae <f_write+0x208>
					cc = fs->csize - csect;
 800dfa2:	6a3b      	ldr	r3, [r7, #32]
 800dfa4:	895b      	ldrh	r3, [r3, #10]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dfae:	6a3b      	ldr	r3, [r7, #32]
 800dfb0:	7858      	ldrb	r0, [r3, #1]
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfb8:	f7fb fef6 	bl	8009da8 <disk_write>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d005      	beq.n	800dfce <f_write+0x228>
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e0bd      	b.n	800e14a <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d91a      	bls.n	800e012 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	6a3a      	ldr	r2, [r7, #32]
 800dfec:	8992      	ldrh	r2, [r2, #12]
 800dfee:	fb02 f303 	mul.w	r3, r2, r3
 800dff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dff4:	18d1      	adds	r1, r2, r3
 800dff6:	6a3b      	ldr	r3, [r7, #32]
 800dff8:	899b      	ldrh	r3, [r3, #12]
 800dffa:	461a      	mov	r2, r3
 800dffc:	f7fc f8f7 	bl	800a1ee <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e00a:	b2da      	uxtb	r2, r3
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e012:	6a3b      	ldr	r3, [r7, #32]
 800e014:	899b      	ldrh	r3, [r3, #12]
 800e016:	461a      	mov	r2, r3
 800e018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01a:	fb02 f303 	mul.w	r3, r2, r3
 800e01e:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800e020:	e058      	b.n	800e0d4 <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e028:	429a      	cmp	r2, r3
 800e02a:	d01b      	beq.n	800e064 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e038:	4290      	cmp	r0, r2
 800e03a:	eb71 0303 	sbcs.w	r3, r1, r3
 800e03e:	d211      	bcs.n	800e064 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e040:	6a3b      	ldr	r3, [r7, #32]
 800e042:	7858      	ldrb	r0, [r3, #1]
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e04a:	2301      	movs	r3, #1
 800e04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e04e:	f7fb fe8b 	bl	8009d68 <disk_read>
 800e052:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e054:	2b00      	cmp	r3, #0
 800e056:	d005      	beq.n	800e064 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e060:	2301      	movs	r3, #1
 800e062:	e072      	b.n	800e14a <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e068:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	899b      	ldrh	r3, [r3, #12]
 800e06e:	4618      	mov	r0, r3
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e076:	6a3b      	ldr	r3, [r7, #32]
 800e078:	899b      	ldrh	r3, [r3, #12]
 800e07a:	fbb2 f1f3 	udiv	r1, r2, r3
 800e07e:	fb01 f303 	mul.w	r3, r1, r3
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	1ac3      	subs	r3, r0, r3
 800e086:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d901      	bls.n	800e094 <f_write+0x2ee>
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e0a0:	6a3b      	ldr	r3, [r7, #32]
 800e0a2:	899b      	ldrh	r3, [r3, #12]
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	603b      	str	r3, [r7, #0]
 800e0aa:	607a      	str	r2, [r7, #4]
 800e0ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0b0:	f7f2 fc0c 	bl	80008cc <__aeabi_uldivmod>
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	4423      	add	r3, r4
 800e0b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fc f896 	bl	800a1ee <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e0d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0d8:	4413      	add	r3, r2
 800e0da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e0e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	4688      	mov	r8, r1
 800e0e8:	4681      	mov	r9, r0
 800e0ea:	eb12 0a08 	adds.w	sl, r2, r8
 800e0ee:	eb43 0b09 	adc.w	fp, r3, r9
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e104:	4290      	cmp	r0, r2
 800e106:	eb71 0403 	sbcs.w	r4, r1, r3
 800e10a:	d201      	bcs.n	800e110 <f_write+0x36a>
 800e10c:	4610      	mov	r0, r2
 800e10e:	4619      	mov	r1, r3
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e11c:	441a      	add	r2, r3
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	601a      	str	r2, [r3, #0]
 800e122:	697a      	ldr	r2, [r7, #20]
 800e124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e126:	1ad3      	subs	r3, r2, r3
 800e128:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	f47f ae82 	bne.w	800de36 <f_write+0x90>
 800e132:	e000      	b.n	800e136 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e134:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e13c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e140:	b2da      	uxtb	r2, r3
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3744      	adds	r7, #68	; 0x44
 800e14e:	46bd      	mov	sp, r7
 800e150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e154 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b09a      	sub	sp, #104	; 0x68
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e162:	4611      	mov	r1, r2
 800e164:	4618      	mov	r0, r3
 800e166:	f7ff facf 	bl	800d708 <validate>
 800e16a:	4603      	mov	r3, r0
 800e16c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e170:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e174:	2b00      	cmp	r3, #0
 800e176:	f040 8105 	bne.w	800e384 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 80fd 	beq.w	800e384 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e190:	b25b      	sxtb	r3, r3
 800e192:	2b00      	cmp	r3, #0
 800e194:	da17      	bge.n	800e1c6 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e198:	7858      	ldrb	r0, [r3, #1]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	f7fb fdff 	bl	8009da8 <disk_write>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d001      	beq.n	800e1b4 <f_sync+0x60>
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	e0e9      	b.n	800e388 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1be:	b2da      	uxtb	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e1c6:	f7f8 fd93 	bl	8006cf0 <get_fattime>
 800e1ca:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e1cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	2b04      	cmp	r3, #4
 800e1d2:	f040 808c 	bne.w	800e2ee <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fc fe67 	bl	800aeac <fill_first_frag>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800e1e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10a      	bne.n	800e202 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	f7fc fe87 	bl	800af0a <fill_last_frag>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800e202:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e206:	2b00      	cmp	r3, #0
 800e208:	f040 80bc 	bne.w	800e384 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	f107 0308 	add.w	r3, r7, #8
 800e212:	4611      	mov	r1, r2
 800e214:	4618      	mov	r0, r3
 800e216:	f7fd fe51 	bl	800bebc <load_obj_dir>
 800e21a:	4603      	mov	r3, r0
 800e21c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800e220:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e224:	2b00      	cmp	r3, #0
 800e226:	f040 80ad 	bne.w	800e384 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e22a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	3304      	adds	r3, #4
 800e230:	781a      	ldrb	r2, [r3, #0]
 800e232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e234:	695b      	ldr	r3, [r3, #20]
 800e236:	3304      	adds	r3, #4
 800e238:	f042 0220 	orr.w	r2, r2, #32
 800e23c:	b2d2      	uxtb	r2, r2
 800e23e:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	79da      	ldrb	r2, [r3, #7]
 800e244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e246:	695b      	ldr	r3, [r3, #20]
 800e248:	3321      	adds	r3, #33	; 0x21
 800e24a:	f042 0201 	orr.w	r2, r2, #1
 800e24e:	b2d2      	uxtb	r2, r2
 800e250:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e254:	695b      	ldr	r3, [r3, #20]
 800e256:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	4619      	mov	r1, r3
 800e260:	4610      	mov	r0, r2
 800e262:	f7fb ff10 	bl	800a086 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e268:	695b      	ldr	r3, [r3, #20]
 800e26a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e274:	4608      	mov	r0, r1
 800e276:	f7fb ff32 	bl	800a0de <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e27a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e27c:	695b      	ldr	r3, [r3, #20]
 800e27e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e288:	4608      	mov	r0, r1
 800e28a:	f7fb ff28 	bl	800a0de <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e28e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e290:	695b      	ldr	r3, [r3, #20]
 800e292:	330c      	adds	r3, #12
 800e294:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e296:	4618      	mov	r0, r3
 800e298:	f7fb fef5 	bl	800a086 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e29c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e29e:	695b      	ldr	r3, [r3, #20]
 800e2a0:	3315      	adds	r3, #21
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e2a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2a8:	695b      	ldr	r3, [r3, #20]
 800e2aa:	3310      	adds	r3, #16
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fb fee9 	bl	800a086 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e2b4:	f107 0308 	add.w	r3, r7, #8
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fd fe35 	bl	800bf28 <store_xdir>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e2c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d15b      	bne.n	800e384 <f_sync+0x230>
							res = sync_fs(fs);
 800e2cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fc f9ea 	bl	800a6a8 <sync_fs>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800e2ec:	e04a      	b.n	800e384 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e2ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f7fc f9a8 	bl	800a64c <move_window>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800e302:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e306:	2b00      	cmp	r3, #0
 800e308:	d13c      	bne.n	800e384 <f_sync+0x230>
					dir = fp->dir_ptr;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e30e:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e312:	330b      	adds	r3, #11
 800e314:	781a      	ldrb	r2, [r3, #0]
 800e316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e318:	330b      	adds	r3, #11
 800e31a:	f042 0220 	orr.w	r2, r2, #32
 800e31e:	b2d2      	uxtb	r2, r2
 800e320:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6818      	ldr	r0, [r3, #0]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	461a      	mov	r2, r3
 800e32c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e32e:	f7fd fa13 	bl	800b758 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e334:	f103 001c 	add.w	r0, r3, #28
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e33e:	4613      	mov	r3, r2
 800e340:	4619      	mov	r1, r3
 800e342:	f7fb fea0 	bl	800a086 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e348:	3316      	adds	r3, #22
 800e34a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7fb fe9a 	bl	800a086 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e354:	3312      	adds	r3, #18
 800e356:	2100      	movs	r1, #0
 800e358:	4618      	mov	r0, r3
 800e35a:	f7fb fe79 	bl	800a050 <st_word>
					fs->wflag = 1;
 800e35e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e360:	2201      	movs	r2, #1
 800e362:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e366:	4618      	mov	r0, r3
 800e368:	f7fc f99e 	bl	800a6a8 <sync_fs>
 800e36c:	4603      	mov	r3, r0
 800e36e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e37c:	b2da      	uxtb	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e384:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3768      	adds	r7, #104	; 0x68
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f7ff fedb 	bl	800e154 <f_sync>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e3a2:	7bfb      	ldrb	r3, [r7, #15]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d118      	bne.n	800e3da <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f107 0208 	add.w	r2, r7, #8
 800e3ae:	4611      	mov	r1, r2
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7ff f9a9 	bl	800d708 <validate>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e3ba:	7bfb      	ldrb	r3, [r7, #15]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d10c      	bne.n	800e3da <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fc f89d 	bl	800a504 <dec_lock>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e3ce:	7bfb      	ldrb	r3, [r7, #15]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d102      	bne.n	800e3da <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b086      	sub	sp, #24
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d101      	bne.n	800e3f8 <f_opendir+0x14>
 800e3f4:	2309      	movs	r3, #9
 800e3f6:	e09a      	b.n	800e52e <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e3fc:	f107 010c 	add.w	r1, r7, #12
 800e400:	463b      	mov	r3, r7
 800e402:	2200      	movs	r2, #0
 800e404:	4618      	mov	r0, r3
 800e406:	f7fe fde5 	bl	800cfd4 <find_volume>
 800e40a:	4603      	mov	r3, r0
 800e40c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e40e:	7dfb      	ldrb	r3, [r7, #23]
 800e410:	2b00      	cmp	r3, #0
 800e412:	f040 8085 	bne.w	800e520 <f_opendir+0x13c>
		obj->fs = fs;
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	4619      	mov	r1, r3
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f7fe fc81 	bl	800cd28 <follow_path>
 800e426:	4603      	mov	r3, r0
 800e428:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e42a:	7dfb      	ldrb	r3, [r7, #23]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d172      	bne.n	800e516 <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e436:	b25b      	sxtb	r3, r3
 800e438:	2b00      	cmp	r3, #0
 800e43a:	db47      	blt.n	800e4cc <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	799b      	ldrb	r3, [r3, #6]
 800e440:	f003 0310 	and.w	r3, r3, #16
 800e444:	2b00      	cmp	r3, #0
 800e446:	d03f      	beq.n	800e4c8 <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	2b04      	cmp	r3, #4
 800e44e:	d130      	bne.n	800e4b2 <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	689a      	ldr	r2, [r3, #8]
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e45e:	4613      	mov	r3, r2
 800e460:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e464:	693a      	ldr	r2, [r7, #16]
 800e466:	79d2      	ldrb	r2, [r2, #7]
 800e468:	431a      	orrs	r2, r3
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	3334      	adds	r3, #52	; 0x34
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fb fce9 	bl	8009e54 <ld_dword>
 800e482:	4602      	mov	r2, r0
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	695b      	ldr	r3, [r3, #20]
 800e48c:	3338      	adds	r3, #56	; 0x38
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fb fd03 	bl	8009e9a <ld_qword>
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	6939      	ldr	r1, [r7, #16]
 800e49a:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	695b      	ldr	r3, [r3, #20]
 800e4a2:	3321      	adds	r3, #33	; 0x21
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	f003 0302 	and.w	r3, r3, #2
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	71da      	strb	r2, [r3, #7]
 800e4b0:	e00c      	b.n	800e4cc <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e4b2:	68fa      	ldr	r2, [r7, #12]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	4610      	mov	r0, r2
 800e4bc:	f7fd f92d 	bl	800b71a <ld_clust>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	609a      	str	r2, [r3, #8]
 800e4c6:	e001      	b.n	800e4cc <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e4c8:	2305      	movs	r3, #5
 800e4ca:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e4cc:	7dfb      	ldrb	r3, [r7, #23]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d121      	bne.n	800e516 <f_opendir+0x132>
				obj->id = fs->id;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	88da      	ldrh	r2, [r3, #6]
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e4da:	2100      	movs	r1, #0
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7fc ff46 	bl	800b36e <dir_sdi>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e4e6:	7dfb      	ldrb	r3, [r7, #23]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d114      	bne.n	800e516 <f_opendir+0x132>
					if (obj->sclust) {
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	689b      	ldr	r3, [r3, #8]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00d      	beq.n	800e510 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7fb ff76 	bl	800a3e8 <inc_lock>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e506:	2b00      	cmp	r3, #0
 800e508:	d105      	bne.n	800e516 <f_opendir+0x132>
 800e50a:	2312      	movs	r3, #18
 800e50c:	75fb      	strb	r3, [r7, #23]
 800e50e:	e002      	b.n	800e516 <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	2200      	movs	r2, #0
 800e514:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e516:	7dfb      	ldrb	r3, [r7, #23]
 800e518:	2b04      	cmp	r3, #4
 800e51a:	d101      	bne.n	800e520 <f_opendir+0x13c>
 800e51c:	2305      	movs	r3, #5
 800e51e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e520:	7dfb      	ldrb	r3, [r7, #23]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d002      	beq.n	800e52c <f_opendir+0x148>
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	2200      	movs	r2, #0
 800e52a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b084      	sub	sp, #16
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f107 0208 	add.w	r2, r7, #8
 800e544:	4611      	mov	r1, r2
 800e546:	4618      	mov	r0, r3
 800e548:	f7ff f8de 	bl	800d708 <validate>
 800e54c:	4603      	mov	r3, r0
 800e54e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e550:	7bfb      	ldrb	r3, [r7, #15]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d110      	bne.n	800e578 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d006      	beq.n	800e56c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e562:	4618      	mov	r0, r3
 800e564:	f7fb ffce 	bl	800a504 <dec_lock>
 800e568:	4603      	mov	r3, r0
 800e56a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e56c:	7bfb      	ldrb	r3, [r7, #15]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d102      	bne.n	800e578 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e578:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b084      	sub	sp, #16
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f107 0208 	add.w	r2, r7, #8
 800e592:	4611      	mov	r1, r2
 800e594:	4618      	mov	r0, r3
 800e596:	f7ff f8b7 	bl	800d708 <validate>
 800e59a:	4603      	mov	r3, r0
 800e59c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e59e:	7bfb      	ldrb	r3, [r7, #15]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d126      	bne.n	800e5f2 <f_readdir+0x70>
		if (!fno) {
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d106      	bne.n	800e5b8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7fc fede 	bl	800b36e <dir_sdi>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	73fb      	strb	r3, [r7, #15]
 800e5b6:	e01c      	b.n	800e5f2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7fd fd76 	bl	800c0ac <dir_read>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
 800e5c6:	2b04      	cmp	r3, #4
 800e5c8:	d101      	bne.n	800e5ce <f_readdir+0x4c>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e5ce:	7bfb      	ldrb	r3, [r7, #15]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d10e      	bne.n	800e5f2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e5d4:	6839      	ldr	r1, [r7, #0]
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7fe f902 	bl	800c7e0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e5dc:	2100      	movs	r1, #0
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7fc ff59 	bl	800b496 <dir_next>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e5e8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ea:	2b04      	cmp	r3, #4
 800e5ec:	d101      	bne.n	800e5f2 <f_readdir+0x70>
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3710      	adds	r7, #16
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b098      	sub	sp, #96	; 0x60
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e606:	f107 0108 	add.w	r1, r7, #8
 800e60a:	1d3b      	adds	r3, r7, #4
 800e60c:	2200      	movs	r2, #0
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fe fce0 	bl	800cfd4 <find_volume>
 800e614:	4603      	mov	r3, r0
 800e616:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e61a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d11f      	bne.n	800e662 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	f107 0308 	add.w	r3, r7, #8
 800e628:	4611      	mov	r1, r2
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fe fb7c 	bl	800cd28 <follow_path>
 800e630:	4603      	mov	r3, r0
 800e632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800e636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d111      	bne.n	800e662 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e63e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e642:	b25b      	sxtb	r3, r3
 800e644:	2b00      	cmp	r3, #0
 800e646:	da03      	bge.n	800e650 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e648:	2306      	movs	r3, #6
 800e64a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e64e:	e008      	b.n	800e662 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d005      	beq.n	800e662 <f_stat+0x66>
 800e656:	f107 0308 	add.w	r3, r7, #8
 800e65a:	6839      	ldr	r1, [r7, #0]
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7fe f8bf 	bl	800c7e0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e666:	4618      	mov	r0, r3
 800e668:	3760      	adds	r7, #96	; 0x60
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}

0800e66e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e66e:	b580      	push	{r7, lr}
 800e670:	b09a      	sub	sp, #104	; 0x68
 800e672:	af00      	add	r7, sp, #0
 800e674:	60f8      	str	r0, [r7, #12]
 800e676:	60b9      	str	r1, [r7, #8]
 800e678:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e67a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800e67e:	f107 030c 	add.w	r3, r7, #12
 800e682:	2200      	movs	r2, #0
 800e684:	4618      	mov	r0, r3
 800e686:	f7fe fca5 	bl	800cfd4 <find_volume>
 800e68a:	4603      	mov	r3, r0
 800e68c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e690:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e694:	2b00      	cmp	r3, #0
 800e696:	f040 80eb 	bne.w	800e870 <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e69a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6a2:	69da      	ldr	r2, [r3, #28]
 800e6a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6a6:	6a1b      	ldr	r3, [r3, #32]
 800e6a8:	3b02      	subs	r3, #2
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d804      	bhi.n	800e6b8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6b0:	69da      	ldr	r2, [r3, #28]
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	e0db      	b.n	800e870 <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d128      	bne.n	800e716 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ca:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800e6cc:	f107 0310 	add.w	r3, r7, #16
 800e6d0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fc f878 	bl	800a7c8 <get_fat>
 800e6d8:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6e0:	d103      	bne.n	800e6ea <f_getfree+0x7c>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e6e8:	e0b5      	b.n	800e856 <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d103      	bne.n	800e6f8 <f_getfree+0x8a>
 800e6f0:	2302      	movs	r3, #2
 800e6f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e6f6:	e0ae      	b.n	800e856 <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800e6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d102      	bne.n	800e704 <f_getfree+0x96>
 800e6fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e700:	3301      	adds	r3, #1
 800e702:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800e704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e706:	3301      	adds	r3, #1
 800e708:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e70c:	6a1b      	ldr	r3, [r3, #32]
 800e70e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e710:	429a      	cmp	r2, r3
 800e712:	d3db      	bcc.n	800e6cc <f_getfree+0x5e>
 800e714:	e09f      	b.n	800e856 <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800e716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	2b04      	cmp	r3, #4
 800e71c:	d14b      	bne.n	800e7b6 <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800e71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e720:	6a1b      	ldr	r3, [r3, #32]
 800e722:	3b02      	subs	r3, #2
 800e724:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800e726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e72a:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800e72c:	2300      	movs	r3, #0
 800e72e:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800e730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10d      	bne.n	800e752 <f_getfree+0xe4>
 800e736:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e73a:	1c5a      	adds	r2, r3, #1
 800e73c:	65ba      	str	r2, [r7, #88]	; 0x58
 800e73e:	4619      	mov	r1, r3
 800e740:	f7fb ff84 	bl	800a64c <move_window>
 800e744:	4603      	mov	r3, r0
 800e746:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e74a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d17e      	bne.n	800e850 <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e752:	2308      	movs	r3, #8
 800e754:	64bb      	str	r3, [r7, #72]	; 0x48
 800e756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e75a:	4413      	add	r3, r2
 800e75c:	333c      	adds	r3, #60	; 0x3c
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e764:	e013      	b.n	800e78e <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800e766:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e76a:	f003 0301 	and.w	r3, r3, #1
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d102      	bne.n	800e778 <f_getfree+0x10a>
 800e772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e774:	3301      	adds	r3, #1
 800e776:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800e778:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e77c:	085b      	lsrs	r3, r3, #1
 800e77e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800e782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e784:	3b01      	subs	r3, #1
 800e786:	64bb      	str	r3, [r7, #72]	; 0x48
 800e788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e78a:	3b01      	subs	r3, #1
 800e78c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e78e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e790:	2b00      	cmp	r3, #0
 800e792:	d002      	beq.n	800e79a <f_getfree+0x12c>
 800e794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1e5      	bne.n	800e766 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800e79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e79c:	3301      	adds	r3, #1
 800e79e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7a0:	8992      	ldrh	r2, [r2, #12]
 800e7a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e7a6:	fb01 f202 	mul.w	r2, r1, r2
 800e7aa:	1a9b      	subs	r3, r3, r2
 800e7ac:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800e7ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1bd      	bne.n	800e730 <f_getfree+0xc2>
 800e7b4:	e04f      	b.n	800e856 <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e7b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c0:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	657b      	str	r3, [r7, #84]	; 0x54
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800e7ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d113      	bne.n	800e7f8 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800e7d0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e7d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7d4:	1c5a      	adds	r2, r3, #1
 800e7d6:	65ba      	str	r2, [r7, #88]	; 0x58
 800e7d8:	4619      	mov	r1, r3
 800e7da:	f7fb ff37 	bl	800a64c <move_window>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800e7e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d133      	bne.n	800e854 <f_getfree+0x1e6>
							p = fs->win;
 800e7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7ee:	333c      	adds	r3, #60	; 0x3c
 800e7f0:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800e7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7f4:	899b      	ldrh	r3, [r3, #12]
 800e7f6:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800e7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	2b02      	cmp	r3, #2
 800e7fe:	d10f      	bne.n	800e820 <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800e800:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e802:	f7fb fb0f 	bl	8009e24 <ld_word>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d102      	bne.n	800e812 <f_getfree+0x1a4>
 800e80c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e80e:	3301      	adds	r3, #1
 800e810:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800e812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e814:	3302      	adds	r3, #2
 800e816:	653b      	str	r3, [r7, #80]	; 0x50
 800e818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e81a:	3b02      	subs	r3, #2
 800e81c:	657b      	str	r3, [r7, #84]	; 0x54
 800e81e:	e010      	b.n	800e842 <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e820:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e822:	f7fb fb17 	bl	8009e54 <ld_dword>
 800e826:	4603      	mov	r3, r0
 800e828:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d102      	bne.n	800e836 <f_getfree+0x1c8>
 800e830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e832:	3301      	adds	r3, #1
 800e834:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800e836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e838:	3304      	adds	r3, #4
 800e83a:	653b      	str	r3, [r7, #80]	; 0x50
 800e83c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e83e:	3b04      	subs	r3, #4
 800e840:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800e842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e844:	3b01      	subs	r3, #1
 800e846:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1bd      	bne.n	800e7ca <f_getfree+0x15c>
 800e84e:	e002      	b.n	800e856 <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800e850:	bf00      	nop
 800e852:	e000      	b.n	800e856 <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800e854:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e85a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e85c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e85e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e860:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800e862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e864:	791a      	ldrb	r2, [r3, #4]
 800e866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e868:	f042 0201 	orr.w	r2, r2, #1
 800e86c:	b2d2      	uxtb	r2, r2
 800e86e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800e870:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e874:	4618      	mov	r0, r3
 800e876:	3768      	adds	r7, #104	; 0x68
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800e87c:	b5b0      	push	{r4, r5, r7, lr}
 800e87e:	b0a0      	sub	sp, #128	; 0x80
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800e884:	f107 010c 	add.w	r1, r7, #12
 800e888:	1d3b      	adds	r3, r7, #4
 800e88a:	2202      	movs	r2, #2
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fe fba1 	bl	800cfd4 <find_volume>
 800e892:	4603      	mov	r3, r0
 800e894:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800e89c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f040 8133 	bne.w	800eb0c <f_mkdir+0x290>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	f107 0310 	add.w	r3, r7, #16
 800e8ac:	4611      	mov	r1, r2
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fe fa3a 	bl	800cd28 <follow_path>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800e8ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d102      	bne.n	800e8c8 <f_mkdir+0x4c>
 800e8c2:	2308      	movs	r3, #8
 800e8c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800e8c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e8cc:	2b04      	cmp	r3, #4
 800e8ce:	f040 811d 	bne.w	800eb0c <f_mkdir+0x290>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800e8d2:	f107 0310 	add.w	r3, r7, #16
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7fc fbfb 	bl	800b0d4 <create_chain>
 800e8de:	66f8      	str	r0, [r7, #108]	; 0x6c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	895b      	ldrh	r3, [r3, #10]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	899b      	ldrh	r3, [r3, #12]
 800e8ea:	fb02 f303 	mul.w	r3, r2, r3
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	461c      	mov	r4, r3
 800e8f2:	4615      	mov	r5, r2
 800e8f4:	e9c7 4508 	strd	r4, r5, [r7, #32]
			res = FR_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800e8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e900:	2b00      	cmp	r3, #0
 800e902:	d102      	bne.n	800e90a <f_mkdir+0x8e>
 800e904:	2307      	movs	r3, #7
 800e906:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 800e90a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d102      	bne.n	800e916 <f_mkdir+0x9a>
 800e910:	2302      	movs	r3, #2
 800e912:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e91c:	d102      	bne.n	800e924 <f_mkdir+0xa8>
 800e91e:	2301      	movs	r3, #1
 800e920:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800e924:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d106      	bne.n	800e93a <f_mkdir+0xbe>
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fb fe48 	bl	800a5c4 <sync_window>
 800e934:	4603      	mov	r3, r0
 800e936:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 800e93a:	f7f8 f9d9 	bl	8006cf0 <get_fattime>
 800e93e:	66b8      	str	r0, [r7, #104]	; 0x68
			if (res == FR_OK) {					/* Initialize the new directory table */
 800e940:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e944:	2b00      	cmp	r3, #0
 800e946:	d170      	bne.n	800ea2a <f_mkdir+0x1ae>
				dsc = clust2sect(fs, dcl);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fb ff1b 	bl	800a788 <clust2sect>
 800e952:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	333c      	adds	r3, #60	; 0x3c
 800e958:	667b      	str	r3, [r7, #100]	; 0x64
				mem_set(dir, 0, SS(fs));
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	899b      	ldrh	r3, [r3, #12]
 800e95e:	461a      	mov	r2, r3
 800e960:	2100      	movs	r1, #0
 800e962:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e964:	f7fb fc64 	bl	800a230 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	2b04      	cmp	r3, #4
 800e96e:	d036      	beq.n	800e9de <f_mkdir+0x162>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800e970:	220b      	movs	r2, #11
 800e972:	2120      	movs	r1, #32
 800e974:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e976:	f7fb fc5b 	bl	800a230 <mem_set>
					dir[DIR_Name] = '.';
 800e97a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e97c:	222e      	movs	r2, #46	; 0x2e
 800e97e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800e980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e982:	330b      	adds	r3, #11
 800e984:	2210      	movs	r2, #16
 800e986:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800e988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e98a:	3316      	adds	r3, #22
 800e98c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fb fb79 	bl	800a086 <st_dword>
					st_clust(fs, dir, dcl);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e998:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7fc fedc 	bl	800b758 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800e9a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9a2:	3320      	adds	r3, #32
 800e9a4:	2220      	movs	r2, #32
 800e9a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7fb fc20 	bl	800a1ee <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800e9ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9b0:	3321      	adds	r3, #33	; 0x21
 800e9b2:	222e      	movs	r2, #46	; 0x2e
 800e9b4:	701a      	strb	r2, [r3, #0]
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	2b03      	cmp	r3, #3
 800e9c0:	d106      	bne.n	800e9d0 <f_mkdir+0x154>
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d101      	bne.n	800e9d0 <f_mkdir+0x154>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9d4:	3320      	adds	r3, #32
 800e9d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e9d8:	4619      	mov	r1, r3
 800e9da:	f7fc febd 	bl	800b758 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	895b      	ldrh	r3, [r3, #10]
 800e9e2:	67bb      	str	r3, [r7, #120]	; 0x78
 800e9e4:	e01c      	b.n	800ea20 <f_mkdir+0x1a4>
					fs->winsect = dsc++;
 800e9e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9e8:	1c5a      	adds	r2, r3, #1
 800e9ea:	677a      	str	r2, [r7, #116]	; 0x74
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7fb fde3 	bl	800a5c4 <sync_window>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 800ea04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d10d      	bne.n	800ea28 <f_mkdir+0x1ac>
					mem_set(dir, 0, SS(fs));
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	899b      	ldrh	r3, [r3, #12]
 800ea10:	461a      	mov	r2, r3
 800ea12:	2100      	movs	r1, #0
 800ea14:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ea16:	f7fb fc0b 	bl	800a230 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ea1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1df      	bne.n	800e9e6 <f_mkdir+0x16a>
 800ea26:	e000      	b.n	800ea2a <f_mkdir+0x1ae>
					if (res != FR_OK) break;
 800ea28:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ea2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d107      	bne.n	800ea42 <f_mkdir+0x1c6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ea32:	f107 0310 	add.w	r3, r7, #16
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fd fd28 	bl	800c48c <dir_register>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 800ea42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d159      	bne.n	800eafe <f_mkdir+0x282>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	2b04      	cmp	r3, #4
 800ea50:	d134      	bne.n	800eabc <f_mkdir+0x240>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	695b      	ldr	r3, [r3, #20]
 800ea56:	330c      	adds	r3, #12
 800ea58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fb fb13 	bl	800a086 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	695b      	ldr	r3, [r3, #20]
 800ea64:	3334      	adds	r3, #52	; 0x34
 800ea66:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fb fb0c 	bl	800a086 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	695b      	ldr	r3, [r3, #20]
 800ea72:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ea76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	f7fb fb02 	bl	800a086 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	695b      	ldr	r3, [r3, #20]
 800ea86:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800ea8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ea8e:	4613      	mov	r3, r2
 800ea90:	4619      	mov	r1, r3
 800ea92:	f7fb faf8 	bl	800a086 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	695b      	ldr	r3, [r3, #20]
 800ea9a:	3321      	adds	r3, #33	; 0x21
 800ea9c:	2203      	movs	r2, #3
 800ea9e:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	695b      	ldr	r3, [r3, #20]
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	2210      	movs	r2, #16
 800eaa8:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800eaaa:	f107 0310 	add.w	r3, r7, #16
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fd fa3a 	bl	800bf28 <store_xdir>
 800eab4:	4603      	mov	r3, r0
 800eab6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800eaba:	e014      	b.n	800eae6 <f_mkdir+0x26a>
				} else
#endif
				{
					dir = dj.dir;
 800eabc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eabe:	667b      	str	r3, [r7, #100]	; 0x64
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800eac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eac2:	3316      	adds	r3, #22
 800eac4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7fb fadd 	bl	800a086 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ead0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fc fe40 	bl	800b758 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ead8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eada:	330b      	adds	r3, #11
 800eadc:	2210      	movs	r2, #16
 800eade:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2201      	movs	r2, #1
 800eae4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800eae6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10e      	bne.n	800eb0c <f_mkdir+0x290>
					res = sync_fs(fs);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fb fdd9 	bl	800a6a8 <sync_fs>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800eafc:	e006      	b.n	800eb0c <f_mkdir+0x290>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800eafe:	f107 0310 	add.w	r3, r7, #16
 800eb02:	2200      	movs	r2, #0
 800eb04:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fc fa30 	bl	800af6c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800eb0c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3780      	adds	r7, #128	; 0x80
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bdb0      	pop	{r4, r5, r7, pc}

0800eb18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b087      	sub	sp, #28
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	4613      	mov	r3, r2
 800eb24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eb26:	2301      	movs	r3, #1
 800eb28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eb2e:	4b1f      	ldr	r3, [pc, #124]	; (800ebac <FATFS_LinkDriverEx+0x94>)
 800eb30:	7a5b      	ldrb	r3, [r3, #9]
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d131      	bne.n	800eb9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eb38:	4b1c      	ldr	r3, [pc, #112]	; (800ebac <FATFS_LinkDriverEx+0x94>)
 800eb3a:	7a5b      	ldrb	r3, [r3, #9]
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	461a      	mov	r2, r3
 800eb40:	4b1a      	ldr	r3, [pc, #104]	; (800ebac <FATFS_LinkDriverEx+0x94>)
 800eb42:	2100      	movs	r1, #0
 800eb44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800eb46:	4b19      	ldr	r3, [pc, #100]	; (800ebac <FATFS_LinkDriverEx+0x94>)
 800eb48:	7a5b      	ldrb	r3, [r3, #9]
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	4a17      	ldr	r2, [pc, #92]	; (800ebac <FATFS_LinkDriverEx+0x94>)
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	4413      	add	r3, r2
 800eb52:	68fa      	ldr	r2, [r7, #12]
 800eb54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800eb56:	4b15      	ldr	r3, [pc, #84]	; (800ebac <FATFS_LinkDriverEx+0x94>)
 800eb58:	7a5b      	ldrb	r3, [r3, #9]
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	4b13      	ldr	r3, [pc, #76]	; (800ebac <FATFS_LinkDriverEx+0x94>)
 800eb60:	4413      	add	r3, r2
 800eb62:	79fa      	ldrb	r2, [r7, #7]
 800eb64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eb66:	4b11      	ldr	r3, [pc, #68]	; (800ebac <FATFS_LinkDriverEx+0x94>)
 800eb68:	7a5b      	ldrb	r3, [r3, #9]
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	b2d1      	uxtb	r1, r2
 800eb70:	4a0e      	ldr	r2, [pc, #56]	; (800ebac <FATFS_LinkDriverEx+0x94>)
 800eb72:	7251      	strb	r1, [r2, #9]
 800eb74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eb76:	7dbb      	ldrb	r3, [r7, #22]
 800eb78:	3330      	adds	r3, #48	; 0x30
 800eb7a:	b2da      	uxtb	r2, r3
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	3301      	adds	r3, #1
 800eb84:	223a      	movs	r2, #58	; 0x3a
 800eb86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	3302      	adds	r3, #2
 800eb8c:	222f      	movs	r2, #47	; 0x2f
 800eb8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	3303      	adds	r3, #3
 800eb94:	2200      	movs	r2, #0
 800eb96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eb9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	371c      	adds	r7, #28
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	20002798 	.word	0x20002798

0800ebb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ebba:	2200      	movs	r2, #0
 800ebbc:	6839      	ldr	r1, [r7, #0]
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f7ff ffaa 	bl	800eb18 <FATFS_LinkDriverEx>
 800ebc4:	4603      	mov	r3, r0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
	...

0800ebd0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	6039      	str	r1, [r7, #0]
 800ebda:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ebdc:	88fb      	ldrh	r3, [r7, #6]
 800ebde:	2b7f      	cmp	r3, #127	; 0x7f
 800ebe0:	d802      	bhi.n	800ebe8 <ff_convert+0x18>
		c = chr;
 800ebe2:	88fb      	ldrh	r3, [r7, #6]
 800ebe4:	81fb      	strh	r3, [r7, #14]
 800ebe6:	e025      	b.n	800ec34 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00b      	beq.n	800ec06 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ebee:	88fb      	ldrh	r3, [r7, #6]
 800ebf0:	2bff      	cmp	r3, #255	; 0xff
 800ebf2:	d805      	bhi.n	800ec00 <ff_convert+0x30>
 800ebf4:	88fb      	ldrh	r3, [r7, #6]
 800ebf6:	3b80      	subs	r3, #128	; 0x80
 800ebf8:	4a12      	ldr	r2, [pc, #72]	; (800ec44 <ff_convert+0x74>)
 800ebfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebfe:	e000      	b.n	800ec02 <ff_convert+0x32>
 800ec00:	2300      	movs	r3, #0
 800ec02:	81fb      	strh	r3, [r7, #14]
 800ec04:	e016      	b.n	800ec34 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ec06:	2300      	movs	r3, #0
 800ec08:	81fb      	strh	r3, [r7, #14]
 800ec0a:	e009      	b.n	800ec20 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ec0c:	89fb      	ldrh	r3, [r7, #14]
 800ec0e:	4a0d      	ldr	r2, [pc, #52]	; (800ec44 <ff_convert+0x74>)
 800ec10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec14:	88fa      	ldrh	r2, [r7, #6]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d006      	beq.n	800ec28 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ec1a:	89fb      	ldrh	r3, [r7, #14]
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	81fb      	strh	r3, [r7, #14]
 800ec20:	89fb      	ldrh	r3, [r7, #14]
 800ec22:	2b7f      	cmp	r3, #127	; 0x7f
 800ec24:	d9f2      	bls.n	800ec0c <ff_convert+0x3c>
 800ec26:	e000      	b.n	800ec2a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ec28:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ec2a:	89fb      	ldrh	r3, [r7, #14]
 800ec2c:	3380      	adds	r3, #128	; 0x80
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ec34:	89fb      	ldrh	r3, [r7, #14]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3714      	adds	r7, #20
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr
 800ec42:	bf00      	nop
 800ec44:	08010c70 	.word	0x08010c70

0800ec48 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b087      	sub	sp, #28
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	4603      	mov	r3, r0
 800ec50:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ec52:	88fb      	ldrh	r3, [r7, #6]
 800ec54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec58:	d201      	bcs.n	800ec5e <ff_wtoupper+0x16>
 800ec5a:	4b3e      	ldr	r3, [pc, #248]	; (800ed54 <ff_wtoupper+0x10c>)
 800ec5c:	e000      	b.n	800ec60 <ff_wtoupper+0x18>
 800ec5e:	4b3e      	ldr	r3, [pc, #248]	; (800ed58 <ff_wtoupper+0x110>)
 800ec60:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	1c9a      	adds	r2, r3, #2
 800ec66:	617a      	str	r2, [r7, #20]
 800ec68:	881b      	ldrh	r3, [r3, #0]
 800ec6a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ec6c:	8a7b      	ldrh	r3, [r7, #18]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d068      	beq.n	800ed44 <ff_wtoupper+0xfc>
 800ec72:	88fa      	ldrh	r2, [r7, #6]
 800ec74:	8a7b      	ldrh	r3, [r7, #18]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d364      	bcc.n	800ed44 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	1c9a      	adds	r2, r3, #2
 800ec7e:	617a      	str	r2, [r7, #20]
 800ec80:	881b      	ldrh	r3, [r3, #0]
 800ec82:	823b      	strh	r3, [r7, #16]
 800ec84:	8a3b      	ldrh	r3, [r7, #16]
 800ec86:	0a1b      	lsrs	r3, r3, #8
 800ec88:	81fb      	strh	r3, [r7, #14]
 800ec8a:	8a3b      	ldrh	r3, [r7, #16]
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ec90:	88fa      	ldrh	r2, [r7, #6]
 800ec92:	8a79      	ldrh	r1, [r7, #18]
 800ec94:	8a3b      	ldrh	r3, [r7, #16]
 800ec96:	440b      	add	r3, r1
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	da49      	bge.n	800ed30 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ec9c:	89fb      	ldrh	r3, [r7, #14]
 800ec9e:	2b08      	cmp	r3, #8
 800eca0:	d84f      	bhi.n	800ed42 <ff_wtoupper+0xfa>
 800eca2:	a201      	add	r2, pc, #4	; (adr r2, 800eca8 <ff_wtoupper+0x60>)
 800eca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca8:	0800eccd 	.word	0x0800eccd
 800ecac:	0800ecdf 	.word	0x0800ecdf
 800ecb0:	0800ecf5 	.word	0x0800ecf5
 800ecb4:	0800ecfd 	.word	0x0800ecfd
 800ecb8:	0800ed05 	.word	0x0800ed05
 800ecbc:	0800ed0d 	.word	0x0800ed0d
 800ecc0:	0800ed15 	.word	0x0800ed15
 800ecc4:	0800ed1d 	.word	0x0800ed1d
 800ecc8:	0800ed25 	.word	0x0800ed25
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800eccc:	88fa      	ldrh	r2, [r7, #6]
 800ecce:	8a7b      	ldrh	r3, [r7, #18]
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	005b      	lsls	r3, r3, #1
 800ecd4:	697a      	ldr	r2, [r7, #20]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	80fb      	strh	r3, [r7, #6]
 800ecdc:	e027      	b.n	800ed2e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ecde:	88fa      	ldrh	r2, [r7, #6]
 800ece0:	8a7b      	ldrh	r3, [r7, #18]
 800ece2:	1ad3      	subs	r3, r2, r3
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	f003 0301 	and.w	r3, r3, #1
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	88fa      	ldrh	r2, [r7, #6]
 800ecee:	1ad3      	subs	r3, r2, r3
 800ecf0:	80fb      	strh	r3, [r7, #6]
 800ecf2:	e01c      	b.n	800ed2e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ecf4:	88fb      	ldrh	r3, [r7, #6]
 800ecf6:	3b10      	subs	r3, #16
 800ecf8:	80fb      	strh	r3, [r7, #6]
 800ecfa:	e018      	b.n	800ed2e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ecfc:	88fb      	ldrh	r3, [r7, #6]
 800ecfe:	3b20      	subs	r3, #32
 800ed00:	80fb      	strh	r3, [r7, #6]
 800ed02:	e014      	b.n	800ed2e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ed04:	88fb      	ldrh	r3, [r7, #6]
 800ed06:	3b30      	subs	r3, #48	; 0x30
 800ed08:	80fb      	strh	r3, [r7, #6]
 800ed0a:	e010      	b.n	800ed2e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ed0c:	88fb      	ldrh	r3, [r7, #6]
 800ed0e:	3b1a      	subs	r3, #26
 800ed10:	80fb      	strh	r3, [r7, #6]
 800ed12:	e00c      	b.n	800ed2e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ed14:	88fb      	ldrh	r3, [r7, #6]
 800ed16:	3308      	adds	r3, #8
 800ed18:	80fb      	strh	r3, [r7, #6]
 800ed1a:	e008      	b.n	800ed2e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ed1c:	88fb      	ldrh	r3, [r7, #6]
 800ed1e:	3b50      	subs	r3, #80	; 0x50
 800ed20:	80fb      	strh	r3, [r7, #6]
 800ed22:	e004      	b.n	800ed2e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ed24:	88fb      	ldrh	r3, [r7, #6]
 800ed26:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ed2a:	80fb      	strh	r3, [r7, #6]
 800ed2c:	bf00      	nop
			}
			break;
 800ed2e:	e008      	b.n	800ed42 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ed30:	89fb      	ldrh	r3, [r7, #14]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d195      	bne.n	800ec62 <ff_wtoupper+0x1a>
 800ed36:	8a3b      	ldrh	r3, [r7, #16]
 800ed38:	005b      	lsls	r3, r3, #1
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ed40:	e78f      	b.n	800ec62 <ff_wtoupper+0x1a>
			break;
 800ed42:	bf00      	nop
	}

	return chr;
 800ed44:	88fb      	ldrh	r3, [r7, #6]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	371c      	adds	r7, #28
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	08010d70 	.word	0x08010d70
 800ed58:	08010f64 	.word	0x08010f64

0800ed5c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ed60:	2201      	movs	r2, #1
 800ed62:	490e      	ldr	r1, [pc, #56]	; (800ed9c <MX_USB_HOST_Init+0x40>)
 800ed64:	480e      	ldr	r0, [pc, #56]	; (800eda0 <MX_USB_HOST_Init+0x44>)
 800ed66:	f7f9 fc67 	bl	8008638 <USBH_Init>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d001      	beq.n	800ed74 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ed70:	f7f2 fb36 	bl	80013e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ed74:	490b      	ldr	r1, [pc, #44]	; (800eda4 <MX_USB_HOST_Init+0x48>)
 800ed76:	480a      	ldr	r0, [pc, #40]	; (800eda0 <MX_USB_HOST_Init+0x44>)
 800ed78:	f7f9 fcec 	bl	8008754 <USBH_RegisterClass>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d001      	beq.n	800ed86 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ed82:	f7f2 fb2d 	bl	80013e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ed86:	4806      	ldr	r0, [pc, #24]	; (800eda0 <MX_USB_HOST_Init+0x44>)
 800ed88:	f7f9 fd70 	bl	800886c <USBH_Start>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d001      	beq.n	800ed96 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ed92:	f7f2 fb25 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ed96:	bf00      	nop
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	0800edbd 	.word	0x0800edbd
 800eda0:	200027a4 	.word	0x200027a4
 800eda4:	2000000c 	.word	0x2000000c

0800eda8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800edac:	4802      	ldr	r0, [pc, #8]	; (800edb8 <MX_USB_HOST_Process+0x10>)
 800edae:	f7f9 fd6d 	bl	800888c <USBH_Process>
}
 800edb2:	bf00      	nop
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	200027a4 	.word	0x200027a4

0800edbc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	460b      	mov	r3, r1
 800edc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800edc8:	78fb      	ldrb	r3, [r7, #3]
 800edca:	3b01      	subs	r3, #1
 800edcc:	2b04      	cmp	r3, #4
 800edce:	d82e      	bhi.n	800ee2e <USBH_UserProcess+0x72>
 800edd0:	a201      	add	r2, pc, #4	; (adr r2, 800edd8 <USBH_UserProcess+0x1c>)
 800edd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd6:	bf00      	nop
 800edd8:	0800ee2f 	.word	0x0800ee2f
 800eddc:	0800edf9 	.word	0x0800edf9
 800ede0:	0800ee2f 	.word	0x0800ee2f
 800ede4:	0800ee27 	.word	0x0800ee27
 800ede8:	0800eded 	.word	0x0800eded
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800edec:	4b12      	ldr	r3, [pc, #72]	; (800ee38 <USBH_UserProcess+0x7c>)
 800edee:	2203      	movs	r2, #3
 800edf0:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 800edf2:	f7f1 ff2f 	bl	8000c54 <Unmount_USB>
  break;
 800edf6:	e01b      	b.n	800ee30 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800edf8:	4b0f      	ldr	r3, [pc, #60]	; (800ee38 <USBH_UserProcess+0x7c>)
 800edfa:	2202      	movs	r2, #2
 800edfc:	701a      	strb	r2, [r3, #0]

  Mount_USB();
 800edfe:	f7f1 fefd 	bl	8000bfc <Mount_USB>

  Check_USB_Details();		// Check space datials
 800ee02:	f7f2 f98d 	bl	8001120 <Check_USB_Details>

  Scan_USB("/");		//Scan for files and directories
 800ee06:	480d      	ldr	r0, [pc, #52]	; (800ee3c <USBH_UserProcess+0x80>)
 800ee08:	f7f1 ff44 	bl	8000c94 <Scan_USB>

  Check_USB_Details();
 800ee0c:	f7f2 f988 	bl	8001120 <Check_USB_Details>

  Create_Dir("/DIR1");
 800ee10:	480b      	ldr	r0, [pc, #44]	; (800ee40 <USBH_UserProcess+0x84>)
 800ee12:	f7f2 f945 	bl	80010a0 <Create_Dir>
  Create_File("/DIR1/DIR1FILE.txt");
 800ee16:	480b      	ldr	r0, [pc, #44]	; (800ee44 <USBH_UserProcess+0x88>)
 800ee18:	f7f2 f8a6 	bl	8000f68 <Create_File>
  Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file/n");
 800ee1c:	490a      	ldr	r1, [pc, #40]	; (800ee48 <USBH_UserProcess+0x8c>)
 800ee1e:	4809      	ldr	r0, [pc, #36]	; (800ee44 <USBH_UserProcess+0x88>)
 800ee20:	f7f1 ffde 	bl	8000de0 <Write_File>

  break;
 800ee24:	e004      	b.n	800ee30 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ee26:	4b04      	ldr	r3, [pc, #16]	; (800ee38 <USBH_UserProcess+0x7c>)
 800ee28:	2201      	movs	r2, #1
 800ee2a:	701a      	strb	r2, [r3, #0]
  break;
 800ee2c:	e000      	b.n	800ee30 <USBH_UserProcess+0x74>

  default:
  break;
 800ee2e:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ee30:	bf00      	nop
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	20002b7c 	.word	0x20002b7c
 800ee3c:	08010b40 	.word	0x08010b40
 800ee40:	08010b44 	.word	0x08010b44
 800ee44:	08010b4c 	.word	0x08010b4c
 800ee48:	08010b60 	.word	0x08010b60

0800ee4c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b0ae      	sub	sp, #184	; 0xb8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ee58:	2200      	movs	r2, #0
 800ee5a:	601a      	str	r2, [r3, #0]
 800ee5c:	605a      	str	r2, [r3, #4]
 800ee5e:	609a      	str	r2, [r3, #8]
 800ee60:	60da      	str	r2, [r3, #12]
 800ee62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ee64:	f107 0318 	add.w	r3, r7, #24
 800ee68:	228c      	movs	r2, #140	; 0x8c
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f000 fb51 	bl	800f514 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ee7a:	f040 8085 	bne.w	800ef88 <HAL_HCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ee7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ee82:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ee84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ee88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ee90:	2301      	movs	r3, #1
 800ee92:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800ee94:	2318      	movs	r3, #24
 800ee96:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800ee98:	2302      	movs	r3, #2
 800ee9a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800ee9c:	2302      	movs	r3, #2
 800ee9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800eea0:	2302      	movs	r3, #2
 800eea2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800eea4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800eea8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800eeaa:	f107 0318 	add.w	r3, r7, #24
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7f5 fa68 	bl	8004384 <HAL_RCCEx_PeriphCLKConfig>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d001      	beq.n	800eebe <HAL_HCD_MspInit+0x72>
    {
      Error_Handler();
 800eeba:	f7f2 fa91 	bl	80013e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eebe:	4b34      	ldr	r3, [pc, #208]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800eec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eec2:	4a33      	ldr	r2, [pc, #204]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800eec4:	f043 0301 	orr.w	r3, r3, #1
 800eec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800eeca:	4b31      	ldr	r3, [pc, #196]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800eecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eece:	f003 0301 	and.w	r3, r3, #1
 800eed2:	617b      	str	r3, [r7, #20]
 800eed4:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800eed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eeda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eede:	2300      	movs	r3, #0
 800eee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eee4:	2300      	movs	r3, #0
 800eee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eeea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eeee:	4619      	mov	r1, r3
 800eef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800eef4:	f7f2 fe4c 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800eef8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eefc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef00:	2302      	movs	r3, #2
 800ef02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef06:	2300      	movs	r3, #0
 800ef08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef0c:	2303      	movs	r3, #3
 800ef0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ef12:	230a      	movs	r3, #10
 800ef14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ef22:	f7f2 fe35 	bl	8001b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ef26:	4b1a      	ldr	r3, [pc, #104]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800ef28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef2a:	4a19      	ldr	r2, [pc, #100]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800ef2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ef30:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ef32:	4b17      	ldr	r3, [pc, #92]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800ef34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ef3a:	613b      	str	r3, [r7, #16]
 800ef3c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ef3e:	4b14      	ldr	r3, [pc, #80]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800ef40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d114      	bne.n	800ef74 <HAL_HCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ef4a:	4b11      	ldr	r3, [pc, #68]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800ef4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef4e:	4a10      	ldr	r2, [pc, #64]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800ef50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef54:	6593      	str	r3, [r2, #88]	; 0x58
 800ef56:	4b0e      	ldr	r3, [pc, #56]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800ef58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef5e:	60fb      	str	r3, [r7, #12]
 800ef60:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800ef62:	f7f4 fbb1 	bl	80036c8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ef66:	4b0a      	ldr	r3, [pc, #40]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800ef68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef6a:	4a09      	ldr	r2, [pc, #36]	; (800ef90 <HAL_HCD_MspInit+0x144>)
 800ef6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ef70:	6593      	str	r3, [r2, #88]	; 0x58
 800ef72:	e001      	b.n	800ef78 <HAL_HCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ef74:	f7f4 fba8 	bl	80036c8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ef78:	2200      	movs	r2, #0
 800ef7a:	2100      	movs	r1, #0
 800ef7c:	2043      	movs	r0, #67	; 0x43
 800ef7e:	f7f2 fd52 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ef82:	2043      	movs	r0, #67	; 0x43
 800ef84:	f7f2 fd6b 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ef88:	bf00      	nop
 800ef8a:	37b8      	adds	r7, #184	; 0xb8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	40021000 	.word	0x40021000

0800ef94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fa f845 	bl	8009032 <USBH_LL_IncTimer>
}
 800efa8:	bf00      	nop
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7fa f87d 	bl	80090be <USBH_LL_Connect>
}
 800efc4:	bf00      	nop
 800efc6:	3708      	adds	r7, #8
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b082      	sub	sp, #8
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fa f886 	bl	80090ec <USBH_LL_Disconnect>
}
 800efe0:	bf00      	nop
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	460b      	mov	r3, r1
 800eff2:	70fb      	strb	r3, [r7, #3]
 800eff4:	4613      	mov	r3, r2
 800eff6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800eff8:	bf00      	nop
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f012:	4618      	mov	r0, r3
 800f014:	f7fa f837 	bl	8009086 <USBH_LL_PortEnabled>
}
 800f018:	bf00      	nop
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fa f837 	bl	80090a2 <USBH_LL_PortDisabled>
}
 800f034:	bf00      	nop
 800f036:	3708      	adds	r7, #8
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d12a      	bne.n	800f0a4 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f04e:	4a18      	ldr	r2, [pc, #96]	; (800f0b0 <USBH_LL_Init+0x74>)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4a15      	ldr	r2, [pc, #84]	; (800f0b0 <USBH_LL_Init+0x74>)
 800f05a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f05e:	4b14      	ldr	r3, [pc, #80]	; (800f0b0 <USBH_LL_Init+0x74>)
 800f060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f064:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800f066:	4b12      	ldr	r3, [pc, #72]	; (800f0b0 <USBH_LL_Init+0x74>)
 800f068:	220c      	movs	r2, #12
 800f06a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f06c:	4b10      	ldr	r3, [pc, #64]	; (800f0b0 <USBH_LL_Init+0x74>)
 800f06e:	2201      	movs	r2, #1
 800f070:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f072:	4b0f      	ldr	r3, [pc, #60]	; (800f0b0 <USBH_LL_Init+0x74>)
 800f074:	2200      	movs	r2, #0
 800f076:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f078:	4b0d      	ldr	r3, [pc, #52]	; (800f0b0 <USBH_LL_Init+0x74>)
 800f07a:	2202      	movs	r2, #2
 800f07c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f07e:	4b0c      	ldr	r3, [pc, #48]	; (800f0b0 <USBH_LL_Init+0x74>)
 800f080:	2200      	movs	r2, #0
 800f082:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f084:	480a      	ldr	r0, [pc, #40]	; (800f0b0 <USBH_LL_Init+0x74>)
 800f086:	f7f2 ff2d 	bl	8001ee4 <HAL_HCD_Init>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d001      	beq.n	800f094 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f090:	f7f2 f9a6 	bl	80013e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f094:	4806      	ldr	r0, [pc, #24]	; (800f0b0 <USBH_LL_Init+0x74>)
 800f096:	f7f3 fb0c 	bl	80026b2 <HAL_HCD_GetCurrentFrame>
 800f09a:	4603      	mov	r3, r0
 800f09c:	4619      	mov	r1, r3
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7f9 ffb8 	bl	8009014 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f0a4:	2300      	movs	r3, #0
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	20002b80 	.word	0x20002b80

0800f0b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7f3 fa7b 	bl	80025c6 <HAL_HCD_Start>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f0d4:	7bfb      	ldrb	r3, [r7, #15]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f000 f98c 	bl	800f3f4 <USBH_Get_USB_Status>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f0ea:	b580      	push	{r7, lr}
 800f0ec:	b084      	sub	sp, #16
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f100:	4618      	mov	r0, r3
 800f102:	f7f3 fa83 	bl	800260c <HAL_HCD_Stop>
 800f106:	4603      	mov	r3, r0
 800f108:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 f971 	bl	800f3f4 <USBH_Get_USB_Status>
 800f112:	4603      	mov	r3, r0
 800f114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f116:	7bbb      	ldrb	r3, [r7, #14]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3710      	adds	r7, #16
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f128:	2301      	movs	r3, #1
 800f12a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f132:	4618      	mov	r0, r3
 800f134:	f7f3 facb 	bl	80026ce <HAL_HCD_GetCurrentSpeed>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b02      	cmp	r3, #2
 800f13c:	d00c      	beq.n	800f158 <USBH_LL_GetSpeed+0x38>
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d80d      	bhi.n	800f15e <USBH_LL_GetSpeed+0x3e>
 800f142:	2b00      	cmp	r3, #0
 800f144:	d002      	beq.n	800f14c <USBH_LL_GetSpeed+0x2c>
 800f146:	2b01      	cmp	r3, #1
 800f148:	d003      	beq.n	800f152 <USBH_LL_GetSpeed+0x32>
 800f14a:	e008      	b.n	800f15e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f14c:	2300      	movs	r3, #0
 800f14e:	73fb      	strb	r3, [r7, #15]
    break;
 800f150:	e008      	b.n	800f164 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f152:	2301      	movs	r3, #1
 800f154:	73fb      	strb	r3, [r7, #15]
    break;
 800f156:	e005      	b.n	800f164 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f158:	2302      	movs	r3, #2
 800f15a:	73fb      	strb	r3, [r7, #15]
    break;
 800f15c:	e002      	b.n	800f164 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f15e:	2301      	movs	r3, #1
 800f160:	73fb      	strb	r3, [r7, #15]
    break;
 800f162:	bf00      	nop
  }
  return  speed;
 800f164:	7bfb      	ldrb	r3, [r7, #15]
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b084      	sub	sp, #16
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f176:	2300      	movs	r3, #0
 800f178:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f17a:	2300      	movs	r3, #0
 800f17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f184:	4618      	mov	r0, r3
 800f186:	f7f3 fa5e 	bl	8002646 <HAL_HCD_ResetPort>
 800f18a:	4603      	mov	r3, r0
 800f18c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f18e:	7bfb      	ldrb	r3, [r7, #15]
 800f190:	4618      	mov	r0, r3
 800f192:	f000 f92f 	bl	800f3f4 <USBH_Get_USB_Status>
 800f196:	4603      	mov	r3, r0
 800f198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f19a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1b6:	78fa      	ldrb	r2, [r7, #3]
 800f1b8:	4611      	mov	r1, r2
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7f3 fa65 	bl	800268a <HAL_HCD_HC_GetXferCount>
 800f1c0:	4603      	mov	r3, r0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f1ca:	b590      	push	{r4, r7, lr}
 800f1cc:	b089      	sub	sp, #36	; 0x24
 800f1ce:	af04      	add	r7, sp, #16
 800f1d0:	6078      	str	r0, [r7, #4]
 800f1d2:	4608      	mov	r0, r1
 800f1d4:	4611      	mov	r1, r2
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	4603      	mov	r3, r0
 800f1da:	70fb      	strb	r3, [r7, #3]
 800f1dc:	460b      	mov	r3, r1
 800f1de:	70bb      	strb	r3, [r7, #2]
 800f1e0:	4613      	mov	r3, r2
 800f1e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f1f2:	787c      	ldrb	r4, [r7, #1]
 800f1f4:	78ba      	ldrb	r2, [r7, #2]
 800f1f6:	78f9      	ldrb	r1, [r7, #3]
 800f1f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f1fa:	9302      	str	r3, [sp, #8]
 800f1fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f200:	9301      	str	r3, [sp, #4]
 800f202:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	4623      	mov	r3, r4
 800f20a:	f7f2 fecd 	bl	8001fa8 <HAL_HCD_HC_Init>
 800f20e:	4603      	mov	r3, r0
 800f210:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f212:	7bfb      	ldrb	r3, [r7, #15]
 800f214:	4618      	mov	r0, r3
 800f216:	f000 f8ed 	bl	800f3f4 <USBH_Get_USB_Status>
 800f21a:	4603      	mov	r3, r0
 800f21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f220:	4618      	mov	r0, r3
 800f222:	3714      	adds	r7, #20
 800f224:	46bd      	mov	sp, r7
 800f226:	bd90      	pop	{r4, r7, pc}

0800f228 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	460b      	mov	r3, r1
 800f232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f234:	2300      	movs	r3, #0
 800f236:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f238:	2300      	movs	r3, #0
 800f23a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f242:	78fa      	ldrb	r2, [r7, #3]
 800f244:	4611      	mov	r1, r2
 800f246:	4618      	mov	r0, r3
 800f248:	f7f2 ff3d 	bl	80020c6 <HAL_HCD_HC_Halt>
 800f24c:	4603      	mov	r3, r0
 800f24e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f250:	7bfb      	ldrb	r3, [r7, #15]
 800f252:	4618      	mov	r0, r3
 800f254:	f000 f8ce 	bl	800f3f4 <USBH_Get_USB_Status>
 800f258:	4603      	mov	r3, r0
 800f25a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f266:	b590      	push	{r4, r7, lr}
 800f268:	b089      	sub	sp, #36	; 0x24
 800f26a:	af04      	add	r7, sp, #16
 800f26c:	6078      	str	r0, [r7, #4]
 800f26e:	4608      	mov	r0, r1
 800f270:	4611      	mov	r1, r2
 800f272:	461a      	mov	r2, r3
 800f274:	4603      	mov	r3, r0
 800f276:	70fb      	strb	r3, [r7, #3]
 800f278:	460b      	mov	r3, r1
 800f27a:	70bb      	strb	r3, [r7, #2]
 800f27c:	4613      	mov	r3, r2
 800f27e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f280:	2300      	movs	r3, #0
 800f282:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f284:	2300      	movs	r3, #0
 800f286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f28e:	787c      	ldrb	r4, [r7, #1]
 800f290:	78ba      	ldrb	r2, [r7, #2]
 800f292:	78f9      	ldrb	r1, [r7, #3]
 800f294:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f298:	9303      	str	r3, [sp, #12]
 800f29a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f29c:	9302      	str	r3, [sp, #8]
 800f29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a0:	9301      	str	r3, [sp, #4]
 800f2a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f2a6:	9300      	str	r3, [sp, #0]
 800f2a8:	4623      	mov	r3, r4
 800f2aa:	f7f2 ff2f 	bl	800210c <HAL_HCD_HC_SubmitRequest>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f2b2:	7bfb      	ldrb	r3, [r7, #15]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f000 f89d 	bl	800f3f4 <USBH_Get_USB_Status>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2be:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3714      	adds	r7, #20
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd90      	pop	{r4, r7, pc}

0800f2c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f2da:	78fa      	ldrb	r2, [r7, #3]
 800f2dc:	4611      	mov	r1, r2
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7f3 f9bf 	bl	8002662 <HAL_HCD_HC_GetURBState>
 800f2e4:	4603      	mov	r3, r0
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3708      	adds	r7, #8
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}

0800f2ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f2ee:	b580      	push	{r7, lr}
 800f2f0:	b082      	sub	sp, #8
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f300:	2b01      	cmp	r3, #1
 800f302:	d103      	bne.n	800f30c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f304:	78fb      	ldrb	r3, [r7, #3]
 800f306:	4618      	mov	r0, r3
 800f308:	f000 f8a0 	bl	800f44c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f30c:	20c8      	movs	r0, #200	; 0xc8
 800f30e:	f7f2 fa8b 	bl	8001828 <HAL_Delay>
  return USBH_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	460b      	mov	r3, r1
 800f326:	70fb      	strb	r3, [r7, #3]
 800f328:	4613      	mov	r3, r2
 800f32a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f332:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f334:	78fb      	ldrb	r3, [r7, #3]
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	212c      	movs	r1, #44	; 0x2c
 800f33a:	fb01 f303 	mul.w	r3, r1, r3
 800f33e:	4413      	add	r3, r2
 800f340:	333b      	adds	r3, #59	; 0x3b
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d009      	beq.n	800f35c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f348:	78fb      	ldrb	r3, [r7, #3]
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	212c      	movs	r1, #44	; 0x2c
 800f34e:	fb01 f303 	mul.w	r3, r1, r3
 800f352:	4413      	add	r3, r2
 800f354:	3354      	adds	r3, #84	; 0x54
 800f356:	78ba      	ldrb	r2, [r7, #2]
 800f358:	701a      	strb	r2, [r3, #0]
 800f35a:	e008      	b.n	800f36e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f35c:	78fb      	ldrb	r3, [r7, #3]
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	212c      	movs	r1, #44	; 0x2c
 800f362:	fb01 f303 	mul.w	r3, r1, r3
 800f366:	4413      	add	r3, r2
 800f368:	3355      	adds	r3, #85	; 0x55
 800f36a:	78ba      	ldrb	r2, [r7, #2]
 800f36c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f36e:	2300      	movs	r3, #0
}
 800f370:	4618      	mov	r0, r3
 800f372:	3714      	adds	r7, #20
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr

0800f37c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b085      	sub	sp, #20
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	460b      	mov	r3, r1
 800f386:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f388:	2300      	movs	r3, #0
 800f38a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f392:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f394:	78fb      	ldrb	r3, [r7, #3]
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	212c      	movs	r1, #44	; 0x2c
 800f39a:	fb01 f303 	mul.w	r3, r1, r3
 800f39e:	4413      	add	r3, r2
 800f3a0:	333b      	adds	r3, #59	; 0x3b
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d009      	beq.n	800f3bc <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f3a8:	78fb      	ldrb	r3, [r7, #3]
 800f3aa:	68ba      	ldr	r2, [r7, #8]
 800f3ac:	212c      	movs	r1, #44	; 0x2c
 800f3ae:	fb01 f303 	mul.w	r3, r1, r3
 800f3b2:	4413      	add	r3, r2
 800f3b4:	3354      	adds	r3, #84	; 0x54
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	73fb      	strb	r3, [r7, #15]
 800f3ba:	e008      	b.n	800f3ce <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f3bc:	78fb      	ldrb	r3, [r7, #3]
 800f3be:	68ba      	ldr	r2, [r7, #8]
 800f3c0:	212c      	movs	r1, #44	; 0x2c
 800f3c2:	fb01 f303 	mul.w	r3, r1, r3
 800f3c6:	4413      	add	r3, r2
 800f3c8:	3355      	adds	r3, #85	; 0x55
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3714      	adds	r7, #20
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7f2 fa1f 	bl	8001828 <HAL_Delay>
}
 800f3ea:	bf00      	nop
 800f3ec:	3708      	adds	r7, #8
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
	...

0800f3f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b085      	sub	sp, #20
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f3fe:	2300      	movs	r3, #0
 800f400:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f402:	79fb      	ldrb	r3, [r7, #7]
 800f404:	2b03      	cmp	r3, #3
 800f406:	d817      	bhi.n	800f438 <USBH_Get_USB_Status+0x44>
 800f408:	a201      	add	r2, pc, #4	; (adr r2, 800f410 <USBH_Get_USB_Status+0x1c>)
 800f40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f40e:	bf00      	nop
 800f410:	0800f421 	.word	0x0800f421
 800f414:	0800f427 	.word	0x0800f427
 800f418:	0800f42d 	.word	0x0800f42d
 800f41c:	0800f433 	.word	0x0800f433
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f420:	2300      	movs	r3, #0
 800f422:	73fb      	strb	r3, [r7, #15]
    break;
 800f424:	e00b      	b.n	800f43e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f426:	2302      	movs	r3, #2
 800f428:	73fb      	strb	r3, [r7, #15]
    break;
 800f42a:	e008      	b.n	800f43e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f42c:	2301      	movs	r3, #1
 800f42e:	73fb      	strb	r3, [r7, #15]
    break;
 800f430:	e005      	b.n	800f43e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f432:	2302      	movs	r3, #2
 800f434:	73fb      	strb	r3, [r7, #15]
    break;
 800f436:	e002      	b.n	800f43e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f438:	2302      	movs	r3, #2
 800f43a:	73fb      	strb	r3, [r7, #15]
    break;
 800f43c:	bf00      	nop
  }
  return usb_status;
 800f43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f440:	4618      	mov	r0, r3
 800f442:	3714      	adds	r7, #20
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	4603      	mov	r3, r0
 800f454:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f456:	79fb      	ldrb	r3, [r7, #7]
 800f458:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f45a:	79fb      	ldrb	r3, [r7, #7]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d102      	bne.n	800f466 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f460:	2300      	movs	r3, #0
 800f462:	73fb      	strb	r3, [r7, #15]
 800f464:	e001      	b.n	800f46a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f466:	2301      	movs	r3, #1
 800f468:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
 800f46c:	461a      	mov	r2, r3
 800f46e:	2140      	movs	r1, #64	; 0x40
 800f470:	4803      	ldr	r0, [pc, #12]	; (800f480 <MX_DriverVbusFS+0x34>)
 800f472:	f7f2 fd1f 	bl	8001eb4 <HAL_GPIO_WritePin>
}
 800f476:	bf00      	nop
 800f478:	3710      	adds	r7, #16
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	48001800 	.word	0x48001800

0800f484 <__errno>:
 800f484:	4b01      	ldr	r3, [pc, #4]	; (800f48c <__errno+0x8>)
 800f486:	6818      	ldr	r0, [r3, #0]
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	2000002c 	.word	0x2000002c

0800f490 <__libc_init_array>:
 800f490:	b570      	push	{r4, r5, r6, lr}
 800f492:	4d0d      	ldr	r5, [pc, #52]	; (800f4c8 <__libc_init_array+0x38>)
 800f494:	4c0d      	ldr	r4, [pc, #52]	; (800f4cc <__libc_init_array+0x3c>)
 800f496:	1b64      	subs	r4, r4, r5
 800f498:	10a4      	asrs	r4, r4, #2
 800f49a:	2600      	movs	r6, #0
 800f49c:	42a6      	cmp	r6, r4
 800f49e:	d109      	bne.n	800f4b4 <__libc_init_array+0x24>
 800f4a0:	4d0b      	ldr	r5, [pc, #44]	; (800f4d0 <__libc_init_array+0x40>)
 800f4a2:	4c0c      	ldr	r4, [pc, #48]	; (800f4d4 <__libc_init_array+0x44>)
 800f4a4:	f001 f89e 	bl	80105e4 <_init>
 800f4a8:	1b64      	subs	r4, r4, r5
 800f4aa:	10a4      	asrs	r4, r4, #2
 800f4ac:	2600      	movs	r6, #0
 800f4ae:	42a6      	cmp	r6, r4
 800f4b0:	d105      	bne.n	800f4be <__libc_init_array+0x2e>
 800f4b2:	bd70      	pop	{r4, r5, r6, pc}
 800f4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4b8:	4798      	blx	r3
 800f4ba:	3601      	adds	r6, #1
 800f4bc:	e7ee      	b.n	800f49c <__libc_init_array+0xc>
 800f4be:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4c2:	4798      	blx	r3
 800f4c4:	3601      	adds	r6, #1
 800f4c6:	e7f2      	b.n	800f4ae <__libc_init_array+0x1e>
 800f4c8:	080110c0 	.word	0x080110c0
 800f4cc:	080110c0 	.word	0x080110c0
 800f4d0:	080110c0 	.word	0x080110c0
 800f4d4:	080110c4 	.word	0x080110c4

0800f4d8 <malloc>:
 800f4d8:	4b02      	ldr	r3, [pc, #8]	; (800f4e4 <malloc+0xc>)
 800f4da:	4601      	mov	r1, r0
 800f4dc:	6818      	ldr	r0, [r3, #0]
 800f4de:	f000 b88d 	b.w	800f5fc <_malloc_r>
 800f4e2:	bf00      	nop
 800f4e4:	2000002c 	.word	0x2000002c

0800f4e8 <free>:
 800f4e8:	4b02      	ldr	r3, [pc, #8]	; (800f4f4 <free+0xc>)
 800f4ea:	4601      	mov	r1, r0
 800f4ec:	6818      	ldr	r0, [r3, #0]
 800f4ee:	f000 b819 	b.w	800f524 <_free_r>
 800f4f2:	bf00      	nop
 800f4f4:	2000002c 	.word	0x2000002c

0800f4f8 <memcpy>:
 800f4f8:	440a      	add	r2, r1
 800f4fa:	4291      	cmp	r1, r2
 800f4fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f500:	d100      	bne.n	800f504 <memcpy+0xc>
 800f502:	4770      	bx	lr
 800f504:	b510      	push	{r4, lr}
 800f506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f50a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f50e:	4291      	cmp	r1, r2
 800f510:	d1f9      	bne.n	800f506 <memcpy+0xe>
 800f512:	bd10      	pop	{r4, pc}

0800f514 <memset>:
 800f514:	4402      	add	r2, r0
 800f516:	4603      	mov	r3, r0
 800f518:	4293      	cmp	r3, r2
 800f51a:	d100      	bne.n	800f51e <memset+0xa>
 800f51c:	4770      	bx	lr
 800f51e:	f803 1b01 	strb.w	r1, [r3], #1
 800f522:	e7f9      	b.n	800f518 <memset+0x4>

0800f524 <_free_r>:
 800f524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f526:	2900      	cmp	r1, #0
 800f528:	d044      	beq.n	800f5b4 <_free_r+0x90>
 800f52a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f52e:	9001      	str	r0, [sp, #4]
 800f530:	2b00      	cmp	r3, #0
 800f532:	f1a1 0404 	sub.w	r4, r1, #4
 800f536:	bfb8      	it	lt
 800f538:	18e4      	addlt	r4, r4, r3
 800f53a:	f000 fc59 	bl	800fdf0 <__malloc_lock>
 800f53e:	4a1e      	ldr	r2, [pc, #120]	; (800f5b8 <_free_r+0x94>)
 800f540:	9801      	ldr	r0, [sp, #4]
 800f542:	6813      	ldr	r3, [r2, #0]
 800f544:	b933      	cbnz	r3, 800f554 <_free_r+0x30>
 800f546:	6063      	str	r3, [r4, #4]
 800f548:	6014      	str	r4, [r2, #0]
 800f54a:	b003      	add	sp, #12
 800f54c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f550:	f000 bc54 	b.w	800fdfc <__malloc_unlock>
 800f554:	42a3      	cmp	r3, r4
 800f556:	d908      	bls.n	800f56a <_free_r+0x46>
 800f558:	6825      	ldr	r5, [r4, #0]
 800f55a:	1961      	adds	r1, r4, r5
 800f55c:	428b      	cmp	r3, r1
 800f55e:	bf01      	itttt	eq
 800f560:	6819      	ldreq	r1, [r3, #0]
 800f562:	685b      	ldreq	r3, [r3, #4]
 800f564:	1949      	addeq	r1, r1, r5
 800f566:	6021      	streq	r1, [r4, #0]
 800f568:	e7ed      	b.n	800f546 <_free_r+0x22>
 800f56a:	461a      	mov	r2, r3
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	b10b      	cbz	r3, 800f574 <_free_r+0x50>
 800f570:	42a3      	cmp	r3, r4
 800f572:	d9fa      	bls.n	800f56a <_free_r+0x46>
 800f574:	6811      	ldr	r1, [r2, #0]
 800f576:	1855      	adds	r5, r2, r1
 800f578:	42a5      	cmp	r5, r4
 800f57a:	d10b      	bne.n	800f594 <_free_r+0x70>
 800f57c:	6824      	ldr	r4, [r4, #0]
 800f57e:	4421      	add	r1, r4
 800f580:	1854      	adds	r4, r2, r1
 800f582:	42a3      	cmp	r3, r4
 800f584:	6011      	str	r1, [r2, #0]
 800f586:	d1e0      	bne.n	800f54a <_free_r+0x26>
 800f588:	681c      	ldr	r4, [r3, #0]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	6053      	str	r3, [r2, #4]
 800f58e:	4421      	add	r1, r4
 800f590:	6011      	str	r1, [r2, #0]
 800f592:	e7da      	b.n	800f54a <_free_r+0x26>
 800f594:	d902      	bls.n	800f59c <_free_r+0x78>
 800f596:	230c      	movs	r3, #12
 800f598:	6003      	str	r3, [r0, #0]
 800f59a:	e7d6      	b.n	800f54a <_free_r+0x26>
 800f59c:	6825      	ldr	r5, [r4, #0]
 800f59e:	1961      	adds	r1, r4, r5
 800f5a0:	428b      	cmp	r3, r1
 800f5a2:	bf04      	itt	eq
 800f5a4:	6819      	ldreq	r1, [r3, #0]
 800f5a6:	685b      	ldreq	r3, [r3, #4]
 800f5a8:	6063      	str	r3, [r4, #4]
 800f5aa:	bf04      	itt	eq
 800f5ac:	1949      	addeq	r1, r1, r5
 800f5ae:	6021      	streq	r1, [r4, #0]
 800f5b0:	6054      	str	r4, [r2, #4]
 800f5b2:	e7ca      	b.n	800f54a <_free_r+0x26>
 800f5b4:	b003      	add	sp, #12
 800f5b6:	bd30      	pop	{r4, r5, pc}
 800f5b8:	20002e84 	.word	0x20002e84

0800f5bc <sbrk_aligned>:
 800f5bc:	b570      	push	{r4, r5, r6, lr}
 800f5be:	4e0e      	ldr	r6, [pc, #56]	; (800f5f8 <sbrk_aligned+0x3c>)
 800f5c0:	460c      	mov	r4, r1
 800f5c2:	6831      	ldr	r1, [r6, #0]
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	b911      	cbnz	r1, 800f5ce <sbrk_aligned+0x12>
 800f5c8:	f000 f902 	bl	800f7d0 <_sbrk_r>
 800f5cc:	6030      	str	r0, [r6, #0]
 800f5ce:	4621      	mov	r1, r4
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f000 f8fd 	bl	800f7d0 <_sbrk_r>
 800f5d6:	1c43      	adds	r3, r0, #1
 800f5d8:	d00a      	beq.n	800f5f0 <sbrk_aligned+0x34>
 800f5da:	1cc4      	adds	r4, r0, #3
 800f5dc:	f024 0403 	bic.w	r4, r4, #3
 800f5e0:	42a0      	cmp	r0, r4
 800f5e2:	d007      	beq.n	800f5f4 <sbrk_aligned+0x38>
 800f5e4:	1a21      	subs	r1, r4, r0
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	f000 f8f2 	bl	800f7d0 <_sbrk_r>
 800f5ec:	3001      	adds	r0, #1
 800f5ee:	d101      	bne.n	800f5f4 <sbrk_aligned+0x38>
 800f5f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	bd70      	pop	{r4, r5, r6, pc}
 800f5f8:	20002e88 	.word	0x20002e88

0800f5fc <_malloc_r>:
 800f5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f600:	1ccd      	adds	r5, r1, #3
 800f602:	f025 0503 	bic.w	r5, r5, #3
 800f606:	3508      	adds	r5, #8
 800f608:	2d0c      	cmp	r5, #12
 800f60a:	bf38      	it	cc
 800f60c:	250c      	movcc	r5, #12
 800f60e:	2d00      	cmp	r5, #0
 800f610:	4607      	mov	r7, r0
 800f612:	db01      	blt.n	800f618 <_malloc_r+0x1c>
 800f614:	42a9      	cmp	r1, r5
 800f616:	d905      	bls.n	800f624 <_malloc_r+0x28>
 800f618:	230c      	movs	r3, #12
 800f61a:	603b      	str	r3, [r7, #0]
 800f61c:	2600      	movs	r6, #0
 800f61e:	4630      	mov	r0, r6
 800f620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f624:	4e2e      	ldr	r6, [pc, #184]	; (800f6e0 <_malloc_r+0xe4>)
 800f626:	f000 fbe3 	bl	800fdf0 <__malloc_lock>
 800f62a:	6833      	ldr	r3, [r6, #0]
 800f62c:	461c      	mov	r4, r3
 800f62e:	bb34      	cbnz	r4, 800f67e <_malloc_r+0x82>
 800f630:	4629      	mov	r1, r5
 800f632:	4638      	mov	r0, r7
 800f634:	f7ff ffc2 	bl	800f5bc <sbrk_aligned>
 800f638:	1c43      	adds	r3, r0, #1
 800f63a:	4604      	mov	r4, r0
 800f63c:	d14d      	bne.n	800f6da <_malloc_r+0xde>
 800f63e:	6834      	ldr	r4, [r6, #0]
 800f640:	4626      	mov	r6, r4
 800f642:	2e00      	cmp	r6, #0
 800f644:	d140      	bne.n	800f6c8 <_malloc_r+0xcc>
 800f646:	6823      	ldr	r3, [r4, #0]
 800f648:	4631      	mov	r1, r6
 800f64a:	4638      	mov	r0, r7
 800f64c:	eb04 0803 	add.w	r8, r4, r3
 800f650:	f000 f8be 	bl	800f7d0 <_sbrk_r>
 800f654:	4580      	cmp	r8, r0
 800f656:	d13a      	bne.n	800f6ce <_malloc_r+0xd2>
 800f658:	6821      	ldr	r1, [r4, #0]
 800f65a:	3503      	adds	r5, #3
 800f65c:	1a6d      	subs	r5, r5, r1
 800f65e:	f025 0503 	bic.w	r5, r5, #3
 800f662:	3508      	adds	r5, #8
 800f664:	2d0c      	cmp	r5, #12
 800f666:	bf38      	it	cc
 800f668:	250c      	movcc	r5, #12
 800f66a:	4629      	mov	r1, r5
 800f66c:	4638      	mov	r0, r7
 800f66e:	f7ff ffa5 	bl	800f5bc <sbrk_aligned>
 800f672:	3001      	adds	r0, #1
 800f674:	d02b      	beq.n	800f6ce <_malloc_r+0xd2>
 800f676:	6823      	ldr	r3, [r4, #0]
 800f678:	442b      	add	r3, r5
 800f67a:	6023      	str	r3, [r4, #0]
 800f67c:	e00e      	b.n	800f69c <_malloc_r+0xa0>
 800f67e:	6822      	ldr	r2, [r4, #0]
 800f680:	1b52      	subs	r2, r2, r5
 800f682:	d41e      	bmi.n	800f6c2 <_malloc_r+0xc6>
 800f684:	2a0b      	cmp	r2, #11
 800f686:	d916      	bls.n	800f6b6 <_malloc_r+0xba>
 800f688:	1961      	adds	r1, r4, r5
 800f68a:	42a3      	cmp	r3, r4
 800f68c:	6025      	str	r5, [r4, #0]
 800f68e:	bf18      	it	ne
 800f690:	6059      	strne	r1, [r3, #4]
 800f692:	6863      	ldr	r3, [r4, #4]
 800f694:	bf08      	it	eq
 800f696:	6031      	streq	r1, [r6, #0]
 800f698:	5162      	str	r2, [r4, r5]
 800f69a:	604b      	str	r3, [r1, #4]
 800f69c:	4638      	mov	r0, r7
 800f69e:	f104 060b 	add.w	r6, r4, #11
 800f6a2:	f000 fbab 	bl	800fdfc <__malloc_unlock>
 800f6a6:	f026 0607 	bic.w	r6, r6, #7
 800f6aa:	1d23      	adds	r3, r4, #4
 800f6ac:	1af2      	subs	r2, r6, r3
 800f6ae:	d0b6      	beq.n	800f61e <_malloc_r+0x22>
 800f6b0:	1b9b      	subs	r3, r3, r6
 800f6b2:	50a3      	str	r3, [r4, r2]
 800f6b4:	e7b3      	b.n	800f61e <_malloc_r+0x22>
 800f6b6:	6862      	ldr	r2, [r4, #4]
 800f6b8:	42a3      	cmp	r3, r4
 800f6ba:	bf0c      	ite	eq
 800f6bc:	6032      	streq	r2, [r6, #0]
 800f6be:	605a      	strne	r2, [r3, #4]
 800f6c0:	e7ec      	b.n	800f69c <_malloc_r+0xa0>
 800f6c2:	4623      	mov	r3, r4
 800f6c4:	6864      	ldr	r4, [r4, #4]
 800f6c6:	e7b2      	b.n	800f62e <_malloc_r+0x32>
 800f6c8:	4634      	mov	r4, r6
 800f6ca:	6876      	ldr	r6, [r6, #4]
 800f6cc:	e7b9      	b.n	800f642 <_malloc_r+0x46>
 800f6ce:	230c      	movs	r3, #12
 800f6d0:	603b      	str	r3, [r7, #0]
 800f6d2:	4638      	mov	r0, r7
 800f6d4:	f000 fb92 	bl	800fdfc <__malloc_unlock>
 800f6d8:	e7a1      	b.n	800f61e <_malloc_r+0x22>
 800f6da:	6025      	str	r5, [r4, #0]
 800f6dc:	e7de      	b.n	800f69c <_malloc_r+0xa0>
 800f6de:	bf00      	nop
 800f6e0:	20002e84 	.word	0x20002e84

0800f6e4 <_puts_r>:
 800f6e4:	b570      	push	{r4, r5, r6, lr}
 800f6e6:	460e      	mov	r6, r1
 800f6e8:	4605      	mov	r5, r0
 800f6ea:	b118      	cbz	r0, 800f6f4 <_puts_r+0x10>
 800f6ec:	6983      	ldr	r3, [r0, #24]
 800f6ee:	b90b      	cbnz	r3, 800f6f4 <_puts_r+0x10>
 800f6f0:	f000 fa78 	bl	800fbe4 <__sinit>
 800f6f4:	69ab      	ldr	r3, [r5, #24]
 800f6f6:	68ac      	ldr	r4, [r5, #8]
 800f6f8:	b913      	cbnz	r3, 800f700 <_puts_r+0x1c>
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f000 fa72 	bl	800fbe4 <__sinit>
 800f700:	4b2c      	ldr	r3, [pc, #176]	; (800f7b4 <_puts_r+0xd0>)
 800f702:	429c      	cmp	r4, r3
 800f704:	d120      	bne.n	800f748 <_puts_r+0x64>
 800f706:	686c      	ldr	r4, [r5, #4]
 800f708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f70a:	07db      	lsls	r3, r3, #31
 800f70c:	d405      	bmi.n	800f71a <_puts_r+0x36>
 800f70e:	89a3      	ldrh	r3, [r4, #12]
 800f710:	0598      	lsls	r0, r3, #22
 800f712:	d402      	bmi.n	800f71a <_puts_r+0x36>
 800f714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f716:	f000 fb03 	bl	800fd20 <__retarget_lock_acquire_recursive>
 800f71a:	89a3      	ldrh	r3, [r4, #12]
 800f71c:	0719      	lsls	r1, r3, #28
 800f71e:	d51d      	bpl.n	800f75c <_puts_r+0x78>
 800f720:	6923      	ldr	r3, [r4, #16]
 800f722:	b1db      	cbz	r3, 800f75c <_puts_r+0x78>
 800f724:	3e01      	subs	r6, #1
 800f726:	68a3      	ldr	r3, [r4, #8]
 800f728:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f72c:	3b01      	subs	r3, #1
 800f72e:	60a3      	str	r3, [r4, #8]
 800f730:	bb39      	cbnz	r1, 800f782 <_puts_r+0x9e>
 800f732:	2b00      	cmp	r3, #0
 800f734:	da38      	bge.n	800f7a8 <_puts_r+0xc4>
 800f736:	4622      	mov	r2, r4
 800f738:	210a      	movs	r1, #10
 800f73a:	4628      	mov	r0, r5
 800f73c:	f000 f878 	bl	800f830 <__swbuf_r>
 800f740:	3001      	adds	r0, #1
 800f742:	d011      	beq.n	800f768 <_puts_r+0x84>
 800f744:	250a      	movs	r5, #10
 800f746:	e011      	b.n	800f76c <_puts_r+0x88>
 800f748:	4b1b      	ldr	r3, [pc, #108]	; (800f7b8 <_puts_r+0xd4>)
 800f74a:	429c      	cmp	r4, r3
 800f74c:	d101      	bne.n	800f752 <_puts_r+0x6e>
 800f74e:	68ac      	ldr	r4, [r5, #8]
 800f750:	e7da      	b.n	800f708 <_puts_r+0x24>
 800f752:	4b1a      	ldr	r3, [pc, #104]	; (800f7bc <_puts_r+0xd8>)
 800f754:	429c      	cmp	r4, r3
 800f756:	bf08      	it	eq
 800f758:	68ec      	ldreq	r4, [r5, #12]
 800f75a:	e7d5      	b.n	800f708 <_puts_r+0x24>
 800f75c:	4621      	mov	r1, r4
 800f75e:	4628      	mov	r0, r5
 800f760:	f000 f8b8 	bl	800f8d4 <__swsetup_r>
 800f764:	2800      	cmp	r0, #0
 800f766:	d0dd      	beq.n	800f724 <_puts_r+0x40>
 800f768:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f76c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f76e:	07da      	lsls	r2, r3, #31
 800f770:	d405      	bmi.n	800f77e <_puts_r+0x9a>
 800f772:	89a3      	ldrh	r3, [r4, #12]
 800f774:	059b      	lsls	r3, r3, #22
 800f776:	d402      	bmi.n	800f77e <_puts_r+0x9a>
 800f778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f77a:	f000 fad2 	bl	800fd22 <__retarget_lock_release_recursive>
 800f77e:	4628      	mov	r0, r5
 800f780:	bd70      	pop	{r4, r5, r6, pc}
 800f782:	2b00      	cmp	r3, #0
 800f784:	da04      	bge.n	800f790 <_puts_r+0xac>
 800f786:	69a2      	ldr	r2, [r4, #24]
 800f788:	429a      	cmp	r2, r3
 800f78a:	dc06      	bgt.n	800f79a <_puts_r+0xb6>
 800f78c:	290a      	cmp	r1, #10
 800f78e:	d004      	beq.n	800f79a <_puts_r+0xb6>
 800f790:	6823      	ldr	r3, [r4, #0]
 800f792:	1c5a      	adds	r2, r3, #1
 800f794:	6022      	str	r2, [r4, #0]
 800f796:	7019      	strb	r1, [r3, #0]
 800f798:	e7c5      	b.n	800f726 <_puts_r+0x42>
 800f79a:	4622      	mov	r2, r4
 800f79c:	4628      	mov	r0, r5
 800f79e:	f000 f847 	bl	800f830 <__swbuf_r>
 800f7a2:	3001      	adds	r0, #1
 800f7a4:	d1bf      	bne.n	800f726 <_puts_r+0x42>
 800f7a6:	e7df      	b.n	800f768 <_puts_r+0x84>
 800f7a8:	6823      	ldr	r3, [r4, #0]
 800f7aa:	250a      	movs	r5, #10
 800f7ac:	1c5a      	adds	r2, r3, #1
 800f7ae:	6022      	str	r2, [r4, #0]
 800f7b0:	701d      	strb	r5, [r3, #0]
 800f7b2:	e7db      	b.n	800f76c <_puts_r+0x88>
 800f7b4:	08011044 	.word	0x08011044
 800f7b8:	08011064 	.word	0x08011064
 800f7bc:	08011024 	.word	0x08011024

0800f7c0 <puts>:
 800f7c0:	4b02      	ldr	r3, [pc, #8]	; (800f7cc <puts+0xc>)
 800f7c2:	4601      	mov	r1, r0
 800f7c4:	6818      	ldr	r0, [r3, #0]
 800f7c6:	f7ff bf8d 	b.w	800f6e4 <_puts_r>
 800f7ca:	bf00      	nop
 800f7cc:	2000002c 	.word	0x2000002c

0800f7d0 <_sbrk_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	4d06      	ldr	r5, [pc, #24]	; (800f7ec <_sbrk_r+0x1c>)
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	4604      	mov	r4, r0
 800f7d8:	4608      	mov	r0, r1
 800f7da:	602b      	str	r3, [r5, #0]
 800f7dc:	f7f1 ff3e 	bl	800165c <_sbrk>
 800f7e0:	1c43      	adds	r3, r0, #1
 800f7e2:	d102      	bne.n	800f7ea <_sbrk_r+0x1a>
 800f7e4:	682b      	ldr	r3, [r5, #0]
 800f7e6:	b103      	cbz	r3, 800f7ea <_sbrk_r+0x1a>
 800f7e8:	6023      	str	r3, [r4, #0]
 800f7ea:	bd38      	pop	{r3, r4, r5, pc}
 800f7ec:	20002e90 	.word	0x20002e90

0800f7f0 <siprintf>:
 800f7f0:	b40e      	push	{r1, r2, r3}
 800f7f2:	b500      	push	{lr}
 800f7f4:	b09c      	sub	sp, #112	; 0x70
 800f7f6:	ab1d      	add	r3, sp, #116	; 0x74
 800f7f8:	9002      	str	r0, [sp, #8]
 800f7fa:	9006      	str	r0, [sp, #24]
 800f7fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f800:	4809      	ldr	r0, [pc, #36]	; (800f828 <siprintf+0x38>)
 800f802:	9107      	str	r1, [sp, #28]
 800f804:	9104      	str	r1, [sp, #16]
 800f806:	4909      	ldr	r1, [pc, #36]	; (800f82c <siprintf+0x3c>)
 800f808:	f853 2b04 	ldr.w	r2, [r3], #4
 800f80c:	9105      	str	r1, [sp, #20]
 800f80e:	6800      	ldr	r0, [r0, #0]
 800f810:	9301      	str	r3, [sp, #4]
 800f812:	a902      	add	r1, sp, #8
 800f814:	f000 fb54 	bl	800fec0 <_svfiprintf_r>
 800f818:	9b02      	ldr	r3, [sp, #8]
 800f81a:	2200      	movs	r2, #0
 800f81c:	701a      	strb	r2, [r3, #0]
 800f81e:	b01c      	add	sp, #112	; 0x70
 800f820:	f85d eb04 	ldr.w	lr, [sp], #4
 800f824:	b003      	add	sp, #12
 800f826:	4770      	bx	lr
 800f828:	2000002c 	.word	0x2000002c
 800f82c:	ffff0208 	.word	0xffff0208

0800f830 <__swbuf_r>:
 800f830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f832:	460e      	mov	r6, r1
 800f834:	4614      	mov	r4, r2
 800f836:	4605      	mov	r5, r0
 800f838:	b118      	cbz	r0, 800f842 <__swbuf_r+0x12>
 800f83a:	6983      	ldr	r3, [r0, #24]
 800f83c:	b90b      	cbnz	r3, 800f842 <__swbuf_r+0x12>
 800f83e:	f000 f9d1 	bl	800fbe4 <__sinit>
 800f842:	4b21      	ldr	r3, [pc, #132]	; (800f8c8 <__swbuf_r+0x98>)
 800f844:	429c      	cmp	r4, r3
 800f846:	d12b      	bne.n	800f8a0 <__swbuf_r+0x70>
 800f848:	686c      	ldr	r4, [r5, #4]
 800f84a:	69a3      	ldr	r3, [r4, #24]
 800f84c:	60a3      	str	r3, [r4, #8]
 800f84e:	89a3      	ldrh	r3, [r4, #12]
 800f850:	071a      	lsls	r2, r3, #28
 800f852:	d52f      	bpl.n	800f8b4 <__swbuf_r+0x84>
 800f854:	6923      	ldr	r3, [r4, #16]
 800f856:	b36b      	cbz	r3, 800f8b4 <__swbuf_r+0x84>
 800f858:	6923      	ldr	r3, [r4, #16]
 800f85a:	6820      	ldr	r0, [r4, #0]
 800f85c:	1ac0      	subs	r0, r0, r3
 800f85e:	6963      	ldr	r3, [r4, #20]
 800f860:	b2f6      	uxtb	r6, r6
 800f862:	4283      	cmp	r3, r0
 800f864:	4637      	mov	r7, r6
 800f866:	dc04      	bgt.n	800f872 <__swbuf_r+0x42>
 800f868:	4621      	mov	r1, r4
 800f86a:	4628      	mov	r0, r5
 800f86c:	f000 f926 	bl	800fabc <_fflush_r>
 800f870:	bb30      	cbnz	r0, 800f8c0 <__swbuf_r+0x90>
 800f872:	68a3      	ldr	r3, [r4, #8]
 800f874:	3b01      	subs	r3, #1
 800f876:	60a3      	str	r3, [r4, #8]
 800f878:	6823      	ldr	r3, [r4, #0]
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	6022      	str	r2, [r4, #0]
 800f87e:	701e      	strb	r6, [r3, #0]
 800f880:	6963      	ldr	r3, [r4, #20]
 800f882:	3001      	adds	r0, #1
 800f884:	4283      	cmp	r3, r0
 800f886:	d004      	beq.n	800f892 <__swbuf_r+0x62>
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	07db      	lsls	r3, r3, #31
 800f88c:	d506      	bpl.n	800f89c <__swbuf_r+0x6c>
 800f88e:	2e0a      	cmp	r6, #10
 800f890:	d104      	bne.n	800f89c <__swbuf_r+0x6c>
 800f892:	4621      	mov	r1, r4
 800f894:	4628      	mov	r0, r5
 800f896:	f000 f911 	bl	800fabc <_fflush_r>
 800f89a:	b988      	cbnz	r0, 800f8c0 <__swbuf_r+0x90>
 800f89c:	4638      	mov	r0, r7
 800f89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8a0:	4b0a      	ldr	r3, [pc, #40]	; (800f8cc <__swbuf_r+0x9c>)
 800f8a2:	429c      	cmp	r4, r3
 800f8a4:	d101      	bne.n	800f8aa <__swbuf_r+0x7a>
 800f8a6:	68ac      	ldr	r4, [r5, #8]
 800f8a8:	e7cf      	b.n	800f84a <__swbuf_r+0x1a>
 800f8aa:	4b09      	ldr	r3, [pc, #36]	; (800f8d0 <__swbuf_r+0xa0>)
 800f8ac:	429c      	cmp	r4, r3
 800f8ae:	bf08      	it	eq
 800f8b0:	68ec      	ldreq	r4, [r5, #12]
 800f8b2:	e7ca      	b.n	800f84a <__swbuf_r+0x1a>
 800f8b4:	4621      	mov	r1, r4
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	f000 f80c 	bl	800f8d4 <__swsetup_r>
 800f8bc:	2800      	cmp	r0, #0
 800f8be:	d0cb      	beq.n	800f858 <__swbuf_r+0x28>
 800f8c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f8c4:	e7ea      	b.n	800f89c <__swbuf_r+0x6c>
 800f8c6:	bf00      	nop
 800f8c8:	08011044 	.word	0x08011044
 800f8cc:	08011064 	.word	0x08011064
 800f8d0:	08011024 	.word	0x08011024

0800f8d4 <__swsetup_r>:
 800f8d4:	4b32      	ldr	r3, [pc, #200]	; (800f9a0 <__swsetup_r+0xcc>)
 800f8d6:	b570      	push	{r4, r5, r6, lr}
 800f8d8:	681d      	ldr	r5, [r3, #0]
 800f8da:	4606      	mov	r6, r0
 800f8dc:	460c      	mov	r4, r1
 800f8de:	b125      	cbz	r5, 800f8ea <__swsetup_r+0x16>
 800f8e0:	69ab      	ldr	r3, [r5, #24]
 800f8e2:	b913      	cbnz	r3, 800f8ea <__swsetup_r+0x16>
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	f000 f97d 	bl	800fbe4 <__sinit>
 800f8ea:	4b2e      	ldr	r3, [pc, #184]	; (800f9a4 <__swsetup_r+0xd0>)
 800f8ec:	429c      	cmp	r4, r3
 800f8ee:	d10f      	bne.n	800f910 <__swsetup_r+0x3c>
 800f8f0:	686c      	ldr	r4, [r5, #4]
 800f8f2:	89a3      	ldrh	r3, [r4, #12]
 800f8f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8f8:	0719      	lsls	r1, r3, #28
 800f8fa:	d42c      	bmi.n	800f956 <__swsetup_r+0x82>
 800f8fc:	06dd      	lsls	r5, r3, #27
 800f8fe:	d411      	bmi.n	800f924 <__swsetup_r+0x50>
 800f900:	2309      	movs	r3, #9
 800f902:	6033      	str	r3, [r6, #0]
 800f904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f908:	81a3      	strh	r3, [r4, #12]
 800f90a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f90e:	e03e      	b.n	800f98e <__swsetup_r+0xba>
 800f910:	4b25      	ldr	r3, [pc, #148]	; (800f9a8 <__swsetup_r+0xd4>)
 800f912:	429c      	cmp	r4, r3
 800f914:	d101      	bne.n	800f91a <__swsetup_r+0x46>
 800f916:	68ac      	ldr	r4, [r5, #8]
 800f918:	e7eb      	b.n	800f8f2 <__swsetup_r+0x1e>
 800f91a:	4b24      	ldr	r3, [pc, #144]	; (800f9ac <__swsetup_r+0xd8>)
 800f91c:	429c      	cmp	r4, r3
 800f91e:	bf08      	it	eq
 800f920:	68ec      	ldreq	r4, [r5, #12]
 800f922:	e7e6      	b.n	800f8f2 <__swsetup_r+0x1e>
 800f924:	0758      	lsls	r0, r3, #29
 800f926:	d512      	bpl.n	800f94e <__swsetup_r+0x7a>
 800f928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f92a:	b141      	cbz	r1, 800f93e <__swsetup_r+0x6a>
 800f92c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f930:	4299      	cmp	r1, r3
 800f932:	d002      	beq.n	800f93a <__swsetup_r+0x66>
 800f934:	4630      	mov	r0, r6
 800f936:	f7ff fdf5 	bl	800f524 <_free_r>
 800f93a:	2300      	movs	r3, #0
 800f93c:	6363      	str	r3, [r4, #52]	; 0x34
 800f93e:	89a3      	ldrh	r3, [r4, #12]
 800f940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f944:	81a3      	strh	r3, [r4, #12]
 800f946:	2300      	movs	r3, #0
 800f948:	6063      	str	r3, [r4, #4]
 800f94a:	6923      	ldr	r3, [r4, #16]
 800f94c:	6023      	str	r3, [r4, #0]
 800f94e:	89a3      	ldrh	r3, [r4, #12]
 800f950:	f043 0308 	orr.w	r3, r3, #8
 800f954:	81a3      	strh	r3, [r4, #12]
 800f956:	6923      	ldr	r3, [r4, #16]
 800f958:	b94b      	cbnz	r3, 800f96e <__swsetup_r+0x9a>
 800f95a:	89a3      	ldrh	r3, [r4, #12]
 800f95c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f964:	d003      	beq.n	800f96e <__swsetup_r+0x9a>
 800f966:	4621      	mov	r1, r4
 800f968:	4630      	mov	r0, r6
 800f96a:	f000 fa01 	bl	800fd70 <__smakebuf_r>
 800f96e:	89a0      	ldrh	r0, [r4, #12]
 800f970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f974:	f010 0301 	ands.w	r3, r0, #1
 800f978:	d00a      	beq.n	800f990 <__swsetup_r+0xbc>
 800f97a:	2300      	movs	r3, #0
 800f97c:	60a3      	str	r3, [r4, #8]
 800f97e:	6963      	ldr	r3, [r4, #20]
 800f980:	425b      	negs	r3, r3
 800f982:	61a3      	str	r3, [r4, #24]
 800f984:	6923      	ldr	r3, [r4, #16]
 800f986:	b943      	cbnz	r3, 800f99a <__swsetup_r+0xc6>
 800f988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f98c:	d1ba      	bne.n	800f904 <__swsetup_r+0x30>
 800f98e:	bd70      	pop	{r4, r5, r6, pc}
 800f990:	0781      	lsls	r1, r0, #30
 800f992:	bf58      	it	pl
 800f994:	6963      	ldrpl	r3, [r4, #20]
 800f996:	60a3      	str	r3, [r4, #8]
 800f998:	e7f4      	b.n	800f984 <__swsetup_r+0xb0>
 800f99a:	2000      	movs	r0, #0
 800f99c:	e7f7      	b.n	800f98e <__swsetup_r+0xba>
 800f99e:	bf00      	nop
 800f9a0:	2000002c 	.word	0x2000002c
 800f9a4:	08011044 	.word	0x08011044
 800f9a8:	08011064 	.word	0x08011064
 800f9ac:	08011024 	.word	0x08011024

0800f9b0 <__sflush_r>:
 800f9b0:	898a      	ldrh	r2, [r1, #12]
 800f9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b6:	4605      	mov	r5, r0
 800f9b8:	0710      	lsls	r0, r2, #28
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	d458      	bmi.n	800fa70 <__sflush_r+0xc0>
 800f9be:	684b      	ldr	r3, [r1, #4]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	dc05      	bgt.n	800f9d0 <__sflush_r+0x20>
 800f9c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	dc02      	bgt.n	800f9d0 <__sflush_r+0x20>
 800f9ca:	2000      	movs	r0, #0
 800f9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9d2:	2e00      	cmp	r6, #0
 800f9d4:	d0f9      	beq.n	800f9ca <__sflush_r+0x1a>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f9dc:	682f      	ldr	r7, [r5, #0]
 800f9de:	602b      	str	r3, [r5, #0]
 800f9e0:	d032      	beq.n	800fa48 <__sflush_r+0x98>
 800f9e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f9e4:	89a3      	ldrh	r3, [r4, #12]
 800f9e6:	075a      	lsls	r2, r3, #29
 800f9e8:	d505      	bpl.n	800f9f6 <__sflush_r+0x46>
 800f9ea:	6863      	ldr	r3, [r4, #4]
 800f9ec:	1ac0      	subs	r0, r0, r3
 800f9ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9f0:	b10b      	cbz	r3, 800f9f6 <__sflush_r+0x46>
 800f9f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f9f4:	1ac0      	subs	r0, r0, r3
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9fc:	6a21      	ldr	r1, [r4, #32]
 800f9fe:	4628      	mov	r0, r5
 800fa00:	47b0      	blx	r6
 800fa02:	1c43      	adds	r3, r0, #1
 800fa04:	89a3      	ldrh	r3, [r4, #12]
 800fa06:	d106      	bne.n	800fa16 <__sflush_r+0x66>
 800fa08:	6829      	ldr	r1, [r5, #0]
 800fa0a:	291d      	cmp	r1, #29
 800fa0c:	d82c      	bhi.n	800fa68 <__sflush_r+0xb8>
 800fa0e:	4a2a      	ldr	r2, [pc, #168]	; (800fab8 <__sflush_r+0x108>)
 800fa10:	40ca      	lsrs	r2, r1
 800fa12:	07d6      	lsls	r6, r2, #31
 800fa14:	d528      	bpl.n	800fa68 <__sflush_r+0xb8>
 800fa16:	2200      	movs	r2, #0
 800fa18:	6062      	str	r2, [r4, #4]
 800fa1a:	04d9      	lsls	r1, r3, #19
 800fa1c:	6922      	ldr	r2, [r4, #16]
 800fa1e:	6022      	str	r2, [r4, #0]
 800fa20:	d504      	bpl.n	800fa2c <__sflush_r+0x7c>
 800fa22:	1c42      	adds	r2, r0, #1
 800fa24:	d101      	bne.n	800fa2a <__sflush_r+0x7a>
 800fa26:	682b      	ldr	r3, [r5, #0]
 800fa28:	b903      	cbnz	r3, 800fa2c <__sflush_r+0x7c>
 800fa2a:	6560      	str	r0, [r4, #84]	; 0x54
 800fa2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa2e:	602f      	str	r7, [r5, #0]
 800fa30:	2900      	cmp	r1, #0
 800fa32:	d0ca      	beq.n	800f9ca <__sflush_r+0x1a>
 800fa34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa38:	4299      	cmp	r1, r3
 800fa3a:	d002      	beq.n	800fa42 <__sflush_r+0x92>
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	f7ff fd71 	bl	800f524 <_free_r>
 800fa42:	2000      	movs	r0, #0
 800fa44:	6360      	str	r0, [r4, #52]	; 0x34
 800fa46:	e7c1      	b.n	800f9cc <__sflush_r+0x1c>
 800fa48:	6a21      	ldr	r1, [r4, #32]
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	47b0      	blx	r6
 800fa50:	1c41      	adds	r1, r0, #1
 800fa52:	d1c7      	bne.n	800f9e4 <__sflush_r+0x34>
 800fa54:	682b      	ldr	r3, [r5, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d0c4      	beq.n	800f9e4 <__sflush_r+0x34>
 800fa5a:	2b1d      	cmp	r3, #29
 800fa5c:	d001      	beq.n	800fa62 <__sflush_r+0xb2>
 800fa5e:	2b16      	cmp	r3, #22
 800fa60:	d101      	bne.n	800fa66 <__sflush_r+0xb6>
 800fa62:	602f      	str	r7, [r5, #0]
 800fa64:	e7b1      	b.n	800f9ca <__sflush_r+0x1a>
 800fa66:	89a3      	ldrh	r3, [r4, #12]
 800fa68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa6c:	81a3      	strh	r3, [r4, #12]
 800fa6e:	e7ad      	b.n	800f9cc <__sflush_r+0x1c>
 800fa70:	690f      	ldr	r7, [r1, #16]
 800fa72:	2f00      	cmp	r7, #0
 800fa74:	d0a9      	beq.n	800f9ca <__sflush_r+0x1a>
 800fa76:	0793      	lsls	r3, r2, #30
 800fa78:	680e      	ldr	r6, [r1, #0]
 800fa7a:	bf08      	it	eq
 800fa7c:	694b      	ldreq	r3, [r1, #20]
 800fa7e:	600f      	str	r7, [r1, #0]
 800fa80:	bf18      	it	ne
 800fa82:	2300      	movne	r3, #0
 800fa84:	eba6 0807 	sub.w	r8, r6, r7
 800fa88:	608b      	str	r3, [r1, #8]
 800fa8a:	f1b8 0f00 	cmp.w	r8, #0
 800fa8e:	dd9c      	ble.n	800f9ca <__sflush_r+0x1a>
 800fa90:	6a21      	ldr	r1, [r4, #32]
 800fa92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa94:	4643      	mov	r3, r8
 800fa96:	463a      	mov	r2, r7
 800fa98:	4628      	mov	r0, r5
 800fa9a:	47b0      	blx	r6
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	dc06      	bgt.n	800faae <__sflush_r+0xfe>
 800faa0:	89a3      	ldrh	r3, [r4, #12]
 800faa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faa6:	81a3      	strh	r3, [r4, #12]
 800faa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800faac:	e78e      	b.n	800f9cc <__sflush_r+0x1c>
 800faae:	4407      	add	r7, r0
 800fab0:	eba8 0800 	sub.w	r8, r8, r0
 800fab4:	e7e9      	b.n	800fa8a <__sflush_r+0xda>
 800fab6:	bf00      	nop
 800fab8:	20400001 	.word	0x20400001

0800fabc <_fflush_r>:
 800fabc:	b538      	push	{r3, r4, r5, lr}
 800fabe:	690b      	ldr	r3, [r1, #16]
 800fac0:	4605      	mov	r5, r0
 800fac2:	460c      	mov	r4, r1
 800fac4:	b913      	cbnz	r3, 800facc <_fflush_r+0x10>
 800fac6:	2500      	movs	r5, #0
 800fac8:	4628      	mov	r0, r5
 800faca:	bd38      	pop	{r3, r4, r5, pc}
 800facc:	b118      	cbz	r0, 800fad6 <_fflush_r+0x1a>
 800face:	6983      	ldr	r3, [r0, #24]
 800fad0:	b90b      	cbnz	r3, 800fad6 <_fflush_r+0x1a>
 800fad2:	f000 f887 	bl	800fbe4 <__sinit>
 800fad6:	4b14      	ldr	r3, [pc, #80]	; (800fb28 <_fflush_r+0x6c>)
 800fad8:	429c      	cmp	r4, r3
 800fada:	d11b      	bne.n	800fb14 <_fflush_r+0x58>
 800fadc:	686c      	ldr	r4, [r5, #4]
 800fade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d0ef      	beq.n	800fac6 <_fflush_r+0xa>
 800fae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fae8:	07d0      	lsls	r0, r2, #31
 800faea:	d404      	bmi.n	800faf6 <_fflush_r+0x3a>
 800faec:	0599      	lsls	r1, r3, #22
 800faee:	d402      	bmi.n	800faf6 <_fflush_r+0x3a>
 800faf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800faf2:	f000 f915 	bl	800fd20 <__retarget_lock_acquire_recursive>
 800faf6:	4628      	mov	r0, r5
 800faf8:	4621      	mov	r1, r4
 800fafa:	f7ff ff59 	bl	800f9b0 <__sflush_r>
 800fafe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb00:	07da      	lsls	r2, r3, #31
 800fb02:	4605      	mov	r5, r0
 800fb04:	d4e0      	bmi.n	800fac8 <_fflush_r+0xc>
 800fb06:	89a3      	ldrh	r3, [r4, #12]
 800fb08:	059b      	lsls	r3, r3, #22
 800fb0a:	d4dd      	bmi.n	800fac8 <_fflush_r+0xc>
 800fb0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb0e:	f000 f908 	bl	800fd22 <__retarget_lock_release_recursive>
 800fb12:	e7d9      	b.n	800fac8 <_fflush_r+0xc>
 800fb14:	4b05      	ldr	r3, [pc, #20]	; (800fb2c <_fflush_r+0x70>)
 800fb16:	429c      	cmp	r4, r3
 800fb18:	d101      	bne.n	800fb1e <_fflush_r+0x62>
 800fb1a:	68ac      	ldr	r4, [r5, #8]
 800fb1c:	e7df      	b.n	800fade <_fflush_r+0x22>
 800fb1e:	4b04      	ldr	r3, [pc, #16]	; (800fb30 <_fflush_r+0x74>)
 800fb20:	429c      	cmp	r4, r3
 800fb22:	bf08      	it	eq
 800fb24:	68ec      	ldreq	r4, [r5, #12]
 800fb26:	e7da      	b.n	800fade <_fflush_r+0x22>
 800fb28:	08011044 	.word	0x08011044
 800fb2c:	08011064 	.word	0x08011064
 800fb30:	08011024 	.word	0x08011024

0800fb34 <std>:
 800fb34:	2300      	movs	r3, #0
 800fb36:	b510      	push	{r4, lr}
 800fb38:	4604      	mov	r4, r0
 800fb3a:	e9c0 3300 	strd	r3, r3, [r0]
 800fb3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb42:	6083      	str	r3, [r0, #8]
 800fb44:	8181      	strh	r1, [r0, #12]
 800fb46:	6643      	str	r3, [r0, #100]	; 0x64
 800fb48:	81c2      	strh	r2, [r0, #14]
 800fb4a:	6183      	str	r3, [r0, #24]
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	2208      	movs	r2, #8
 800fb50:	305c      	adds	r0, #92	; 0x5c
 800fb52:	f7ff fcdf 	bl	800f514 <memset>
 800fb56:	4b05      	ldr	r3, [pc, #20]	; (800fb6c <std+0x38>)
 800fb58:	6263      	str	r3, [r4, #36]	; 0x24
 800fb5a:	4b05      	ldr	r3, [pc, #20]	; (800fb70 <std+0x3c>)
 800fb5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800fb5e:	4b05      	ldr	r3, [pc, #20]	; (800fb74 <std+0x40>)
 800fb60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fb62:	4b05      	ldr	r3, [pc, #20]	; (800fb78 <std+0x44>)
 800fb64:	6224      	str	r4, [r4, #32]
 800fb66:	6323      	str	r3, [r4, #48]	; 0x30
 800fb68:	bd10      	pop	{r4, pc}
 800fb6a:	bf00      	nop
 800fb6c:	080103e9 	.word	0x080103e9
 800fb70:	0801040b 	.word	0x0801040b
 800fb74:	08010443 	.word	0x08010443
 800fb78:	08010467 	.word	0x08010467

0800fb7c <_cleanup_r>:
 800fb7c:	4901      	ldr	r1, [pc, #4]	; (800fb84 <_cleanup_r+0x8>)
 800fb7e:	f000 b8af 	b.w	800fce0 <_fwalk_reent>
 800fb82:	bf00      	nop
 800fb84:	0800fabd 	.word	0x0800fabd

0800fb88 <__sfmoreglue>:
 800fb88:	b570      	push	{r4, r5, r6, lr}
 800fb8a:	2268      	movs	r2, #104	; 0x68
 800fb8c:	1e4d      	subs	r5, r1, #1
 800fb8e:	4355      	muls	r5, r2
 800fb90:	460e      	mov	r6, r1
 800fb92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fb96:	f7ff fd31 	bl	800f5fc <_malloc_r>
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	b140      	cbz	r0, 800fbb0 <__sfmoreglue+0x28>
 800fb9e:	2100      	movs	r1, #0
 800fba0:	e9c0 1600 	strd	r1, r6, [r0]
 800fba4:	300c      	adds	r0, #12
 800fba6:	60a0      	str	r0, [r4, #8]
 800fba8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fbac:	f7ff fcb2 	bl	800f514 <memset>
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	bd70      	pop	{r4, r5, r6, pc}

0800fbb4 <__sfp_lock_acquire>:
 800fbb4:	4801      	ldr	r0, [pc, #4]	; (800fbbc <__sfp_lock_acquire+0x8>)
 800fbb6:	f000 b8b3 	b.w	800fd20 <__retarget_lock_acquire_recursive>
 800fbba:	bf00      	nop
 800fbbc:	20002e8d 	.word	0x20002e8d

0800fbc0 <__sfp_lock_release>:
 800fbc0:	4801      	ldr	r0, [pc, #4]	; (800fbc8 <__sfp_lock_release+0x8>)
 800fbc2:	f000 b8ae 	b.w	800fd22 <__retarget_lock_release_recursive>
 800fbc6:	bf00      	nop
 800fbc8:	20002e8d 	.word	0x20002e8d

0800fbcc <__sinit_lock_acquire>:
 800fbcc:	4801      	ldr	r0, [pc, #4]	; (800fbd4 <__sinit_lock_acquire+0x8>)
 800fbce:	f000 b8a7 	b.w	800fd20 <__retarget_lock_acquire_recursive>
 800fbd2:	bf00      	nop
 800fbd4:	20002e8e 	.word	0x20002e8e

0800fbd8 <__sinit_lock_release>:
 800fbd8:	4801      	ldr	r0, [pc, #4]	; (800fbe0 <__sinit_lock_release+0x8>)
 800fbda:	f000 b8a2 	b.w	800fd22 <__retarget_lock_release_recursive>
 800fbde:	bf00      	nop
 800fbe0:	20002e8e 	.word	0x20002e8e

0800fbe4 <__sinit>:
 800fbe4:	b510      	push	{r4, lr}
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	f7ff fff0 	bl	800fbcc <__sinit_lock_acquire>
 800fbec:	69a3      	ldr	r3, [r4, #24]
 800fbee:	b11b      	cbz	r3, 800fbf8 <__sinit+0x14>
 800fbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbf4:	f7ff bff0 	b.w	800fbd8 <__sinit_lock_release>
 800fbf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fbfc:	6523      	str	r3, [r4, #80]	; 0x50
 800fbfe:	4b13      	ldr	r3, [pc, #76]	; (800fc4c <__sinit+0x68>)
 800fc00:	4a13      	ldr	r2, [pc, #76]	; (800fc50 <__sinit+0x6c>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	62a2      	str	r2, [r4, #40]	; 0x28
 800fc06:	42a3      	cmp	r3, r4
 800fc08:	bf04      	itt	eq
 800fc0a:	2301      	moveq	r3, #1
 800fc0c:	61a3      	streq	r3, [r4, #24]
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f000 f820 	bl	800fc54 <__sfp>
 800fc14:	6060      	str	r0, [r4, #4]
 800fc16:	4620      	mov	r0, r4
 800fc18:	f000 f81c 	bl	800fc54 <__sfp>
 800fc1c:	60a0      	str	r0, [r4, #8]
 800fc1e:	4620      	mov	r0, r4
 800fc20:	f000 f818 	bl	800fc54 <__sfp>
 800fc24:	2200      	movs	r2, #0
 800fc26:	60e0      	str	r0, [r4, #12]
 800fc28:	2104      	movs	r1, #4
 800fc2a:	6860      	ldr	r0, [r4, #4]
 800fc2c:	f7ff ff82 	bl	800fb34 <std>
 800fc30:	68a0      	ldr	r0, [r4, #8]
 800fc32:	2201      	movs	r2, #1
 800fc34:	2109      	movs	r1, #9
 800fc36:	f7ff ff7d 	bl	800fb34 <std>
 800fc3a:	68e0      	ldr	r0, [r4, #12]
 800fc3c:	2202      	movs	r2, #2
 800fc3e:	2112      	movs	r1, #18
 800fc40:	f7ff ff78 	bl	800fb34 <std>
 800fc44:	2301      	movs	r3, #1
 800fc46:	61a3      	str	r3, [r4, #24]
 800fc48:	e7d2      	b.n	800fbf0 <__sinit+0xc>
 800fc4a:	bf00      	nop
 800fc4c:	08011020 	.word	0x08011020
 800fc50:	0800fb7d 	.word	0x0800fb7d

0800fc54 <__sfp>:
 800fc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc56:	4607      	mov	r7, r0
 800fc58:	f7ff ffac 	bl	800fbb4 <__sfp_lock_acquire>
 800fc5c:	4b1e      	ldr	r3, [pc, #120]	; (800fcd8 <__sfp+0x84>)
 800fc5e:	681e      	ldr	r6, [r3, #0]
 800fc60:	69b3      	ldr	r3, [r6, #24]
 800fc62:	b913      	cbnz	r3, 800fc6a <__sfp+0x16>
 800fc64:	4630      	mov	r0, r6
 800fc66:	f7ff ffbd 	bl	800fbe4 <__sinit>
 800fc6a:	3648      	adds	r6, #72	; 0x48
 800fc6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fc70:	3b01      	subs	r3, #1
 800fc72:	d503      	bpl.n	800fc7c <__sfp+0x28>
 800fc74:	6833      	ldr	r3, [r6, #0]
 800fc76:	b30b      	cbz	r3, 800fcbc <__sfp+0x68>
 800fc78:	6836      	ldr	r6, [r6, #0]
 800fc7a:	e7f7      	b.n	800fc6c <__sfp+0x18>
 800fc7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fc80:	b9d5      	cbnz	r5, 800fcb8 <__sfp+0x64>
 800fc82:	4b16      	ldr	r3, [pc, #88]	; (800fcdc <__sfp+0x88>)
 800fc84:	60e3      	str	r3, [r4, #12]
 800fc86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fc8a:	6665      	str	r5, [r4, #100]	; 0x64
 800fc8c:	f000 f847 	bl	800fd1e <__retarget_lock_init_recursive>
 800fc90:	f7ff ff96 	bl	800fbc0 <__sfp_lock_release>
 800fc94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fc98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fc9c:	6025      	str	r5, [r4, #0]
 800fc9e:	61a5      	str	r5, [r4, #24]
 800fca0:	2208      	movs	r2, #8
 800fca2:	4629      	mov	r1, r5
 800fca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fca8:	f7ff fc34 	bl	800f514 <memset>
 800fcac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fcb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcb8:	3468      	adds	r4, #104	; 0x68
 800fcba:	e7d9      	b.n	800fc70 <__sfp+0x1c>
 800fcbc:	2104      	movs	r1, #4
 800fcbe:	4638      	mov	r0, r7
 800fcc0:	f7ff ff62 	bl	800fb88 <__sfmoreglue>
 800fcc4:	4604      	mov	r4, r0
 800fcc6:	6030      	str	r0, [r6, #0]
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	d1d5      	bne.n	800fc78 <__sfp+0x24>
 800fccc:	f7ff ff78 	bl	800fbc0 <__sfp_lock_release>
 800fcd0:	230c      	movs	r3, #12
 800fcd2:	603b      	str	r3, [r7, #0]
 800fcd4:	e7ee      	b.n	800fcb4 <__sfp+0x60>
 800fcd6:	bf00      	nop
 800fcd8:	08011020 	.word	0x08011020
 800fcdc:	ffff0001 	.word	0xffff0001

0800fce0 <_fwalk_reent>:
 800fce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fce4:	4606      	mov	r6, r0
 800fce6:	4688      	mov	r8, r1
 800fce8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fcec:	2700      	movs	r7, #0
 800fcee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fcf2:	f1b9 0901 	subs.w	r9, r9, #1
 800fcf6:	d505      	bpl.n	800fd04 <_fwalk_reent+0x24>
 800fcf8:	6824      	ldr	r4, [r4, #0]
 800fcfa:	2c00      	cmp	r4, #0
 800fcfc:	d1f7      	bne.n	800fcee <_fwalk_reent+0xe>
 800fcfe:	4638      	mov	r0, r7
 800fd00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd04:	89ab      	ldrh	r3, [r5, #12]
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d907      	bls.n	800fd1a <_fwalk_reent+0x3a>
 800fd0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	d003      	beq.n	800fd1a <_fwalk_reent+0x3a>
 800fd12:	4629      	mov	r1, r5
 800fd14:	4630      	mov	r0, r6
 800fd16:	47c0      	blx	r8
 800fd18:	4307      	orrs	r7, r0
 800fd1a:	3568      	adds	r5, #104	; 0x68
 800fd1c:	e7e9      	b.n	800fcf2 <_fwalk_reent+0x12>

0800fd1e <__retarget_lock_init_recursive>:
 800fd1e:	4770      	bx	lr

0800fd20 <__retarget_lock_acquire_recursive>:
 800fd20:	4770      	bx	lr

0800fd22 <__retarget_lock_release_recursive>:
 800fd22:	4770      	bx	lr

0800fd24 <__swhatbuf_r>:
 800fd24:	b570      	push	{r4, r5, r6, lr}
 800fd26:	460e      	mov	r6, r1
 800fd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd2c:	2900      	cmp	r1, #0
 800fd2e:	b096      	sub	sp, #88	; 0x58
 800fd30:	4614      	mov	r4, r2
 800fd32:	461d      	mov	r5, r3
 800fd34:	da08      	bge.n	800fd48 <__swhatbuf_r+0x24>
 800fd36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	602a      	str	r2, [r5, #0]
 800fd3e:	061a      	lsls	r2, r3, #24
 800fd40:	d410      	bmi.n	800fd64 <__swhatbuf_r+0x40>
 800fd42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd46:	e00e      	b.n	800fd66 <__swhatbuf_r+0x42>
 800fd48:	466a      	mov	r2, sp
 800fd4a:	f000 fbb3 	bl	80104b4 <_fstat_r>
 800fd4e:	2800      	cmp	r0, #0
 800fd50:	dbf1      	blt.n	800fd36 <__swhatbuf_r+0x12>
 800fd52:	9a01      	ldr	r2, [sp, #4]
 800fd54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fd58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd5c:	425a      	negs	r2, r3
 800fd5e:	415a      	adcs	r2, r3
 800fd60:	602a      	str	r2, [r5, #0]
 800fd62:	e7ee      	b.n	800fd42 <__swhatbuf_r+0x1e>
 800fd64:	2340      	movs	r3, #64	; 0x40
 800fd66:	2000      	movs	r0, #0
 800fd68:	6023      	str	r3, [r4, #0]
 800fd6a:	b016      	add	sp, #88	; 0x58
 800fd6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fd70 <__smakebuf_r>:
 800fd70:	898b      	ldrh	r3, [r1, #12]
 800fd72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd74:	079d      	lsls	r5, r3, #30
 800fd76:	4606      	mov	r6, r0
 800fd78:	460c      	mov	r4, r1
 800fd7a:	d507      	bpl.n	800fd8c <__smakebuf_r+0x1c>
 800fd7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	6123      	str	r3, [r4, #16]
 800fd84:	2301      	movs	r3, #1
 800fd86:	6163      	str	r3, [r4, #20]
 800fd88:	b002      	add	sp, #8
 800fd8a:	bd70      	pop	{r4, r5, r6, pc}
 800fd8c:	ab01      	add	r3, sp, #4
 800fd8e:	466a      	mov	r2, sp
 800fd90:	f7ff ffc8 	bl	800fd24 <__swhatbuf_r>
 800fd94:	9900      	ldr	r1, [sp, #0]
 800fd96:	4605      	mov	r5, r0
 800fd98:	4630      	mov	r0, r6
 800fd9a:	f7ff fc2f 	bl	800f5fc <_malloc_r>
 800fd9e:	b948      	cbnz	r0, 800fdb4 <__smakebuf_r+0x44>
 800fda0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fda4:	059a      	lsls	r2, r3, #22
 800fda6:	d4ef      	bmi.n	800fd88 <__smakebuf_r+0x18>
 800fda8:	f023 0303 	bic.w	r3, r3, #3
 800fdac:	f043 0302 	orr.w	r3, r3, #2
 800fdb0:	81a3      	strh	r3, [r4, #12]
 800fdb2:	e7e3      	b.n	800fd7c <__smakebuf_r+0xc>
 800fdb4:	4b0d      	ldr	r3, [pc, #52]	; (800fdec <__smakebuf_r+0x7c>)
 800fdb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800fdb8:	89a3      	ldrh	r3, [r4, #12]
 800fdba:	6020      	str	r0, [r4, #0]
 800fdbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdc0:	81a3      	strh	r3, [r4, #12]
 800fdc2:	9b00      	ldr	r3, [sp, #0]
 800fdc4:	6163      	str	r3, [r4, #20]
 800fdc6:	9b01      	ldr	r3, [sp, #4]
 800fdc8:	6120      	str	r0, [r4, #16]
 800fdca:	b15b      	cbz	r3, 800fde4 <__smakebuf_r+0x74>
 800fdcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	f000 fb81 	bl	80104d8 <_isatty_r>
 800fdd6:	b128      	cbz	r0, 800fde4 <__smakebuf_r+0x74>
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	f023 0303 	bic.w	r3, r3, #3
 800fdde:	f043 0301 	orr.w	r3, r3, #1
 800fde2:	81a3      	strh	r3, [r4, #12]
 800fde4:	89a0      	ldrh	r0, [r4, #12]
 800fde6:	4305      	orrs	r5, r0
 800fde8:	81a5      	strh	r5, [r4, #12]
 800fdea:	e7cd      	b.n	800fd88 <__smakebuf_r+0x18>
 800fdec:	0800fb7d 	.word	0x0800fb7d

0800fdf0 <__malloc_lock>:
 800fdf0:	4801      	ldr	r0, [pc, #4]	; (800fdf8 <__malloc_lock+0x8>)
 800fdf2:	f7ff bf95 	b.w	800fd20 <__retarget_lock_acquire_recursive>
 800fdf6:	bf00      	nop
 800fdf8:	20002e8c 	.word	0x20002e8c

0800fdfc <__malloc_unlock>:
 800fdfc:	4801      	ldr	r0, [pc, #4]	; (800fe04 <__malloc_unlock+0x8>)
 800fdfe:	f7ff bf90 	b.w	800fd22 <__retarget_lock_release_recursive>
 800fe02:	bf00      	nop
 800fe04:	20002e8c 	.word	0x20002e8c

0800fe08 <__ssputs_r>:
 800fe08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe0c:	688e      	ldr	r6, [r1, #8]
 800fe0e:	429e      	cmp	r6, r3
 800fe10:	4682      	mov	sl, r0
 800fe12:	460c      	mov	r4, r1
 800fe14:	4690      	mov	r8, r2
 800fe16:	461f      	mov	r7, r3
 800fe18:	d838      	bhi.n	800fe8c <__ssputs_r+0x84>
 800fe1a:	898a      	ldrh	r2, [r1, #12]
 800fe1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe20:	d032      	beq.n	800fe88 <__ssputs_r+0x80>
 800fe22:	6825      	ldr	r5, [r4, #0]
 800fe24:	6909      	ldr	r1, [r1, #16]
 800fe26:	eba5 0901 	sub.w	r9, r5, r1
 800fe2a:	6965      	ldr	r5, [r4, #20]
 800fe2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe34:	3301      	adds	r3, #1
 800fe36:	444b      	add	r3, r9
 800fe38:	106d      	asrs	r5, r5, #1
 800fe3a:	429d      	cmp	r5, r3
 800fe3c:	bf38      	it	cc
 800fe3e:	461d      	movcc	r5, r3
 800fe40:	0553      	lsls	r3, r2, #21
 800fe42:	d531      	bpl.n	800fea8 <__ssputs_r+0xa0>
 800fe44:	4629      	mov	r1, r5
 800fe46:	f7ff fbd9 	bl	800f5fc <_malloc_r>
 800fe4a:	4606      	mov	r6, r0
 800fe4c:	b950      	cbnz	r0, 800fe64 <__ssputs_r+0x5c>
 800fe4e:	230c      	movs	r3, #12
 800fe50:	f8ca 3000 	str.w	r3, [sl]
 800fe54:	89a3      	ldrh	r3, [r4, #12]
 800fe56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe5a:	81a3      	strh	r3, [r4, #12]
 800fe5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe64:	6921      	ldr	r1, [r4, #16]
 800fe66:	464a      	mov	r2, r9
 800fe68:	f7ff fb46 	bl	800f4f8 <memcpy>
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe76:	81a3      	strh	r3, [r4, #12]
 800fe78:	6126      	str	r6, [r4, #16]
 800fe7a:	6165      	str	r5, [r4, #20]
 800fe7c:	444e      	add	r6, r9
 800fe7e:	eba5 0509 	sub.w	r5, r5, r9
 800fe82:	6026      	str	r6, [r4, #0]
 800fe84:	60a5      	str	r5, [r4, #8]
 800fe86:	463e      	mov	r6, r7
 800fe88:	42be      	cmp	r6, r7
 800fe8a:	d900      	bls.n	800fe8e <__ssputs_r+0x86>
 800fe8c:	463e      	mov	r6, r7
 800fe8e:	6820      	ldr	r0, [r4, #0]
 800fe90:	4632      	mov	r2, r6
 800fe92:	4641      	mov	r1, r8
 800fe94:	f000 fb42 	bl	801051c <memmove>
 800fe98:	68a3      	ldr	r3, [r4, #8]
 800fe9a:	1b9b      	subs	r3, r3, r6
 800fe9c:	60a3      	str	r3, [r4, #8]
 800fe9e:	6823      	ldr	r3, [r4, #0]
 800fea0:	4433      	add	r3, r6
 800fea2:	6023      	str	r3, [r4, #0]
 800fea4:	2000      	movs	r0, #0
 800fea6:	e7db      	b.n	800fe60 <__ssputs_r+0x58>
 800fea8:	462a      	mov	r2, r5
 800feaa:	f000 fb51 	bl	8010550 <_realloc_r>
 800feae:	4606      	mov	r6, r0
 800feb0:	2800      	cmp	r0, #0
 800feb2:	d1e1      	bne.n	800fe78 <__ssputs_r+0x70>
 800feb4:	6921      	ldr	r1, [r4, #16]
 800feb6:	4650      	mov	r0, sl
 800feb8:	f7ff fb34 	bl	800f524 <_free_r>
 800febc:	e7c7      	b.n	800fe4e <__ssputs_r+0x46>
	...

0800fec0 <_svfiprintf_r>:
 800fec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec4:	4698      	mov	r8, r3
 800fec6:	898b      	ldrh	r3, [r1, #12]
 800fec8:	061b      	lsls	r3, r3, #24
 800feca:	b09d      	sub	sp, #116	; 0x74
 800fecc:	4607      	mov	r7, r0
 800fece:	460d      	mov	r5, r1
 800fed0:	4614      	mov	r4, r2
 800fed2:	d50e      	bpl.n	800fef2 <_svfiprintf_r+0x32>
 800fed4:	690b      	ldr	r3, [r1, #16]
 800fed6:	b963      	cbnz	r3, 800fef2 <_svfiprintf_r+0x32>
 800fed8:	2140      	movs	r1, #64	; 0x40
 800feda:	f7ff fb8f 	bl	800f5fc <_malloc_r>
 800fede:	6028      	str	r0, [r5, #0]
 800fee0:	6128      	str	r0, [r5, #16]
 800fee2:	b920      	cbnz	r0, 800feee <_svfiprintf_r+0x2e>
 800fee4:	230c      	movs	r3, #12
 800fee6:	603b      	str	r3, [r7, #0]
 800fee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800feec:	e0d1      	b.n	8010092 <_svfiprintf_r+0x1d2>
 800feee:	2340      	movs	r3, #64	; 0x40
 800fef0:	616b      	str	r3, [r5, #20]
 800fef2:	2300      	movs	r3, #0
 800fef4:	9309      	str	r3, [sp, #36]	; 0x24
 800fef6:	2320      	movs	r3, #32
 800fef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fefc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff00:	2330      	movs	r3, #48	; 0x30
 800ff02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80100ac <_svfiprintf_r+0x1ec>
 800ff06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff0a:	f04f 0901 	mov.w	r9, #1
 800ff0e:	4623      	mov	r3, r4
 800ff10:	469a      	mov	sl, r3
 800ff12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff16:	b10a      	cbz	r2, 800ff1c <_svfiprintf_r+0x5c>
 800ff18:	2a25      	cmp	r2, #37	; 0x25
 800ff1a:	d1f9      	bne.n	800ff10 <_svfiprintf_r+0x50>
 800ff1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ff20:	d00b      	beq.n	800ff3a <_svfiprintf_r+0x7a>
 800ff22:	465b      	mov	r3, fp
 800ff24:	4622      	mov	r2, r4
 800ff26:	4629      	mov	r1, r5
 800ff28:	4638      	mov	r0, r7
 800ff2a:	f7ff ff6d 	bl	800fe08 <__ssputs_r>
 800ff2e:	3001      	adds	r0, #1
 800ff30:	f000 80aa 	beq.w	8010088 <_svfiprintf_r+0x1c8>
 800ff34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff36:	445a      	add	r2, fp
 800ff38:	9209      	str	r2, [sp, #36]	; 0x24
 800ff3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	f000 80a2 	beq.w	8010088 <_svfiprintf_r+0x1c8>
 800ff44:	2300      	movs	r3, #0
 800ff46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff4e:	f10a 0a01 	add.w	sl, sl, #1
 800ff52:	9304      	str	r3, [sp, #16]
 800ff54:	9307      	str	r3, [sp, #28]
 800ff56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ff5c:	4654      	mov	r4, sl
 800ff5e:	2205      	movs	r2, #5
 800ff60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff64:	4851      	ldr	r0, [pc, #324]	; (80100ac <_svfiprintf_r+0x1ec>)
 800ff66:	f7f0 f95b 	bl	8000220 <memchr>
 800ff6a:	9a04      	ldr	r2, [sp, #16]
 800ff6c:	b9d8      	cbnz	r0, 800ffa6 <_svfiprintf_r+0xe6>
 800ff6e:	06d0      	lsls	r0, r2, #27
 800ff70:	bf44      	itt	mi
 800ff72:	2320      	movmi	r3, #32
 800ff74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff78:	0711      	lsls	r1, r2, #28
 800ff7a:	bf44      	itt	mi
 800ff7c:	232b      	movmi	r3, #43	; 0x2b
 800ff7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff82:	f89a 3000 	ldrb.w	r3, [sl]
 800ff86:	2b2a      	cmp	r3, #42	; 0x2a
 800ff88:	d015      	beq.n	800ffb6 <_svfiprintf_r+0xf6>
 800ff8a:	9a07      	ldr	r2, [sp, #28]
 800ff8c:	4654      	mov	r4, sl
 800ff8e:	2000      	movs	r0, #0
 800ff90:	f04f 0c0a 	mov.w	ip, #10
 800ff94:	4621      	mov	r1, r4
 800ff96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff9a:	3b30      	subs	r3, #48	; 0x30
 800ff9c:	2b09      	cmp	r3, #9
 800ff9e:	d94e      	bls.n	801003e <_svfiprintf_r+0x17e>
 800ffa0:	b1b0      	cbz	r0, 800ffd0 <_svfiprintf_r+0x110>
 800ffa2:	9207      	str	r2, [sp, #28]
 800ffa4:	e014      	b.n	800ffd0 <_svfiprintf_r+0x110>
 800ffa6:	eba0 0308 	sub.w	r3, r0, r8
 800ffaa:	fa09 f303 	lsl.w	r3, r9, r3
 800ffae:	4313      	orrs	r3, r2
 800ffb0:	9304      	str	r3, [sp, #16]
 800ffb2:	46a2      	mov	sl, r4
 800ffb4:	e7d2      	b.n	800ff5c <_svfiprintf_r+0x9c>
 800ffb6:	9b03      	ldr	r3, [sp, #12]
 800ffb8:	1d19      	adds	r1, r3, #4
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	9103      	str	r1, [sp, #12]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	bfbb      	ittet	lt
 800ffc2:	425b      	neglt	r3, r3
 800ffc4:	f042 0202 	orrlt.w	r2, r2, #2
 800ffc8:	9307      	strge	r3, [sp, #28]
 800ffca:	9307      	strlt	r3, [sp, #28]
 800ffcc:	bfb8      	it	lt
 800ffce:	9204      	strlt	r2, [sp, #16]
 800ffd0:	7823      	ldrb	r3, [r4, #0]
 800ffd2:	2b2e      	cmp	r3, #46	; 0x2e
 800ffd4:	d10c      	bne.n	800fff0 <_svfiprintf_r+0x130>
 800ffd6:	7863      	ldrb	r3, [r4, #1]
 800ffd8:	2b2a      	cmp	r3, #42	; 0x2a
 800ffda:	d135      	bne.n	8010048 <_svfiprintf_r+0x188>
 800ffdc:	9b03      	ldr	r3, [sp, #12]
 800ffde:	1d1a      	adds	r2, r3, #4
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	9203      	str	r2, [sp, #12]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	bfb8      	it	lt
 800ffe8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ffec:	3402      	adds	r4, #2
 800ffee:	9305      	str	r3, [sp, #20]
 800fff0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80100bc <_svfiprintf_r+0x1fc>
 800fff4:	7821      	ldrb	r1, [r4, #0]
 800fff6:	2203      	movs	r2, #3
 800fff8:	4650      	mov	r0, sl
 800fffa:	f7f0 f911 	bl	8000220 <memchr>
 800fffe:	b140      	cbz	r0, 8010012 <_svfiprintf_r+0x152>
 8010000:	2340      	movs	r3, #64	; 0x40
 8010002:	eba0 000a 	sub.w	r0, r0, sl
 8010006:	fa03 f000 	lsl.w	r0, r3, r0
 801000a:	9b04      	ldr	r3, [sp, #16]
 801000c:	4303      	orrs	r3, r0
 801000e:	3401      	adds	r4, #1
 8010010:	9304      	str	r3, [sp, #16]
 8010012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010016:	4826      	ldr	r0, [pc, #152]	; (80100b0 <_svfiprintf_r+0x1f0>)
 8010018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801001c:	2206      	movs	r2, #6
 801001e:	f7f0 f8ff 	bl	8000220 <memchr>
 8010022:	2800      	cmp	r0, #0
 8010024:	d038      	beq.n	8010098 <_svfiprintf_r+0x1d8>
 8010026:	4b23      	ldr	r3, [pc, #140]	; (80100b4 <_svfiprintf_r+0x1f4>)
 8010028:	bb1b      	cbnz	r3, 8010072 <_svfiprintf_r+0x1b2>
 801002a:	9b03      	ldr	r3, [sp, #12]
 801002c:	3307      	adds	r3, #7
 801002e:	f023 0307 	bic.w	r3, r3, #7
 8010032:	3308      	adds	r3, #8
 8010034:	9303      	str	r3, [sp, #12]
 8010036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010038:	4433      	add	r3, r6
 801003a:	9309      	str	r3, [sp, #36]	; 0x24
 801003c:	e767      	b.n	800ff0e <_svfiprintf_r+0x4e>
 801003e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010042:	460c      	mov	r4, r1
 8010044:	2001      	movs	r0, #1
 8010046:	e7a5      	b.n	800ff94 <_svfiprintf_r+0xd4>
 8010048:	2300      	movs	r3, #0
 801004a:	3401      	adds	r4, #1
 801004c:	9305      	str	r3, [sp, #20]
 801004e:	4619      	mov	r1, r3
 8010050:	f04f 0c0a 	mov.w	ip, #10
 8010054:	4620      	mov	r0, r4
 8010056:	f810 2b01 	ldrb.w	r2, [r0], #1
 801005a:	3a30      	subs	r2, #48	; 0x30
 801005c:	2a09      	cmp	r2, #9
 801005e:	d903      	bls.n	8010068 <_svfiprintf_r+0x1a8>
 8010060:	2b00      	cmp	r3, #0
 8010062:	d0c5      	beq.n	800fff0 <_svfiprintf_r+0x130>
 8010064:	9105      	str	r1, [sp, #20]
 8010066:	e7c3      	b.n	800fff0 <_svfiprintf_r+0x130>
 8010068:	fb0c 2101 	mla	r1, ip, r1, r2
 801006c:	4604      	mov	r4, r0
 801006e:	2301      	movs	r3, #1
 8010070:	e7f0      	b.n	8010054 <_svfiprintf_r+0x194>
 8010072:	ab03      	add	r3, sp, #12
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	462a      	mov	r2, r5
 8010078:	4b0f      	ldr	r3, [pc, #60]	; (80100b8 <_svfiprintf_r+0x1f8>)
 801007a:	a904      	add	r1, sp, #16
 801007c:	4638      	mov	r0, r7
 801007e:	f3af 8000 	nop.w
 8010082:	1c42      	adds	r2, r0, #1
 8010084:	4606      	mov	r6, r0
 8010086:	d1d6      	bne.n	8010036 <_svfiprintf_r+0x176>
 8010088:	89ab      	ldrh	r3, [r5, #12]
 801008a:	065b      	lsls	r3, r3, #25
 801008c:	f53f af2c 	bmi.w	800fee8 <_svfiprintf_r+0x28>
 8010090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010092:	b01d      	add	sp, #116	; 0x74
 8010094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010098:	ab03      	add	r3, sp, #12
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	462a      	mov	r2, r5
 801009e:	4b06      	ldr	r3, [pc, #24]	; (80100b8 <_svfiprintf_r+0x1f8>)
 80100a0:	a904      	add	r1, sp, #16
 80100a2:	4638      	mov	r0, r7
 80100a4:	f000 f87a 	bl	801019c <_printf_i>
 80100a8:	e7eb      	b.n	8010082 <_svfiprintf_r+0x1c2>
 80100aa:	bf00      	nop
 80100ac:	08011084 	.word	0x08011084
 80100b0:	0801108e 	.word	0x0801108e
 80100b4:	00000000 	.word	0x00000000
 80100b8:	0800fe09 	.word	0x0800fe09
 80100bc:	0801108a 	.word	0x0801108a

080100c0 <_printf_common>:
 80100c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100c4:	4616      	mov	r6, r2
 80100c6:	4699      	mov	r9, r3
 80100c8:	688a      	ldr	r2, [r1, #8]
 80100ca:	690b      	ldr	r3, [r1, #16]
 80100cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100d0:	4293      	cmp	r3, r2
 80100d2:	bfb8      	it	lt
 80100d4:	4613      	movlt	r3, r2
 80100d6:	6033      	str	r3, [r6, #0]
 80100d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100dc:	4607      	mov	r7, r0
 80100de:	460c      	mov	r4, r1
 80100e0:	b10a      	cbz	r2, 80100e6 <_printf_common+0x26>
 80100e2:	3301      	adds	r3, #1
 80100e4:	6033      	str	r3, [r6, #0]
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	0699      	lsls	r1, r3, #26
 80100ea:	bf42      	ittt	mi
 80100ec:	6833      	ldrmi	r3, [r6, #0]
 80100ee:	3302      	addmi	r3, #2
 80100f0:	6033      	strmi	r3, [r6, #0]
 80100f2:	6825      	ldr	r5, [r4, #0]
 80100f4:	f015 0506 	ands.w	r5, r5, #6
 80100f8:	d106      	bne.n	8010108 <_printf_common+0x48>
 80100fa:	f104 0a19 	add.w	sl, r4, #25
 80100fe:	68e3      	ldr	r3, [r4, #12]
 8010100:	6832      	ldr	r2, [r6, #0]
 8010102:	1a9b      	subs	r3, r3, r2
 8010104:	42ab      	cmp	r3, r5
 8010106:	dc26      	bgt.n	8010156 <_printf_common+0x96>
 8010108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801010c:	1e13      	subs	r3, r2, #0
 801010e:	6822      	ldr	r2, [r4, #0]
 8010110:	bf18      	it	ne
 8010112:	2301      	movne	r3, #1
 8010114:	0692      	lsls	r2, r2, #26
 8010116:	d42b      	bmi.n	8010170 <_printf_common+0xb0>
 8010118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801011c:	4649      	mov	r1, r9
 801011e:	4638      	mov	r0, r7
 8010120:	47c0      	blx	r8
 8010122:	3001      	adds	r0, #1
 8010124:	d01e      	beq.n	8010164 <_printf_common+0xa4>
 8010126:	6823      	ldr	r3, [r4, #0]
 8010128:	68e5      	ldr	r5, [r4, #12]
 801012a:	6832      	ldr	r2, [r6, #0]
 801012c:	f003 0306 	and.w	r3, r3, #6
 8010130:	2b04      	cmp	r3, #4
 8010132:	bf08      	it	eq
 8010134:	1aad      	subeq	r5, r5, r2
 8010136:	68a3      	ldr	r3, [r4, #8]
 8010138:	6922      	ldr	r2, [r4, #16]
 801013a:	bf0c      	ite	eq
 801013c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010140:	2500      	movne	r5, #0
 8010142:	4293      	cmp	r3, r2
 8010144:	bfc4      	itt	gt
 8010146:	1a9b      	subgt	r3, r3, r2
 8010148:	18ed      	addgt	r5, r5, r3
 801014a:	2600      	movs	r6, #0
 801014c:	341a      	adds	r4, #26
 801014e:	42b5      	cmp	r5, r6
 8010150:	d11a      	bne.n	8010188 <_printf_common+0xc8>
 8010152:	2000      	movs	r0, #0
 8010154:	e008      	b.n	8010168 <_printf_common+0xa8>
 8010156:	2301      	movs	r3, #1
 8010158:	4652      	mov	r2, sl
 801015a:	4649      	mov	r1, r9
 801015c:	4638      	mov	r0, r7
 801015e:	47c0      	blx	r8
 8010160:	3001      	adds	r0, #1
 8010162:	d103      	bne.n	801016c <_printf_common+0xac>
 8010164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801016c:	3501      	adds	r5, #1
 801016e:	e7c6      	b.n	80100fe <_printf_common+0x3e>
 8010170:	18e1      	adds	r1, r4, r3
 8010172:	1c5a      	adds	r2, r3, #1
 8010174:	2030      	movs	r0, #48	; 0x30
 8010176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801017a:	4422      	add	r2, r4
 801017c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010184:	3302      	adds	r3, #2
 8010186:	e7c7      	b.n	8010118 <_printf_common+0x58>
 8010188:	2301      	movs	r3, #1
 801018a:	4622      	mov	r2, r4
 801018c:	4649      	mov	r1, r9
 801018e:	4638      	mov	r0, r7
 8010190:	47c0      	blx	r8
 8010192:	3001      	adds	r0, #1
 8010194:	d0e6      	beq.n	8010164 <_printf_common+0xa4>
 8010196:	3601      	adds	r6, #1
 8010198:	e7d9      	b.n	801014e <_printf_common+0x8e>
	...

0801019c <_printf_i>:
 801019c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101a0:	7e0f      	ldrb	r7, [r1, #24]
 80101a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80101a4:	2f78      	cmp	r7, #120	; 0x78
 80101a6:	4691      	mov	r9, r2
 80101a8:	4680      	mov	r8, r0
 80101aa:	460c      	mov	r4, r1
 80101ac:	469a      	mov	sl, r3
 80101ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80101b2:	d807      	bhi.n	80101c4 <_printf_i+0x28>
 80101b4:	2f62      	cmp	r7, #98	; 0x62
 80101b6:	d80a      	bhi.n	80101ce <_printf_i+0x32>
 80101b8:	2f00      	cmp	r7, #0
 80101ba:	f000 80d8 	beq.w	801036e <_printf_i+0x1d2>
 80101be:	2f58      	cmp	r7, #88	; 0x58
 80101c0:	f000 80a3 	beq.w	801030a <_printf_i+0x16e>
 80101c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101cc:	e03a      	b.n	8010244 <_printf_i+0xa8>
 80101ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101d2:	2b15      	cmp	r3, #21
 80101d4:	d8f6      	bhi.n	80101c4 <_printf_i+0x28>
 80101d6:	a101      	add	r1, pc, #4	; (adr r1, 80101dc <_printf_i+0x40>)
 80101d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101dc:	08010235 	.word	0x08010235
 80101e0:	08010249 	.word	0x08010249
 80101e4:	080101c5 	.word	0x080101c5
 80101e8:	080101c5 	.word	0x080101c5
 80101ec:	080101c5 	.word	0x080101c5
 80101f0:	080101c5 	.word	0x080101c5
 80101f4:	08010249 	.word	0x08010249
 80101f8:	080101c5 	.word	0x080101c5
 80101fc:	080101c5 	.word	0x080101c5
 8010200:	080101c5 	.word	0x080101c5
 8010204:	080101c5 	.word	0x080101c5
 8010208:	08010355 	.word	0x08010355
 801020c:	08010279 	.word	0x08010279
 8010210:	08010337 	.word	0x08010337
 8010214:	080101c5 	.word	0x080101c5
 8010218:	080101c5 	.word	0x080101c5
 801021c:	08010377 	.word	0x08010377
 8010220:	080101c5 	.word	0x080101c5
 8010224:	08010279 	.word	0x08010279
 8010228:	080101c5 	.word	0x080101c5
 801022c:	080101c5 	.word	0x080101c5
 8010230:	0801033f 	.word	0x0801033f
 8010234:	682b      	ldr	r3, [r5, #0]
 8010236:	1d1a      	adds	r2, r3, #4
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	602a      	str	r2, [r5, #0]
 801023c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010244:	2301      	movs	r3, #1
 8010246:	e0a3      	b.n	8010390 <_printf_i+0x1f4>
 8010248:	6820      	ldr	r0, [r4, #0]
 801024a:	6829      	ldr	r1, [r5, #0]
 801024c:	0606      	lsls	r6, r0, #24
 801024e:	f101 0304 	add.w	r3, r1, #4
 8010252:	d50a      	bpl.n	801026a <_printf_i+0xce>
 8010254:	680e      	ldr	r6, [r1, #0]
 8010256:	602b      	str	r3, [r5, #0]
 8010258:	2e00      	cmp	r6, #0
 801025a:	da03      	bge.n	8010264 <_printf_i+0xc8>
 801025c:	232d      	movs	r3, #45	; 0x2d
 801025e:	4276      	negs	r6, r6
 8010260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010264:	485e      	ldr	r0, [pc, #376]	; (80103e0 <_printf_i+0x244>)
 8010266:	230a      	movs	r3, #10
 8010268:	e019      	b.n	801029e <_printf_i+0x102>
 801026a:	680e      	ldr	r6, [r1, #0]
 801026c:	602b      	str	r3, [r5, #0]
 801026e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010272:	bf18      	it	ne
 8010274:	b236      	sxthne	r6, r6
 8010276:	e7ef      	b.n	8010258 <_printf_i+0xbc>
 8010278:	682b      	ldr	r3, [r5, #0]
 801027a:	6820      	ldr	r0, [r4, #0]
 801027c:	1d19      	adds	r1, r3, #4
 801027e:	6029      	str	r1, [r5, #0]
 8010280:	0601      	lsls	r1, r0, #24
 8010282:	d501      	bpl.n	8010288 <_printf_i+0xec>
 8010284:	681e      	ldr	r6, [r3, #0]
 8010286:	e002      	b.n	801028e <_printf_i+0xf2>
 8010288:	0646      	lsls	r6, r0, #25
 801028a:	d5fb      	bpl.n	8010284 <_printf_i+0xe8>
 801028c:	881e      	ldrh	r6, [r3, #0]
 801028e:	4854      	ldr	r0, [pc, #336]	; (80103e0 <_printf_i+0x244>)
 8010290:	2f6f      	cmp	r7, #111	; 0x6f
 8010292:	bf0c      	ite	eq
 8010294:	2308      	moveq	r3, #8
 8010296:	230a      	movne	r3, #10
 8010298:	2100      	movs	r1, #0
 801029a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801029e:	6865      	ldr	r5, [r4, #4]
 80102a0:	60a5      	str	r5, [r4, #8]
 80102a2:	2d00      	cmp	r5, #0
 80102a4:	bfa2      	ittt	ge
 80102a6:	6821      	ldrge	r1, [r4, #0]
 80102a8:	f021 0104 	bicge.w	r1, r1, #4
 80102ac:	6021      	strge	r1, [r4, #0]
 80102ae:	b90e      	cbnz	r6, 80102b4 <_printf_i+0x118>
 80102b0:	2d00      	cmp	r5, #0
 80102b2:	d04d      	beq.n	8010350 <_printf_i+0x1b4>
 80102b4:	4615      	mov	r5, r2
 80102b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80102ba:	fb03 6711 	mls	r7, r3, r1, r6
 80102be:	5dc7      	ldrb	r7, [r0, r7]
 80102c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80102c4:	4637      	mov	r7, r6
 80102c6:	42bb      	cmp	r3, r7
 80102c8:	460e      	mov	r6, r1
 80102ca:	d9f4      	bls.n	80102b6 <_printf_i+0x11a>
 80102cc:	2b08      	cmp	r3, #8
 80102ce:	d10b      	bne.n	80102e8 <_printf_i+0x14c>
 80102d0:	6823      	ldr	r3, [r4, #0]
 80102d2:	07de      	lsls	r6, r3, #31
 80102d4:	d508      	bpl.n	80102e8 <_printf_i+0x14c>
 80102d6:	6923      	ldr	r3, [r4, #16]
 80102d8:	6861      	ldr	r1, [r4, #4]
 80102da:	4299      	cmp	r1, r3
 80102dc:	bfde      	ittt	le
 80102de:	2330      	movle	r3, #48	; 0x30
 80102e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80102e8:	1b52      	subs	r2, r2, r5
 80102ea:	6122      	str	r2, [r4, #16]
 80102ec:	f8cd a000 	str.w	sl, [sp]
 80102f0:	464b      	mov	r3, r9
 80102f2:	aa03      	add	r2, sp, #12
 80102f4:	4621      	mov	r1, r4
 80102f6:	4640      	mov	r0, r8
 80102f8:	f7ff fee2 	bl	80100c0 <_printf_common>
 80102fc:	3001      	adds	r0, #1
 80102fe:	d14c      	bne.n	801039a <_printf_i+0x1fe>
 8010300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010304:	b004      	add	sp, #16
 8010306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801030a:	4835      	ldr	r0, [pc, #212]	; (80103e0 <_printf_i+0x244>)
 801030c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010310:	6829      	ldr	r1, [r5, #0]
 8010312:	6823      	ldr	r3, [r4, #0]
 8010314:	f851 6b04 	ldr.w	r6, [r1], #4
 8010318:	6029      	str	r1, [r5, #0]
 801031a:	061d      	lsls	r5, r3, #24
 801031c:	d514      	bpl.n	8010348 <_printf_i+0x1ac>
 801031e:	07df      	lsls	r7, r3, #31
 8010320:	bf44      	itt	mi
 8010322:	f043 0320 	orrmi.w	r3, r3, #32
 8010326:	6023      	strmi	r3, [r4, #0]
 8010328:	b91e      	cbnz	r6, 8010332 <_printf_i+0x196>
 801032a:	6823      	ldr	r3, [r4, #0]
 801032c:	f023 0320 	bic.w	r3, r3, #32
 8010330:	6023      	str	r3, [r4, #0]
 8010332:	2310      	movs	r3, #16
 8010334:	e7b0      	b.n	8010298 <_printf_i+0xfc>
 8010336:	6823      	ldr	r3, [r4, #0]
 8010338:	f043 0320 	orr.w	r3, r3, #32
 801033c:	6023      	str	r3, [r4, #0]
 801033e:	2378      	movs	r3, #120	; 0x78
 8010340:	4828      	ldr	r0, [pc, #160]	; (80103e4 <_printf_i+0x248>)
 8010342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010346:	e7e3      	b.n	8010310 <_printf_i+0x174>
 8010348:	0659      	lsls	r1, r3, #25
 801034a:	bf48      	it	mi
 801034c:	b2b6      	uxthmi	r6, r6
 801034e:	e7e6      	b.n	801031e <_printf_i+0x182>
 8010350:	4615      	mov	r5, r2
 8010352:	e7bb      	b.n	80102cc <_printf_i+0x130>
 8010354:	682b      	ldr	r3, [r5, #0]
 8010356:	6826      	ldr	r6, [r4, #0]
 8010358:	6961      	ldr	r1, [r4, #20]
 801035a:	1d18      	adds	r0, r3, #4
 801035c:	6028      	str	r0, [r5, #0]
 801035e:	0635      	lsls	r5, r6, #24
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	d501      	bpl.n	8010368 <_printf_i+0x1cc>
 8010364:	6019      	str	r1, [r3, #0]
 8010366:	e002      	b.n	801036e <_printf_i+0x1d2>
 8010368:	0670      	lsls	r0, r6, #25
 801036a:	d5fb      	bpl.n	8010364 <_printf_i+0x1c8>
 801036c:	8019      	strh	r1, [r3, #0]
 801036e:	2300      	movs	r3, #0
 8010370:	6123      	str	r3, [r4, #16]
 8010372:	4615      	mov	r5, r2
 8010374:	e7ba      	b.n	80102ec <_printf_i+0x150>
 8010376:	682b      	ldr	r3, [r5, #0]
 8010378:	1d1a      	adds	r2, r3, #4
 801037a:	602a      	str	r2, [r5, #0]
 801037c:	681d      	ldr	r5, [r3, #0]
 801037e:	6862      	ldr	r2, [r4, #4]
 8010380:	2100      	movs	r1, #0
 8010382:	4628      	mov	r0, r5
 8010384:	f7ef ff4c 	bl	8000220 <memchr>
 8010388:	b108      	cbz	r0, 801038e <_printf_i+0x1f2>
 801038a:	1b40      	subs	r0, r0, r5
 801038c:	6060      	str	r0, [r4, #4]
 801038e:	6863      	ldr	r3, [r4, #4]
 8010390:	6123      	str	r3, [r4, #16]
 8010392:	2300      	movs	r3, #0
 8010394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010398:	e7a8      	b.n	80102ec <_printf_i+0x150>
 801039a:	6923      	ldr	r3, [r4, #16]
 801039c:	462a      	mov	r2, r5
 801039e:	4649      	mov	r1, r9
 80103a0:	4640      	mov	r0, r8
 80103a2:	47d0      	blx	sl
 80103a4:	3001      	adds	r0, #1
 80103a6:	d0ab      	beq.n	8010300 <_printf_i+0x164>
 80103a8:	6823      	ldr	r3, [r4, #0]
 80103aa:	079b      	lsls	r3, r3, #30
 80103ac:	d413      	bmi.n	80103d6 <_printf_i+0x23a>
 80103ae:	68e0      	ldr	r0, [r4, #12]
 80103b0:	9b03      	ldr	r3, [sp, #12]
 80103b2:	4298      	cmp	r0, r3
 80103b4:	bfb8      	it	lt
 80103b6:	4618      	movlt	r0, r3
 80103b8:	e7a4      	b.n	8010304 <_printf_i+0x168>
 80103ba:	2301      	movs	r3, #1
 80103bc:	4632      	mov	r2, r6
 80103be:	4649      	mov	r1, r9
 80103c0:	4640      	mov	r0, r8
 80103c2:	47d0      	blx	sl
 80103c4:	3001      	adds	r0, #1
 80103c6:	d09b      	beq.n	8010300 <_printf_i+0x164>
 80103c8:	3501      	adds	r5, #1
 80103ca:	68e3      	ldr	r3, [r4, #12]
 80103cc:	9903      	ldr	r1, [sp, #12]
 80103ce:	1a5b      	subs	r3, r3, r1
 80103d0:	42ab      	cmp	r3, r5
 80103d2:	dcf2      	bgt.n	80103ba <_printf_i+0x21e>
 80103d4:	e7eb      	b.n	80103ae <_printf_i+0x212>
 80103d6:	2500      	movs	r5, #0
 80103d8:	f104 0619 	add.w	r6, r4, #25
 80103dc:	e7f5      	b.n	80103ca <_printf_i+0x22e>
 80103de:	bf00      	nop
 80103e0:	08011095 	.word	0x08011095
 80103e4:	080110a6 	.word	0x080110a6

080103e8 <__sread>:
 80103e8:	b510      	push	{r4, lr}
 80103ea:	460c      	mov	r4, r1
 80103ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103f0:	f000 f8de 	bl	80105b0 <_read_r>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	bfab      	itete	ge
 80103f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103fa:	89a3      	ldrhlt	r3, [r4, #12]
 80103fc:	181b      	addge	r3, r3, r0
 80103fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010402:	bfac      	ite	ge
 8010404:	6563      	strge	r3, [r4, #84]	; 0x54
 8010406:	81a3      	strhlt	r3, [r4, #12]
 8010408:	bd10      	pop	{r4, pc}

0801040a <__swrite>:
 801040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801040e:	461f      	mov	r7, r3
 8010410:	898b      	ldrh	r3, [r1, #12]
 8010412:	05db      	lsls	r3, r3, #23
 8010414:	4605      	mov	r5, r0
 8010416:	460c      	mov	r4, r1
 8010418:	4616      	mov	r6, r2
 801041a:	d505      	bpl.n	8010428 <__swrite+0x1e>
 801041c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010420:	2302      	movs	r3, #2
 8010422:	2200      	movs	r2, #0
 8010424:	f000 f868 	bl	80104f8 <_lseek_r>
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801042e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010432:	81a3      	strh	r3, [r4, #12]
 8010434:	4632      	mov	r2, r6
 8010436:	463b      	mov	r3, r7
 8010438:	4628      	mov	r0, r5
 801043a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801043e:	f000 b817 	b.w	8010470 <_write_r>

08010442 <__sseek>:
 8010442:	b510      	push	{r4, lr}
 8010444:	460c      	mov	r4, r1
 8010446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801044a:	f000 f855 	bl	80104f8 <_lseek_r>
 801044e:	1c43      	adds	r3, r0, #1
 8010450:	89a3      	ldrh	r3, [r4, #12]
 8010452:	bf15      	itete	ne
 8010454:	6560      	strne	r0, [r4, #84]	; 0x54
 8010456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801045a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801045e:	81a3      	strheq	r3, [r4, #12]
 8010460:	bf18      	it	ne
 8010462:	81a3      	strhne	r3, [r4, #12]
 8010464:	bd10      	pop	{r4, pc}

08010466 <__sclose>:
 8010466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801046a:	f000 b813 	b.w	8010494 <_close_r>
	...

08010470 <_write_r>:
 8010470:	b538      	push	{r3, r4, r5, lr}
 8010472:	4d07      	ldr	r5, [pc, #28]	; (8010490 <_write_r+0x20>)
 8010474:	4604      	mov	r4, r0
 8010476:	4608      	mov	r0, r1
 8010478:	4611      	mov	r1, r2
 801047a:	2200      	movs	r2, #0
 801047c:	602a      	str	r2, [r5, #0]
 801047e:	461a      	mov	r2, r3
 8010480:	f7f1 f89b 	bl	80015ba <_write>
 8010484:	1c43      	adds	r3, r0, #1
 8010486:	d102      	bne.n	801048e <_write_r+0x1e>
 8010488:	682b      	ldr	r3, [r5, #0]
 801048a:	b103      	cbz	r3, 801048e <_write_r+0x1e>
 801048c:	6023      	str	r3, [r4, #0]
 801048e:	bd38      	pop	{r3, r4, r5, pc}
 8010490:	20002e90 	.word	0x20002e90

08010494 <_close_r>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	4d06      	ldr	r5, [pc, #24]	; (80104b0 <_close_r+0x1c>)
 8010498:	2300      	movs	r3, #0
 801049a:	4604      	mov	r4, r0
 801049c:	4608      	mov	r0, r1
 801049e:	602b      	str	r3, [r5, #0]
 80104a0:	f7f1 f8a7 	bl	80015f2 <_close>
 80104a4:	1c43      	adds	r3, r0, #1
 80104a6:	d102      	bne.n	80104ae <_close_r+0x1a>
 80104a8:	682b      	ldr	r3, [r5, #0]
 80104aa:	b103      	cbz	r3, 80104ae <_close_r+0x1a>
 80104ac:	6023      	str	r3, [r4, #0]
 80104ae:	bd38      	pop	{r3, r4, r5, pc}
 80104b0:	20002e90 	.word	0x20002e90

080104b4 <_fstat_r>:
 80104b4:	b538      	push	{r3, r4, r5, lr}
 80104b6:	4d07      	ldr	r5, [pc, #28]	; (80104d4 <_fstat_r+0x20>)
 80104b8:	2300      	movs	r3, #0
 80104ba:	4604      	mov	r4, r0
 80104bc:	4608      	mov	r0, r1
 80104be:	4611      	mov	r1, r2
 80104c0:	602b      	str	r3, [r5, #0]
 80104c2:	f7f1 f8a2 	bl	800160a <_fstat>
 80104c6:	1c43      	adds	r3, r0, #1
 80104c8:	d102      	bne.n	80104d0 <_fstat_r+0x1c>
 80104ca:	682b      	ldr	r3, [r5, #0]
 80104cc:	b103      	cbz	r3, 80104d0 <_fstat_r+0x1c>
 80104ce:	6023      	str	r3, [r4, #0]
 80104d0:	bd38      	pop	{r3, r4, r5, pc}
 80104d2:	bf00      	nop
 80104d4:	20002e90 	.word	0x20002e90

080104d8 <_isatty_r>:
 80104d8:	b538      	push	{r3, r4, r5, lr}
 80104da:	4d06      	ldr	r5, [pc, #24]	; (80104f4 <_isatty_r+0x1c>)
 80104dc:	2300      	movs	r3, #0
 80104de:	4604      	mov	r4, r0
 80104e0:	4608      	mov	r0, r1
 80104e2:	602b      	str	r3, [r5, #0]
 80104e4:	f7f1 f8a1 	bl	800162a <_isatty>
 80104e8:	1c43      	adds	r3, r0, #1
 80104ea:	d102      	bne.n	80104f2 <_isatty_r+0x1a>
 80104ec:	682b      	ldr	r3, [r5, #0]
 80104ee:	b103      	cbz	r3, 80104f2 <_isatty_r+0x1a>
 80104f0:	6023      	str	r3, [r4, #0]
 80104f2:	bd38      	pop	{r3, r4, r5, pc}
 80104f4:	20002e90 	.word	0x20002e90

080104f8 <_lseek_r>:
 80104f8:	b538      	push	{r3, r4, r5, lr}
 80104fa:	4d07      	ldr	r5, [pc, #28]	; (8010518 <_lseek_r+0x20>)
 80104fc:	4604      	mov	r4, r0
 80104fe:	4608      	mov	r0, r1
 8010500:	4611      	mov	r1, r2
 8010502:	2200      	movs	r2, #0
 8010504:	602a      	str	r2, [r5, #0]
 8010506:	461a      	mov	r2, r3
 8010508:	f7f1 f89a 	bl	8001640 <_lseek>
 801050c:	1c43      	adds	r3, r0, #1
 801050e:	d102      	bne.n	8010516 <_lseek_r+0x1e>
 8010510:	682b      	ldr	r3, [r5, #0]
 8010512:	b103      	cbz	r3, 8010516 <_lseek_r+0x1e>
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	bd38      	pop	{r3, r4, r5, pc}
 8010518:	20002e90 	.word	0x20002e90

0801051c <memmove>:
 801051c:	4288      	cmp	r0, r1
 801051e:	b510      	push	{r4, lr}
 8010520:	eb01 0402 	add.w	r4, r1, r2
 8010524:	d902      	bls.n	801052c <memmove+0x10>
 8010526:	4284      	cmp	r4, r0
 8010528:	4623      	mov	r3, r4
 801052a:	d807      	bhi.n	801053c <memmove+0x20>
 801052c:	1e43      	subs	r3, r0, #1
 801052e:	42a1      	cmp	r1, r4
 8010530:	d008      	beq.n	8010544 <memmove+0x28>
 8010532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010536:	f803 2f01 	strb.w	r2, [r3, #1]!
 801053a:	e7f8      	b.n	801052e <memmove+0x12>
 801053c:	4402      	add	r2, r0
 801053e:	4601      	mov	r1, r0
 8010540:	428a      	cmp	r2, r1
 8010542:	d100      	bne.n	8010546 <memmove+0x2a>
 8010544:	bd10      	pop	{r4, pc}
 8010546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801054a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801054e:	e7f7      	b.n	8010540 <memmove+0x24>

08010550 <_realloc_r>:
 8010550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010554:	4680      	mov	r8, r0
 8010556:	4614      	mov	r4, r2
 8010558:	460e      	mov	r6, r1
 801055a:	b921      	cbnz	r1, 8010566 <_realloc_r+0x16>
 801055c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010560:	4611      	mov	r1, r2
 8010562:	f7ff b84b 	b.w	800f5fc <_malloc_r>
 8010566:	b92a      	cbnz	r2, 8010574 <_realloc_r+0x24>
 8010568:	f7fe ffdc 	bl	800f524 <_free_r>
 801056c:	4625      	mov	r5, r4
 801056e:	4628      	mov	r0, r5
 8010570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010574:	f000 f82e 	bl	80105d4 <_malloc_usable_size_r>
 8010578:	4284      	cmp	r4, r0
 801057a:	4607      	mov	r7, r0
 801057c:	d802      	bhi.n	8010584 <_realloc_r+0x34>
 801057e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010582:	d812      	bhi.n	80105aa <_realloc_r+0x5a>
 8010584:	4621      	mov	r1, r4
 8010586:	4640      	mov	r0, r8
 8010588:	f7ff f838 	bl	800f5fc <_malloc_r>
 801058c:	4605      	mov	r5, r0
 801058e:	2800      	cmp	r0, #0
 8010590:	d0ed      	beq.n	801056e <_realloc_r+0x1e>
 8010592:	42bc      	cmp	r4, r7
 8010594:	4622      	mov	r2, r4
 8010596:	4631      	mov	r1, r6
 8010598:	bf28      	it	cs
 801059a:	463a      	movcs	r2, r7
 801059c:	f7fe ffac 	bl	800f4f8 <memcpy>
 80105a0:	4631      	mov	r1, r6
 80105a2:	4640      	mov	r0, r8
 80105a4:	f7fe ffbe 	bl	800f524 <_free_r>
 80105a8:	e7e1      	b.n	801056e <_realloc_r+0x1e>
 80105aa:	4635      	mov	r5, r6
 80105ac:	e7df      	b.n	801056e <_realloc_r+0x1e>
	...

080105b0 <_read_r>:
 80105b0:	b538      	push	{r3, r4, r5, lr}
 80105b2:	4d07      	ldr	r5, [pc, #28]	; (80105d0 <_read_r+0x20>)
 80105b4:	4604      	mov	r4, r0
 80105b6:	4608      	mov	r0, r1
 80105b8:	4611      	mov	r1, r2
 80105ba:	2200      	movs	r2, #0
 80105bc:	602a      	str	r2, [r5, #0]
 80105be:	461a      	mov	r2, r3
 80105c0:	f7f0 ffde 	bl	8001580 <_read>
 80105c4:	1c43      	adds	r3, r0, #1
 80105c6:	d102      	bne.n	80105ce <_read_r+0x1e>
 80105c8:	682b      	ldr	r3, [r5, #0]
 80105ca:	b103      	cbz	r3, 80105ce <_read_r+0x1e>
 80105cc:	6023      	str	r3, [r4, #0]
 80105ce:	bd38      	pop	{r3, r4, r5, pc}
 80105d0:	20002e90 	.word	0x20002e90

080105d4 <_malloc_usable_size_r>:
 80105d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105d8:	1f18      	subs	r0, r3, #4
 80105da:	2b00      	cmp	r3, #0
 80105dc:	bfbc      	itt	lt
 80105de:	580b      	ldrlt	r3, [r1, r0]
 80105e0:	18c0      	addlt	r0, r0, r3
 80105e2:	4770      	bx	lr

080105e4 <_init>:
 80105e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105e6:	bf00      	nop
 80105e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ea:	bc08      	pop	{r3}
 80105ec:	469e      	mov	lr, r3
 80105ee:	4770      	bx	lr

080105f0 <_fini>:
 80105f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f2:	bf00      	nop
 80105f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105f6:	bc08      	pop	{r3}
 80105f8:	469e      	mov	lr, r3
 80105fa:	4770      	bx	lr
