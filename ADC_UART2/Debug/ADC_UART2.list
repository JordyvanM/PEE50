
ADC_UART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f40  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005160  08005160  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005168  08005168  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800516c  0800516c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  0800517c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  0800517c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d15  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225f  00000000  00000000  00030d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00032fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00033d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a626  00000000  00000000  00034a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe22  00000000  00000000  0005f09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b3a9  00000000  00000000  0006eec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  0017a2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080050d4 	.word	0x080050d4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080050d4 	.word	0x080050d4

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Send_Uart>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Send_Uart (char *string)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f7ff fe6f 	bl	80001ec <strlen>
 800050e:	4603      	mov	r3, r0
 8000510:	b29a      	uxth	r2, r3
 8000512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000516:	6879      	ldr	r1, [r7, #4]
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <Send_Uart+0x28>)
 800051a:	f003 fca9 	bl	8003e70 <HAL_UART_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000090 	.word	0x20000090

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fac0 	bl	8000ab6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f82f 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f923 	bl	8000784 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800053e:	f000 f8f5 	bl	800072c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000542:	f000 f87b 	bl	800063c <MX_ADC1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_ADC_Start(&hadc1);
 8000546:	4812      	ldr	r0, [pc, #72]	; (8000590 <main+0x64>)
 8000548:	f000 fe9e 	bl	8001288 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 800054c:	2105      	movs	r1, #5
 800054e:	4810      	ldr	r0, [pc, #64]	; (8000590 <main+0x64>)
 8000550:	f000 ff54 	bl	80013fc <HAL_ADC_PollForConversion>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d115      	bne.n	8000586 <main+0x5a>
	  {
		  value = HAL_ADC_GetValue(&hadc1);
 800055a:	480d      	ldr	r0, [pc, #52]	; (8000590 <main+0x64>)
 800055c:	f001 f826 	bl	80015ac <HAL_ADC_GetValue>
 8000560:	4603      	mov	r3, r0
 8000562:	60fb      	str	r3, [r7, #12]

		  if(value > 500){
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800056a:	dd0c      	ble.n	8000586 <main+0x5a>
			  itoa(value,string,10);
 800056c:	463b      	mov	r3, r7
 800056e:	220a      	movs	r2, #10
 8000570:	4619      	mov	r1, r3
 8000572:	68f8      	ldr	r0, [r7, #12]
 8000574:	f004 fd62 	bl	800503c <itoa>
			  Send_Uart(string);
 8000578:	463b      	mov	r3, r7
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffc0 	bl	8000500 <Send_Uart>
			  Send_Uart("\n");
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <main+0x68>)
 8000582:	f7ff ffbd 	bl	8000500 <Send_Uart>
		  }
	  }
	  HAL_Delay(200);
 8000586:	20c8      	movs	r0, #200	; 0xc8
 8000588:	f000 fb0a 	bl	8000ba0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800058c:	e7db      	b.n	8000546 <main+0x1a>
 800058e:	bf00      	nop
 8000590:	20000028 	.word	0x20000028
 8000594:	080050ec 	.word	0x080050ec

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	; 0x58
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2244      	movs	r2, #68	; 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fd4a 	bl	8005040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005be:	f002 f89b 	bl	80026f8 <HAL_PWREx_ControlVoltageScaling>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c8:	f000 f90c 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005cc:	2310      	movs	r3, #16
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d8:	2360      	movs	r3, #96	; 0x60
 80005da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e0:	2301      	movs	r3, #1
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005e8:	2328      	movs	r3, #40	; 0x28
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 f8e1 	bl	80027c4 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000608:	f000 f8ec 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2303      	movs	r3, #3
 8000612:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2104      	movs	r1, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fce7 	bl	8002ff8 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000630:	f000 f8d8 	bl	80007e4 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3758      	adds	r7, #88	; 0x58
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800065e:	4b30      	ldr	r3, [pc, #192]	; (8000720 <MX_ADC1_Init+0xe4>)
 8000660:	4a30      	ldr	r2, [pc, #192]	; (8000724 <MX_ADC1_Init+0xe8>)
 8000662:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <MX_ADC1_Init+0xe4>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_ADC1_Init+0xe4>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_ADC1_Init+0xe4>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <MX_ADC1_Init+0xe4>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_ADC1_Init+0xe4>)
 800067e:	2204      	movs	r2, #4
 8000680:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MX_ADC1_Init+0xe4>)
 8000684:	2200      	movs	r2, #0
 8000686:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_ADC1_Init+0xe4>)
 800068a:	2201      	movs	r2, #1
 800068c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_ADC1_Init+0xe4>)
 8000690:	2201      	movs	r2, #1
 8000692:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_ADC1_Init+0xe4>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_ADC1_Init+0xe4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_ADC1_Init+0xe4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_ADC1_Init+0xe4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_ADC1_Init+0xe4>)
 80006b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_ADC1_Init+0xe4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	4817      	ldr	r0, [pc, #92]	; (8000720 <MX_ADC1_Init+0xe4>)
 80006c2:	f000 fc87 	bl	8000fd4 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006cc:	f000 f88a 	bl	80007e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	4811      	ldr	r0, [pc, #68]	; (8000720 <MX_ADC1_Init+0xe4>)
 80006dc:	f001 fc2c 	bl	8001f38 <HAL_ADCEx_MultiModeConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80006e6:	f000 f87d 	bl	80007e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_ADC1_Init+0xec>)
 80006ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ee:	2306      	movs	r3, #6
 80006f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006f6:	237f      	movs	r3, #127	; 0x7f
 80006f8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006fa:	2304      	movs	r3, #4
 80006fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <MX_ADC1_Init+0xe4>)
 8000708:	f000 ff5e 	bl	80015c8 <HAL_ADC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000712:	f000 f867 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000028 	.word	0x20000028
 8000724:	50040000 	.word	0x50040000
 8000728:	21800100 	.word	0x21800100

0800072c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_LPUART1_UART_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000738:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800073c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_LPUART1_UART_Init+0x50>)
 800076a:	f003 fb33 	bl	8003dd4 <HAL_UART_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f836 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000090 	.word	0x20000090
 8000780:	40008000 	.word	0x40008000

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_GPIO_Init+0x5c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <MX_GPIO_Init+0x5c>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_GPIO_Init+0x5c>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x5c>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <MX_GPIO_Init+0x5c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_GPIO_Init+0x5c>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_GPIO_Init+0x5c>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <MX_GPIO_Init+0x5c>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x5c>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007d2:	f001 ffe7 	bl	80027a4 <HAL_PWREx_EnableVddIO2>

}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_MspInit+0x44>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6613      	str	r3, [r2, #96]	; 0x60
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x44>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6593      	str	r3, [r2, #88]	; 0x58
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b0ac      	sub	sp, #176	; 0xb0
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	228c      	movs	r2, #140	; 0x8c
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f004 fbf1 	bl	8005040 <memset>
  if(hadc->Instance==ADC1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a27      	ldr	r2, [pc, #156]	; (8000900 <HAL_ADC_MspInit+0xc8>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d147      	bne.n	80008f8 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000868:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800086c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800086e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000876:	2301      	movs	r3, #1
 8000878:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800087e:	2318      	movs	r3, #24
 8000880:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800088e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fdd1 	bl	8003440 <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80008a4:	f7ff ff9e 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_ADC_MspInit+0xcc>)
 80008aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ac:	4a15      	ldr	r2, [pc, #84]	; (8000904 <HAL_ADC_MspInit+0xcc>)
 80008ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_ADC_MspInit+0xcc>)
 80008b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_ADC_MspInit+0xcc>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c4:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <HAL_ADC_MspInit+0xcc>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_ADC_MspInit+0xcc>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80008d8:	2328      	movs	r3, #40	; 0x28
 80008da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008de:	230b      	movs	r3, #11
 80008e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f001 fd60 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	37b0      	adds	r7, #176	; 0xb0
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	50040000 	.word	0x50040000
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b0ac      	sub	sp, #176	; 0xb0
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	228c      	movs	r2, #140	; 0x8c
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f004 fb89 	bl	8005040 <memset>
  if(huart->Instance==LPUART1)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a26      	ldr	r2, [pc, #152]	; (80009cc <HAL_UART_MspInit+0xc4>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d145      	bne.n	80009c4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000938:	2320      	movs	r3, #32
 800093a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800093c:	2300      	movs	r3, #0
 800093e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4618      	mov	r0, r3
 8000946:	f002 fd7b 	bl	8003440 <HAL_RCCEx_PeriphCLKConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000950:	f7ff ff48 	bl	80007e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <HAL_UART_MspInit+0xc8>)
 8000956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000958:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <HAL_UART_MspInit+0xc8>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_UART_MspInit+0xc8>)
 8000962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0xc8>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <HAL_UART_MspInit+0xc8>)
 8000972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_UART_MspInit+0xc8>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000984:	f001 ff0e 	bl	80027a4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000988:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800098c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009a2:	2308      	movs	r3, #8
 80009a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ac:	4619      	mov	r1, r3
 80009ae:	4809      	ldr	r0, [pc, #36]	; (80009d4 <HAL_UART_MspInit+0xcc>)
 80009b0:	f001 fd02 	bl	80023b8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2046      	movs	r0, #70	; 0x46
 80009ba:	f001 fc48 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80009be:	2046      	movs	r0, #70	; 0x46
 80009c0:	f001 fc61 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	37b0      	adds	r7, #176	; 0xb0
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40008000 	.word	0x40008000
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48001800 	.word	0x48001800

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f89c 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <LPUART1_IRQHandler+0x10>)
 8000a32:	f003 fab1 	bl	8003f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000090 	.word	0x20000090

08000a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a68:	f7ff ffea 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <LoopForever+0xe>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	; (8000ab0 <LoopForever+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f004 fa97 	bl	8004fc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a96:	f7ff fd49 	bl	800052c <main>

08000a9a <LoopForever>:

LoopForever:
    b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa8:	08005170 	.word	0x08005170
  ldr r2, =_sbss
 8000aac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab0:	20000118 	.word	0x20000118

08000ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_2_IRQHandler>

08000ab6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f001 fbb9 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f80e 	bl	8000ae8 <HAL_InitTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	71fb      	strb	r3, [r7, #7]
 8000ad6:	e001      	b.n	8000adc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad8:	f7ff fe8a 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_InitTick+0x6c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d023      	beq.n	8000b44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_InitTick+0x70>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_InitTick+0x6c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 fbc5 	bl	80022a2 <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d10f      	bne.n	8000b3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d809      	bhi.n	8000b38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b2c:	f001 fb8f 	bl	800224e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_InitTick+0x74>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e007      	b.n	8000b48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	73fb      	strb	r3, [r7, #15]
 8000b3c:	e004      	b.n	8000b48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e001      	b.n	8000b48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000114 	.word	0x20000114

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000114 	.word	0x20000114

08000ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba8:	f7ff ffee 	bl	8000b88 <HAL_GetTick>
 8000bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bb8:	d005      	beq.n	8000bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_Delay+0x44>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bc6:	bf00      	nop
 8000bc8:	f7ff ffde 	bl	8000b88 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8f7      	bhi.n	8000bc8 <HAL_Delay+0x28>
  {
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008

08000be8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	609a      	str	r2, [r3, #8]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	609a      	str	r2, [r3, #8]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3360      	adds	r3, #96	; 0x60
 8000c62:	461a      	mov	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <LL_ADC_SetOffset+0x44>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c88:	bf00      	nop
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	03fff000 	.word	0x03fff000

08000c98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3360      	adds	r3, #96	; 0x60
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3360      	adds	r3, #96	; 0x60
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000cee:	bf00      	nop
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	615a      	str	r2, [r3, #20]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b087      	sub	sp, #28
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3330      	adds	r3, #48	; 0x30
 8000d56:	461a      	mov	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	0a1b      	lsrs	r3, r3, #8
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	4413      	add	r3, r2
 8000d64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	f003 031f 	and.w	r3, r3, #31
 8000d70:	211f      	movs	r1, #31
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	401a      	ands	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0e9b      	lsrs	r3, r3, #26
 8000d7e:	f003 011f 	and.w	r1, r3, #31
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b087      	sub	sp, #28
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3314      	adds	r3, #20
 8000dae:	461a      	mov	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	0e5b      	lsrs	r3, r3, #25
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	4413      	add	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	0d1b      	lsrs	r3, r3, #20
 8000dc6:	f003 031f 	and.w	r3, r3, #31
 8000dca:	2107      	movs	r1, #7
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	0d1b      	lsrs	r3, r3, #20
 8000dd8:	f003 031f 	and.w	r3, r3, #31
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	431a      	orrs	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000de8:	bf00      	nop
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	401a      	ands	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0318 	and.w	r3, r3, #24
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e18:	40d9      	lsrs	r1, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e22:	431a      	orrs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	0007ffff 	.word	0x0007ffff

08000e3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 031f 	and.w	r3, r3, #31
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6093      	str	r3, [r2, #8]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000eac:	d101      	bne.n	8000eb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ed0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ed4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000efc:	d101      	bne.n	8000f02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <LL_ADC_IsEnabled+0x18>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <LL_ADC_IsEnabled+0x1a>
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f72:	f043 0204 	orr.w	r2, r3, #4
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d101      	bne.n	8000f9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d101      	bne.n	8000fc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e139      	b.n	8001262 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d109      	bne.n	8001010 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff fc1b 	bl	8000838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff3f 	bl	8000e98 <LL_ADC_IsDeepPowerDownEnabled>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d004      	beq.n	800102a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff25 	bl	8000e74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff5a 	bl	8000ee8 <LL_ADC_IsInternalRegulatorEnabled>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d115      	bne.n	8001066 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff3e 	bl	8000ec0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001044:	4b89      	ldr	r3, [pc, #548]	; (800126c <HAL_ADC_Init+0x298>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	099b      	lsrs	r3, r3, #6
 800104a:	4a89      	ldr	r2, [pc, #548]	; (8001270 <HAL_ADC_Init+0x29c>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	099b      	lsrs	r3, r3, #6
 8001052:	3301      	adds	r3, #1
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001058:	e002      	b.n	8001060 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	3b01      	subs	r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f9      	bne.n	800105a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff3c 	bl	8000ee8 <LL_ADC_IsInternalRegulatorEnabled>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10d      	bne.n	8001092 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	f043 0210 	orr.w	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff75 	bl	8000f86 <LL_ADC_REG_IsConversionOngoing>
 800109c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 80d2 	bne.w	8001250 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 80ce 	bne.w	8001250 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010bc:	f043 0202 	orr.w	r2, r3, #2
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff35 	bl	8000f38 <LL_ADC_IsEnabled>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d115      	bne.n	8001100 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010d4:	4867      	ldr	r0, [pc, #412]	; (8001274 <HAL_ADC_Init+0x2a0>)
 80010d6:	f7ff ff2f 	bl	8000f38 <LL_ADC_IsEnabled>
 80010da:	4604      	mov	r4, r0
 80010dc:	4866      	ldr	r0, [pc, #408]	; (8001278 <HAL_ADC_Init+0x2a4>)
 80010de:	f7ff ff2b 	bl	8000f38 <LL_ADC_IsEnabled>
 80010e2:	4603      	mov	r3, r0
 80010e4:	431c      	orrs	r4, r3
 80010e6:	4865      	ldr	r0, [pc, #404]	; (800127c <HAL_ADC_Init+0x2a8>)
 80010e8:	f7ff ff26 	bl	8000f38 <LL_ADC_IsEnabled>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4323      	orrs	r3, r4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d105      	bne.n	8001100 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4861      	ldr	r0, [pc, #388]	; (8001280 <HAL_ADC_Init+0x2ac>)
 80010fc:	f7ff fd74 	bl	8000be8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7e5b      	ldrb	r3, [r3, #25]
 8001104:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800110a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001110:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001116:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800111e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d106      	bne.n	800113c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	3b01      	subs	r3, #1
 8001134:	045b      	lsls	r3, r3, #17
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	2b00      	cmp	r3, #0
 8001142:	d009      	beq.n	8001158 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001150:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <HAL_ADC_Init+0x2b0>)
 8001160:	4013      	ands	r3, r2
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	69b9      	ldr	r1, [r7, #24]
 8001168:	430b      	orrs	r3, r1
 800116a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff08 	bl	8000f86 <LL_ADC_REG_IsConversionOngoing>
 8001176:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff15 	bl	8000fac <LL_ADC_INJ_IsConversionOngoing>
 8001182:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d140      	bne.n	800120c <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d13d      	bne.n	800120c <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e1b      	ldrb	r3, [r3, #24]
 8001198:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800119a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011b2:	f023 0306 	bic.w	r3, r3, #6
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	430b      	orrs	r3, r1
 80011be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d118      	bne.n	80011fc <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011e0:	4311      	orrs	r1, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011e6:	4311      	orrs	r1, r2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011ec:	430a      	orrs	r2, r1
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	e007      	b.n	800120c <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10c      	bne.n	800122e <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f023 010f 	bic.w	r1, r3, #15
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
 800122c:	e007      	b.n	800123e <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 020f 	bic.w	r2, r2, #15
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	f023 0303 	bic.w	r3, r3, #3
 8001246:	f043 0201 	orr.w	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	659a      	str	r2, [r3, #88]	; 0x58
 800124e:	e007      	b.n	8001260 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	f043 0210 	orr.w	r2, r3, #16
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001260:	7ffb      	ldrb	r3, [r7, #31]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd90      	pop	{r4, r7, pc}
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000
 8001270:	053e2d63 	.word	0x053e2d63
 8001274:	50040000 	.word	0x50040000
 8001278:	50040100 	.word	0x50040100
 800127c:	50040200 	.word	0x50040200
 8001280:	50040300 	.word	0x50040300
 8001284:	fff0c007 	.word	0xfff0c007

08001288 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001290:	4857      	ldr	r0, [pc, #348]	; (80013f0 <HAL_ADC_Start+0x168>)
 8001292:	f7ff fdd3 	bl	8000e3c <LL_ADC_GetMultimode>
 8001296:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe72 	bl	8000f86 <LL_ADC_REG_IsConversionOngoing>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f040 809c 	bne.w	80013e2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_ADC_Start+0x30>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e097      	b.n	80013e8 <HAL_ADC_Start+0x160>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fd8d 	bl	8001de0 <ADC_Enable>
 80012c6:	4603      	mov	r3, r0
 80012c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f040 8083 	bne.w	80013d8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a42      	ldr	r2, [pc, #264]	; (80013f4 <HAL_ADC_Start+0x16c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d002      	beq.n	80012f6 <HAL_ADC_Start+0x6e>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	e000      	b.n	80012f8 <HAL_ADC_Start+0x70>
 80012f6:	4b40      	ldr	r3, [pc, #256]	; (80013f8 <HAL_ADC_Start+0x170>)
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d002      	beq.n	8001306 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800131e:	d106      	bne.n	800132e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	f023 0206 	bic.w	r2, r3, #6
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	65da      	str	r2, [r3, #92]	; 0x5c
 800132c:	e002      	b.n	8001334 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	221c      	movs	r2, #28
 800133a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a2a      	ldr	r2, [pc, #168]	; (80013f4 <HAL_ADC_Start+0x16c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d002      	beq.n	8001354 <HAL_ADC_Start+0xcc>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	e000      	b.n	8001356 <HAL_ADC_Start+0xce>
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <HAL_ADC_Start+0x170>)
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	4293      	cmp	r3, r2
 800135c:	d008      	beq.n	8001370 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	2b05      	cmp	r3, #5
 8001368:	d002      	beq.n	8001370 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	2b09      	cmp	r3, #9
 800136e:	d114      	bne.n	800139a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001386:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fde3 	bl	8000f5e <LL_ADC_REG_StartConversion>
 8001398:	e025      	b.n	80013e6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <HAL_ADC_Start+0x16c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d002      	beq.n	80013b6 <HAL_ADC_Start+0x12e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	e000      	b.n	80013b8 <HAL_ADC_Start+0x130>
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_ADC_Start+0x170>)
 80013b8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00f      	beq.n	80013e6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	659a      	str	r2, [r3, #88]	; 0x58
 80013d6:	e006      	b.n	80013e6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80013e0:	e001      	b.n	80013e6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013e2:	2302      	movs	r3, #2
 80013e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	50040300 	.word	0x50040300
 80013f4:	50040100 	.word	0x50040100
 80013f8:	50040000 	.word	0x50040000

080013fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001406:	4866      	ldr	r0, [pc, #408]	; (80015a0 <HAL_ADC_PollForConversion+0x1a4>)
 8001408:	f7ff fd18 	bl	8000e3c <LL_ADC_GetMultimode>
 800140c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	2b08      	cmp	r3, #8
 8001414:	d102      	bne.n	800141c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001416:	2308      	movs	r3, #8
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	e02a      	b.n	8001472 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d002      	beq.n	800142e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2b09      	cmp	r3, #9
 800142c:	d111      	bne.n	8001452 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001440:	f043 0220 	orr.w	r2, r3, #32
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0a4      	b.n	8001596 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800144c:	2304      	movs	r3, #4
 800144e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001450:	e00f      	b.n	8001472 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001452:	4853      	ldr	r0, [pc, #332]	; (80015a0 <HAL_ADC_PollForConversion+0x1a4>)
 8001454:	f7ff fd00 	bl	8000e58 <LL_ADC_GetMultiDMATransfer>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f043 0220 	orr.w	r2, r3, #32
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e093      	b.n	8001596 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800146e:	2304      	movs	r3, #4
 8001470:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001472:	f7ff fb89 	bl	8000b88 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001478:	e021      	b.n	80014be <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001480:	d01d      	beq.n	80014be <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001482:	f7ff fb81 	bl	8000b88 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d302      	bcc.n	8001498 <HAL_ADC_PollForConversion+0x9c>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d112      	bne.n	80014be <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10b      	bne.n	80014be <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	f043 0204 	orr.w	r2, r3, #4
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e06b      	b.n	8001596 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0d6      	beq.n	800147a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fc1f 	bl	8000d20 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d01c      	beq.n	8001522 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7e5b      	ldrb	r3, [r3, #25]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d118      	bne.n	8001522 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d111      	bne.n	8001522 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <HAL_ADC_PollForConversion+0x1a8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d002      	beq.n	8001532 <HAL_ADC_PollForConversion+0x136>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	e000      	b.n	8001534 <HAL_ADC_PollForConversion+0x138>
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_ADC_PollForConversion+0x1ac>)
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	4293      	cmp	r3, r2
 800153a:	d008      	beq.n	800154e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d002      	beq.n	800154e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b09      	cmp	r3, #9
 800154c:	d104      	bne.n	8001558 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	e00c      	b.n	8001572 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_ADC_PollForConversion+0x1a8>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d002      	beq.n	8001568 <HAL_ADC_PollForConversion+0x16c>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	e000      	b.n	800156a <HAL_ADC_PollForConversion+0x16e>
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_ADC_PollForConversion+0x1ac>)
 800156a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	2b08      	cmp	r3, #8
 8001576:	d104      	bne.n	8001582 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2208      	movs	r2, #8
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e008      	b.n	8001594 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d103      	bne.n	8001594 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	220c      	movs	r2, #12
 8001592:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	50040300 	.word	0x50040300
 80015a4:	50040100 	.word	0x50040100
 80015a8:	50040000 	.word	0x50040000

080015ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0b6      	sub	sp, #216	; 0xd8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x22>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e3e3      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x7ea>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fcc5 	bl	8000f86 <LL_ADC_REG_IsConversionOngoing>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 83c4 	bne.w	8001d8c <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d824      	bhi.n	8001656 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	3b02      	subs	r3, #2
 8001612:	2b03      	cmp	r3, #3
 8001614:	d81b      	bhi.n	800164e <HAL_ADC_ConfigChannel+0x86>
 8001616:	a201      	add	r2, pc, #4	; (adr r2, 800161c <HAL_ADC_ConfigChannel+0x54>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	0800162d 	.word	0x0800162d
 8001620:	08001635 	.word	0x08001635
 8001624:	0800163d 	.word	0x0800163d
 8001628:	08001645 	.word	0x08001645
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	220c      	movs	r2, #12
 8001630:	605a      	str	r2, [r3, #4]
          break;
 8001632:	e011      	b.n	8001658 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2212      	movs	r2, #18
 8001638:	605a      	str	r2, [r3, #4]
          break;
 800163a:	e00d      	b.n	8001658 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2218      	movs	r2, #24
 8001640:	605a      	str	r2, [r3, #4]
          break;
 8001642:	e009      	b.n	8001658 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800164a:	605a      	str	r2, [r3, #4]
          break;
 800164c:	e004      	b.n	8001658 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2206      	movs	r2, #6
 8001652:	605a      	str	r2, [r3, #4]
          break;
 8001654:	e000      	b.n	8001658 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001656:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	f7ff fb6e 	bl	8000d46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fc89 	bl	8000f86 <LL_ADC_REG_IsConversionOngoing>
 8001674:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fc95 	bl	8000fac <LL_ADC_INJ_IsConversionOngoing>
 8001682:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 81c1 	bne.w	8001a12 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001694:	2b00      	cmp	r3, #0
 8001696:	f040 81bc 	bne.w	8001a12 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016a2:	d10f      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff fb75 	bl	8000d9e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fb1c 	bl	8000cfa <LL_ADC_SetSamplingTimeCommonConfig>
 80016c2:	e00e      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	461a      	mov	r2, r3
 80016d2:	f7ff fb64 	bl	8000d9e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fb0c 	bl	8000cfa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	08db      	lsrs	r3, r3, #3
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	2b04      	cmp	r3, #4
 8001702:	d00a      	beq.n	800171a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6919      	ldr	r1, [r3, #16]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001714:	f7ff fa9c 	bl	8000c50 <LL_ADC_SetOffset>
 8001718:	e17b      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fab9 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10a      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x17e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff faae 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	0e9b      	lsrs	r3, r3, #26
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	e01e      	b.n	8001784 <HAL_ADC_ConfigChannel+0x1bc>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff faa3 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001764:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800176c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001774:	2320      	movs	r3, #32
 8001776:	e004      	b.n	8001782 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001778:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_ADC_ConfigChannel+0x1d4>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0e9b      	lsrs	r3, r3, #26
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	e018      	b.n	80017ce <HAL_ADC_ConfigChannel+0x206>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80017b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80017b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80017c0:	2320      	movs	r3, #32
 80017c2:	e004      	b.n	80017ce <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80017c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d106      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fa72 	bl	8000cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fa56 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10a      	bne.n	800180c <HAL_ADC_ConfigChannel+0x244>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2101      	movs	r1, #1
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fa4b 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	0e9b      	lsrs	r3, r3, #26
 8001806:	f003 021f 	and.w	r2, r3, #31
 800180a:	e01e      	b.n	800184a <HAL_ADC_ConfigChannel+0x282>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fa40 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800182a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800182e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001832:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800183a:	2320      	movs	r3, #32
 800183c:	e004      	b.n	8001848 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800183e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x29a>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	0e9b      	lsrs	r3, r3, #26
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	e018      	b.n	8001894 <HAL_ADC_ConfigChannel+0x2cc>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001876:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800187a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800187e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001886:	2320      	movs	r3, #32
 8001888:	e004      	b.n	8001894 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800188a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001894:	429a      	cmp	r2, r3
 8001896:	d106      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2200      	movs	r2, #0
 800189e:	2101      	movs	r1, #1
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fa0f 	bl	8000cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2102      	movs	r1, #2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f9f3 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10a      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x30a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2102      	movs	r1, #2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f9e8 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	0e9b      	lsrs	r3, r3, #26
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	e01e      	b.n	8001910 <HAL_ADC_ConfigChannel+0x348>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2102      	movs	r1, #2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f9dd 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80018f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80018f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001900:	2320      	movs	r3, #32
 8001902:	e004      	b.n	800190e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001904:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x360>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0e9b      	lsrs	r3, r3, #26
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	e016      	b.n	8001956 <HAL_ADC_ConfigChannel+0x38e>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800193a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800193c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001948:	2320      	movs	r3, #32
 800194a:	e004      	b.n	8001956 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800194c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001956:	429a      	cmp	r2, r3
 8001958:	d106      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	2102      	movs	r1, #2
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f9ae 	bl	8000cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2103      	movs	r1, #3
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f992 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10a      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x3cc>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2103      	movs	r1, #3
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f987 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	0e9b      	lsrs	r3, r3, #26
 800198e:	f003 021f 	and.w	r2, r3, #31
 8001992:	e017      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x3fc>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2103      	movs	r1, #3
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f97c 	bl	8000c98 <LL_ADC_GetOffsetChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80019ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019ae:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80019b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80019b6:	2320      	movs	r3, #32
 80019b8:	e003      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80019ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x414>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0e9b      	lsrs	r3, r3, #26
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	e011      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x438>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80019ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80019ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80019f4:	2320      	movs	r3, #32
 80019f6:	e003      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80019f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d106      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2103      	movs	r1, #3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f959 	bl	8000cc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fa8e 	bl	8000f38 <LL_ADC_IsEnabled>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 8140 	bne.w	8001ca4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	461a      	mov	r2, r3
 8001a32:	f7ff f9df 	bl	8000df4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	4a8f      	ldr	r2, [pc, #572]	; (8001c78 <HAL_ADC_ConfigChannel+0x6b0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	f040 8131 	bne.w	8001ca4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10b      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x4a2>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0e9b      	lsrs	r3, r3, #26
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2b09      	cmp	r3, #9
 8001a60:	bf94      	ite	ls
 8001a62:	2301      	movls	r3, #1
 8001a64:	2300      	movhi	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	e019      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x4d6>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a7a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001a82:	2320      	movs	r3, #32
 8001a84:	e003      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	bf94      	ite	ls
 8001a98:	2301      	movls	r3, #1
 8001a9a:	2300      	movhi	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d079      	beq.n	8001b96 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d107      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x4f6>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0e9b      	lsrs	r3, r3, #26
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	069b      	lsls	r3, r3, #26
 8001ab8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001abc:	e015      	b.n	8001aea <HAL_ADC_ConfigChannel+0x522>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ace:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	e003      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	069b      	lsls	r3, r3, #26
 8001ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x542>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0e9b      	lsrs	r3, r3, #26
 8001afc:	3301      	adds	r3, #1
 8001afe:	f003 031f 	and.w	r3, r3, #31
 8001b02:	2101      	movs	r1, #1
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	e017      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x572>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001b22:	2320      	movs	r3, #32
 8001b24:	e003      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	ea42 0103 	orr.w	r1, r2, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10a      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x598>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	0e9b      	lsrs	r3, r3, #26
 8001b50:	3301      	adds	r3, #1
 8001b52:	f003 021f 	and.w	r2, r3, #31
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	051b      	lsls	r3, r3, #20
 8001b5e:	e018      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x5ca>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	e003      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	f003 021f 	and.w	r2, r3, #31
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b92:	430b      	orrs	r3, r1
 8001b94:	e081      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d107      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x5ea>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0e9b      	lsrs	r3, r3, #26
 8001ba8:	3301      	adds	r3, #1
 8001baa:	069b      	lsls	r3, r3, #26
 8001bac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bb0:	e015      	b.n	8001bde <HAL_ADC_ConfigChannel+0x616>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001bca:	2320      	movs	r3, #32
 8001bcc:	e003      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	069b      	lsls	r3, r3, #26
 8001bda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x636>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0e9b      	lsrs	r3, r3, #26
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	e017      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x666>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	61fb      	str	r3, [r7, #28]
  return result;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001c16:	2320      	movs	r3, #32
 8001c18:	e003      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	ea42 0103 	orr.w	r1, r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10d      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x692>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0e9b      	lsrs	r3, r3, #26
 8001c44:	3301      	adds	r3, #1
 8001c46:	f003 021f 	and.w	r2, r3, #31
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b1e      	subs	r3, #30
 8001c52:	051b      	lsls	r3, r3, #20
 8001c54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c58:	e01e      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x6d0>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	613b      	str	r3, [r7, #16]
  return result;
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d104      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001c72:	2320      	movs	r3, #32
 8001c74:	e006      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x6bc>
 8001c76:	bf00      	nop
 8001c78:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	f003 021f 	and.w	r2, r3, #31
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b1e      	subs	r3, #30
 8001c92:	051b      	lsls	r3, r3, #20
 8001c94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	6892      	ldr	r2, [r2, #8]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7ff f87d 	bl	8000d9e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_ADC_ConfigChannel+0x7f4>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d07a      	beq.n	8001da6 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb0:	4843      	ldr	r0, [pc, #268]	; (8001dc0 <HAL_ADC_ConfigChannel+0x7f8>)
 8001cb2:	f7fe ffbf 	bl	8000c34 <LL_ADC_GetCommonPathInternalCh>
 8001cb6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a41      	ldr	r2, [pc, #260]	; (8001dc4 <HAL_ADC_ConfigChannel+0x7fc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d12c      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d126      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a3c      	ldr	r2, [pc, #240]	; (8001dc8 <HAL_ADC_ConfigChannel+0x800>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d004      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0x71c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <HAL_ADC_ConfigChannel+0x804>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d15d      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ce8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cec:	4619      	mov	r1, r3
 8001cee:	4834      	ldr	r0, [pc, #208]	; (8001dc0 <HAL_ADC_ConfigChannel+0x7f8>)
 8001cf0:	f7fe ff8d 	bl	8000c0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_ADC_ConfigChannel+0x808>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	4a36      	ldr	r2, [pc, #216]	; (8001dd4 <HAL_ADC_ConfigChannel+0x80c>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d0e:	e002      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f9      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d1c:	e040      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a2d      	ldr	r2, [pc, #180]	; (8001dd8 <HAL_ADC_ConfigChannel+0x810>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d118      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x792>
 8001d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d112      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <HAL_ADC_ConfigChannel+0x800>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d004      	beq.n	8001d48 <HAL_ADC_ConfigChannel+0x780>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_ADC_ConfigChannel+0x804>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d12d      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d50:	4619      	mov	r1, r3
 8001d52:	481b      	ldr	r0, [pc, #108]	; (8001dc0 <HAL_ADC_ConfigChannel+0x7f8>)
 8001d54:	f7fe ff5b 	bl	8000c0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d58:	e024      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_ADC_ConfigChannel+0x814>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d120      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d11a      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <HAL_ADC_ConfigChannel+0x800>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d115      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d82:	4619      	mov	r1, r3
 8001d84:	480e      	ldr	r0, [pc, #56]	; (8001dc0 <HAL_ADC_ConfigChannel+0x7f8>)
 8001d86:	f7fe ff42 	bl	8000c0e <LL_ADC_SetCommonPathInternalCh>
 8001d8a:	e00c      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	f043 0220 	orr.w	r2, r3, #32
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d9e:	e002      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001da0:	bf00      	nop
 8001da2:	e000      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001dae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	37d8      	adds	r7, #216	; 0xd8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	80080000 	.word	0x80080000
 8001dc0:	50040300 	.word	0x50040300
 8001dc4:	c7520000 	.word	0xc7520000
 8001dc8:	50040000 	.word	0x50040000
 8001dcc:	50040200 	.word	0x50040200
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	053e2d63 	.word	0x053e2d63
 8001dd8:	cb840000 	.word	0xcb840000
 8001ddc:	80000001 	.word	0x80000001

08001de0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f8a1 	bl	8000f38 <LL_ADC_IsEnabled>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d169      	bne.n	8001ed0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <ADC_Enable+0xfc>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00d      	beq.n	8001e26 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f043 0210 	orr.w	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e055      	b.n	8001ed2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f870 	bl	8000f10 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e30:	482b      	ldr	r0, [pc, #172]	; (8001ee0 <ADC_Enable+0x100>)
 8001e32:	f7fe feff 	bl	8000c34 <LL_ADC_GetCommonPathInternalCh>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <ADC_Enable+0x104>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	4a28      	ldr	r2, [pc, #160]	; (8001ee8 <ADC_Enable+0x108>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	099b      	lsrs	r3, r3, #6
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001e5a:	e002      	b.n	8001e62 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f9      	bne.n	8001e5c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e68:	f7fe fe8e 	bl	8000b88 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e6e:	e028      	b.n	8001ec2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f85f 	bl	8000f38 <LL_ADC_IsEnabled>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d104      	bne.n	8001e8a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f843 	bl	8000f10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e8a:	f7fe fe7d 	bl	8000b88 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d914      	bls.n	8001ec2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d00d      	beq.n	8001ec2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f043 0210 	orr.w	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e007      	b.n	8001ed2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d1cf      	bne.n	8001e70 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	8000003f 	.word	0x8000003f
 8001ee0:	50040300 	.word	0x50040300
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	053e2d63 	.word	0x053e2d63

08001eec <LL_ADC_IsEnabled>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <LL_ADC_IsEnabled+0x18>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <LL_ADC_IsEnabled+0x1a>
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_ADC_REG_IsConversionOngoing>:
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d101      	bne.n	8001f2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b0a1      	sub	sp, #132	; 0x84
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e093      	b.n	800207e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001f62:	2300      	movs	r3, #0
 8001f64:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a47      	ldr	r2, [pc, #284]	; (8002088 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d102      	bne.n	8001f76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f70:	4b46      	ldr	r3, [pc, #280]	; (800208c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	e001      	b.n	8001f7a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10b      	bne.n	8001f98 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e072      	b.n	800207e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ffb9 	bl	8001f12 <LL_ADC_REG_IsConversionOngoing>
 8001fa0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ffb3 	bl	8001f12 <LL_ADC_REG_IsConversionOngoing>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d154      	bne.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d151      	bne.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fb8:	4b35      	ldr	r3, [pc, #212]	; (8002090 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001fba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d02c      	beq.n	800201e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fd6:	035b      	lsls	r3, r3, #13
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fde:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fe0:	4829      	ldr	r0, [pc, #164]	; (8002088 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fe2:	f7ff ff83 	bl	8001eec <LL_ADC_IsEnabled>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	4828      	ldr	r0, [pc, #160]	; (800208c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001fea:	f7ff ff7f 	bl	8001eec <LL_ADC_IsEnabled>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	431c      	orrs	r4, r3
 8001ff2:	4828      	ldr	r0, [pc, #160]	; (8002094 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ff4:	f7ff ff7a 	bl	8001eec <LL_ADC_IsEnabled>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4323      	orrs	r3, r4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d137      	bne.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002008:	f023 030f 	bic.w	r3, r3, #15
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	6811      	ldr	r1, [r2, #0]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	6892      	ldr	r2, [r2, #8]
 8002014:	430a      	orrs	r2, r1
 8002016:	431a      	orrs	r2, r3
 8002018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800201a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800201c:	e028      	b.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800201e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002028:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800202a:	4817      	ldr	r0, [pc, #92]	; (8002088 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800202c:	f7ff ff5e 	bl	8001eec <LL_ADC_IsEnabled>
 8002030:	4604      	mov	r4, r0
 8002032:	4816      	ldr	r0, [pc, #88]	; (800208c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002034:	f7ff ff5a 	bl	8001eec <LL_ADC_IsEnabled>
 8002038:	4603      	mov	r3, r0
 800203a:	431c      	orrs	r4, r3
 800203c:	4815      	ldr	r0, [pc, #84]	; (8002094 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800203e:	f7ff ff55 	bl	8001eec <LL_ADC_IsEnabled>
 8002042:	4603      	mov	r3, r0
 8002044:	4323      	orrs	r3, r4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d112      	bne.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800204a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002052:	f023 030f 	bic.w	r3, r3, #15
 8002056:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002058:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800205a:	e009      	b.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800206e:	e000      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002070:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800207a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800207e:	4618      	mov	r0, r3
 8002080:	3784      	adds	r7, #132	; 0x84
 8002082:	46bd      	mov	sp, r7
 8002084:	bd90      	pop	{r4, r7, pc}
 8002086:	bf00      	nop
 8002088:	50040000 	.word	0x50040000
 800208c:	50040100 	.word	0x50040100
 8002090:	50040300 	.word	0x50040300
 8002094:	50040200 	.word	0x50040200

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	; (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	; (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	; (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	; (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff3e 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff8e 	bl	800218c <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5d 	bl	8002138 <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff31 	bl	80020fc <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa2 	bl	80021f4 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d008      	beq.n	80022e4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2204      	movs	r2, #4
 80022d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e022      	b.n	800232a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 020e 	bic.w	r2, r2, #14
 80022f2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	f003 021c 	and.w	r2, r3, #28
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	2101      	movs	r1, #1
 8002312:	fa01 f202 	lsl.w	r2, r1, r2
 8002316:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d005      	beq.n	800235a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2204      	movs	r2, #4
 8002352:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e029      	b.n	80023ae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 020e 	bic.w	r2, r2, #14
 8002368:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f003 021c 	and.w	r2, r3, #28
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
    }
  }
  return status;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c6:	e166      	b.n	8002696 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	4013      	ands	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8158 	beq.w	8002690 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d005      	beq.n	80023f8 <HAL_GPIO_Init+0x40>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d130      	bne.n	800245a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800242e:	2201      	movs	r2, #1
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	f003 0201 	and.w	r2, r3, #1
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b03      	cmp	r3, #3
 8002464:	d017      	beq.n	8002496 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d123      	bne.n	80024ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	08da      	lsrs	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3208      	adds	r2, #8
 80024aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	08da      	lsrs	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3208      	adds	r2, #8
 80024e4:	6939      	ldr	r1, [r7, #16]
 80024e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	2203      	movs	r2, #3
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0203 	and.w	r2, r3, #3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80b2 	beq.w	8002690 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252c:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_GPIO_Init+0x2fc>)
 800252e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002530:	4a60      	ldr	r2, [pc, #384]	; (80026b4 <HAL_GPIO_Init+0x2fc>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6613      	str	r3, [r2, #96]	; 0x60
 8002538:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HAL_GPIO_Init+0x2fc>)
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002544:	4a5c      	ldr	r2, [pc, #368]	; (80026b8 <HAL_GPIO_Init+0x300>)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800256e:	d02b      	beq.n	80025c8 <HAL_GPIO_Init+0x210>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d025      	beq.n	80025c4 <HAL_GPIO_Init+0x20c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a51      	ldr	r2, [pc, #324]	; (80026c0 <HAL_GPIO_Init+0x308>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d01f      	beq.n	80025c0 <HAL_GPIO_Init+0x208>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a50      	ldr	r2, [pc, #320]	; (80026c4 <HAL_GPIO_Init+0x30c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d019      	beq.n	80025bc <HAL_GPIO_Init+0x204>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a4f      	ldr	r2, [pc, #316]	; (80026c8 <HAL_GPIO_Init+0x310>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d013      	beq.n	80025b8 <HAL_GPIO_Init+0x200>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a4e      	ldr	r2, [pc, #312]	; (80026cc <HAL_GPIO_Init+0x314>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00d      	beq.n	80025b4 <HAL_GPIO_Init+0x1fc>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a4d      	ldr	r2, [pc, #308]	; (80026d0 <HAL_GPIO_Init+0x318>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d007      	beq.n	80025b0 <HAL_GPIO_Init+0x1f8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a4c      	ldr	r2, [pc, #304]	; (80026d4 <HAL_GPIO_Init+0x31c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d101      	bne.n	80025ac <HAL_GPIO_Init+0x1f4>
 80025a8:	2307      	movs	r3, #7
 80025aa:	e00e      	b.n	80025ca <HAL_GPIO_Init+0x212>
 80025ac:	2308      	movs	r3, #8
 80025ae:	e00c      	b.n	80025ca <HAL_GPIO_Init+0x212>
 80025b0:	2306      	movs	r3, #6
 80025b2:	e00a      	b.n	80025ca <HAL_GPIO_Init+0x212>
 80025b4:	2305      	movs	r3, #5
 80025b6:	e008      	b.n	80025ca <HAL_GPIO_Init+0x212>
 80025b8:	2304      	movs	r3, #4
 80025ba:	e006      	b.n	80025ca <HAL_GPIO_Init+0x212>
 80025bc:	2303      	movs	r3, #3
 80025be:	e004      	b.n	80025ca <HAL_GPIO_Init+0x212>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e002      	b.n	80025ca <HAL_GPIO_Init+0x212>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_GPIO_Init+0x212>
 80025c8:	2300      	movs	r3, #0
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	f002 0203 	and.w	r2, r2, #3
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	4093      	lsls	r3, r2
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025da:	4937      	ldr	r1, [pc, #220]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_GPIO_Init+0x320>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800260c:	4a32      	ldr	r2, [pc, #200]	; (80026d8 <HAL_GPIO_Init+0x320>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <HAL_GPIO_Init+0x320>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002636:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <HAL_GPIO_Init+0x320>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800263c:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <HAL_GPIO_Init+0x320>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_GPIO_Init+0x320>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <HAL_GPIO_Init+0x320>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800268a:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <HAL_GPIO_Init+0x320>)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3301      	adds	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f ae91 	bne.w	80023c8 <HAL_GPIO_Init+0x10>
  }
}
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40010000 	.word	0x40010000
 80026bc:	48000400 	.word	0x48000400
 80026c0:	48000800 	.word	0x48000800
 80026c4:	48000c00 	.word	0x48000c00
 80026c8:	48001000 	.word	0x48001000
 80026cc:	48001400 	.word	0x48001400
 80026d0:	48001800 	.word	0x48001800
 80026d4:	48001c00 	.word	0x48001c00
 80026d8:	40010400 	.word	0x40010400

080026dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40007000 	.word	0x40007000

080026f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002706:	d130      	bne.n	800276a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002714:	d038      	beq.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800271e:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002724:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2232      	movs	r2, #50	; 0x32
 800272c:	fb02 f303 	mul.w	r3, r2, r3
 8002730:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0c9b      	lsrs	r3, r3, #18
 8002738:	3301      	adds	r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273c:	e002      	b.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3b01      	subs	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002744:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002750:	d102      	bne.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f2      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002764:	d110      	bne.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e00f      	b.n	800278a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	d007      	beq.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002780:	4a05      	ldr	r2, [pc, #20]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002786:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40007000 	.word	0x40007000
 800279c:	20000000 	.word	0x20000000
 80027a0:	431bde83 	.word	0x431bde83

080027a4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80027ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b2:	6053      	str	r3, [r2, #4]
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40007000 	.word	0x40007000

080027c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f000 bc08 	b.w	8002fe8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d8:	4b96      	ldr	r3, [pc, #600]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e2:	4b94      	ldr	r3, [pc, #592]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80e4 	beq.w	80029c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_RCC_OscConfig+0x4c>
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	f040 808b 	bne.w	800291e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b01      	cmp	r3, #1
 800280c:	f040 8087 	bne.w	800291e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002810:	4b88      	ldr	r3, [pc, #544]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x64>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e3df      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1a      	ldr	r2, [r3, #32]
 800282c:	4b81      	ldr	r3, [pc, #516]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_RCC_OscConfig+0x7e>
 8002838:	4b7e      	ldr	r3, [pc, #504]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002840:	e005      	b.n	800284e <HAL_RCC_OscConfig+0x8a>
 8002842:	4b7c      	ldr	r3, [pc, #496]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284e:	4293      	cmp	r3, r2
 8002850:	d223      	bcs.n	800289a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fd92 	bl	8003380 <RCC_SetFlashLatencyFromMSIRange>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e3c0      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002866:	4b73      	ldr	r3, [pc, #460]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a72      	ldr	r2, [pc, #456]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800286c:	f043 0308 	orr.w	r3, r3, #8
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	496d      	ldr	r1, [pc, #436]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002884:	4b6b      	ldr	r3, [pc, #428]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	4968      	ldr	r1, [pc, #416]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
 8002898:	e025      	b.n	80028e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800289a:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a65      	ldr	r2, [pc, #404]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4960      	ldr	r1, [pc, #384]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b8:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	495b      	ldr	r1, [pc, #364]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fd52 	bl	8003380 <RCC_SetFlashLatencyFromMSIRange>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e380      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e6:	f000 fc87 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b51      	ldr	r3, [pc, #324]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	4950      	ldr	r1, [pc, #320]	; (8002a38 <HAL_RCC_OscConfig+0x274>)
 80028f8:	5ccb      	ldrb	r3, [r1, r3]
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	4a4e      	ldr	r2, [pc, #312]	; (8002a3c <HAL_RCC_OscConfig+0x278>)
 8002904:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002906:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <HAL_RCC_OscConfig+0x27c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f8ec 	bl	8000ae8 <HAL_InitTick>
 8002910:	4603      	mov	r3, r0
 8002912:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d052      	beq.n	80029c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	e364      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d032      	beq.n	800298c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002926:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a42      	ldr	r2, [pc, #264]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002932:	f7fe f929 	bl	8000b88 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800293a:	f7fe f925 	bl	8000b88 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e34d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800294c:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002958:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a35      	ldr	r2, [pc, #212]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800295e:	f043 0308 	orr.w	r3, r3, #8
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4930      	ldr	r1, [pc, #192]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002976:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	492b      	ldr	r1, [pc, #172]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
 800298a:	e01a      	b.n	80029c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800298c:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a28      	ldr	r2, [pc, #160]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002998:	f7fe f8f6 	bl	8000b88 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029a0:	f7fe f8f2 	bl	8000b88 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e31a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x1dc>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d073      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x21c>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d10e      	bne.n	80029f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d10b      	bne.n	80029f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d063      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x2f0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d15f      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e2f7      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a00:	d106      	bne.n	8002a10 <HAL_RCC_OscConfig+0x24c>
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e025      	b.n	8002a5c <HAL_RCC_OscConfig+0x298>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a18:	d114      	bne.n	8002a44 <HAL_RCC_OscConfig+0x280>
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a02      	ldr	r2, [pc, #8]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e013      	b.n	8002a5c <HAL_RCC_OscConfig+0x298>
 8002a34:	40021000 	.word	0x40021000
 8002a38:	080050f0 	.word	0x080050f0
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000004 	.word	0x20000004
 8002a44:	4ba0      	ldr	r3, [pc, #640]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a9f      	ldr	r2, [pc, #636]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b9d      	ldr	r3, [pc, #628]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a9c      	ldr	r2, [pc, #624]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe f890 	bl	8000b88 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe f88c 	bl	8000b88 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e2b4      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7e:	4b92      	ldr	r3, [pc, #584]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x2a8>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe f87c 	bl	8000b88 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe f878 	bl	8000b88 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e2a0      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa6:	4b88      	ldr	r3, [pc, #544]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2d0>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d060      	beq.n	8002b84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x310>
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d119      	bne.n	8002b02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d116      	bne.n	8002b02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad4:	4b7c      	ldr	r3, [pc, #496]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_OscConfig+0x328>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e27d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	4973      	ldr	r1, [pc, #460]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b00:	e040      	b.n	8002b84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d023      	beq.n	8002b52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b0a:	4b6f      	ldr	r3, [pc, #444]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6e      	ldr	r2, [pc, #440]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe f837 	bl	8000b88 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7fe f833 	bl	8000b88 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e25b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b30:	4b65      	ldr	r3, [pc, #404]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3c:	4b62      	ldr	r3, [pc, #392]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	061b      	lsls	r3, r3, #24
 8002b4a:	495f      	ldr	r1, [pc, #380]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
 8002b50:	e018      	b.n	8002b84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b52:	4b5d      	ldr	r3, [pc, #372]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a5c      	ldr	r2, [pc, #368]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7fe f813 	bl	8000b88 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b66:	f7fe f80f 	bl	8000b88 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e237      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d03c      	beq.n	8002c0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b98:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9e:	4a4a      	ldr	r2, [pc, #296]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7fd ffee 	bl	8000b88 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb0:	f7fd ffea 	bl	8000b88 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e212      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc2:	4b41      	ldr	r3, [pc, #260]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ef      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x3ec>
 8002bd0:	e01b      	b.n	8002c0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd8:	4a3b      	ldr	r2, [pc, #236]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be2:	f7fd ffd1 	bl	8000b88 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bea:	f7fd ffcd 	bl	8000b88 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e1f5      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bfc:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1ef      	bne.n	8002bea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80a6 	beq.w	8002d64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10d      	bne.n	8002c44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c32:	6593      	str	r3, [r2, #88]	; 0x58
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c40:	2301      	movs	r3, #1
 8002c42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c44:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_RCC_OscConfig+0x508>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d118      	bne.n	8002c82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_RCC_OscConfig+0x508>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_RCC_OscConfig+0x508>)
 8002c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5c:	f7fd ff94 	bl	8000b88 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c64:	f7fd ff90 	bl	8000b88 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e1b8      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_RCC_OscConfig+0x508>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d108      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4d8>
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9a:	e029      	b.n	8002cf0 <HAL_RCC_OscConfig+0x52c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d115      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x50c>
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	4a07      	ldr	r2, [pc, #28]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	4a03      	ldr	r2, [pc, #12]	; (8002cc8 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCC_OscConfig+0x52c>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40007000 	.word	0x40007000
 8002cd0:	4b9d      	ldr	r3, [pc, #628]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	4a9c      	ldr	r2, [pc, #624]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ce0:	4b99      	ldr	r3, [pc, #612]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	4a98      	ldr	r2, [pc, #608]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002ce8:	f023 0304 	bic.w	r3, r3, #4
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d016      	beq.n	8002d26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf8:	f7fd ff46 	bl	8000b88 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fd ff42 	bl	8000b88 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e168      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d16:	4b8c      	ldr	r3, [pc, #560]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ed      	beq.n	8002d00 <HAL_RCC_OscConfig+0x53c>
 8002d24:	e015      	b.n	8002d52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d26:	f7fd ff2f 	bl	8000b88 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fd ff2b 	bl	8000b88 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e151      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d44:	4b80      	ldr	r3, [pc, #512]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ed      	bne.n	8002d2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d52:	7ffb      	ldrb	r3, [r7, #31]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d58:	4b7b      	ldr	r3, [pc, #492]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	4a7a      	ldr	r2, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d03c      	beq.n	8002dea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01c      	beq.n	8002db2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d78:	4b73      	ldr	r3, [pc, #460]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d7e:	4a72      	ldr	r2, [pc, #456]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fd fefe 	bl	8000b88 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d90:	f7fd fefa 	bl	8000b88 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e122      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002da2:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ef      	beq.n	8002d90 <HAL_RCC_OscConfig+0x5cc>
 8002db0:	e01b      	b.n	8002dea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002db2:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002db8:	4a63      	ldr	r2, [pc, #396]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fd fee1 	bl	8000b88 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dca:	f7fd fedd 	bl	8000b88 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e105      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ddc:	4b5a      	ldr	r3, [pc, #360]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ef      	bne.n	8002dca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80f9 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	f040 80cf 	bne.w	8002f9c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dfe:	4b52      	ldr	r3, [pc, #328]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 0203 	and.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d12c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d123      	bne.n	8002e6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d11b      	bne.n	8002e6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d113      	bne.n	8002e6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	3b01      	subs	r3, #1
 8002e52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d109      	bne.n	8002e6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	3b01      	subs	r3, #1
 8002e66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d071      	beq.n	8002f50 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d068      	beq.n	8002f44 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e72:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e7e:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0ac      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2d      	ldr	r2, [pc, #180]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e9a:	f7fd fe75 	bl	8000b88 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7fd fe71 	bl	8000b88 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e099      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb4:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f0      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec0:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <HAL_RCC_OscConfig+0x788>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ed0:	3a01      	subs	r2, #1
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	4311      	orrs	r1, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eda:	0212      	lsls	r2, r2, #8
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ee2:	0852      	lsrs	r2, r2, #1
 8002ee4:	3a01      	subs	r2, #1
 8002ee6:	0552      	lsls	r2, r2, #21
 8002ee8:	4311      	orrs	r1, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eee:	0852      	lsrs	r2, r2, #1
 8002ef0:	3a01      	subs	r2, #1
 8002ef2:	0652      	lsls	r2, r2, #25
 8002ef4:	4311      	orrs	r1, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002efa:	06d2      	lsls	r2, r2, #27
 8002efc:	430a      	orrs	r2, r1
 8002efe:	4912      	ldr	r1, [pc, #72]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0f      	ldr	r2, [pc, #60]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f1c:	f7fd fe34 	bl	8000b88 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fd fe30 	bl	8000b88 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e058      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <HAL_RCC_OscConfig+0x784>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f42:	e050      	b.n	8002fe6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e04f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d144      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a23      	ldr	r2, [pc, #140]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f68:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f74:	f7fd fe08 	bl	8000b88 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fd fe04 	bl	8000b88 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e02c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x7b8>
 8002f9a:	e024      	b.n	8002fe6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d01f      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fd fdeb 	bl	8000b88 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fd fde7 	bl	8000b88 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e00f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	4905      	ldr	r1, [pc, #20]	; (8002ff0 <HAL_RCC_OscConfig+0x82c>)
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCC_OscConfig+0x830>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60cb      	str	r3, [r1, #12]
 8002fe0:	e001      	b.n	8002fe6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	feeefffc 	.word	0xfeeefffc

08002ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0e7      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b75      	ldr	r3, [pc, #468]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d910      	bls.n	800303c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b72      	ldr	r3, [pc, #456]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 0207 	bic.w	r2, r3, #7
 8003022:	4970      	ldr	r1, [pc, #448]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b6e      	ldr	r3, [pc, #440]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0cf      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4b66      	ldr	r3, [pc, #408]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003054:	429a      	cmp	r2, r3
 8003056:	d908      	bls.n	800306a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b63      	ldr	r3, [pc, #396]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4960      	ldr	r1, [pc, #384]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d04c      	beq.n	8003110 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307e:	4b5a      	ldr	r3, [pc, #360]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d121      	bne.n	80030ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0a6      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003096:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d115      	bne.n	80030ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e09a      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ae:	4b4e      	ldr	r3, [pc, #312]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e08e      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030be:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e086      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ce:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f023 0203 	bic.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4943      	ldr	r1, [pc, #268]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e0:	f7fd fd52 	bl	8000b88 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e8:	f7fd fd4e 	bl	8000b88 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e06e      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 020c 	and.w	r2, r3, #12
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	429a      	cmp	r2, r3
 800310e:	d1eb      	bne.n	80030e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003128:	429a      	cmp	r2, r3
 800312a:	d208      	bcs.n	800313e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	492b      	ldr	r1, [pc, #172]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d210      	bcs.n	800316e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 0207 	bic.w	r2, r3, #7
 8003154:	4923      	ldr	r1, [pc, #140]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315c:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <HAL_RCC_ClockConfig+0x1ec>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e036      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317a:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4918      	ldr	r1, [pc, #96]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4910      	ldr	r1, [pc, #64]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ac:	f000 f824 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	490b      	ldr	r1, [pc, #44]	; (80031ec <HAL_RCC_ClockConfig+0x1f4>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
 80031c8:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 80031ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1fc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fc89 	bl	8000ae8 <HAL_InitTick>
 80031d6:	4603      	mov	r3, r0
 80031d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80031da:	7afb      	ldrb	r3, [r7, #11]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	080050f0 	.word	0x080050f0
 80031f0:	20000000 	.word	0x20000000
 80031f4:	20000004 	.word	0x20000004

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003206:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003210:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x34>
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b0c      	cmp	r3, #12
 8003224:	d121      	bne.n	800326a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d11e      	bne.n	800326a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800322c:	4b34      	ldr	r3, [pc, #208]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	e005      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003254:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d102      	bne.n	8003276 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_RCC_GetSysClockFreq+0x110>)
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	e004      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d101      	bne.n	8003280 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800327c:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_RCC_GetSysClockFreq+0x114>)
 800327e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d134      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0xa6>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d003      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0xac>
 800329c:	e005      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <HAL_RCC_GetSysClockFreq+0x110>)
 80032a0:	617b      	str	r3, [r7, #20]
      break;
 80032a2:	e005      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_GetSysClockFreq+0x114>)
 80032a6:	617b      	str	r3, [r7, #20]
      break;
 80032a8:	e002      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	617b      	str	r3, [r7, #20]
      break;
 80032ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b0:	4b13      	ldr	r3, [pc, #76]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	3301      	adds	r3, #1
 80032bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	fb03 f202 	mul.w	r2, r3, r2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	0e5b      	lsrs	r3, r3, #25
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	3301      	adds	r3, #1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032f0:	69bb      	ldr	r3, [r7, #24]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	08005108 	.word	0x08005108
 8003308:	00f42400 	.word	0x00f42400
 800330c:	007a1200 	.word	0x007a1200

08003310 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <HAL_RCC_GetHCLKFreq+0x14>)
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000000 	.word	0x20000000

08003328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800332c:	f7ff fff0 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4904      	ldr	r1, [pc, #16]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	08005100 	.word	0x08005100

08003354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003358:	f7ff ffda 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	0adb      	lsrs	r3, r3, #11
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4904      	ldr	r1, [pc, #16]	; (800337c <HAL_RCC_GetPCLK2Freq+0x28>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	08005100 	.word	0x08005100

08003380 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003398:	f7ff f9a0 	bl	80026dc <HAL_PWREx_GetVoltageRange>
 800339c:	6178      	str	r0, [r7, #20]
 800339e:	e014      	b.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4a24      	ldr	r2, [pc, #144]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6593      	str	r3, [r2, #88]	; 0x58
 80033ac:	4b22      	ldr	r3, [pc, #136]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033b8:	f7ff f990 	bl	80026dc <HAL_PWREx_GetVoltageRange>
 80033bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033be:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d0:	d10b      	bne.n	80033ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b80      	cmp	r3, #128	; 0x80
 80033d6:	d919      	bls.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2ba0      	cmp	r3, #160	; 0xa0
 80033dc:	d902      	bls.n	80033e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033de:	2302      	movs	r3, #2
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	e013      	b.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e4:	2301      	movs	r3, #1
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	e010      	b.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d902      	bls.n	80033f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033f0:	2303      	movs	r3, #3
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	e00a      	b.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b80      	cmp	r3, #128	; 0x80
 80033fa:	d102      	bne.n	8003402 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033fc:	2302      	movs	r3, #2
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	e004      	b.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b70      	cmp	r3, #112	; 0x70
 8003406:	d101      	bne.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003408:	2301      	movs	r3, #1
 800340a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 0207 	bic.w	r2, r3, #7
 8003414:	4909      	ldr	r1, [pc, #36]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800341c:	4b07      	ldr	r3, [pc, #28]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	429a      	cmp	r2, r3
 8003428:	d001      	beq.n	800342e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000
 800343c:	40022000 	.word	0x40022000

08003440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003448:	2300      	movs	r3, #0
 800344a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800344c:	2300      	movs	r3, #0
 800344e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003458:	2b00      	cmp	r3, #0
 800345a:	d041      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003460:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003464:	d02a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003466:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800346a:	d824      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800346c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003476:	d81e      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800347c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003480:	d010      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003482:	e018      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003484:	4b86      	ldr	r3, [pc, #536]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a85      	ldr	r2, [pc, #532]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003490:	e015      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f000 facd 	bl	8003a38 <RCCEx_PLLSAI1_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a2:	e00c      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3320      	adds	r3, #32
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fbb6 	bl	8003c1c <RCCEx_PLLSAI2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b4:	e003      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	74fb      	strb	r3, [r7, #19]
      break;
 80034ba:	e000      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10b      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c4:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d2:	4973      	ldr	r1, [pc, #460]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034da:	e001      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d041      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034f4:	d02a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034fa:	d824      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003500:	d008      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003506:	d81e      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800350c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003510:	d010      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003512:	e018      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003514:	4b62      	ldr	r3, [pc, #392]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a61      	ldr	r2, [pc, #388]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003520:	e015      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fa85 	bl	8003a38 <RCCEx_PLLSAI1_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003532:	e00c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3320      	adds	r3, #32
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fb6e 	bl	8003c1c <RCCEx_PLLSAI2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	74fb      	strb	r3, [r7, #19]
      break;
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800354c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003554:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003562:	494f      	ldr	r1, [pc, #316]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800356a:	e001      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80a0 	beq.w	80036be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003598:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	4a40      	ldr	r2, [pc, #256]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a2:	6593      	str	r3, [r2, #88]	; 0x58
 80035a4:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b0:	2301      	movs	r3, #1
 80035b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b4:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3a      	ldr	r2, [pc, #232]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035c0:	f7fd fae2 	bl	8000b88 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c6:	e009      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c8:	f7fd fade 	bl	8000b88 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d902      	bls.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	74fb      	strb	r3, [r7, #19]
        break;
 80035da:	e005      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ef      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d15c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01f      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	d019      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800360c:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003616:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	4a20      	ldr	r2, [pc, #128]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	4a1c      	ldr	r2, [pc, #112]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003638:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fd fa9d 	bl	8000b88 <HAL_GetTick>
 800364e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003650:	e00b      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd fa99 	bl	8000b88 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d902      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	74fb      	strb	r3, [r7, #19]
            break;
 8003668:	e006      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ec      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	4904      	ldr	r1, [pc, #16]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003696:	e009      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
 800369c:	e006      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ac:	7c7b      	ldrb	r3, [r7, #17]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b2:	4ba6      	ldr	r3, [pc, #664]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	4aa5      	ldr	r2, [pc, #660]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ca:	4ba0      	ldr	r3, [pc, #640]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f023 0203 	bic.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	499c      	ldr	r1, [pc, #624]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036ec:	4b97      	ldr	r3, [pc, #604]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f2:	f023 020c 	bic.w	r2, r3, #12
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	4994      	ldr	r1, [pc, #592]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800370e:	4b8f      	ldr	r3, [pc, #572]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	498b      	ldr	r1, [pc, #556]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003730:	4b86      	ldr	r3, [pc, #536]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4983      	ldr	r1, [pc, #524]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003752:	4b7e      	ldr	r3, [pc, #504]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	497a      	ldr	r1, [pc, #488]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003774:	4b75      	ldr	r3, [pc, #468]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	4972      	ldr	r1, [pc, #456]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a4:	4969      	ldr	r1, [pc, #420]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037b8:	4b64      	ldr	r3, [pc, #400]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c6:	4961      	ldr	r1, [pc, #388]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037da:	4b5c      	ldr	r3, [pc, #368]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e8:	4958      	ldr	r1, [pc, #352]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	4950      	ldr	r1, [pc, #320]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	4947      	ldr	r1, [pc, #284]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003840:	4b42      	ldr	r3, [pc, #264]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003846:	f023 0203 	bic.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	493f      	ldr	r1, [pc, #252]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d028      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003862:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4936      	ldr	r1, [pc, #216]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003880:	d106      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003882:	4b32      	ldr	r3, [pc, #200]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4a31      	ldr	r2, [pc, #196]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388c:	60d3      	str	r3, [r2, #12]
 800388e:	e011      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003898:	d10c      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f8c9 	bl	8003a38 <RCCEx_PLLSAI1_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d028      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038c0:	4b22      	ldr	r3, [pc, #136]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	491f      	ldr	r1, [pc, #124]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038de:	d106      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ea:	60d3      	str	r3, [r2, #12]
 80038ec:	e011      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f6:	d10c      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	2101      	movs	r1, #1
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f89a 	bl	8003a38 <RCCEx_PLLSAI1_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800390e:	7cfb      	ldrb	r3, [r7, #19]
 8003910:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392c:	4907      	ldr	r1, [pc, #28]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800393c:	d108      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800393e:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	4a02      	ldr	r2, [pc, #8]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003948:	60d3      	str	r3, [r2, #12]
 800394a:	e013      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800394c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003958:	d10c      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	2101      	movs	r1, #1
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f869 	bl	8003a38 <RCCEx_PLLSAI1_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800396a:	7cfb      	ldrb	r3, [r7, #19]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02f      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003980:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800398e:	4929      	ldr	r1, [pc, #164]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800399e:	d10d      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2102      	movs	r1, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f846 	bl	8003a38 <RCCEx_PLLSAI1_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d014      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	74bb      	strb	r3, [r7, #18]
 80039ba:	e011      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3320      	adds	r3, #32
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f925 	bl	8003c1c <RCCEx_PLLSAI2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039d6:	7cfb      	ldrb	r3, [r7, #19]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80039dc:	7cfb      	ldrb	r3, [r7, #19]
 80039de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00b      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fc:	490d      	ldr	r1, [pc, #52]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00b      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a20:	4904      	ldr	r1, [pc, #16]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a28:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000

08003a38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a46:	4b74      	ldr	r3, [pc, #464]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d018      	beq.n	8003a84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a52:	4b71      	ldr	r3, [pc, #452]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0203 	and.w	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d10d      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
       ||
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a6a:	4b6b      	ldr	r3, [pc, #428]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
       ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d047      	beq.n	8003b0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
 8003a82:	e044      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d018      	beq.n	8003abe <RCCEx_PLLSAI1_Config+0x86>
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d825      	bhi.n	8003adc <RCCEx_PLLSAI1_Config+0xa4>
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d002      	beq.n	8003a9a <RCCEx_PLLSAI1_Config+0x62>
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d009      	beq.n	8003aac <RCCEx_PLLSAI1_Config+0x74>
 8003a98:	e020      	b.n	8003adc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a9a:	4b5f      	ldr	r3, [pc, #380]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d11d      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aaa:	e01a      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aac:	4b5a      	ldr	r3, [pc, #360]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d116      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003abc:	e013      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003abe:	4b56      	ldr	r3, [pc, #344]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10f      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aca:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ada:	e006      	b.n	8003aea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae0:	e004      	b.n	8003aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10d      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003af2:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6819      	ldr	r1, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	430b      	orrs	r3, r1
 8003b08:	4943      	ldr	r1, [pc, #268]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d17c      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b14:	4b40      	ldr	r3, [pc, #256]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3f      	ldr	r2, [pc, #252]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b20:	f7fd f832 	bl	8000b88 <HAL_GetTick>
 8003b24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b26:	e009      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b28:	f7fd f82e 	bl	8000b88 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d902      	bls.n	8003b3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	73fb      	strb	r3, [r7, #15]
        break;
 8003b3a:	e005      	b.n	8003b48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b3c:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ef      	bne.n	8003b28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d15f      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d110      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b54:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6892      	ldr	r2, [r2, #8]
 8003b64:	0211      	lsls	r1, r2, #8
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68d2      	ldr	r2, [r2, #12]
 8003b6a:	06d2      	lsls	r2, r2, #27
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	492a      	ldr	r1, [pc, #168]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	610b      	str	r3, [r1, #16]
 8003b74:	e027      	b.n	8003bc6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d112      	bne.n	8003ba2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b7c:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6892      	ldr	r2, [r2, #8]
 8003b8c:	0211      	lsls	r1, r2, #8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6912      	ldr	r2, [r2, #16]
 8003b92:	0852      	lsrs	r2, r2, #1
 8003b94:	3a01      	subs	r2, #1
 8003b96:	0552      	lsls	r2, r2, #21
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	491f      	ldr	r1, [pc, #124]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	610b      	str	r3, [r1, #16]
 8003ba0:	e011      	b.n	8003bc6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003baa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	0211      	lsls	r1, r2, #8
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6952      	ldr	r2, [r2, #20]
 8003bb8:	0852      	lsrs	r2, r2, #1
 8003bba:	3a01      	subs	r2, #1
 8003bbc:	0652      	lsls	r2, r2, #25
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	4915      	ldr	r1, [pc, #84]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fc ffd9 	bl	8000b88 <HAL_GetTick>
 8003bd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bd8:	e009      	b.n	8003bee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bda:	f7fc ffd5 	bl	8000b88 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d902      	bls.n	8003bee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	73fb      	strb	r3, [r7, #15]
          break;
 8003bec:	e005      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ef      	beq.n	8003bda <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d106      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000

08003c1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c2a:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d018      	beq.n	8003c68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c36:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f003 0203 	and.w	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d10d      	bne.n	8003c62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
       ||
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c4e:	4b60      	ldr	r3, [pc, #384]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d047      	beq.n	8003cf2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
 8003c66:	e044      	b.n	8003cf2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d018      	beq.n	8003ca2 <RCCEx_PLLSAI2_Config+0x86>
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d825      	bhi.n	8003cc0 <RCCEx_PLLSAI2_Config+0xa4>
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d002      	beq.n	8003c7e <RCCEx_PLLSAI2_Config+0x62>
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d009      	beq.n	8003c90 <RCCEx_PLLSAI2_Config+0x74>
 8003c7c:	e020      	b.n	8003cc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c7e:	4b54      	ldr	r3, [pc, #336]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d11d      	bne.n	8003cc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8e:	e01a      	b.n	8003cc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c90:	4b4f      	ldr	r3, [pc, #316]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d116      	bne.n	8003cca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca0:	e013      	b.n	8003cca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ca2:	4b4b      	ldr	r3, [pc, #300]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cae:	4b48      	ldr	r3, [pc, #288]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cbe:	e006      	b.n	8003cce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc4:	e004      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e002      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cce:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10d      	bne.n	8003cf2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cd6:	4b3e      	ldr	r3, [pc, #248]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6819      	ldr	r1, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	430b      	orrs	r3, r1
 8003cec:	4938      	ldr	r1, [pc, #224]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d166      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cf8:	4b35      	ldr	r3, [pc, #212]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a34      	ldr	r2, [pc, #208]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d04:	f7fc ff40 	bl	8000b88 <HAL_GetTick>
 8003d08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d0a:	e009      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d0c:	f7fc ff3c 	bl	8000b88 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d902      	bls.n	8003d20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d1e:	e005      	b.n	8003d2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1ef      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d149      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d110      	bne.n	8003d5a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6892      	ldr	r2, [r2, #8]
 8003d48:	0211      	lsls	r1, r2, #8
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68d2      	ldr	r2, [r2, #12]
 8003d4e:	06d2      	lsls	r2, r2, #27
 8003d50:	430a      	orrs	r2, r1
 8003d52:	491f      	ldr	r1, [pc, #124]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	614b      	str	r3, [r1, #20]
 8003d58:	e011      	b.n	8003d7e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6892      	ldr	r2, [r2, #8]
 8003d6a:	0211      	lsls	r1, r2, #8
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6912      	ldr	r2, [r2, #16]
 8003d70:	0852      	lsrs	r2, r2, #1
 8003d72:	3a01      	subs	r2, #1
 8003d74:	0652      	lsls	r2, r2, #25
 8003d76:	430a      	orrs	r2, r1
 8003d78:	4915      	ldr	r1, [pc, #84]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7fc fefd 	bl	8000b88 <HAL_GetTick>
 8003d8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d90:	e009      	b.n	8003da6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d92:	f7fc fef9 	bl	8000b88 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d902      	bls.n	8003da6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	73fb      	strb	r3, [r7, #15]
          break;
 8003da4:	e005      	b.n	8003db2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0ef      	beq.n	8003d92 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d106      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	4903      	ldr	r1, [pc, #12]	; (8003dd0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000

08003dd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e040      	b.n	8003e68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fc fd86 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fbc2 	bl	800459c <UART_SetConfig>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e022      	b.n	8003e68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fe6e 	bl	8004b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fef5 	bl	8004c50 <UART_CheckIdleState>
 8003e66:	4603      	mov	r3, r0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	f040 8082 	bne.w	8003f8e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_UART_Transmit+0x26>
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e07a      	b.n	8003f90 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_UART_Transmit+0x38>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e073      	b.n	8003f90 <HAL_UART_Transmit+0x120>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2221      	movs	r2, #33	; 0x21
 8003ebc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ebe:	f7fc fe63 	bl	8000b88 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003edc:	d108      	bne.n	8003ef0 <HAL_UART_Transmit+0x80>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	e003      	b.n	8003ef8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f00:	e02d      	b.n	8003f5e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2180      	movs	r1, #128	; 0x80
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fee8 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e039      	b.n	8003f90 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	3302      	adds	r3, #2
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	e008      	b.n	8003f4c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	b292      	uxth	r2, r2
 8003f44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1cb      	bne.n	8003f02 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	2140      	movs	r1, #64	; 0x40
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 feb4 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e005      	b.n	8003f90 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
  }
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b0ba      	sub	sp, #232	; 0xe8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003fc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d115      	bne.n	8004000 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00f      	beq.n	8004000 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 82a6 	beq.w	8004542 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
      }
      return;
 8003ffe:	e2a0      	b.n	8004542 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8117 	beq.w	8004238 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800400a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004016:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800401a:	4b85      	ldr	r3, [pc, #532]	; (8004230 <HAL_UART_IRQHandler+0x298>)
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 810a 	beq.w	8004238 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d011      	beq.n	8004054 <HAL_UART_IRQHandler+0xbc>
 8004030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00b      	beq.n	8004054 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2201      	movs	r2, #1
 8004042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404a:	f043 0201 	orr.w	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d011      	beq.n	8004084 <HAL_UART_IRQHandler+0xec>
 8004060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00b      	beq.n	8004084 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2202      	movs	r2, #2
 8004072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d011      	beq.n	80040b4 <HAL_UART_IRQHandler+0x11c>
 8004090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2204      	movs	r2, #4
 80040a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040aa:	f043 0202 	orr.w	r2, r3, #2
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d017      	beq.n	80040f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2208      	movs	r2, #8
 80040de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040e6:	f043 0208 	orr.w	r2, r3, #8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d012      	beq.n	8004122 <HAL_UART_IRQHandler+0x18a>
 80040fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004118:	f043 0220 	orr.w	r2, r3, #32
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 820c 	beq.w	8004546 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800412e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800413a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d005      	beq.n	800417a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800416e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004172:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004176:	2b00      	cmp	r3, #0
 8004178:	d04f      	beq.n	800421a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fe75 	bl	8004e6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d141      	bne.n	8004212 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3308      	adds	r3, #8
 8004194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3308      	adds	r3, #8
 80041b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1d9      	bne.n	800418e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d013      	beq.n	800420a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <HAL_UART_IRQHandler+0x29c>)
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe f8a1 	bl	8002336 <HAL_DMA_Abort_IT>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d017      	beq.n	800422a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004204:	4610      	mov	r0, r2
 8004206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	e00f      	b.n	800422a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f9b0 	bl	8004570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004210:	e00b      	b.n	800422a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f9ac 	bl	8004570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004218:	e007      	b.n	800422a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f9a8 	bl	8004570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004228:	e18d      	b.n	8004546 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422a:	bf00      	nop
    return;
 800422c:	e18b      	b.n	8004546 <HAL_UART_IRQHandler+0x5ae>
 800422e:	bf00      	nop
 8004230:	04000120 	.word	0x04000120
 8004234:	08004f31 	.word	0x08004f31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	2b01      	cmp	r3, #1
 800423e:	f040 8146 	bne.w	80044ce <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 813f 	beq.w	80044ce <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8138 	beq.w	80044ce <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2210      	movs	r2, #16
 8004264:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	f040 80b4 	bne.w	80043de <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004282:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 815f 	beq.w	800454a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004296:	429a      	cmp	r2, r3
 8004298:	f080 8157 	bcs.w	800454a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 8085 	bne.w	80043c2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1da      	bne.n	80042b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3308      	adds	r3, #8
 8004308:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3308      	adds	r3, #8
 8004322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004326:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800432a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800432e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e1      	bne.n	8004302 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800434e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3308      	adds	r3, #8
 800435e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004362:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004364:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004368:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e3      	bne.n	800433e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004392:	f023 0310 	bic.w	r3, r3, #16
 8004396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80043a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e4      	bne.n	8004382 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fd ff7c 	bl	80022ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8d4 	bl	8004584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043dc:	e0b5      	b.n	800454a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80a7 	beq.w	800454e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a2 	beq.w	800454e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800441e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800442c:	647b      	str	r3, [r7, #68]	; 0x44
 800442e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800443a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e4      	bne.n	800440a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	623b      	str	r3, [r7, #32]
   return(result);
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3308      	adds	r3, #8
 8004460:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004464:	633a      	str	r2, [r7, #48]	; 0x30
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800446a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e3      	bne.n	8004440 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	60fb      	str	r3, [r7, #12]
   return(result);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0310 	bic.w	r3, r3, #16
 800449e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	69b9      	ldr	r1, [r7, #24]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	617b      	str	r3, [r7, #20]
   return(result);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e4      	bne.n	800448a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044c4:	4619      	mov	r1, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f85c 	bl	8004584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044cc:	e03f      	b.n	800454e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00e      	beq.n	80044f8 <HAL_UART_IRQHandler+0x560>
 80044da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fd5d 	bl	8004fb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044f6:	e02d      	b.n	8004554 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00e      	beq.n	8004522 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01c      	beq.n	8004552 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
    }
    return;
 8004520:	e017      	b.n	8004552 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d012      	beq.n	8004554 <HAL_UART_IRQHandler+0x5bc>
 800452e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fd0e 	bl	8004f5c <UART_EndTransmit_IT>
    return;
 8004540:	e008      	b.n	8004554 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004542:	bf00      	nop
 8004544:	e006      	b.n	8004554 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004546:	bf00      	nop
 8004548:	e004      	b.n	8004554 <HAL_UART_IRQHandler+0x5bc>
      return;
 800454a:	bf00      	nop
 800454c:	e002      	b.n	8004554 <HAL_UART_IRQHandler+0x5bc>
      return;
 800454e:	bf00      	nop
 8004550:	e000      	b.n	8004554 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004552:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004554:	37e8      	adds	r7, #232	; 0xe8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop

0800455c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b08a      	sub	sp, #40	; 0x28
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4ba4      	ldr	r3, [pc, #656]	; (800485c <UART_SetConfig+0x2c0>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a99      	ldr	r2, [pc, #612]	; (8004860 <UART_SetConfig+0x2c4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	4313      	orrs	r3, r2
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	430a      	orrs	r2, r1
 800461a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a90      	ldr	r2, [pc, #576]	; (8004864 <UART_SetConfig+0x2c8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d126      	bne.n	8004674 <UART_SetConfig+0xd8>
 8004626:	4b90      	ldr	r3, [pc, #576]	; (8004868 <UART_SetConfig+0x2cc>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b03      	cmp	r3, #3
 8004632:	d81b      	bhi.n	800466c <UART_SetConfig+0xd0>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0xa0>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	0800464d 	.word	0x0800464d
 8004640:	0800465d 	.word	0x0800465d
 8004644:	08004655 	.word	0x08004655
 8004648:	08004665 	.word	0x08004665
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e116      	b.n	8004882 <UART_SetConfig+0x2e6>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e112      	b.n	8004882 <UART_SetConfig+0x2e6>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e10e      	b.n	8004882 <UART_SetConfig+0x2e6>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e10a      	b.n	8004882 <UART_SetConfig+0x2e6>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e106      	b.n	8004882 <UART_SetConfig+0x2e6>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a7c      	ldr	r2, [pc, #496]	; (800486c <UART_SetConfig+0x2d0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d138      	bne.n	80046f0 <UART_SetConfig+0x154>
 800467e:	4b7a      	ldr	r3, [pc, #488]	; (8004868 <UART_SetConfig+0x2cc>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b0c      	cmp	r3, #12
 800468a:	d82d      	bhi.n	80046e8 <UART_SetConfig+0x14c>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0xf8>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046c9 	.word	0x080046c9
 8004698:	080046e9 	.word	0x080046e9
 800469c:	080046e9 	.word	0x080046e9
 80046a0:	080046e9 	.word	0x080046e9
 80046a4:	080046d9 	.word	0x080046d9
 80046a8:	080046e9 	.word	0x080046e9
 80046ac:	080046e9 	.word	0x080046e9
 80046b0:	080046e9 	.word	0x080046e9
 80046b4:	080046d1 	.word	0x080046d1
 80046b8:	080046e9 	.word	0x080046e9
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	080046e9 	.word	0x080046e9
 80046c4:	080046e1 	.word	0x080046e1
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e0d8      	b.n	8004882 <UART_SetConfig+0x2e6>
 80046d0:	2302      	movs	r3, #2
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e0d4      	b.n	8004882 <UART_SetConfig+0x2e6>
 80046d8:	2304      	movs	r3, #4
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e0d0      	b.n	8004882 <UART_SetConfig+0x2e6>
 80046e0:	2308      	movs	r3, #8
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e0cc      	b.n	8004882 <UART_SetConfig+0x2e6>
 80046e8:	2310      	movs	r3, #16
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	e0c8      	b.n	8004882 <UART_SetConfig+0x2e6>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a5e      	ldr	r2, [pc, #376]	; (8004870 <UART_SetConfig+0x2d4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d125      	bne.n	8004746 <UART_SetConfig+0x1aa>
 80046fa:	4b5b      	ldr	r3, [pc, #364]	; (8004868 <UART_SetConfig+0x2cc>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004700:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004704:	2b30      	cmp	r3, #48	; 0x30
 8004706:	d016      	beq.n	8004736 <UART_SetConfig+0x19a>
 8004708:	2b30      	cmp	r3, #48	; 0x30
 800470a:	d818      	bhi.n	800473e <UART_SetConfig+0x1a2>
 800470c:	2b20      	cmp	r3, #32
 800470e:	d00a      	beq.n	8004726 <UART_SetConfig+0x18a>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d814      	bhi.n	800473e <UART_SetConfig+0x1a2>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <UART_SetConfig+0x182>
 8004718:	2b10      	cmp	r3, #16
 800471a:	d008      	beq.n	800472e <UART_SetConfig+0x192>
 800471c:	e00f      	b.n	800473e <UART_SetConfig+0x1a2>
 800471e:	2300      	movs	r3, #0
 8004720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004724:	e0ad      	b.n	8004882 <UART_SetConfig+0x2e6>
 8004726:	2302      	movs	r3, #2
 8004728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472c:	e0a9      	b.n	8004882 <UART_SetConfig+0x2e6>
 800472e:	2304      	movs	r3, #4
 8004730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004734:	e0a5      	b.n	8004882 <UART_SetConfig+0x2e6>
 8004736:	2308      	movs	r3, #8
 8004738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473c:	e0a1      	b.n	8004882 <UART_SetConfig+0x2e6>
 800473e:	2310      	movs	r3, #16
 8004740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004744:	e09d      	b.n	8004882 <UART_SetConfig+0x2e6>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a4a      	ldr	r2, [pc, #296]	; (8004874 <UART_SetConfig+0x2d8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d125      	bne.n	800479c <UART_SetConfig+0x200>
 8004750:	4b45      	ldr	r3, [pc, #276]	; (8004868 <UART_SetConfig+0x2cc>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800475a:	2bc0      	cmp	r3, #192	; 0xc0
 800475c:	d016      	beq.n	800478c <UART_SetConfig+0x1f0>
 800475e:	2bc0      	cmp	r3, #192	; 0xc0
 8004760:	d818      	bhi.n	8004794 <UART_SetConfig+0x1f8>
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d00a      	beq.n	800477c <UART_SetConfig+0x1e0>
 8004766:	2b80      	cmp	r3, #128	; 0x80
 8004768:	d814      	bhi.n	8004794 <UART_SetConfig+0x1f8>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <UART_SetConfig+0x1d8>
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d008      	beq.n	8004784 <UART_SetConfig+0x1e8>
 8004772:	e00f      	b.n	8004794 <UART_SetConfig+0x1f8>
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477a:	e082      	b.n	8004882 <UART_SetConfig+0x2e6>
 800477c:	2302      	movs	r3, #2
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e07e      	b.n	8004882 <UART_SetConfig+0x2e6>
 8004784:	2304      	movs	r3, #4
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e07a      	b.n	8004882 <UART_SetConfig+0x2e6>
 800478c:	2308      	movs	r3, #8
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e076      	b.n	8004882 <UART_SetConfig+0x2e6>
 8004794:	2310      	movs	r3, #16
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e072      	b.n	8004882 <UART_SetConfig+0x2e6>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a35      	ldr	r2, [pc, #212]	; (8004878 <UART_SetConfig+0x2dc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d12a      	bne.n	80047fc <UART_SetConfig+0x260>
 80047a6:	4b30      	ldr	r3, [pc, #192]	; (8004868 <UART_SetConfig+0x2cc>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b4:	d01a      	beq.n	80047ec <UART_SetConfig+0x250>
 80047b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ba:	d81b      	bhi.n	80047f4 <UART_SetConfig+0x258>
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c0:	d00c      	beq.n	80047dc <UART_SetConfig+0x240>
 80047c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c6:	d815      	bhi.n	80047f4 <UART_SetConfig+0x258>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <UART_SetConfig+0x238>
 80047cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d0:	d008      	beq.n	80047e4 <UART_SetConfig+0x248>
 80047d2:	e00f      	b.n	80047f4 <UART_SetConfig+0x258>
 80047d4:	2300      	movs	r3, #0
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047da:	e052      	b.n	8004882 <UART_SetConfig+0x2e6>
 80047dc:	2302      	movs	r3, #2
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e04e      	b.n	8004882 <UART_SetConfig+0x2e6>
 80047e4:	2304      	movs	r3, #4
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e04a      	b.n	8004882 <UART_SetConfig+0x2e6>
 80047ec:	2308      	movs	r3, #8
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e046      	b.n	8004882 <UART_SetConfig+0x2e6>
 80047f4:	2310      	movs	r3, #16
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e042      	b.n	8004882 <UART_SetConfig+0x2e6>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a17      	ldr	r2, [pc, #92]	; (8004860 <UART_SetConfig+0x2c4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d13a      	bne.n	800487c <UART_SetConfig+0x2e0>
 8004806:	4b18      	ldr	r3, [pc, #96]	; (8004868 <UART_SetConfig+0x2cc>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004814:	d01a      	beq.n	800484c <UART_SetConfig+0x2b0>
 8004816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800481a:	d81b      	bhi.n	8004854 <UART_SetConfig+0x2b8>
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004820:	d00c      	beq.n	800483c <UART_SetConfig+0x2a0>
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d815      	bhi.n	8004854 <UART_SetConfig+0x2b8>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <UART_SetConfig+0x298>
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	d008      	beq.n	8004844 <UART_SetConfig+0x2a8>
 8004832:	e00f      	b.n	8004854 <UART_SetConfig+0x2b8>
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e022      	b.n	8004882 <UART_SetConfig+0x2e6>
 800483c:	2302      	movs	r3, #2
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e01e      	b.n	8004882 <UART_SetConfig+0x2e6>
 8004844:	2304      	movs	r3, #4
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e01a      	b.n	8004882 <UART_SetConfig+0x2e6>
 800484c:	2308      	movs	r3, #8
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e016      	b.n	8004882 <UART_SetConfig+0x2e6>
 8004854:	2310      	movs	r3, #16
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e012      	b.n	8004882 <UART_SetConfig+0x2e6>
 800485c:	efff69f3 	.word	0xefff69f3
 8004860:	40008000 	.word	0x40008000
 8004864:	40013800 	.word	0x40013800
 8004868:	40021000 	.word	0x40021000
 800486c:	40004400 	.word	0x40004400
 8004870:	40004800 	.word	0x40004800
 8004874:	40004c00 	.word	0x40004c00
 8004878:	40005000 	.word	0x40005000
 800487c:	2310      	movs	r3, #16
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a9f      	ldr	r2, [pc, #636]	; (8004b04 <UART_SetConfig+0x568>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d17a      	bne.n	8004982 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800488c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004890:	2b08      	cmp	r3, #8
 8004892:	d824      	bhi.n	80048de <UART_SetConfig+0x342>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <UART_SetConfig+0x300>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048df 	.word	0x080048df
 80048a4:	080048c9 	.word	0x080048c9
 80048a8:	080048df 	.word	0x080048df
 80048ac:	080048cf 	.word	0x080048cf
 80048b0:	080048df 	.word	0x080048df
 80048b4:	080048df 	.word	0x080048df
 80048b8:	080048df 	.word	0x080048df
 80048bc:	080048d7 	.word	0x080048d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c0:	f7fe fd32 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 80048c4:	61f8      	str	r0, [r7, #28]
        break;
 80048c6:	e010      	b.n	80048ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c8:	4b8f      	ldr	r3, [pc, #572]	; (8004b08 <UART_SetConfig+0x56c>)
 80048ca:	61fb      	str	r3, [r7, #28]
        break;
 80048cc:	e00d      	b.n	80048ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ce:	f7fe fc93 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80048d2:	61f8      	str	r0, [r7, #28]
        break;
 80048d4:	e009      	b.n	80048ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048da:	61fb      	str	r3, [r7, #28]
        break;
 80048dc:	e005      	b.n	80048ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80fb 	beq.w	8004ae8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d305      	bcc.n	800490e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	429a      	cmp	r2, r3
 800490c:	d903      	bls.n	8004916 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004914:	e0e8      	b.n	8004ae8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2200      	movs	r2, #0
 800491a:	461c      	mov	r4, r3
 800491c:	4615      	mov	r5, r2
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	022b      	lsls	r3, r5, #8
 8004928:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800492c:	0222      	lsls	r2, r4, #8
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	6849      	ldr	r1, [r1, #4]
 8004932:	0849      	lsrs	r1, r1, #1
 8004934:	2000      	movs	r0, #0
 8004936:	4688      	mov	r8, r1
 8004938:	4681      	mov	r9, r0
 800493a:	eb12 0a08 	adds.w	sl, r2, r8
 800493e:	eb43 0b09 	adc.w	fp, r3, r9
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004950:	4650      	mov	r0, sl
 8004952:	4659      	mov	r1, fp
 8004954:	f7fb fc52 	bl	80001fc <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4613      	mov	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004966:	d308      	bcc.n	800497a <UART_SetConfig+0x3de>
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496e:	d204      	bcs.n	800497a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	60da      	str	r2, [r3, #12]
 8004978:	e0b6      	b.n	8004ae8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004980:	e0b2      	b.n	8004ae8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498a:	d15e      	bne.n	8004a4a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800498c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004990:	2b08      	cmp	r3, #8
 8004992:	d828      	bhi.n	80049e6 <UART_SetConfig+0x44a>
 8004994:	a201      	add	r2, pc, #4	; (adr r2, 800499c <UART_SetConfig+0x400>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049c9 	.word	0x080049c9
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	080049e7 	.word	0x080049e7
 80049ac:	080049d7 	.word	0x080049d7
 80049b0:	080049e7 	.word	0x080049e7
 80049b4:	080049e7 	.word	0x080049e7
 80049b8:	080049e7 	.word	0x080049e7
 80049bc:	080049df 	.word	0x080049df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fe fcb2 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 80049c4:	61f8      	str	r0, [r7, #28]
        break;
 80049c6:	e014      	b.n	80049f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c8:	f7fe fcc4 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 80049cc:	61f8      	str	r0, [r7, #28]
        break;
 80049ce:	e010      	b.n	80049f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d0:	4b4d      	ldr	r3, [pc, #308]	; (8004b08 <UART_SetConfig+0x56c>)
 80049d2:	61fb      	str	r3, [r7, #28]
        break;
 80049d4:	e00d      	b.n	80049f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d6:	f7fe fc0f 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80049da:	61f8      	str	r0, [r7, #28]
        break;
 80049dc:	e009      	b.n	80049f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e2:	61fb      	str	r3, [r7, #28]
        break;
 80049e4:	e005      	b.n	80049f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d077      	beq.n	8004ae8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	005a      	lsls	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	441a      	add	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b0f      	cmp	r3, #15
 8004a12:	d916      	bls.n	8004a42 <UART_SetConfig+0x4a6>
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1a:	d212      	bcs.n	8004a42 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f023 030f 	bic.w	r3, r3, #15
 8004a24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	085b      	lsrs	r3, r3, #1
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	8afb      	ldrh	r3, [r7, #22]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	8afa      	ldrh	r2, [r7, #22]
 8004a3e:	60da      	str	r2, [r3, #12]
 8004a40:	e052      	b.n	8004ae8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a48:	e04e      	b.n	8004ae8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d827      	bhi.n	8004aa2 <UART_SetConfig+0x506>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <UART_SetConfig+0x4bc>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a85 	.word	0x08004a85
 8004a60:	08004a8d 	.word	0x08004a8d
 8004a64:	08004aa3 	.word	0x08004aa3
 8004a68:	08004a93 	.word	0x08004a93
 8004a6c:	08004aa3 	.word	0x08004aa3
 8004a70:	08004aa3 	.word	0x08004aa3
 8004a74:	08004aa3 	.word	0x08004aa3
 8004a78:	08004a9b 	.word	0x08004a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f7fe fc54 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 8004a80:	61f8      	str	r0, [r7, #28]
        break;
 8004a82:	e014      	b.n	8004aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a84:	f7fe fc66 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8004a88:	61f8      	str	r0, [r7, #28]
        break;
 8004a8a:	e010      	b.n	8004aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a8c:	4b1e      	ldr	r3, [pc, #120]	; (8004b08 <UART_SetConfig+0x56c>)
 8004a8e:	61fb      	str	r3, [r7, #28]
        break;
 8004a90:	e00d      	b.n	8004aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a92:	f7fe fbb1 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8004a96:	61f8      	str	r0, [r7, #28]
        break;
 8004a98:	e009      	b.n	8004aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a9e:	61fb      	str	r3, [r7, #28]
        break;
 8004aa0:	e005      	b.n	8004aae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004aac:	bf00      	nop
    }

    if (pclk != 0U)
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d019      	beq.n	8004ae8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	085a      	lsrs	r2, r3, #1
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	441a      	add	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b0f      	cmp	r3, #15
 8004acc:	d909      	bls.n	8004ae2 <UART_SetConfig+0x546>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad4:	d205      	bcs.n	8004ae2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60da      	str	r2, [r3, #12]
 8004ae0:	e002      	b.n	8004ae8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004af4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3728      	adds	r7, #40	; 0x28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b02:	bf00      	nop
 8004b04:	40008000 	.word	0x40008000
 8004b08:	00f42400 	.word	0x00f42400

08004b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01a      	beq.n	8004c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0a:	d10a      	bne.n	8004c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c60:	f7fb ff92 	bl	8000b88 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10e      	bne.n	8004c92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f82d 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e023      	b.n	8004cda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d10e      	bne.n	8004cbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f817 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e00d      	b.n	8004cda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b09c      	sub	sp, #112	; 0x70
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf2:	e0a5      	b.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cfa:	f000 80a1 	beq.w	8004e40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfe:	f7fb ff43 	bl	8000b88 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d302      	bcc.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d13e      	bne.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d28:	667b      	str	r3, [r7, #100]	; 0x64
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e6      	bne.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3308      	adds	r3, #8
 8004d64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d66:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e5      	bne.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e067      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d04f      	beq.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dae:	d147      	bne.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e6      	bne.n	8004dba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3308      	adds	r3, #8
 8004df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e0c:	623a      	str	r2, [r7, #32]
 8004e0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	69f9      	ldr	r1, [r7, #28]
 8004e12:	6a3a      	ldr	r2, [r7, #32]
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e5      	bne.n	8004dec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e010      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	f43f af4a 	beq.w	8004cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3770      	adds	r7, #112	; 0x70
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b095      	sub	sp, #84	; 0x54
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e90:	643b      	str	r3, [r7, #64]	; 0x40
 8004e92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e98:	e841 2300 	strex	r3, r2, [r1]
 8004e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e6      	bne.n	8004e72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f023 0301 	bic.w	r3, r3, #1
 8004eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e5      	bne.n	8004ea4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d118      	bne.n	8004f12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f023 0310 	bic.w	r3, r3, #16
 8004ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6979      	ldr	r1, [r7, #20]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e6      	bne.n	8004ee0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f24:	bf00      	nop
 8004f26:	3754      	adds	r7, #84	; 0x54
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7ff fb0e 	bl	8004570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6979      	ldr	r1, [r7, #20]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e6      	bne.n	8004f64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff fada 	bl	800455c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa8:	bf00      	nop
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <__libc_init_array>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	4d0d      	ldr	r5, [pc, #52]	; (8004ffc <__libc_init_array+0x38>)
 8004fc8:	4c0d      	ldr	r4, [pc, #52]	; (8005000 <__libc_init_array+0x3c>)
 8004fca:	1b64      	subs	r4, r4, r5
 8004fcc:	10a4      	asrs	r4, r4, #2
 8004fce:	2600      	movs	r6, #0
 8004fd0:	42a6      	cmp	r6, r4
 8004fd2:	d109      	bne.n	8004fe8 <__libc_init_array+0x24>
 8004fd4:	4d0b      	ldr	r5, [pc, #44]	; (8005004 <__libc_init_array+0x40>)
 8004fd6:	4c0c      	ldr	r4, [pc, #48]	; (8005008 <__libc_init_array+0x44>)
 8004fd8:	f000 f87c 	bl	80050d4 <_init>
 8004fdc:	1b64      	subs	r4, r4, r5
 8004fde:	10a4      	asrs	r4, r4, #2
 8004fe0:	2600      	movs	r6, #0
 8004fe2:	42a6      	cmp	r6, r4
 8004fe4:	d105      	bne.n	8004ff2 <__libc_init_array+0x2e>
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
 8004fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fec:	4798      	blx	r3
 8004fee:	3601      	adds	r6, #1
 8004ff0:	e7ee      	b.n	8004fd0 <__libc_init_array+0xc>
 8004ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff6:	4798      	blx	r3
 8004ff8:	3601      	adds	r6, #1
 8004ffa:	e7f2      	b.n	8004fe2 <__libc_init_array+0x1e>
 8004ffc:	08005168 	.word	0x08005168
 8005000:	08005168 	.word	0x08005168
 8005004:	08005168 	.word	0x08005168
 8005008:	0800516c 	.word	0x0800516c

0800500c <__itoa>:
 800500c:	1e93      	subs	r3, r2, #2
 800500e:	2b22      	cmp	r3, #34	; 0x22
 8005010:	b510      	push	{r4, lr}
 8005012:	460c      	mov	r4, r1
 8005014:	d904      	bls.n	8005020 <__itoa+0x14>
 8005016:	2300      	movs	r3, #0
 8005018:	700b      	strb	r3, [r1, #0]
 800501a:	461c      	mov	r4, r3
 800501c:	4620      	mov	r0, r4
 800501e:	bd10      	pop	{r4, pc}
 8005020:	2a0a      	cmp	r2, #10
 8005022:	d109      	bne.n	8005038 <__itoa+0x2c>
 8005024:	2800      	cmp	r0, #0
 8005026:	da07      	bge.n	8005038 <__itoa+0x2c>
 8005028:	232d      	movs	r3, #45	; 0x2d
 800502a:	700b      	strb	r3, [r1, #0]
 800502c:	4240      	negs	r0, r0
 800502e:	2101      	movs	r1, #1
 8005030:	4421      	add	r1, r4
 8005032:	f000 f80d 	bl	8005050 <__utoa>
 8005036:	e7f1      	b.n	800501c <__itoa+0x10>
 8005038:	2100      	movs	r1, #0
 800503a:	e7f9      	b.n	8005030 <__itoa+0x24>

0800503c <itoa>:
 800503c:	f7ff bfe6 	b.w	800500c <__itoa>

08005040 <memset>:
 8005040:	4402      	add	r2, r0
 8005042:	4603      	mov	r3, r0
 8005044:	4293      	cmp	r3, r2
 8005046:	d100      	bne.n	800504a <memset+0xa>
 8005048:	4770      	bx	lr
 800504a:	f803 1b01 	strb.w	r1, [r3], #1
 800504e:	e7f9      	b.n	8005044 <memset+0x4>

08005050 <__utoa>:
 8005050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005052:	4c1f      	ldr	r4, [pc, #124]	; (80050d0 <__utoa+0x80>)
 8005054:	b08b      	sub	sp, #44	; 0x2c
 8005056:	4605      	mov	r5, r0
 8005058:	460b      	mov	r3, r1
 800505a:	466e      	mov	r6, sp
 800505c:	f104 0c20 	add.w	ip, r4, #32
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	6861      	ldr	r1, [r4, #4]
 8005064:	4637      	mov	r7, r6
 8005066:	c703      	stmia	r7!, {r0, r1}
 8005068:	3408      	adds	r4, #8
 800506a:	4564      	cmp	r4, ip
 800506c:	463e      	mov	r6, r7
 800506e:	d1f7      	bne.n	8005060 <__utoa+0x10>
 8005070:	7921      	ldrb	r1, [r4, #4]
 8005072:	7139      	strb	r1, [r7, #4]
 8005074:	1e91      	subs	r1, r2, #2
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	6038      	str	r0, [r7, #0]
 800507a:	2922      	cmp	r1, #34	; 0x22
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	d904      	bls.n	800508c <__utoa+0x3c>
 8005082:	7019      	strb	r1, [r3, #0]
 8005084:	460b      	mov	r3, r1
 8005086:	4618      	mov	r0, r3
 8005088:	b00b      	add	sp, #44	; 0x2c
 800508a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800508c:	1e58      	subs	r0, r3, #1
 800508e:	4684      	mov	ip, r0
 8005090:	fbb5 f7f2 	udiv	r7, r5, r2
 8005094:	fb02 5617 	mls	r6, r2, r7, r5
 8005098:	3628      	adds	r6, #40	; 0x28
 800509a:	446e      	add	r6, sp
 800509c:	460c      	mov	r4, r1
 800509e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80050a2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80050a6:	462e      	mov	r6, r5
 80050a8:	42b2      	cmp	r2, r6
 80050aa:	f101 0101 	add.w	r1, r1, #1
 80050ae:	463d      	mov	r5, r7
 80050b0:	d9ee      	bls.n	8005090 <__utoa+0x40>
 80050b2:	2200      	movs	r2, #0
 80050b4:	545a      	strb	r2, [r3, r1]
 80050b6:	1919      	adds	r1, r3, r4
 80050b8:	1aa5      	subs	r5, r4, r2
 80050ba:	42aa      	cmp	r2, r5
 80050bc:	dae3      	bge.n	8005086 <__utoa+0x36>
 80050be:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80050c2:	780e      	ldrb	r6, [r1, #0]
 80050c4:	7006      	strb	r6, [r0, #0]
 80050c6:	3201      	adds	r2, #1
 80050c8:	f801 5901 	strb.w	r5, [r1], #-1
 80050cc:	e7f4      	b.n	80050b8 <__utoa+0x68>
 80050ce:	bf00      	nop
 80050d0:	08005138 	.word	0x08005138

080050d4 <_init>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr

080050e0 <_fini>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr
