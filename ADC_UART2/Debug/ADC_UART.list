
ADC_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08010ebc  08010ebc  00020ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119a4  080119a4  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  080119a4  080119a4  000219a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119ac  080119ac  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119ac  080119ac  000219ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080119b0  080119b0  000219b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080119b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e6c  20000090  08011a44  00030090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002efc  08011a44  00032efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002552a  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053fa  00000000  00000000  000555ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  0005a9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  0005c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000314df  00000000  00000000  0005dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267b2  00000000  00000000  0008f12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113495  00000000  00000000  000b58e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c8d76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007690  00000000  00000000  001c8dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010ea4 	.word	0x08010ea4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08010ea4 	.word	0x08010ea4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008e0:	f000 b974 	b.w	8000bcc <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468e      	mov	lr, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d14d      	bne.n	80009a6 <__udivmoddi4+0xaa>
 800090a:	428a      	cmp	r2, r1
 800090c:	4694      	mov	ip, r2
 800090e:	d969      	bls.n	80009e4 <__udivmoddi4+0xe8>
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	b152      	cbz	r2, 800092c <__udivmoddi4+0x30>
 8000916:	fa01 f302 	lsl.w	r3, r1, r2
 800091a:	f1c2 0120 	rsb	r1, r2, #32
 800091e:	fa20 f101 	lsr.w	r1, r0, r1
 8000922:	fa0c fc02 	lsl.w	ip, ip, r2
 8000926:	ea41 0e03 	orr.w	lr, r1, r3
 800092a:	4094      	lsls	r4, r2
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	0c21      	lsrs	r1, r4, #16
 8000932:	fbbe f6f8 	udiv	r6, lr, r8
 8000936:	fa1f f78c 	uxth.w	r7, ip
 800093a:	fb08 e316 	mls	r3, r8, r6, lr
 800093e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000942:	fb06 f107 	mul.w	r1, r6, r7
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000952:	f080 811f 	bcs.w	8000b94 <__udivmoddi4+0x298>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 811c 	bls.w	8000b94 <__udivmoddi4+0x298>
 800095c:	3e02      	subs	r6, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb3 f0f8 	udiv	r0, r3, r8
 8000968:	fb08 3310 	mls	r3, r8, r0, r3
 800096c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000970:	fb00 f707 	mul.w	r7, r0, r7
 8000974:	42a7      	cmp	r7, r4
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x92>
 8000978:	eb1c 0404 	adds.w	r4, ip, r4
 800097c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000980:	f080 810a 	bcs.w	8000b98 <__udivmoddi4+0x29c>
 8000984:	42a7      	cmp	r7, r4
 8000986:	f240 8107 	bls.w	8000b98 <__udivmoddi4+0x29c>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	1be4      	subs	r4, r4, r7
 8000994:	2600      	movs	r6, #0
 8000996:	b11d      	cbz	r5, 80009a0 <__udivmoddi4+0xa4>
 8000998:	40d4      	lsrs	r4, r2
 800099a:	2300      	movs	r3, #0
 800099c:	e9c5 4300 	strd	r4, r3, [r5]
 80009a0:	4631      	mov	r1, r6
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0xc2>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	f000 80ef 	beq.w	8000b8e <__udivmoddi4+0x292>
 80009b0:	2600      	movs	r6, #0
 80009b2:	e9c5 0100 	strd	r0, r1, [r5]
 80009b6:	4630      	mov	r0, r6
 80009b8:	4631      	mov	r1, r6
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	fab3 f683 	clz	r6, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d14a      	bne.n	8000a5c <__udivmoddi4+0x160>
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d302      	bcc.n	80009d0 <__udivmoddi4+0xd4>
 80009ca:	4282      	cmp	r2, r0
 80009cc:	f200 80f9 	bhi.w	8000bc2 <__udivmoddi4+0x2c6>
 80009d0:	1a84      	subs	r4, r0, r2
 80009d2:	eb61 0303 	sbc.w	r3, r1, r3
 80009d6:	2001      	movs	r0, #1
 80009d8:	469e      	mov	lr, r3
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d0e0      	beq.n	80009a0 <__udivmoddi4+0xa4>
 80009de:	e9c5 4e00 	strd	r4, lr, [r5]
 80009e2:	e7dd      	b.n	80009a0 <__udivmoddi4+0xa4>
 80009e4:	b902      	cbnz	r2, 80009e8 <__udivmoddi4+0xec>
 80009e6:	deff      	udf	#255	; 0xff
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	f040 8092 	bne.w	8000b16 <__udivmoddi4+0x21a>
 80009f2:	eba1 010c 	sub.w	r1, r1, ip
 80009f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009fa:	fa1f fe8c 	uxth.w	lr, ip
 80009fe:	2601      	movs	r6, #1
 8000a00:	0c20      	lsrs	r0, r4, #16
 8000a02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a06:	fb07 1113 	mls	r1, r7, r3, r1
 8000a0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a0e:	fb0e f003 	mul.w	r0, lr, r3
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x12c>
 8000a16:	eb1c 0101 	adds.w	r1, ip, r1
 8000a1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x12a>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f200 80cb 	bhi.w	8000bbc <__udivmoddi4+0x2c0>
 8000a26:	4643      	mov	r3, r8
 8000a28:	1a09      	subs	r1, r1, r0
 8000a2a:	b2a4      	uxth	r4, r4
 8000a2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a30:	fb07 1110 	mls	r1, r7, r0, r1
 8000a34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a38:	fb0e fe00 	mul.w	lr, lr, r0
 8000a3c:	45a6      	cmp	lr, r4
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x156>
 8000a40:	eb1c 0404 	adds.w	r4, ip, r4
 8000a44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a48:	d202      	bcs.n	8000a50 <__udivmoddi4+0x154>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f200 80bb 	bhi.w	8000bc6 <__udivmoddi4+0x2ca>
 8000a50:	4608      	mov	r0, r1
 8000a52:	eba4 040e 	sub.w	r4, r4, lr
 8000a56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a5a:	e79c      	b.n	8000996 <__udivmoddi4+0x9a>
 8000a5c:	f1c6 0720 	rsb	r7, r6, #32
 8000a60:	40b3      	lsls	r3, r6
 8000a62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a72:	431c      	orrs	r4, r3
 8000a74:	40f9      	lsrs	r1, r7
 8000a76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a82:	0c20      	lsrs	r0, r4, #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fb09 1118 	mls	r1, r9, r8, r1
 8000a8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a90:	fb08 f00e 	mul.w	r0, r8, lr
 8000a94:	4288      	cmp	r0, r1
 8000a96:	fa02 f206 	lsl.w	r2, r2, r6
 8000a9a:	d90b      	bls.n	8000ab4 <__udivmoddi4+0x1b8>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000aa4:	f080 8088 	bcs.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f240 8085 	bls.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aae:	f1a8 0802 	sub.w	r8, r8, #2
 8000ab2:	4461      	add	r1, ip
 8000ab4:	1a09      	subs	r1, r1, r0
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000abc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ac0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ac4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac8:	458e      	cmp	lr, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x1e2>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ad4:	d26c      	bcs.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ad6:	458e      	cmp	lr, r1
 8000ad8:	d96a      	bls.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ada:	3802      	subs	r0, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ae6:	eba1 010e 	sub.w	r1, r1, lr
 8000aea:	42a1      	cmp	r1, r4
 8000aec:	46c8      	mov	r8, r9
 8000aee:	46a6      	mov	lr, r4
 8000af0:	d356      	bcc.n	8000ba0 <__udivmoddi4+0x2a4>
 8000af2:	d053      	beq.n	8000b9c <__udivmoddi4+0x2a0>
 8000af4:	b15d      	cbz	r5, 8000b0e <__udivmoddi4+0x212>
 8000af6:	ebb3 0208 	subs.w	r2, r3, r8
 8000afa:	eb61 010e 	sbc.w	r1, r1, lr
 8000afe:	fa01 f707 	lsl.w	r7, r1, r7
 8000b02:	fa22 f306 	lsr.w	r3, r2, r6
 8000b06:	40f1      	lsrs	r1, r6
 8000b08:	431f      	orrs	r7, r3
 8000b0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b0e:	2600      	movs	r6, #0
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	40d8      	lsrs	r0, r3
 8000b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b20:	fa21 f303 	lsr.w	r3, r1, r3
 8000b24:	4091      	lsls	r1, r2
 8000b26:	4301      	orrs	r1, r0
 8000b28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b34:	fb07 3610 	mls	r6, r7, r0, r3
 8000b38:	0c0b      	lsrs	r3, r1, #16
 8000b3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b42:	429e      	cmp	r6, r3
 8000b44:	fa04 f402 	lsl.w	r4, r4, r2
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x260>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b52:	d22f      	bcs.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d92d      	bls.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	b289      	uxth	r1, r1
 8000b60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b64:	fb07 3316 	mls	r3, r7, r6, r3
 8000b68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x28a>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b7c:	d216      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d914      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b82:	3e02      	subs	r6, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b8c:	e738      	b.n	8000a00 <__udivmoddi4+0x104>
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e705      	b.n	80009a0 <__udivmoddi4+0xa4>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e3      	b.n	8000960 <__udivmoddi4+0x64>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6f8      	b.n	800098e <__udivmoddi4+0x92>
 8000b9c:	454b      	cmp	r3, r9
 8000b9e:	d2a9      	bcs.n	8000af4 <__udivmoddi4+0x1f8>
 8000ba0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ba4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7a3      	b.n	8000af4 <__udivmoddi4+0x1f8>
 8000bac:	4646      	mov	r6, r8
 8000bae:	e7ea      	b.n	8000b86 <__udivmoddi4+0x28a>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	e794      	b.n	8000ade <__udivmoddi4+0x1e2>
 8000bb4:	4640      	mov	r0, r8
 8000bb6:	e7d1      	b.n	8000b5c <__udivmoddi4+0x260>
 8000bb8:	46d0      	mov	r8, sl
 8000bba:	e77b      	b.n	8000ab4 <__udivmoddi4+0x1b8>
 8000bbc:	3b02      	subs	r3, #2
 8000bbe:	4461      	add	r1, ip
 8000bc0:	e732      	b.n	8000a28 <__udivmoddi4+0x12c>
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	e709      	b.n	80009da <__udivmoddi4+0xde>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	e742      	b.n	8000a52 <__udivmoddi4+0x156>

08000bcc <__aeabi_idiv0>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fb13 	bl	8000204 <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <Send_Uart+0x28>)
 8000bea:	f005 fc3f 	bl	800646c <HAL_UART_Transmit>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000250 	.word	0x20000250

08000bfc <Mount_USB>:



void Mount_USB (void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000c00:	2201      	movs	r2, #1
 8000c02:	490d      	ldr	r1, [pc, #52]	; (8000c38 <Mount_USB+0x3c>)
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <Mount_USB+0x40>)
 8000c06:	f00d fa41 	bl	800e08c <f_mount>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <Mount_USB+0x44>)
 8000c10:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <Mount_USB+0x44>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d006      	beq.n	8000c28 <Mount_USB+0x2c>
		Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <Mount_USB+0x48>)
 8000c1c:	f7ff ffd8 	bl	8000bd0 <Send_Uart>
		printf("ERROR!!! in mounting USB ...\n\n");
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <Mount_USB+0x4c>)
 8000c22:	f00f f9eb 	bl	800fffc <puts>
	}
	else{
		Send_Uart("USB mounted successfully...\n");
		printf("USB mounted successfully...\n");
	}
}
 8000c26:	e005      	b.n	8000c34 <Mount_USB+0x38>
		Send_Uart("USB mounted successfully...\n");
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <Mount_USB+0x50>)
 8000c2a:	f7ff ffd1 	bl	8000bd0 <Send_Uart>
		printf("USB mounted successfully...\n");
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <Mount_USB+0x54>)
 8000c30:	f00f f9e4 	bl	800fffc <puts>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200002e0 	.word	0x200002e0
 8000c3c:	200002e4 	.word	0x200002e4
 8000c40:	200001d0 	.word	0x200001d0
 8000c44:	08010ebc 	.word	0x08010ebc
 8000c48:	08010edc 	.word	0x08010edc
 8000c4c:	08010efc 	.word	0x08010efc
 8000c50:	08010f1c 	.word	0x08010f1c

08000c54 <Unmount_USB>:

void Unmount_USB (void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	490a      	ldr	r1, [pc, #40]	; (8000c84 <Unmount_USB+0x30>)
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f00d fa15 	bl	800e08c <f_mount>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <Unmount_USB+0x34>)
 8000c68:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <Unmount_USB+0x34>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <Unmount_USB+0x26>
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <Unmount_USB+0x38>)
 8000c74:	f7ff ffac 	bl	8000bd0 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000c78:	e002      	b.n	8000c80 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <Unmount_USB+0x3c>)
 8000c7c:	f7ff ffa8 	bl	8000bd0 <Send_Uart>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200002e0 	.word	0x200002e0
 8000c88:	200001d0 	.word	0x200001d0
 8000c8c:	08010f38 	.word	0x08010f38
 8000c90:	08010f5c 	.word	0x08010f5c

08000c94 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09a      	sub	sp, #104	; 0x68
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000c9c:	2014      	movs	r0, #20
 8000c9e:	f00f f839 	bl	800fd14 <malloc>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	4944      	ldr	r1, [pc, #272]	; (8000dbc <Scan_USB+0x128>)
 8000caa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000cac:	f00f f9be 	bl	801002c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00e f820 	bl	800ecfc <f_opendir>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <Scan_USB+0x12c>)
 8000cc2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000cc4:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <Scan_USB+0x12c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d16e      	bne.n	8000daa <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	493c      	ldr	r1, [pc, #240]	; (8000dc4 <Scan_USB+0x130>)
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f00e f8e1 	bl	800ee9a <f_readdir>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <Scan_USB+0x12c>)
 8000cde:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <Scan_USB+0x12c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d15b      	bne.n	8000da0 <Scan_USB+0x10c>
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <Scan_USB+0x130>)
 8000cea:	7e9b      	ldrb	r3, [r3, #26]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d057      	beq.n	8000da0 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000cf0:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <Scan_USB+0x130>)
 8000cf2:	7b1b      	ldrb	r3, [r3, #12]
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d03a      	beq.n	8000d72 <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000cfc:	4932      	ldr	r1, [pc, #200]	; (8000dc8 <Scan_USB+0x134>)
 8000cfe:	4833      	ldr	r0, [pc, #204]	; (8000dcc <Scan_USB+0x138>)
 8000d00:	f7ff fa76 	bl	80001f0 <strcmp>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d045      	beq.n	8000d96 <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000d0a:	492f      	ldr	r1, [pc, #188]	; (8000dc8 <Scan_USB+0x134>)
 8000d0c:	4830      	ldr	r0, [pc, #192]	; (8000dd0 <Scan_USB+0x13c>)
 8000d0e:	f7ff fa6f 	bl	80001f0 <strcmp>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d040      	beq.n	8000d9a <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 8000d18:	201e      	movs	r0, #30
 8000d1a:	f00e fffb 	bl	800fd14 <malloc>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000d22:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <Scan_USB+0x134>)
 8000d24:	492b      	ldr	r1, [pc, #172]	; (8000dd4 <Scan_USB+0x140>)
 8000d26:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d28:	f00f f980 	bl	801002c <siprintf>
            	Send_Uart(buf);
 8000d2c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d2e:	f7ff ff4f 	bl	8000bd0 <Send_Uart>
            	free(buf);
 8000d32:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d34:	f00e fff6 	bl	800fd24 <free>
                i = strlen(path);
 8000d38:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d3a:	f7ff fa63 	bl	8000204 <strlen>
 8000d3e:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000d40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d44:	4413      	add	r3, r2
 8000d46:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <Scan_USB+0x134>)
 8000d48:	4923      	ldr	r1, [pc, #140]	; (8000dd8 <Scan_USB+0x144>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00f f96e 	bl	801002c <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000d50:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d52:	f7ff ff9f 	bl	8000c94 <Scan_USB>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <Scan_USB+0x12c>)
 8000d5c:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <Scan_USB+0x12c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d11b      	bne.n	8000d9e <Scan_USB+0x10a>
                path[i] = 0;
 8000d66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d6a:	4413      	add	r3, r2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e7ac      	b.n	8000ccc <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000d72:	201e      	movs	r0, #30
 8000d74:	f00e ffce 	bl	800fd14 <malloc>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <Scan_USB+0x134>)
 8000d7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d80:	4916      	ldr	r1, [pc, #88]	; (8000ddc <Scan_USB+0x148>)
 8000d82:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d84:	f00f f952 	bl	801002c <siprintf>
               Send_Uart(buf);
 8000d88:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d8a:	f7ff ff21 	bl	8000bd0 <Send_Uart>
               free(buf);
 8000d8e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d90:	f00e ffc8 	bl	800fd24 <free>
 8000d94:	e79a      	b.n	8000ccc <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000d96:	bf00      	nop
 8000d98:	e798      	b.n	8000ccc <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000d9a:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000d9c:	e796      	b.n	8000ccc <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8000d9e:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4618      	mov	r0, r3
 8000da6:	f00e f852 	bl	800ee4e <f_closedir>
    }
    free(path);
 8000daa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000dac:	f00e ffba 	bl	800fd24 <free>
    return fresult;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <Scan_USB+0x12c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3768      	adds	r7, #104	; 0x68
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	08010f7c 	.word	0x08010f7c
 8000dc0:	200001d0 	.word	0x200001d0
 8000dc4:	200000b0 	.word	0x200000b0
 8000dc8:	200000ca 	.word	0x200000ca
 8000dcc:	08010f80 	.word	0x08010f80
 8000dd0:	08010f8c 	.word	0x08010f8c
 8000dd4:	08010fa8 	.word	0x08010fa8
 8000dd8:	08010fb4 	.word	0x08010fb4
 8000ddc:	08010fb8 	.word	0x08010fb8

08000de0 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000dea:	4955      	ldr	r1, [pc, #340]	; (8000f40 <Write_File+0x160>)
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f00e f891 	bl	800ef14 <f_stat>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <Write_File+0x164>)
 8000df8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000dfa:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <Write_File+0x164>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d012      	beq.n	8000e28 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000e02:	2064      	movs	r0, #100	; 0x64
 8000e04:	f00e ff86 	bl	800fd14 <malloc>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	494e      	ldr	r1, [pc, #312]	; (8000f48 <Write_File+0x168>)
 8000e10:	68b8      	ldr	r0, [r7, #8]
 8000e12:	f00f f90b 	bl	801002c <siprintf>
		Send_Uart (buf);
 8000e16:	68b8      	ldr	r0, [r7, #8]
 8000e18:	f7ff feda 	bl	8000bd0 <Send_Uart>
	    free(buf);
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	f00e ff81 	bl	800fd24 <free>
	    return fresult;
 8000e22:	4b48      	ldr	r3, [pc, #288]	; (8000f44 <Write_File+0x164>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	e087      	b.n	8000f38 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000e28:	2202      	movs	r2, #2
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4847      	ldr	r0, [pc, #284]	; (8000f4c <Write_File+0x16c>)
 8000e2e:	f00d f973 	bl	800e118 <f_open>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <Write_File+0x164>)
 8000e38:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000e3a:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <Write_File+0x164>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d015      	beq.n	8000e6e <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e42:	2064      	movs	r0, #100	; 0x64
 8000e44:	f00e ff66 	bl	800fd14 <malloc>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <Write_File+0x164>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	493e      	ldr	r1, [pc, #248]	; (8000f50 <Write_File+0x170>)
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f00f f8e8 	bl	801002c <siprintf>
	    	Send_Uart(buf);
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff feb7 	bl	8000bd0 <Send_Uart>
	        free(buf);
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f00e ff5e 	bl	800fd24 <free>
	        return fresult;
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <Write_File+0x164>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	e064      	b.n	8000f38 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f00e ff50 	bl	800fd14 <malloc>
 8000e74:	4603      	mov	r3, r0
 8000e76:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4936      	ldr	r1, [pc, #216]	; (8000f54 <Write_File+0x174>)
 8000e7c:	69f8      	ldr	r0, [r7, #28]
 8000e7e:	f00f f8d5 	bl	801002c <siprintf>
	    	Send_Uart(buf);
 8000e82:	69f8      	ldr	r0, [r7, #28]
 8000e84:	f7ff fea4 	bl	8000bd0 <Send_Uart>
	        free(buf);
 8000e88:	69f8      	ldr	r0, [r7, #28]
 8000e8a:	f00e ff4b 	bl	800fd24 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000e8e:	6838      	ldr	r0, [r7, #0]
 8000e90:	f7ff f9b8 	bl	8000204 <strlen>
 8000e94:	4602      	mov	r2, r0
 8000e96:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <Write_File+0x178>)
 8000e98:	6839      	ldr	r1, [r7, #0]
 8000e9a:	482c      	ldr	r0, [pc, #176]	; (8000f4c <Write_File+0x16c>)
 8000e9c:	f00d fc0f 	bl	800e6be <f_write>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <Write_File+0x164>)
 8000ea6:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <Write_File+0x164>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d012      	beq.n	8000ed6 <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000eb0:	2064      	movs	r0, #100	; 0x64
 8000eb2:	f00e ff2f 	bl	800fd14 <malloc>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000eba:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <Write_File+0x164>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4926      	ldr	r1, [pc, #152]	; (8000f5c <Write_File+0x17c>)
 8000ec4:	69b8      	ldr	r0, [r7, #24]
 8000ec6:	f00f f8b1 	bl	801002c <siprintf>
	    		Send_Uart(buf);
 8000eca:	69b8      	ldr	r0, [r7, #24]
 8000ecc:	f7ff fe80 	bl	8000bd0 <Send_Uart>
	    		free(buf);
 8000ed0:	69b8      	ldr	r0, [r7, #24]
 8000ed2:	f00e ff27 	bl	800fd24 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000ed6:	481d      	ldr	r0, [pc, #116]	; (8000f4c <Write_File+0x16c>)
 8000ed8:	f00d fee6 	bl	800eca8 <f_close>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <Write_File+0x164>)
 8000ee2:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <Write_File+0x164>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000eec:	2064      	movs	r0, #100	; 0x64
 8000eee:	f00e ff11 	bl	800fd14 <malloc>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <Write_File+0x164>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4918      	ldr	r1, [pc, #96]	; (8000f60 <Write_File+0x180>)
 8000f00:	6938      	ldr	r0, [r7, #16]
 8000f02:	f00f f893 	bl	801002c <siprintf>
	    		Send_Uart(buf);
 8000f06:	6938      	ldr	r0, [r7, #16]
 8000f08:	f7ff fe62 	bl	8000bd0 <Send_Uart>
	    		free(buf);
 8000f0c:	6938      	ldr	r0, [r7, #16]
 8000f0e:	f00e ff09 	bl	800fd24 <free>
 8000f12:	e00f      	b.n	8000f34 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000f14:	2064      	movs	r0, #100	; 0x64
 8000f16:	f00e fefd 	bl	800fd14 <malloc>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4910      	ldr	r1, [pc, #64]	; (8000f64 <Write_File+0x184>)
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f00f f882 	bl	801002c <siprintf>
	    		Send_Uart(buf);
 8000f28:	6978      	ldr	r0, [r7, #20]
 8000f2a:	f7ff fe51 	bl	8000bd0 <Send_Uart>
	    		free(buf);
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f00e fef8 	bl	800fd24 <free>
	    	}
	    }
	    return fresult;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <Write_File+0x164>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200000b0 	.word	0x200000b0
 8000f44:	200001d0 	.word	0x200001d0
 8000f48:	08010fcc 	.word	0x08010fcc
 8000f4c:	20001320 	.word	0x20001320
 8000f50:	08010fec 	.word	0x08010fec
 8000f54:	08011014 	.word	0x08011014
 8000f58:	200001d4 	.word	0x200001d4
 8000f5c:	08011040 	.word	0x08011040
 8000f60:	08011074 	.word	0x08011074
 8000f64:	080110ac 	.word	0x080110ac

08000f68 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000f70:	4943      	ldr	r1, [pc, #268]	; (8001080 <Create_File+0x118>)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f00d ffce 	bl	800ef14 <f_stat>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b41      	ldr	r3, [pc, #260]	; (8001084 <Create_File+0x11c>)
 8000f7e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000f80:	4b40      	ldr	r3, [pc, #256]	; (8001084 <Create_File+0x11c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d112      	bne.n	8000fae <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f00e fec3 	bl	800fd14 <malloc>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	493c      	ldr	r1, [pc, #240]	; (8001088 <Create_File+0x120>)
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f00f f848 	bl	801002c <siprintf>
		Send_Uart(buf);
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f7ff fe17 	bl	8000bd0 <Send_Uart>
		free(buf);
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f00e febe 	bl	800fd24 <free>
	    return fresult;
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <Create_File+0x11c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	e063      	b.n	8001076 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000fae:	220b      	movs	r2, #11
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4836      	ldr	r0, [pc, #216]	; (800108c <Create_File+0x124>)
 8000fb4:	f00d f8b0 	bl	800e118 <f_open>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <Create_File+0x11c>)
 8000fbe:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <Create_File+0x11c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d015      	beq.n	8000ff4 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000fc8:	2064      	movs	r0, #100	; 0x64
 8000fca:	f00e fea3 	bl	800fd14 <malloc>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <Create_File+0x11c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	492d      	ldr	r1, [pc, #180]	; (8001090 <Create_File+0x128>)
 8000fdc:	6938      	ldr	r0, [r7, #16]
 8000fde:	f00f f825 	bl	801002c <siprintf>
			Send_Uart(buf);
 8000fe2:	6938      	ldr	r0, [r7, #16]
 8000fe4:	f7ff fdf4 	bl	8000bd0 <Send_Uart>
			free(buf);
 8000fe8:	6938      	ldr	r0, [r7, #16]
 8000fea:	f00e fe9b 	bl	800fd24 <free>
		    return fresult;
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <Create_File+0x11c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	e040      	b.n	8001076 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000ff4:	2064      	movs	r0, #100	; 0x64
 8000ff6:	f00e fe8d 	bl	800fd14 <malloc>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4924      	ldr	r1, [pc, #144]	; (8001094 <Create_File+0x12c>)
 8001002:	69f8      	ldr	r0, [r7, #28]
 8001004:	f00f f812 	bl	801002c <siprintf>
			Send_Uart(buf);
 8001008:	69f8      	ldr	r0, [r7, #28]
 800100a:	f7ff fde1 	bl	8000bd0 <Send_Uart>
			free(buf);
 800100e:	69f8      	ldr	r0, [r7, #28]
 8001010:	f00e fe88 	bl	800fd24 <free>
		}

		fresult = f_close(&USBHFile);
 8001014:	481d      	ldr	r0, [pc, #116]	; (800108c <Create_File+0x124>)
 8001016:	f00d fe47 	bl	800eca8 <f_close>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <Create_File+0x11c>)
 8001020:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <Create_File+0x11c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d013      	beq.n	8001052 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f00e fe72 	bl	800fd14 <malloc>
 8001030:	4603      	mov	r3, r0
 8001032:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <Create_File+0x11c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4916      	ldr	r1, [pc, #88]	; (8001098 <Create_File+0x130>)
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f00e fff4 	bl	801002c <siprintf>
			Send_Uart(buf);
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f7ff fdc3 	bl	8000bd0 <Send_Uart>
			free(buf);
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f00e fe6a 	bl	800fd24 <free>
 8001050:	e00f      	b.n	8001072 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001052:	2064      	movs	r0, #100	; 0x64
 8001054:	f00e fe5e 	bl	800fd14 <malloc>
 8001058:	4603      	mov	r3, r0
 800105a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	490f      	ldr	r1, [pc, #60]	; (800109c <Create_File+0x134>)
 8001060:	69b8      	ldr	r0, [r7, #24]
 8001062:	f00e ffe3 	bl	801002c <siprintf>
			Send_Uart(buf);
 8001066:	69b8      	ldr	r0, [r7, #24]
 8001068:	f7ff fdb2 	bl	8000bd0 <Send_Uart>
			free(buf);
 800106c:	69b8      	ldr	r0, [r7, #24]
 800106e:	f00e fe59 	bl	800fd24 <free>
		}
	}
    return fresult;
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <Create_File+0x11c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000b0 	.word	0x200000b0
 8001084:	200001d0 	.word	0x200001d0
 8001088:	080111a0 	.word	0x080111a0
 800108c:	20001320 	.word	0x20001320
 8001090:	080111d8 	.word	0x080111d8
 8001094:	08011200 	.word	0x08011200
 8001098:	08011240 	.word	0x08011240
 800109c:	08011180 	.word	0x08011180

080010a0 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f00e f873 	bl	800f194 <f_mkdir>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <Create_Dir+0x74>)
 80010b4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <Create_Dir+0x74>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d110      	bne.n	80010e0 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f00e fe28 	bl	800fd14 <malloc>
 80010c4:	4603      	mov	r3, r0
 80010c6:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4913      	ldr	r1, [pc, #76]	; (8001118 <Create_Dir+0x78>)
 80010cc:	68b8      	ldr	r0, [r7, #8]
 80010ce:	f00e ffad 	bl	801002c <siprintf>
    	Send_Uart (buf);
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f7ff fd7c 	bl	8000bd0 <Send_Uart>
    	free(buf);
 80010d8:	68b8      	ldr	r0, [r7, #8]
 80010da:	f00e fe23 	bl	800fd24 <free>
 80010de:	e012      	b.n	8001106 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80010e0:	2064      	movs	r0, #100	; 0x64
 80010e2:	f00e fe17 	bl	800fd14 <malloc>
 80010e6:	4603      	mov	r3, r0
 80010e8:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <Create_Dir+0x74>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	490a      	ldr	r1, [pc, #40]	; (800111c <Create_Dir+0x7c>)
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f00e ff99 	bl	801002c <siprintf>
    	Send_Uart(buf);
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff fd68 	bl	8000bd0 <Send_Uart>
    	free(buf);
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f00e fe0f 	bl	800fd24 <free>
    }
    return fresult;
 8001106:	4b03      	ldr	r3, [pc, #12]	; (8001114 <Create_Dir+0x74>)
 8001108:	781b      	ldrb	r3, [r3, #0]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001d0 	.word	0x200001d0
 8001118:	08011320 	.word	0x08011320
 800111c:	08011348 	.word	0x08011348

08001120 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8001126:	4a30      	ldr	r2, [pc, #192]	; (80011e8 <Check_USB_Details+0xc8>)
 8001128:	4930      	ldr	r1, [pc, #192]	; (80011ec <Check_USB_Details+0xcc>)
 800112a:	4831      	ldr	r0, [pc, #196]	; (80011f0 <Check_USB_Details+0xd0>)
 800112c:	f00d ff2b 	bl	800ef86 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <Check_USB_Details+0xc8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	3b02      	subs	r3, #2
 8001138:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <Check_USB_Details+0xc8>)
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	8952      	ldrh	r2, [r2, #10]
 800113e:	fb02 f303 	mul.w	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fb28 	bl	8000798 <__aeabi_ui2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <Check_USB_Details+0xd4>)
 800114e:	f7ff f8b7 	bl	80002c0 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fb97 	bl	800088c <__aeabi_d2uiz>
 800115e:	4603      	mov	r3, r0
 8001160:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <Check_USB_Details+0xd8>)
 8001162:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001164:	201e      	movs	r0, #30
 8001166:	f00e fdd5 	bl	800fd14 <malloc>
 800116a:	4603      	mov	r3, r0
 800116c:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <Check_USB_Details+0xd8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	4921      	ldr	r1, [pc, #132]	; (80011fc <Check_USB_Details+0xdc>)
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f00e ff58 	bl	801002c <siprintf>
    Send_Uart(buf);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fd27 	bl	8000bd0 <Send_Uart>
    free(buf);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f00e fdce 	bl	800fd24 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <Check_USB_Details+0xc8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	895b      	ldrh	r3, [r3, #10]
 800118e:	461a      	mov	r2, r3
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <Check_USB_Details+0xcc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fafd 	bl	8000798 <__aeabi_ui2d>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <Check_USB_Details+0xd4>)
 80011a4:	f7ff f88c 	bl	80002c0 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fb6c 	bl	800088c <__aeabi_d2uiz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <Check_USB_Details+0xe0>)
 80011b8:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80011ba:	201e      	movs	r0, #30
 80011bc:	f00e fdaa 	bl	800fd14 <malloc>
 80011c0:	4603      	mov	r3, r0
 80011c2:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <Check_USB_Details+0xe0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <Check_USB_Details+0xe4>)
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f00e ff2d 	bl	801002c <siprintf>
    Send_Uart(buf);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fcfc 	bl	8000bd0 <Send_Uart>
    free(buf);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f00e fda3 	bl	800fd24 <free>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001d8 	.word	0x200001d8
 80011ec:	200001dc 	.word	0x200001dc
 80011f0:	08011374 	.word	0x08011374
 80011f4:	3fe00000 	.word	0x3fe00000
 80011f8:	200001e0 	.word	0x200001e0
 80011fc:	08011378 	.word	0x08011378
 8001200:	200001e4 	.word	0x200001e4
 8001204:	08011390 	.word	0x08011390

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f000 fba6 	bl	800195e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f835 	bl	8001280 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001216:	f000 f895 	bl	8001344 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121a:	f000 f967 	bl	80014ec <MX_GPIO_Init>
  MX_USB_HOST_Init();
 800121e:	f00e fa29 	bl	800f674 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001222:	f007 f875 	bl	8008310 <MX_FATFS_Init>
  MX_LPUART1_UART_Init();
 8001226:	f000 f935 	bl	8001494 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800122a:	f000 f8bb 	bl	80013a4 <MX_ADC1_Init>
	    /* USER CODE END WHILE */

	//	  HAL_ADC_Start(&hadc1);
	//	  HAL_ADC_PollForConversion(&hadc1, 300);

		  HAL_ADC_Start(&hadc1);
 800122e:	4812      	ldr	r0, [pc, #72]	; (8001278 <main+0x70>)
 8001230:	f000 ff7e 	bl	8002130 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 8001234:	2105      	movs	r1, #5
 8001236:	4810      	ldr	r0, [pc, #64]	; (8001278 <main+0x70>)
 8001238:	f001 f834 	bl	80022a4 <HAL_ADC_PollForConversion>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d115      	bne.n	800126e <main+0x66>
		  {
			  value = HAL_ADC_GetValue(&hadc1);
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <main+0x70>)
 8001244:	f001 f906 	bl	8002454 <HAL_ADC_GetValue>
 8001248:	4603      	mov	r3, r0
 800124a:	60fb      	str	r3, [r7, #12]

			  if(value > 540){
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8001252:	dd0c      	ble.n	800126e <main+0x66>
				  itoa(value,string,10);
 8001254:	463b      	mov	r3, r7
 8001256:	220a      	movs	r2, #10
 8001258:	4619      	mov	r1, r3
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f00e fd58 	bl	800fd10 <itoa>
				  Send_Uart(string);
 8001260:	463b      	mov	r3, r7
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fcb4 	bl	8000bd0 <Send_Uart>
				  Send_Uart("\n");
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <main+0x74>)
 800126a:	f7ff fcb1 	bl	8000bd0 <Send_Uart>
//			  itoa(value,string,10);
//			  Send_Uart(string);
//			  Send_Uart("\n");
		  }
	//	  value = HAL_ADC_GetValue(&hadc1);
		  HAL_Delay(2);
 800126e:	2002      	movs	r0, #2
 8001270:	f000 fbea 	bl	8001a48 <HAL_Delay>
		  HAL_ADC_Start(&hadc1);
 8001274:	e7db      	b.n	800122e <main+0x26>
 8001276:	bf00      	nop
 8001278:	200001e8 	.word	0x200001e8
 800127c:	080113a8 	.word	0x080113a8

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b096      	sub	sp, #88	; 0x58
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2244      	movs	r2, #68	; 0x44
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f00e fd5e 	bl	800fd50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012a6:	f003 fd05 	bl	8004cb4 <HAL_PWREx_ControlVoltageScaling>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012b0:	f000 f968 	bl	8001584 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012b4:	f003 fce0 	bl	8004c78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <SystemClock_Config+0xc0>)
 80012ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012be:	4a20      	ldr	r2, [pc, #128]	; (8001340 <SystemClock_Config+0xc0>)
 80012c0:	f023 0318 	bic.w	r3, r3, #24
 80012c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012c8:	2314      	movs	r3, #20
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012dc:	2302      	movs	r3, #2
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012e0:	2301      	movs	r3, #1
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012e8:	2328      	movs	r3, #40	; 0x28
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 fd4f 	bl	8004da0 <HAL_RCC_OscConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001308:	f000 f93c 	bl	8001584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	230f      	movs	r3, #15
 800130e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	2303      	movs	r3, #3
 8001312:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	2104      	movs	r1, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f004 f955 	bl	80055d4 <HAL_RCC_ClockConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001330:	f000 f928 	bl	8001584 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001334:	f004 fe6e 	bl	8006014 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001338:	bf00      	nop
 800133a:	3758      	adds	r7, #88	; 0x58
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000

08001344 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0a4      	sub	sp, #144	; 0x90
 8001348:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	228c      	movs	r2, #140	; 0x8c
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00e fcfd 	bl	800fd50 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001356:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800135a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800135c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001364:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001368:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800136a:	2301      	movs	r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001372:	2318      	movs	r3, #24
 8001374:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001376:	2302      	movs	r3, #2
 8001378:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001382:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001386:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4618      	mov	r0, r3
 800138c:	f004 fb46 	bl	8005a1c <HAL_RCCEx_PeriphCLKConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001396:	f000 f8f5 	bl	8001584 <Error_Handler>
  }
}
 800139a:	bf00      	nop
 800139c:	3790      	adds	r7, #144	; 0x90
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <MX_ADC1_Init+0xe4>)
 80013c8:	4a30      	ldr	r2, [pc, #192]	; (800148c <MX_ADC1_Init+0xe8>)
 80013ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013cc:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <MX_ADC1_Init+0xe4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <MX_ADC1_Init+0xe4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <MX_ADC1_Init+0xe4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <MX_ADC1_Init+0xe4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <MX_ADC1_Init+0xe4>)
 80013e6:	2204      	movs	r2, #4
 80013e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <MX_ADC1_Init+0xe4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <MX_ADC1_Init+0xe4>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <MX_ADC1_Init+0xe4>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_ADC1_Init+0xe4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_ADC1_Init+0xe4>)
 8001406:	2200      	movs	r2, #0
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_ADC1_Init+0xe4>)
 800140c:	2200      	movs	r2, #0
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_ADC1_Init+0xe4>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_ADC1_Init+0xe4>)
 800141a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_ADC1_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001428:	4817      	ldr	r0, [pc, #92]	; (8001488 <MX_ADC1_Init+0xe4>)
 800142a:	f000 fd27 	bl	8001e7c <HAL_ADC_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001434:	f000 f8a6 	bl	8001584 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <MX_ADC1_Init+0xe4>)
 8001444:	f001 fccc 	bl	8002de0 <HAL_ADCEx_MultiModeConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800144e:	f000 f899 	bl	8001584 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_ADC1_Init+0xec>)
 8001454:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001456:	2306      	movs	r3, #6
 8001458:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800145e:	237f      	movs	r3, #127	; 0x7f
 8001460:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001462:	2304      	movs	r3, #4
 8001464:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_ADC1_Init+0xe4>)
 8001470:	f000 fffe 	bl	8002470 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800147a:	f000 f883 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200001e8 	.word	0x200001e8
 800148c:	50040000 	.word	0x50040000
 8001490:	21800100 	.word	0x21800100

08001494 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <MX_LPUART1_UART_Init+0x50>)
 800149a:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <MX_LPUART1_UART_Init+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_LPUART1_UART_Init+0x50>)
 80014a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_LPUART1_UART_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <MX_LPUART1_UART_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_LPUART1_UART_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <MX_LPUART1_UART_Init+0x50>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_LPUART1_UART_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <MX_LPUART1_UART_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_LPUART1_UART_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_LPUART1_UART_Init+0x50>)
 80014d2:	f004 ff7d 	bl	80063d0 <HAL_UART_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80014dc:	f000 f852 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000250 	.word	0x20000250
 80014e8:	40008000 	.word	0x40008000

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_GPIO_Init+0x90>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a1d      	ldr	r2, [pc, #116]	; (800157c <MX_GPIO_Init+0x90>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_GPIO_Init+0x90>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_GPIO_Init+0x90>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <MX_GPIO_Init+0x90>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_GPIO_Init+0x90>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_GPIO_Init+0x90>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <MX_GPIO_Init+0x90>)
 8001538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_GPIO_Init+0x90>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800154a:	f003 fc19 	bl	8004d80 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2140      	movs	r1, #64	; 0x40
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <MX_GPIO_Init+0x94>)
 8001554:	f002 f816 	bl	8003584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001558:	2340      	movs	r3, #64	; 0x40
 800155a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_GPIO_Init+0x94>)
 8001570:	f001 fe76 	bl	8003260 <HAL_GPIO_Init>

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	48001800 	.word	0x48001800

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	e7fe      	b.n	800158c <Error_Handler+0x8>
	...

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_MspInit+0x44>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_MspInit+0x44>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6613      	str	r3, [r2, #96]	; 0x60
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_MspInit+0x44>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_MspInit+0x44>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_MspInit+0x44>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_MspInit+0x44>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a15      	ldr	r2, [pc, #84]	; (800164c <HAL_ADC_MspInit+0x74>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d124      	bne.n	8001644 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_ADC_MspInit+0x78>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <HAL_ADC_MspInit+0x78>)
 8001600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_ADC_MspInit+0x78>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_ADC_MspInit+0x78>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <HAL_ADC_MspInit+0x78>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_ADC_MspInit+0x78>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800162a:	2328      	movs	r3, #40	; 0x28
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800162e:	230b      	movs	r3, #11
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f001 fe0e 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	50040000 	.word	0x50040000
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0ac      	sub	sp, #176	; 0xb0
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	228c      	movs	r2, #140	; 0x8c
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f00e fb6b 	bl	800fd50 <memset>
  if(huart->Instance==LPUART1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a26      	ldr	r2, [pc, #152]	; (8001718 <HAL_UART_MspInit+0xc4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d145      	bne.n	8001710 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001684:	2320      	movs	r3, #32
 8001686:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001688:	2300      	movs	r3, #0
 800168a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4618      	mov	r0, r3
 8001692:	f004 f9c3 	bl	8005a1c <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800169c:	f7ff ff72 	bl	8001584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	4a1d      	ldr	r2, [pc, #116]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_UART_MspInit+0xc8>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80016d0:	f003 fb56 	bl	8004d80 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80016d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80016ee:	2308      	movs	r3, #8
 80016f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f8:	4619      	mov	r1, r3
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <HAL_UART_MspInit+0xcc>)
 80016fc:	f001 fdb0 	bl	8003260 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2046      	movs	r0, #70	; 0x46
 8001706:	f001 fcf6 	bl	80030f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800170a:	2046      	movs	r0, #70	; 0x46
 800170c:	f001 fd0f 	bl	800312e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	37b0      	adds	r7, #176	; 0xb0
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40008000 	.word	0x40008000
 800171c:	40021000 	.word	0x40021000
 8001720:	48001800 	.word	0x48001800

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 f94a 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <OTG_FS_IRQHandler+0x10>)
 800177e:	f002 f97f 	bl	8003a80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20002be8 	.word	0x20002be8

0800178c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <LPUART1_IRQHandler+0x10>)
 8001792:	f004 feff 	bl	8006594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000250 	.word	0x20000250

080017a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e00a      	b.n	80017c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017b2:	f3af 8000 	nop.w
 80017b6:	4601      	mov	r1, r0
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	60ba      	str	r2, [r7, #8]
 80017be:	b2ca      	uxtb	r2, r1
 80017c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbf0      	blt.n	80017b2 <_read+0x12>
	}

return len;
 80017d0:	687b      	ldr	r3, [r7, #4]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e009      	b.n	8001800 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf1      	blt.n	80017ec <_write+0x12>
	}
	return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_close>:

int _close(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183a:	605a      	str	r2, [r3, #4]
	return 0;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_isatty>:

int _isatty(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	return 1;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
	return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f00e f9ee 	bl	800fc8c <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20050000 	.word	0x20050000
 80018dc:	00000400 	.word	0x00000400
 80018e0:	200002d4 	.word	0x200002d4
 80018e4:	20002f00 	.word	0x20002f00

080018e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001944 <LoopForever+0x2>
  ldr   sp, =_estack    /* Set stack pointer */

/* Call the clock system initialization function.*/
 8001910:	f7ff ffea 	bl	80018e8 <SystemInit>
    bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <LoopForever+0x6>)
  ldr r0, =_sdata
 8001916:	490d      	ldr	r1, [pc, #52]	; (800194c <LoopForever+0xa>)
  ldr r1, =_edata
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <LoopForever+0xe>)
  ldr r2, =_sidata
 800191a:	2300      	movs	r3, #0
  movs r3, #0
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:
  b LoopCopyDataInit

CopyDataInit:
 800191e:	58d4      	ldr	r4, [r2, r3]
  ldr r4, [r2, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  str r4, [r0, r3]
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:
  adds r3, r3, #4

LoopCopyDataInit:
 8001924:	18c4      	adds	r4, r0, r3
  adds r4, r0, r3
 8001926:	428c      	cmp	r4, r1
  cmp r4, r1
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  bcc CopyDataInit
  
/* Zero fill the bss segment. */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <LoopForever+0x12>)
  ldr r2, =_sbss
 800192c:	4c0a      	ldr	r4, [pc, #40]	; (8001958 <LoopForever+0x16>)
  ldr r4, =_ebss
 800192e:	2300      	movs	r3, #0
  movs r3, #0
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:
  b LoopFillZerobss

FillZerobss:
 8001932:	6013      	str	r3, [r2, #0]
  str  r3, [r2]
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:
  adds r2, r2, #4

LoopFillZerobss:
 8001936:	42a2      	cmp	r2, r4
  cmp r2, r4
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>
  bcc FillZerobss

/* Call static constructors */
 800193a:	f00e f9ad 	bl	800fc98 <__libc_init_array>
    bl __libc_init_array
/* Call the application's entry point.*/
 800193e:	f7ff fc63 	bl	8001208 <main>

08001942 <LoopForever>:
	bl	main

LoopForever:
 8001942:	e7fe      	b.n	8001942 <LoopForever>

 8001944:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */
 8001948:	20000000 	.word	0x20000000
  ldr r0, =_sdata
 800194c:	20000090 	.word	0x20000090
  ldr r1, =_edata
 8001950:	080119b4 	.word	0x080119b4
/* Zero fill the bss segment. */
 8001954:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8001958:	20002efc 	.word	0x20002efc

0800195c <ADC1_2_IRQHandler>:
 * @param  None
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
 800195c:	e7fe      	b.n	800195c <ADC1_2_IRQHandler>

0800195e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f001 fbb9 	bl	80030e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800196e:	200f      	movs	r0, #15
 8001970:	f000 f80e 	bl	8001990 <HAL_InitTick>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	e001      	b.n	8001984 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001980:	f7ff fe06 	bl	8001590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001984:	79fb      	ldrb	r3, [r7, #7]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_InitTick+0x6c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d023      	beq.n	80019ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_InitTick+0x70>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_InitTick+0x6c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fbc5 	bl	800314a <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10f      	bne.n	80019e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d809      	bhi.n	80019e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d4:	f001 fb8f 	bl	80030f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d8:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <HAL_InitTick+0x74>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e007      	b.n	80019f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e004      	b.n	80019f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e001      	b.n	80019f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x24>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <HAL_IncTick+0x24>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	200002d8 	.word	0x200002d8

08001a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	200002d8 	.word	0x200002d8

08001a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff ffee 	bl	8001a30 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a60:	d005      	beq.n	8001a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_Delay+0x44>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6e:	bf00      	nop
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8f7      	bhi.n	8001a70 <HAL_Delay+0x28>
  {
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000008 	.word	0x20000008

08001a90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3360      	adds	r3, #96	; 0x60
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <LL_ADC_SetOffset+0x44>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b30:	bf00      	nop
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	03fff000 	.word	0x03fff000

08001b40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3360      	adds	r3, #96	; 0x60
 8001b4e:	461a      	mov	r2, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3360      	adds	r3, #96	; 0x60
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	615a      	str	r2, [r3, #20]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3330      	adds	r3, #48	; 0x30
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	4413      	add	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	211f      	movs	r1, #31
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 011f 	and.w	r1, r3, #31
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b087      	sub	sp, #28
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3314      	adds	r3, #20
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	0e5b      	lsrs	r3, r3, #25
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	4413      	add	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	0d1b      	lsrs	r3, r3, #20
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2107      	movs	r1, #7
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	0d1b      	lsrs	r3, r3, #20
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0318 	and.w	r3, r3, #24
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cc0:	40d9      	lsrs	r1, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	0007ffff 	.word	0x0007ffff

08001ce4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6093      	str	r3, [r2, #8]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d54:	d101      	bne.n	8001d5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001da4:	d101      	bne.n	8001daa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <LL_ADC_IsEnabled+0x18>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_ADC_IsEnabled+0x1a>
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e1a:	f043 0204 	orr.w	r2, r3, #4
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d101      	bne.n	8001e46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d101      	bne.n	8001e6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e139      	b.n	800210a <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d109      	bne.n	8001eb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fb97 	bl	80015d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff3f 	bl	8001d40 <LL_ADC_IsDeepPowerDownEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d004      	beq.n	8001ed2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff25 	bl	8001d1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff5a 	bl	8001d90 <LL_ADC_IsInternalRegulatorEnabled>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d115      	bne.n	8001f0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff3e 	bl	8001d68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eec:	4b89      	ldr	r3, [pc, #548]	; (8002114 <HAL_ADC_Init+0x298>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	4a89      	ldr	r2, [pc, #548]	; (8002118 <HAL_ADC_Init+0x29c>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	3301      	adds	r3, #1
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f00:	e002      	b.n	8001f08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f9      	bne.n	8001f02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff3c 	bl	8001d90 <LL_ADC_IsInternalRegulatorEnabled>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10d      	bne.n	8001f3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f043 0210 	orr.w	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff75 	bl	8001e2e <LL_ADC_REG_IsConversionOngoing>
 8001f44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 80d2 	bne.w	80020f8 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 80ce 	bne.w	80020f8 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f64:	f043 0202 	orr.w	r2, r3, #2
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff35 	bl	8001de0 <LL_ADC_IsEnabled>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d115      	bne.n	8001fa8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f7c:	4867      	ldr	r0, [pc, #412]	; (800211c <HAL_ADC_Init+0x2a0>)
 8001f7e:	f7ff ff2f 	bl	8001de0 <LL_ADC_IsEnabled>
 8001f82:	4604      	mov	r4, r0
 8001f84:	4866      	ldr	r0, [pc, #408]	; (8002120 <HAL_ADC_Init+0x2a4>)
 8001f86:	f7ff ff2b 	bl	8001de0 <LL_ADC_IsEnabled>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	431c      	orrs	r4, r3
 8001f8e:	4865      	ldr	r0, [pc, #404]	; (8002124 <HAL_ADC_Init+0x2a8>)
 8001f90:	f7ff ff26 	bl	8001de0 <LL_ADC_IsEnabled>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4323      	orrs	r3, r4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4861      	ldr	r0, [pc, #388]	; (8002128 <HAL_ADC_Init+0x2ac>)
 8001fa4:	f7ff fd74 	bl	8001a90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7e5b      	ldrb	r3, [r3, #25]
 8001fac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fb8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fbe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d106      	bne.n	8001fe4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	045b      	lsls	r3, r3, #17
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	4b49      	ldr	r3, [pc, #292]	; (800212c <HAL_ADC_Init+0x2b0>)
 8002008:	4013      	ands	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	69b9      	ldr	r1, [r7, #24]
 8002010:	430b      	orrs	r3, r1
 8002012:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff08 	bl	8001e2e <LL_ADC_REG_IsConversionOngoing>
 800201e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff15 	bl	8001e54 <LL_ADC_INJ_IsConversionOngoing>
 800202a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d140      	bne.n	80020b4 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d13d      	bne.n	80020b4 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7e1b      	ldrb	r3, [r3, #24]
 8002040:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002042:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800204a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800205a:	f023 0306 	bic.w	r3, r3, #6
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	69b9      	ldr	r1, [r7, #24]
 8002064:	430b      	orrs	r3, r1
 8002066:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800206e:	2b01      	cmp	r3, #1
 8002070:	d118      	bne.n	80020a4 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002094:	430a      	orrs	r2, r1
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	e007      	b.n	80020b4 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d10c      	bne.n	80020d6 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f023 010f 	bic.w	r1, r3, #15
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	1e5a      	subs	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
 80020d4:	e007      	b.n	80020e6 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 020f 	bic.w	r2, r2, #15
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	659a      	str	r2, [r3, #88]	; 0x58
 80020f6:	e007      	b.n	8002108 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f043 0210 	orr.w	r2, r3, #16
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002108:	7ffb      	ldrb	r3, [r7, #31]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	; 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	bf00      	nop
 8002114:	20000000 	.word	0x20000000
 8002118:	053e2d63 	.word	0x053e2d63
 800211c:	50040000 	.word	0x50040000
 8002120:	50040100 	.word	0x50040100
 8002124:	50040200 	.word	0x50040200
 8002128:	50040300 	.word	0x50040300
 800212c:	fff0c007 	.word	0xfff0c007

08002130 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002138:	4857      	ldr	r0, [pc, #348]	; (8002298 <HAL_ADC_Start+0x168>)
 800213a:	f7ff fdd3 	bl	8001ce4 <LL_ADC_GetMultimode>
 800213e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fe72 	bl	8001e2e <LL_ADC_REG_IsConversionOngoing>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	f040 809c 	bne.w	800228a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_ADC_Start+0x30>
 800215c:	2302      	movs	r3, #2
 800215e:	e097      	b.n	8002290 <HAL_ADC_Start+0x160>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fd8d 	bl	8002c88 <ADC_Enable>
 800216e:	4603      	mov	r3, r0
 8002170:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f040 8083 	bne.w	8002280 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a42      	ldr	r2, [pc, #264]	; (800229c <HAL_ADC_Start+0x16c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d002      	beq.n	800219e <HAL_ADC_Start+0x6e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	e000      	b.n	80021a0 <HAL_ADC_Start+0x70>
 800219e:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <HAL_ADC_Start+0x170>)
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d002      	beq.n	80021ae <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d105      	bne.n	80021ba <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c6:	d106      	bne.n	80021d6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f023 0206 	bic.w	r2, r3, #6
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80021d4:	e002      	b.n	80021dc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	221c      	movs	r2, #28
 80021e2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_ADC_Start+0x16c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d002      	beq.n	80021fc <HAL_ADC_Start+0xcc>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	e000      	b.n	80021fe <HAL_ADC_Start+0xce>
 80021fc:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <HAL_ADC_Start+0x170>)
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	4293      	cmp	r3, r2
 8002204:	d008      	beq.n	8002218 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b05      	cmp	r3, #5
 8002210:	d002      	beq.n	8002218 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b09      	cmp	r3, #9
 8002216:	d114      	bne.n	8002242 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800222e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fde3 	bl	8001e06 <LL_ADC_REG_StartConversion>
 8002240:	e025      	b.n	800228e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <HAL_ADC_Start+0x16c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d002      	beq.n	800225e <HAL_ADC_Start+0x12e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	e000      	b.n	8002260 <HAL_ADC_Start+0x130>
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_ADC_Start+0x170>)
 8002260:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00f      	beq.n	800228e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002276:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	659a      	str	r2, [r3, #88]	; 0x58
 800227e:	e006      	b.n	800228e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002288:	e001      	b.n	800228e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800228a:	2302      	movs	r3, #2
 800228c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800228e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	50040300 	.word	0x50040300
 800229c:	50040100 	.word	0x50040100
 80022a0:	50040000 	.word	0x50040000

080022a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ae:	4866      	ldr	r0, [pc, #408]	; (8002448 <HAL_ADC_PollForConversion+0x1a4>)
 80022b0:	f7ff fd18 	bl	8001ce4 <LL_ADC_GetMultimode>
 80022b4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d102      	bne.n	80022c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80022be:	2308      	movs	r3, #8
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	e02a      	b.n	800231a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d002      	beq.n	80022d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b09      	cmp	r3, #9
 80022d4:	d111      	bne.n	80022fa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	f043 0220 	orr.w	r2, r3, #32
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0a4      	b.n	800243e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022f4:	2304      	movs	r3, #4
 80022f6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022f8:	e00f      	b.n	800231a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022fa:	4853      	ldr	r0, [pc, #332]	; (8002448 <HAL_ADC_PollForConversion+0x1a4>)
 80022fc:	f7ff fd00 	bl	8001d00 <LL_ADC_GetMultiDMATransfer>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	f043 0220 	orr.w	r2, r3, #32
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e093      	b.n	800243e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002316:	2304      	movs	r3, #4
 8002318:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800231a:	f7ff fb89 	bl	8001a30 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002320:	e021      	b.n	8002366 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002328:	d01d      	beq.n	8002366 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800232a:	f7ff fb81 	bl	8001a30 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <HAL_ADC_PollForConversion+0x9c>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d112      	bne.n	8002366 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	f043 0204 	orr.w	r2, r3, #4
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e06b      	b.n	800243e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0d6      	beq.n	8002322 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fc1f 	bl	8001bc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01c      	beq.n	80023ca <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7e5b      	ldrb	r3, [r3, #25]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d118      	bne.n	80023ca <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d111      	bne.n	80023ca <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1f      	ldr	r2, [pc, #124]	; (800244c <HAL_ADC_PollForConversion+0x1a8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d002      	beq.n	80023da <HAL_ADC_PollForConversion+0x136>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	e000      	b.n	80023dc <HAL_ADC_PollForConversion+0x138>
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_ADC_PollForConversion+0x1ac>)
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d008      	beq.n	80023f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d002      	beq.n	80023f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b09      	cmp	r3, #9
 80023f4:	d104      	bne.n	8002400 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e00c      	b.n	800241a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <HAL_ADC_PollForConversion+0x1a8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d002      	beq.n	8002410 <HAL_ADC_PollForConversion+0x16c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	e000      	b.n	8002412 <HAL_ADC_PollForConversion+0x16e>
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_ADC_PollForConversion+0x1ac>)
 8002412:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d104      	bne.n	800242a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2208      	movs	r2, #8
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e008      	b.n	800243c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	220c      	movs	r2, #12
 800243a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3720      	adds	r7, #32
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	50040300 	.word	0x50040300
 800244c:	50040100 	.word	0x50040100
 8002450:	50040000 	.word	0x50040000

08002454 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0b6      	sub	sp, #216	; 0xd8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x22>
 800248e:	2302      	movs	r3, #2
 8002490:	e3e3      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x7ea>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fcc5 	bl	8001e2e <LL_ADC_REG_IsConversionOngoing>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 83c4 	bne.w	8002c34 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d824      	bhi.n	80024fe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	3b02      	subs	r3, #2
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d81b      	bhi.n	80024f6 <HAL_ADC_ConfigChannel+0x86>
 80024be:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <HAL_ADC_ConfigChannel+0x54>)
 80024c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	080024dd 	.word	0x080024dd
 80024cc:	080024e5 	.word	0x080024e5
 80024d0:	080024ed 	.word	0x080024ed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	220c      	movs	r2, #12
 80024d8:	605a      	str	r2, [r3, #4]
          break;
 80024da:	e011      	b.n	8002500 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2212      	movs	r2, #18
 80024e0:	605a      	str	r2, [r3, #4]
          break;
 80024e2:	e00d      	b.n	8002500 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2218      	movs	r2, #24
 80024e8:	605a      	str	r2, [r3, #4]
          break;
 80024ea:	e009      	b.n	8002500 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024f2:	605a      	str	r2, [r3, #4]
          break;
 80024f4:	e004      	b.n	8002500 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2206      	movs	r2, #6
 80024fa:	605a      	str	r2, [r3, #4]
          break;
 80024fc:	e000      	b.n	8002500 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024fe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	f7ff fb6e 	bl	8001bee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fc89 	bl	8001e2e <LL_ADC_REG_IsConversionOngoing>
 800251c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fc95 	bl	8001e54 <LL_ADC_INJ_IsConversionOngoing>
 800252a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800252e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 81c1 	bne.w	80028ba <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 81bc 	bne.w	80028ba <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800254a:	d10f      	bne.n	800256c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	4619      	mov	r1, r3
 8002558:	f7ff fb75 	bl	8001c46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb1c 	bl	8001ba2 <LL_ADC_SetSamplingTimeCommonConfig>
 800256a:	e00e      	b.n	800258a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	461a      	mov	r2, r3
 800257a:	f7ff fb64 	bl	8001c46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fb0c 	bl	8001ba2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d00a      	beq.n	80025c2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6919      	ldr	r1, [r3, #16]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025bc:	f7ff fa9c 	bl	8001af8 <LL_ADC_SetOffset>
 80025c0:	e17b      	b.n	80028ba <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fab9 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x17e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff faae 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	0e9b      	lsrs	r3, r3, #26
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	e01e      	b.n	800262c <HAL_ADC_ConfigChannel+0x1bc>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff faa3 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800260c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800261c:	2320      	movs	r3, #32
 800261e:	e004      	b.n	800262a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002620:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d4>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	e018      	b.n	8002676 <HAL_ADC_ConfigChannel+0x206>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800265c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e004      	b.n	8002676 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800266c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002676:	429a      	cmp	r2, r3
 8002678:	d106      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fa72 	bl	8001b6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2101      	movs	r1, #1
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fa56 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x244>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fa4b 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	f003 021f 	and.w	r2, r3, #31
 80026b2:	e01e      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x282>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fa40 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80026e2:	2320      	movs	r3, #32
 80026e4:	e004      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80026e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <HAL_ADC_ConfigChannel+0x29a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	e018      	b.n	800273c <HAL_ADC_ConfigChannel+0x2cc>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800271e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800272e:	2320      	movs	r3, #32
 8002730:	e004      	b.n	800273c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800273c:	429a      	cmp	r2, r3
 800273e:	d106      	bne.n	800274e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2200      	movs	r2, #0
 8002746:	2101      	movs	r1, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fa0f 	bl	8001b6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2102      	movs	r1, #2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff f9f3 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <HAL_ADC_ConfigChannel+0x30a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2102      	movs	r1, #2
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f9e8 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	0e9b      	lsrs	r3, r3, #26
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	e01e      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x348>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2102      	movs	r1, #2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f9dd 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800279c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80027a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80027a8:	2320      	movs	r3, #32
 80027aa:	e004      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80027ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x360>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	e016      	b.n	80027fe <HAL_ADC_ConfigChannel+0x38e>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e004      	b.n	80027fe <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80027f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027fe:	429a      	cmp	r2, r3
 8002800:	d106      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	2102      	movs	r1, #2
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f9ae 	bl	8001b6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2103      	movs	r1, #3
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff f992 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <HAL_ADC_ConfigChannel+0x3cc>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2103      	movs	r1, #3
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff f987 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	f003 021f 	and.w	r2, r3, #31
 800283a:	e017      	b.n	800286c <HAL_ADC_ConfigChannel+0x3fc>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2103      	movs	r1, #3
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f97c 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002856:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e003      	b.n	800286a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x414>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	e011      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x438>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002894:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e003      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80028a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2103      	movs	r1, #3
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f959 	bl	8001b6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fa8e 	bl	8001de0 <LL_ADC_IsEnabled>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f040 8140 	bne.w	8002b4c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6819      	ldr	r1, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	461a      	mov	r2, r3
 80028da:	f7ff f9df 	bl	8001c9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4a8f      	ldr	r2, [pc, #572]	; (8002b20 <HAL_ADC_ConfigChannel+0x6b0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	f040 8131 	bne.w	8002b4c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10b      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x4a2>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	3301      	adds	r3, #1
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	2b09      	cmp	r3, #9
 8002908:	bf94      	ite	ls
 800290a:	2301      	movls	r3, #1
 800290c:	2300      	movhi	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	e019      	b.n	8002946 <HAL_ADC_ConfigChannel+0x4d6>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002922:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e003      	b.n	8002936 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800292e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	2b09      	cmp	r3, #9
 800293e:	bf94      	ite	ls
 8002940:	2301      	movls	r3, #1
 8002942:	2300      	movhi	r3, #0
 8002944:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002946:	2b00      	cmp	r3, #0
 8002948:	d079      	beq.n	8002a3e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x4f6>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0e9b      	lsrs	r3, r3, #26
 800295c:	3301      	adds	r3, #1
 800295e:	069b      	lsls	r3, r3, #26
 8002960:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002964:	e015      	b.n	8002992 <HAL_ADC_ConfigChannel+0x522>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002976:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800297e:	2320      	movs	r3, #32
 8002980:	e003      	b.n	800298a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3301      	adds	r3, #1
 800298c:	069b      	lsls	r3, r3, #26
 800298e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x542>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	0e9b      	lsrs	r3, r3, #26
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	e017      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x572>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80029c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80029ca:	2320      	movs	r3, #32
 80029cc:	e003      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80029ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	3301      	adds	r3, #1
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	ea42 0103 	orr.w	r1, r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x598>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	3301      	adds	r3, #1
 80029fa:	f003 021f 	and.w	r2, r3, #31
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	051b      	lsls	r3, r3, #20
 8002a06:	e018      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x5ca>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e003      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f003 021f 	and.w	r2, r3, #31
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	e081      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d107      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x5ea>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0e9b      	lsrs	r3, r3, #26
 8002a50:	3301      	adds	r3, #1
 8002a52:	069b      	lsls	r3, r3, #26
 8002a54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a58:	e015      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x616>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e003      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	069b      	lsls	r3, r3, #26
 8002a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x636>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	e017      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x666>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e003      	b.n	8002aca <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3301      	adds	r3, #1
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	ea42 0103 	orr.w	r1, r2, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x692>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	0e9b      	lsrs	r3, r3, #26
 8002aec:	3301      	adds	r3, #1
 8002aee:	f003 021f 	and.w	r2, r3, #31
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	3b1e      	subs	r3, #30
 8002afa:	051b      	lsls	r3, r3, #20
 8002afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b00:	e01e      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x6d0>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	613b      	str	r3, [r7, #16]
  return result;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e006      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x6bc>
 8002b1e:	bf00      	nop
 8002b20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f003 021f 	and.w	r2, r3, #31
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	3b1e      	subs	r3, #30
 8002b3a:	051b      	lsls	r3, r3, #20
 8002b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b40:	430b      	orrs	r3, r1
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7ff f87d 	bl	8001c46 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b44      	ldr	r3, [pc, #272]	; (8002c64 <HAL_ADC_ConfigChannel+0x7f4>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d07a      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b58:	4843      	ldr	r0, [pc, #268]	; (8002c68 <HAL_ADC_ConfigChannel+0x7f8>)
 8002b5a:	f7fe ffbf 	bl	8001adc <LL_ADC_GetCommonPathInternalCh>
 8002b5e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a41      	ldr	r2, [pc, #260]	; (8002c6c <HAL_ADC_ConfigChannel+0x7fc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d12c      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d126      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3c      	ldr	r2, [pc, #240]	; (8002c70 <HAL_ADC_ConfigChannel+0x800>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d004      	beq.n	8002b8c <HAL_ADC_ConfigChannel+0x71c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <HAL_ADC_ConfigChannel+0x804>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d15d      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b94:	4619      	mov	r1, r3
 8002b96:	4834      	ldr	r0, [pc, #208]	; (8002c68 <HAL_ADC_ConfigChannel+0x7f8>)
 8002b98:	f7fe ff8d 	bl	8001ab6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_ADC_ConfigChannel+0x808>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	4a36      	ldr	r2, [pc, #216]	; (8002c7c <HAL_ADC_ConfigChannel+0x80c>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bb6:	e002      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f9      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bc4:	e040      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2d      	ldr	r2, [pc, #180]	; (8002c80 <HAL_ADC_ConfigChannel+0x810>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d118      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x792>
 8002bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d112      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a23      	ldr	r2, [pc, #140]	; (8002c70 <HAL_ADC_ConfigChannel+0x800>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0x780>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <HAL_ADC_ConfigChannel+0x804>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d12d      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	481b      	ldr	r0, [pc, #108]	; (8002c68 <HAL_ADC_ConfigChannel+0x7f8>)
 8002bfc:	f7fe ff5b 	bl	8001ab6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c00:	e024      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <HAL_ADC_ConfigChannel+0x814>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d120      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d11a      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <HAL_ADC_ConfigChannel+0x800>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d115      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	480e      	ldr	r0, [pc, #56]	; (8002c68 <HAL_ADC_ConfigChannel+0x7f8>)
 8002c2e:	f7fe ff42 	bl	8001ab6 <LL_ADC_SetCommonPathInternalCh>
 8002c32:	e00c      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002c46:	e002      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c56:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	37d8      	adds	r7, #216	; 0xd8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	80080000 	.word	0x80080000
 8002c68:	50040300 	.word	0x50040300
 8002c6c:	c7520000 	.word	0xc7520000
 8002c70:	50040000 	.word	0x50040000
 8002c74:	50040200 	.word	0x50040200
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	053e2d63 	.word	0x053e2d63
 8002c80:	cb840000 	.word	0xcb840000
 8002c84:	80000001 	.word	0x80000001

08002c88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff f8a1 	bl	8001de0 <LL_ADC_IsEnabled>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d169      	bne.n	8002d78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <ADC_Enable+0xfc>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e055      	b.n	8002d7a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f870 	bl	8001db8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cd8:	482b      	ldr	r0, [pc, #172]	; (8002d88 <ADC_Enable+0x100>)
 8002cda:	f7fe feff 	bl	8001adc <LL_ADC_GetCommonPathInternalCh>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d013      	beq.n	8002d10 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ce8:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <ADC_Enable+0x104>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	4a28      	ldr	r2, [pc, #160]	; (8002d90 <ADC_Enable+0x108>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002d02:	e002      	b.n	8002d0a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f9      	bne.n	8002d04 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d10:	f7fe fe8e 	bl	8001a30 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d16:	e028      	b.n	8002d6a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f85f 	bl	8001de0 <LL_ADC_IsEnabled>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff f843 	bl	8001db8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d32:	f7fe fe7d 	bl	8001a30 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d914      	bls.n	8002d6a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d00d      	beq.n	8002d6a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	f043 0210 	orr.w	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e007      	b.n	8002d7a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d1cf      	bne.n	8002d18 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	8000003f 	.word	0x8000003f
 8002d88:	50040300 	.word	0x50040300
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	053e2d63 	.word	0x053e2d63

08002d94 <LL_ADC_IsEnabled>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <LL_ADC_IsEnabled+0x18>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <LL_ADC_IsEnabled+0x1a>
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_ADC_REG_IsConversionOngoing>:
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d101      	bne.n	8002dd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b0a1      	sub	sp, #132	; 0x84
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e093      	b.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002e06:	2300      	movs	r3, #0
 8002e08:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a47      	ldr	r2, [pc, #284]	; (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d102      	bne.n	8002e1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e18:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e001      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	f043 0220 	orr.w	r2, r3, #32
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e072      	b.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ffb9 	bl	8002dba <LL_ADC_REG_IsConversionOngoing>
 8002e48:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ffb3 	bl	8002dba <LL_ADC_REG_IsConversionOngoing>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d154      	bne.n	8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d151      	bne.n	8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e60:	4b35      	ldr	r3, [pc, #212]	; (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e62:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d02c      	beq.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e7e:	035b      	lsls	r3, r3, #13
 8002e80:	430b      	orrs	r3, r1
 8002e82:	431a      	orrs	r2, r3
 8002e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e88:	4829      	ldr	r0, [pc, #164]	; (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e8a:	f7ff ff83 	bl	8002d94 <LL_ADC_IsEnabled>
 8002e8e:	4604      	mov	r4, r0
 8002e90:	4828      	ldr	r0, [pc, #160]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e92:	f7ff ff7f 	bl	8002d94 <LL_ADC_IsEnabled>
 8002e96:	4603      	mov	r3, r0
 8002e98:	431c      	orrs	r4, r3
 8002e9a:	4828      	ldr	r0, [pc, #160]	; (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e9c:	f7ff ff7a 	bl	8002d94 <LL_ADC_IsEnabled>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4323      	orrs	r3, r4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d137      	bne.n	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eb0:	f023 030f 	bic.w	r3, r3, #15
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	6811      	ldr	r1, [r2, #0]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	6892      	ldr	r2, [r2, #8]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec4:	e028      	b.n	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ed2:	4817      	ldr	r0, [pc, #92]	; (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ed4:	f7ff ff5e 	bl	8002d94 <LL_ADC_IsEnabled>
 8002ed8:	4604      	mov	r4, r0
 8002eda:	4816      	ldr	r0, [pc, #88]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002edc:	f7ff ff5a 	bl	8002d94 <LL_ADC_IsEnabled>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	431c      	orrs	r4, r3
 8002ee4:	4815      	ldr	r0, [pc, #84]	; (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ee6:	f7ff ff55 	bl	8002d94 <LL_ADC_IsEnabled>
 8002eea:	4603      	mov	r3, r0
 8002eec:	4323      	orrs	r3, r4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d112      	bne.n	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002efa:	f023 030f 	bic.w	r3, r3, #15
 8002efe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f00:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f02:	e009      	b.n	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f16:	e000      	b.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3784      	adds	r7, #132	; 0x84
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd90      	pop	{r4, r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	50040000 	.word	0x50040000
 8002f34:	50040100 	.word	0x50040100
 8002f38:	50040300 	.word	0x50040300
 8002f3c:	50040200 	.word	0x50040200

08002f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f72:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	60d3      	str	r3, [r2, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 0307 	and.w	r3, r3, #7
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	db0b      	blt.n	8002fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4907      	ldr	r1, [pc, #28]	; (8002fdc <__NVIC_EnableIRQ+0x38>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e100 	.word	0xe000e100

08002fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db0a      	blt.n	800300a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	490c      	ldr	r1, [pc, #48]	; (800302c <__NVIC_SetPriority+0x4c>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	440b      	add	r3, r1
 8003004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003008:	e00a      	b.n	8003020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4908      	ldr	r1, [pc, #32]	; (8003030 <__NVIC_SetPriority+0x50>)
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	3b04      	subs	r3, #4
 8003018:	0112      	lsls	r2, r2, #4
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	440b      	add	r3, r1
 800301e:	761a      	strb	r2, [r3, #24]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000e100 	.word	0xe000e100
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	; 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f1c3 0307 	rsb	r3, r3, #7
 800304e:	2b04      	cmp	r3, #4
 8003050:	bf28      	it	cs
 8003052:	2304      	movcs	r3, #4
 8003054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3304      	adds	r3, #4
 800305a:	2b06      	cmp	r3, #6
 800305c:	d902      	bls.n	8003064 <NVIC_EncodePriority+0x30>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3b03      	subs	r3, #3
 8003062:	e000      	b.n	8003066 <NVIC_EncodePriority+0x32>
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	401a      	ands	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800307c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43d9      	mvns	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	4313      	orrs	r3, r2
         );
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ac:	d301      	bcc.n	80030b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00f      	b.n	80030d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <SysTick_Config+0x40>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ba:	210f      	movs	r1, #15
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030c0:	f7ff ff8e 	bl	8002fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <SysTick_Config+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <SysTick_Config+0x40>)
 80030cc:	2207      	movs	r2, #7
 80030ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000e010 	.word	0xe000e010

080030e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ff29 	bl	8002f40 <__NVIC_SetPriorityGrouping>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003108:	f7ff ff3e 	bl	8002f88 <__NVIC_GetPriorityGrouping>
 800310c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	6978      	ldr	r0, [r7, #20]
 8003114:	f7ff ff8e 	bl	8003034 <NVIC_EncodePriority>
 8003118:	4602      	mov	r2, r0
 800311a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff5d 	bl	8002fe0 <__NVIC_SetPriority>
}
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff31 	bl	8002fa4 <__NVIC_EnableIRQ>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff ffa2 	bl	800309c <SysTick_Config>
 8003158:	4603      	mov	r3, r0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d008      	beq.n	800318c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2204      	movs	r2, #4
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e022      	b.n	80031d2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 020e 	bic.w	r2, r2, #14
 800319a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f003 021c 	and.w	r2, r3, #28
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d005      	beq.n	8003202 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2204      	movs	r2, #4
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e029      	b.n	8003256 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 020e 	bic.w	r2, r2, #14
 8003210:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f003 021c 	and.w	r2, r3, #28
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2101      	movs	r1, #1
 8003230:	fa01 f202 	lsl.w	r2, r1, r2
 8003234:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	4798      	blx	r3
    }
  }
  return status;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326e:	e166      	b.n	800353e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2101      	movs	r1, #1
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	4013      	ands	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8158 	beq.w	8003538 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d005      	beq.n	80032a0 <HAL_GPIO_Init+0x40>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d130      	bne.n	8003302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032d6:	2201      	movs	r2, #1
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0201 	and.w	r2, r3, #1
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d017      	beq.n	800333e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d123      	bne.n	8003392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	08da      	lsrs	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3208      	adds	r2, #8
 8003352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	08da      	lsrs	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3208      	adds	r2, #8
 800338c:	6939      	ldr	r1, [r7, #16]
 800338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0203 	and.w	r2, r3, #3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80b2 	beq.w	8003538 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d4:	4b61      	ldr	r3, [pc, #388]	; (800355c <HAL_GPIO_Init+0x2fc>)
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	4a60      	ldr	r2, [pc, #384]	; (800355c <HAL_GPIO_Init+0x2fc>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6613      	str	r3, [r2, #96]	; 0x60
 80033e0:	4b5e      	ldr	r3, [pc, #376]	; (800355c <HAL_GPIO_Init+0x2fc>)
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033ec:	4a5c      	ldr	r2, [pc, #368]	; (8003560 <HAL_GPIO_Init+0x300>)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	3302      	adds	r3, #2
 80033f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	220f      	movs	r2, #15
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003416:	d02b      	beq.n	8003470 <HAL_GPIO_Init+0x210>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_GPIO_Init+0x304>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d025      	beq.n	800346c <HAL_GPIO_Init+0x20c>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a51      	ldr	r2, [pc, #324]	; (8003568 <HAL_GPIO_Init+0x308>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d01f      	beq.n	8003468 <HAL_GPIO_Init+0x208>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a50      	ldr	r2, [pc, #320]	; (800356c <HAL_GPIO_Init+0x30c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d019      	beq.n	8003464 <HAL_GPIO_Init+0x204>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a4f      	ldr	r2, [pc, #316]	; (8003570 <HAL_GPIO_Init+0x310>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <HAL_GPIO_Init+0x200>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a4e      	ldr	r2, [pc, #312]	; (8003574 <HAL_GPIO_Init+0x314>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00d      	beq.n	800345c <HAL_GPIO_Init+0x1fc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a4d      	ldr	r2, [pc, #308]	; (8003578 <HAL_GPIO_Init+0x318>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <HAL_GPIO_Init+0x1f8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a4c      	ldr	r2, [pc, #304]	; (800357c <HAL_GPIO_Init+0x31c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_GPIO_Init+0x1f4>
 8003450:	2307      	movs	r3, #7
 8003452:	e00e      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003454:	2308      	movs	r3, #8
 8003456:	e00c      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003458:	2306      	movs	r3, #6
 800345a:	e00a      	b.n	8003472 <HAL_GPIO_Init+0x212>
 800345c:	2305      	movs	r3, #5
 800345e:	e008      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003460:	2304      	movs	r3, #4
 8003462:	e006      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003464:	2303      	movs	r3, #3
 8003466:	e004      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003468:	2302      	movs	r3, #2
 800346a:	e002      	b.n	8003472 <HAL_GPIO_Init+0x212>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_GPIO_Init+0x212>
 8003470:	2300      	movs	r3, #0
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	f002 0203 	and.w	r2, r2, #3
 8003478:	0092      	lsls	r2, r2, #2
 800347a:	4093      	lsls	r3, r2
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003482:	4937      	ldr	r1, [pc, #220]	; (8003560 <HAL_GPIO_Init+0x300>)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003490:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <HAL_GPIO_Init+0x320>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	43db      	mvns	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034b4:	4a32      	ldr	r2, [pc, #200]	; (8003580 <HAL_GPIO_Init+0x320>)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034ba:	4b31      	ldr	r3, [pc, #196]	; (8003580 <HAL_GPIO_Init+0x320>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034de:	4a28      	ldr	r2, [pc, #160]	; (8003580 <HAL_GPIO_Init+0x320>)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034e4:	4b26      	ldr	r3, [pc, #152]	; (8003580 <HAL_GPIO_Init+0x320>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <HAL_GPIO_Init+0x320>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_GPIO_Init+0x320>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003532:	4a13      	ldr	r2, [pc, #76]	; (8003580 <HAL_GPIO_Init+0x320>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3301      	adds	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f ae91 	bne.w	8003270 <HAL_GPIO_Init+0x10>
  }
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40021000 	.word	0x40021000
 8003560:	40010000 	.word	0x40010000
 8003564:	48000400 	.word	0x48000400
 8003568:	48000800 	.word	0x48000800
 800356c:	48000c00 	.word	0x48000c00
 8003570:	48001000 	.word	0x48001000
 8003574:	48001400 	.word	0x48001400
 8003578:	48001800 	.word	0x48001800
 800357c:	48001c00 	.word	0x48001c00
 8003580:	40010400 	.word	0x40010400

08003584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	807b      	strh	r3, [r7, #2]
 8003590:	4613      	mov	r3, r2
 8003592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003594:	787b      	ldrb	r3, [r7, #1]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035a0:	e002      	b.n	80035a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80035b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b6:	b08f      	sub	sp, #60	; 0x3c
 80035b8:	af0a      	add	r7, sp, #40	; 0x28
 80035ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e054      	b.n	8003670 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f00c f8b5 	bl	800f750 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f004 f818 	bl	800763a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	687e      	ldr	r6, [r7, #4]
 8003612:	466d      	mov	r5, sp
 8003614:	f106 0410 	add.w	r4, r6, #16
 8003618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800361c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003620:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003624:	e885 0003 	stmia.w	r5, {r0, r1}
 8003628:	1d33      	adds	r3, r6, #4
 800362a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800362c:	6838      	ldr	r0, [r7, #0]
 800362e:	f003 ffc7 	bl	80075c0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	4618      	mov	r0, r3
 800363a:	f004 f80f 	bl	800765c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	687e      	ldr	r6, [r7, #4]
 8003646:	466d      	mov	r5, sp
 8003648:	f106 0410 	add.w	r4, r6, #16
 800364c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003654:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003658:	e885 0003 	stmia.w	r5, {r0, r1}
 800365c:	1d33      	adds	r3, r6, #4
 800365e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003660:	6838      	ldr	r0, [r7, #0]
 8003662:	f004 f993 	bl	800798c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003678 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b089      	sub	sp, #36	; 0x24
 800367c:	af04      	add	r7, sp, #16
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	4608      	mov	r0, r1
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	4603      	mov	r3, r0
 8003688:	70fb      	strb	r3, [r7, #3]
 800368a:	460b      	mov	r3, r1
 800368c:	70bb      	strb	r3, [r7, #2]
 800368e:	4613      	mov	r3, r2
 8003690:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_HCD_HC_Init+0x28>
 800369c:	2302      	movs	r3, #2
 800369e:	e076      	b.n	800378e <HAL_HCD_HC_Init+0x116>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	333d      	adds	r3, #61	; 0x3d
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3338      	adds	r3, #56	; 0x38
 80036c8:	787a      	ldrb	r2, [r7, #1]
 80036ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3340      	adds	r3, #64	; 0x40
 80036da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036dc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	3339      	adds	r3, #57	; 0x39
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	212c      	movs	r1, #44	; 0x2c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	333f      	adds	r3, #63	; 0x3f
 80036fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003702:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	78ba      	ldrb	r2, [r7, #2]
 8003708:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800370c:	b2d0      	uxtb	r0, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	333a      	adds	r3, #58	; 0x3a
 800371a:	4602      	mov	r2, r0
 800371c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800371e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003722:	2b00      	cmp	r3, #0
 8003724:	da09      	bge.n	800373a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	333b      	adds	r3, #59	; 0x3b
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e008      	b.n	800374c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	333b      	adds	r3, #59	; 0x3b
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	333c      	adds	r3, #60	; 0x3c
 800375a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800375e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	787c      	ldrb	r4, [r7, #1]
 8003766:	78ba      	ldrb	r2, [r7, #2]
 8003768:	78f9      	ldrb	r1, [r7, #3]
 800376a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800376c:	9302      	str	r3, [sp, #8]
 800376e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	4623      	mov	r3, r4
 800377c:	f004 fa24 	bl	8007bc8 <USB_HC_Init>
 8003780:	4603      	mov	r3, r0
 8003782:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800378c:	7bfb      	ldrb	r3, [r7, #15]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	bd90      	pop	{r4, r7, pc}

08003796 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_HCD_HC_Halt+0x1e>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e00f      	b.n	80037d4 <HAL_HCD_HC_Halt+0x3e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 fc14 	bl	8007ff2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	4608      	mov	r0, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	461a      	mov	r2, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	70fb      	strb	r3, [r7, #3]
 80037ee:	460b      	mov	r3, r1
 80037f0:	70bb      	strb	r3, [r7, #2]
 80037f2:	4613      	mov	r3, r2
 80037f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	333b      	adds	r3, #59	; 0x3b
 8003804:	78ba      	ldrb	r2, [r7, #2]
 8003806:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	212c      	movs	r1, #44	; 0x2c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	333f      	adds	r3, #63	; 0x3f
 8003816:	787a      	ldrb	r2, [r7, #1]
 8003818:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800381a:	7c3b      	ldrb	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d112      	bne.n	8003846 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	212c      	movs	r1, #44	; 0x2c
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	4413      	add	r3, r2
 800382c:	3342      	adds	r3, #66	; 0x42
 800382e:	2203      	movs	r2, #3
 8003830:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	333d      	adds	r3, #61	; 0x3d
 8003840:	7f3a      	ldrb	r2, [r7, #28]
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	e008      	b.n	8003858 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	3342      	adds	r3, #66	; 0x42
 8003854:	2202      	movs	r2, #2
 8003856:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003858:	787b      	ldrb	r3, [r7, #1]
 800385a:	2b03      	cmp	r3, #3
 800385c:	f200 80c6 	bhi.w	80039ec <HAL_HCD_HC_SubmitRequest+0x210>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	08003879 	.word	0x08003879
 800386c:	080039d9 	.word	0x080039d9
 8003870:	080038dd 	.word	0x080038dd
 8003874:	0800395b 	.word	0x0800395b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003878:	7c3b      	ldrb	r3, [r7, #16]
 800387a:	2b01      	cmp	r3, #1
 800387c:	f040 80b8 	bne.w	80039f0 <HAL_HCD_HC_SubmitRequest+0x214>
 8003880:	78bb      	ldrb	r3, [r7, #2]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 80b4 	bne.w	80039f0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003888:	8b3b      	ldrh	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d108      	bne.n	80038a0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	3355      	adds	r3, #85	; 0x55
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	3355      	adds	r3, #85	; 0x55
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	212c      	movs	r1, #44	; 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	3342      	adds	r3, #66	; 0x42
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038c6:	e093      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3342      	adds	r3, #66	; 0x42
 80038d6:	2202      	movs	r2, #2
 80038d8:	701a      	strb	r2, [r3, #0]
      break;
 80038da:	e089      	b.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038dc:	78bb      	ldrb	r3, [r7, #2]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11d      	bne.n	800391e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3355      	adds	r3, #85	; 0x55
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3342      	adds	r3, #66	; 0x42
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003908:	e073      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	3342      	adds	r3, #66	; 0x42
 8003918:	2202      	movs	r2, #2
 800391a:	701a      	strb	r2, [r3, #0]
      break;
 800391c:	e069      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	3354      	adds	r3, #84	; 0x54
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	3342      	adds	r3, #66	; 0x42
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
      break;
 8003944:	e055      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3342      	adds	r3, #66	; 0x42
 8003954:	2202      	movs	r2, #2
 8003956:	701a      	strb	r2, [r3, #0]
      break;
 8003958:	e04b      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800395a:	78bb      	ldrb	r3, [r7, #2]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11d      	bne.n	800399c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3355      	adds	r3, #85	; 0x55
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3342      	adds	r3, #66	; 0x42
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003986:	e034      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3342      	adds	r3, #66	; 0x42
 8003996:	2202      	movs	r2, #2
 8003998:	701a      	strb	r2, [r3, #0]
      break;
 800399a:	e02a      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	3354      	adds	r3, #84	; 0x54
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3342      	adds	r3, #66	; 0x42
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
      break;
 80039c2:	e016      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3342      	adds	r3, #66	; 0x42
 80039d2:	2202      	movs	r2, #2
 80039d4:	701a      	strb	r2, [r3, #0]
      break;
 80039d6:	e00c      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	212c      	movs	r1, #44	; 0x2c
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	3342      	adds	r3, #66	; 0x42
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
      break;
 80039ea:	e002      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80039f0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	3344      	adds	r3, #68	; 0x44
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	8b3a      	ldrh	r2, [r7, #24]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	202c      	movs	r0, #44	; 0x2c
 8003a0c:	fb00 f303 	mul.w	r3, r0, r3
 8003a10:	440b      	add	r3, r1
 8003a12:	334c      	adds	r3, #76	; 0x4c
 8003a14:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	3360      	adds	r3, #96	; 0x60
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	212c      	movs	r1, #44	; 0x2c
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	3350      	adds	r3, #80	; 0x50
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	3339      	adds	r3, #57	; 0x39
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	212c      	movs	r1, #44	; 0x2c
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	3361      	adds	r3, #97	; 0x61
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	222c      	movs	r2, #44	; 0x2c
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	3338      	adds	r3, #56	; 0x38
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	f004 f9b5 	bl	8007de0 <USB_HC_StartXfer>
 8003a76:	4603      	mov	r3, r0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 ff35 	bl	8007906 <USB_GetMode>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	f040 80f6 	bne.w	8003c90 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f003 ff19 	bl	80078e0 <USB_ReadInterrupts>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80ec 	beq.w	8003c8e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f003 ff10 	bl	80078e0 <USB_ReadInterrupts>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aca:	d104      	bne.n	8003ad6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003ad4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 ff00 	bl	80078e0 <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aea:	d104      	bne.n	8003af6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003af4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f003 fef0 	bl	80078e0 <USB_ReadInterrupts>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b0a:	d104      	bne.n	8003b16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 fee0 	bl	80078e0 <USB_ReadInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d103      	bne.n	8003b32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 fed2 	bl	80078e0 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b46:	d11c      	bne.n	8003b82 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b62:	2110      	movs	r1, #16
 8003b64:	6938      	ldr	r0, [r7, #16]
 8003b66:	f003 fdc5 	bl	80076f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b6a:	6938      	ldr	r0, [r7, #16]
 8003b6c:	f003 fdf6 	bl	800775c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2101      	movs	r1, #1
 8003b76:	4618      	mov	r0, r3
 8003b78:	f003 ff8a 	bl	8007a90 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f00b fe77 	bl	800f870 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f003 feaa 	bl	80078e0 <USB_ReadInterrupts>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b96:	d102      	bne.n	8003b9e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fff9 	bl	8004b90 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f003 fe9c 	bl	80078e0 <USB_ReadInterrupts>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d106      	bne.n	8003bc0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f00b fe40 	bl	800f838 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f003 fe8b 	bl	80078e0 <USB_ReadInterrupts>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d101      	bne.n	8003bd8 <HAL_HCD_IRQHandler+0x158>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_HCD_IRQHandler+0x15a>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d012      	beq.n	8003c04 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0210 	bic.w	r2, r2, #16
 8003bec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fefc 	bl	80049ec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0210 	orr.w	r2, r2, #16
 8003c02:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f003 fe69 	bl	80078e0 <USB_ReadInterrupts>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c18:	d13a      	bne.n	8003c90 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 f9d6 	bl	8007fd0 <USB_HC_ReadInterrupt>
 8003c24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e025      	b.n	8003c78 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d018      	beq.n	8003c72 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c56:	d106      	bne.n	8003c66 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f88f 	bl	8003d82 <HCD_HC_IN_IRQHandler>
 8003c64:	e005      	b.n	8003c72 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fbbb 	bl	80043e8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	3301      	adds	r3, #1
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d3d4      	bcc.n	8003c2c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c8a:	615a      	str	r2, [r3, #20]
 8003c8c:	e000      	b.n	8003c90 <HAL_HCD_IRQHandler+0x210>
      return;
 8003c8e:	bf00      	nop
    }
  }
}
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_HCD_Start+0x16>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e013      	b.n	8003cd4 <HAL_HCD_Start+0x3e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f003 ff22 	bl	8007b04 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f003 fca7 	bl	8007618 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_HCD_Stop+0x16>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e00d      	b.n	8003d0e <HAL_HCD_Stop+0x32>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 fa73 	bl	80081ea <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	212c      	movs	r1, #44	; 0x2c
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3360      	adds	r3, #96	; 0x60
 8003d30:	781b      	ldrb	r3, [r3, #0]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	212c      	movs	r1, #44	; 0x2c
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	3350      	adds	r3, #80	; 0x50
 8003d58:	681b      	ldr	r3, [r3, #0]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 ff16 	bl	8007ba4 <USB_GetCurrentFrame>
 8003d78:	4603      	mov	r3, r0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d11a      	bne.n	8003de8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	212c      	movs	r1, #44	; 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3361      	adds	r3, #97	; 0x61
 8003dd2:	2206      	movs	r2, #6
 8003dd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f004 f906 	bl	8007ff2 <USB_HC_Halt>
 8003de6:	e0af      	b.n	8003f48 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfe:	d11b      	bne.n	8003e38 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	212c      	movs	r1, #44	; 0x2c
 8003e1a:	fb01 f303 	mul.w	r3, r1, r3
 8003e1e:	4413      	add	r3, r2
 8003e20:	3361      	adds	r3, #97	; 0x61
 8003e22:	2207      	movs	r2, #7
 8003e24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f004 f8de 	bl	8007ff2 <USB_HC_Halt>
 8003e36:	e087      	b.n	8003f48 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d109      	bne.n	8003e62 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2320      	movs	r3, #32
 8003e5e:	6093      	str	r3, [r2, #8]
 8003e60:	e072      	b.n	8003f48 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d11a      	bne.n	8003eae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2308      	movs	r3, #8
 8003e88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	3361      	adds	r3, #97	; 0x61
 8003e98:	2205      	movs	r2, #5
 8003e9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f004 f8a3 	bl	8007ff2 <USB_HC_Halt>
 8003eac:	e04c      	b.n	8003f48 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec4:	d11b      	bne.n	8003efe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	212c      	movs	r1, #44	; 0x2c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3361      	adds	r3, #97	; 0x61
 8003ee8:	2208      	movs	r2, #8
 8003eea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 f87b 	bl	8007ff2 <USB_HC_Halt>
 8003efc:	e024      	b.n	8003f48 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f10:	2b80      	cmp	r3, #128	; 0x80
 8003f12:	d119      	bne.n	8003f48 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	212c      	movs	r1, #44	; 0x2c
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	3361      	adds	r3, #97	; 0x61
 8003f34:	2206      	movs	r2, #6
 8003f36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f004 f855 	bl	8007ff2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5e:	d112      	bne.n	8003f86 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	4611      	mov	r1, r2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f004 f841 	bl	8007ff2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f82:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003f84:	e22c      	b.n	80043e0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f040 80c1 	bne.w	8004120 <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	212c      	movs	r1, #44	; 0x2c
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	3361      	adds	r3, #97	; 0x61
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	212c      	movs	r1, #44	; 0x2c
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	4413      	add	r3, r2
 8003fbc:	335c      	adds	r3, #92	; 0x5c
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	333f      	adds	r3, #63	; 0x3f
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	333f      	adds	r3, #63	; 0x3f
 8003ff6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d111      	bne.n	8004020 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	4611      	mov	r1, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f003 fff3 	bl	8007ff2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004018:	461a      	mov	r2, r3
 800401a:	2310      	movs	r3, #16
 800401c:	6093      	str	r3, [r2, #8]
 800401e:	e03a      	b.n	8004096 <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	212c      	movs	r1, #44	; 0x2c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4413      	add	r3, r2
 800402c:	333f      	adds	r3, #63	; 0x3f
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d009      	beq.n	8004048 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	333f      	adds	r3, #63	; 0x3f
 8004042:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004044:	2b01      	cmp	r3, #1
 8004046:	d126      	bne.n	8004096 <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	440a      	add	r2, r1
 800405e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004066:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3360      	adds	r3, #96	; 0x60
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	b2d9      	uxtb	r1, r3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	202c      	movs	r0, #44	; 0x2c
 8004084:	fb00 f303 	mul.w	r3, r0, r3
 8004088:	4413      	add	r3, r2
 800408a:	3360      	adds	r3, #96	; 0x60
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f00b fbfb 	bl	800f88c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d12b      	bne.n	80040f6 <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	3348      	adds	r3, #72	; 0x48
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	202c      	movs	r0, #44	; 0x2c
 80040b4:	fb00 f202 	mul.w	r2, r0, r2
 80040b8:	440a      	add	r2, r1
 80040ba:	3240      	adds	r2, #64	; 0x40
 80040bc:	8812      	ldrh	r2, [r2, #0]
 80040be:	fbb3 f3f2 	udiv	r3, r3, r2
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 818a 	beq.w	80043e0 <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	212c      	movs	r1, #44	; 0x2c
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	4413      	add	r3, r2
 80040d8:	3354      	adds	r3, #84	; 0x54
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f083 0301 	eor.w	r3, r3, #1
 80040e0:	b2d8      	uxtb	r0, r3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	212c      	movs	r1, #44	; 0x2c
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	3354      	adds	r3, #84	; 0x54
 80040f0:	4602      	mov	r2, r0
 80040f2:	701a      	strb	r2, [r3, #0]
}
 80040f4:	e174      	b.n	80043e0 <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	212c      	movs	r1, #44	; 0x2c
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	3354      	adds	r3, #84	; 0x54
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	f083 0301 	eor.w	r3, r3, #1
 800410a:	b2d8      	uxtb	r0, r3
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3354      	adds	r3, #84	; 0x54
 800411a:	4602      	mov	r2, r0
 800411c:	701a      	strb	r2, [r3, #0]
}
 800411e:	e15f      	b.n	80043e0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	f040 80f6 	bne.w	8004324 <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3361      	adds	r3, #97	; 0x61
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d109      	bne.n	8004160 <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	212c      	movs	r1, #44	; 0x2c
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	4413      	add	r3, r2
 8004158:	3360      	adds	r3, #96	; 0x60
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e0c9      	b.n	80042f4 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	212c      	movs	r1, #44	; 0x2c
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	4413      	add	r3, r2
 800416c:	3361      	adds	r3, #97	; 0x61
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d109      	bne.n	8004188 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	3360      	adds	r3, #96	; 0x60
 8004182:	2205      	movs	r2, #5
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e0b5      	b.n	80042f4 <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	212c      	movs	r1, #44	; 0x2c
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	3361      	adds	r3, #97	; 0x61
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b06      	cmp	r3, #6
 800419a:	d009      	beq.n	80041b0 <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	3361      	adds	r3, #97	; 0x61
 80041aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d150      	bne.n	8004252 <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	212c      	movs	r1, #44	; 0x2c
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	335c      	adds	r3, #92	; 0x5c
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	202c      	movs	r0, #44	; 0x2c
 80041c8:	fb00 f303 	mul.w	r3, r0, r3
 80041cc:	440b      	add	r3, r1
 80041ce:	335c      	adds	r3, #92	; 0x5c
 80041d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	335c      	adds	r3, #92	; 0x5c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d912      	bls.n	800420c <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	335c      	adds	r3, #92	; 0x5c
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3360      	adds	r3, #96	; 0x60
 8004206:	2204      	movs	r2, #4
 8004208:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800420a:	e073      	b.n	80042f4 <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	3360      	adds	r3, #96	; 0x60
 800421a:	2202      	movs	r2, #2
 800421c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4413      	add	r3, r2
 8004226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004234:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800423c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	461a      	mov	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004250:	e050      	b.n	80042f4 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	212c      	movs	r1, #44	; 0x2c
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	4413      	add	r3, r2
 800425e:	3361      	adds	r3, #97	; 0x61
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d122      	bne.n	80042ac <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	212c      	movs	r1, #44	; 0x2c
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	4413      	add	r3, r2
 8004272:	3360      	adds	r3, #96	; 0x60
 8004274:	2202      	movs	r2, #2
 8004276:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800428e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004296:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e023      	b.n	80042f4 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	212c      	movs	r1, #44	; 0x2c
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	3361      	adds	r3, #97	; 0x61
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b07      	cmp	r3, #7
 80042be:	d119      	bne.n	80042f4 <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	212c      	movs	r1, #44	; 0x2c
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	335c      	adds	r3, #92	; 0x5c
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	202c      	movs	r0, #44	; 0x2c
 80042d8:	fb00 f303 	mul.w	r3, r0, r3
 80042dc:	440b      	add	r3, r1
 80042de:	335c      	adds	r3, #92	; 0x5c
 80042e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	212c      	movs	r1, #44	; 0x2c
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	4413      	add	r3, r2
 80042ee:	3360      	adds	r3, #96	; 0x60
 80042f0:	2204      	movs	r2, #4
 80042f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004300:	461a      	mov	r2, r3
 8004302:	2302      	movs	r3, #2
 8004304:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	b2d9      	uxtb	r1, r3
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	202c      	movs	r0, #44	; 0x2c
 8004310:	fb00 f303 	mul.w	r3, r0, r3
 8004314:	4413      	add	r3, r2
 8004316:	3360      	adds	r3, #96	; 0x60
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f00b fab5 	bl	800f88c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004322:	e05d      	b.n	80043e0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b10      	cmp	r3, #16
 8004338:	d152      	bne.n	80043e0 <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	333f      	adds	r3, #63	; 0x3f
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d111      	bne.n	8004372 <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	335c      	adds	r3, #92	; 0x5c
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f003 fe41 	bl	8007ff2 <USB_HC_Halt>
 8004370:	e02d      	b.n	80043ce <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	212c      	movs	r1, #44	; 0x2c
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	333f      	adds	r3, #63	; 0x3f
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	333f      	adds	r3, #63	; 0x3f
 8004394:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004396:	2b02      	cmp	r3, #2
 8004398:	d119      	bne.n	80043ce <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	335c      	adds	r3, #92	; 0x5c
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	212c      	movs	r1, #44	; 0x2c
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	3361      	adds	r3, #97	; 0x61
 80043ba:	2203      	movs	r2, #3
 80043bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f003 fe12 	bl	8007ff2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043da:	461a      	mov	r2, r3
 80043dc:	2310      	movs	r3, #16
 80043de:	6093      	str	r3, [r2, #8]
}
 80043e0:	bf00      	nop
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b04      	cmp	r3, #4
 8004416:	d11a      	bne.n	800444e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	4413      	add	r3, r2
 8004420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004424:	461a      	mov	r2, r3
 8004426:	2304      	movs	r3, #4
 8004428:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	212c      	movs	r1, #44	; 0x2c
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	4413      	add	r3, r2
 8004436:	3361      	adds	r3, #97	; 0x61
 8004438:	2206      	movs	r2, #6
 800443a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f003 fdd3 	bl	8007ff2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800444c:	e2ca      	b.n	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	4413      	add	r3, r2
 8004456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b20      	cmp	r3, #32
 8004462:	d12e      	bne.n	80044c2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	4413      	add	r3, r2
 800446c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004470:	461a      	mov	r2, r3
 8004472:	2320      	movs	r3, #32
 8004474:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	212c      	movs	r1, #44	; 0x2c
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	4413      	add	r3, r2
 8004482:	333d      	adds	r3, #61	; 0x3d
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	f040 82ac 	bne.w	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	333d      	adds	r3, #61	; 0x3d
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	212c      	movs	r1, #44	; 0x2c
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	3360      	adds	r3, #96	; 0x60
 80044ac:	2202      	movs	r2, #2
 80044ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	4611      	mov	r1, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f003 fd99 	bl	8007ff2 <USB_HC_Halt>
}
 80044c0:	e290      	b.n	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d8:	d112      	bne.n	8004500 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e6:	461a      	mov	r2, r3
 80044e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f003 fd7a 	bl	8007ff2 <USB_HC_Halt>
}
 80044fe:	e271      	b.n	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d140      	bne.n	8004598 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	212c      	movs	r1, #44	; 0x2c
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	335c      	adds	r3, #92	; 0x5c
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d111      	bne.n	8004562 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	212c      	movs	r1, #44	; 0x2c
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	333d      	adds	r3, #61	; 0x3d
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	461a      	mov	r2, r3
 800455e:	2340      	movs	r3, #64	; 0x40
 8004560:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	4413      	add	r3, r2
 800456a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456e:	461a      	mov	r2, r3
 8004570:	2301      	movs	r3, #1
 8004572:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	3361      	adds	r3, #97	; 0x61
 8004582:	2201      	movs	r2, #1
 8004584:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f003 fd2e 	bl	8007ff2 <USB_HC_Halt>
}
 8004596:	e225      	b.n	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d12c      	bne.n	8004608 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	212c      	movs	r1, #44	; 0x2c
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	3361      	adds	r3, #97	; 0x61
 80045bc:	2204      	movs	r2, #4
 80045be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	212c      	movs	r1, #44	; 0x2c
 80045c6:	fb01 f303 	mul.w	r3, r1, r3
 80045ca:	4413      	add	r3, r2
 80045cc:	333d      	adds	r3, #61	; 0x3d
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	335c      	adds	r3, #92	; 0x5c
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f003 fcff 	bl	8007ff2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004600:	461a      	mov	r2, r3
 8004602:	2340      	movs	r3, #64	; 0x40
 8004604:	6093      	str	r3, [r2, #8]
}
 8004606:	e1ed      	b.n	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b08      	cmp	r3, #8
 800461c:	d11a      	bne.n	8004654 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	4413      	add	r3, r2
 8004626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462a:	461a      	mov	r2, r3
 800462c:	2308      	movs	r3, #8
 800462e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	212c      	movs	r1, #44	; 0x2c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	3361      	adds	r3, #97	; 0x61
 800463e:	2205      	movs	r2, #5
 8004640:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	4611      	mov	r1, r2
 800464c:	4618      	mov	r0, r3
 800464e:	f003 fcd0 	bl	8007ff2 <USB_HC_Halt>
}
 8004652:	e1c7      	b.n	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b10      	cmp	r3, #16
 8004668:	d123      	bne.n	80046b2 <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	212c      	movs	r1, #44	; 0x2c
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	4413      	add	r3, r2
 8004676:	335c      	adds	r3, #92	; 0x5c
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	212c      	movs	r1, #44	; 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	3361      	adds	r3, #97	; 0x61
 800468a:	2203      	movs	r2, #3
 800468c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f003 fcaa 	bl	8007ff2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046aa:	461a      	mov	r2, r3
 80046ac:	2310      	movs	r3, #16
 80046ae:	6093      	str	r3, [r2, #8]
}
 80046b0:	e198      	b.n	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b80      	cmp	r3, #128	; 0x80
 80046c6:	d11a      	bne.n	80046fe <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	3361      	adds	r3, #97	; 0x61
 80046d6:	2206      	movs	r2, #6
 80046d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f003 fc84 	bl	8007ff2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	461a      	mov	r2, r3
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	6093      	str	r3, [r2, #8]
}
 80046fc:	e172      	b.n	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004714:	d11b      	bne.n	800474e <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	212c      	movs	r1, #44	; 0x2c
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	4413      	add	r3, r2
 8004722:	3361      	adds	r3, #97	; 0x61
 8004724:	2208      	movs	r2, #8
 8004726:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f003 fc5d 	bl	8007ff2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	4413      	add	r3, r2
 8004740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004744:	461a      	mov	r2, r3
 8004746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800474a:	6093      	str	r3, [r2, #8]
}
 800474c:	e14a      	b.n	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	f040 813f 	bne.w	80049e4 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	3361      	adds	r3, #97	; 0x61
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d17d      	bne.n	8004876 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	212c      	movs	r1, #44	; 0x2c
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	3360      	adds	r3, #96	; 0x60
 8004788:	2201      	movs	r2, #1
 800478a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	333f      	adds	r3, #63	; 0x3f
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d00a      	beq.n	80047b6 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	333f      	adds	r3, #63	; 0x3f
 80047ae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	f040 8100 	bne.w	80049b6 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d113      	bne.n	80047e6 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	212c      	movs	r1, #44	; 0x2c
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	4413      	add	r3, r2
 80047ca:	3355      	adds	r3, #85	; 0x55
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	f083 0301 	eor.w	r3, r3, #1
 80047d2:	b2d8      	uxtb	r0, r3
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	212c      	movs	r1, #44	; 0x2c
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	4413      	add	r3, r2
 80047e0:	3355      	adds	r3, #85	; 0x55
 80047e2:	4602      	mov	r2, r0
 80047e4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	f040 80e3 	bne.w	80049b6 <HCD_HC_OUT_IRQHandler+0x5ce>
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	212c      	movs	r1, #44	; 0x2c
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	334c      	adds	r3, #76	; 0x4c
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80d8 	beq.w	80049b6 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	212c      	movs	r1, #44	; 0x2c
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	4413      	add	r3, r2
 8004812:	334c      	adds	r3, #76	; 0x4c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	202c      	movs	r0, #44	; 0x2c
 800481c:	fb00 f202 	mul.w	r2, r0, r2
 8004820:	440a      	add	r2, r1
 8004822:	3240      	adds	r2, #64	; 0x40
 8004824:	8812      	ldrh	r2, [r2, #0]
 8004826:	4413      	add	r3, r2
 8004828:	3b01      	subs	r3, #1
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	202c      	movs	r0, #44	; 0x2c
 8004830:	fb00 f202 	mul.w	r2, r0, r2
 8004834:	440a      	add	r2, r1
 8004836:	3240      	adds	r2, #64	; 0x40
 8004838:	8812      	ldrh	r2, [r2, #0]
 800483a:	fbb3 f3f2 	udiv	r3, r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80b5 	beq.w	80049b6 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	212c      	movs	r1, #44	; 0x2c
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	3355      	adds	r3, #85	; 0x55
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	f083 0301 	eor.w	r3, r3, #1
 8004860:	b2d8      	uxtb	r0, r3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	212c      	movs	r1, #44	; 0x2c
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	4413      	add	r3, r2
 800486e:	3355      	adds	r3, #85	; 0x55
 8004870:	4602      	mov	r2, r0
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e09f      	b.n	80049b6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	3361      	adds	r3, #97	; 0x61
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d109      	bne.n	800489e <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	212c      	movs	r1, #44	; 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	3360      	adds	r3, #96	; 0x60
 8004898:	2202      	movs	r2, #2
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e08b      	b.n	80049b6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	212c      	movs	r1, #44	; 0x2c
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	3361      	adds	r3, #97	; 0x61
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d109      	bne.n	80048c6 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	212c      	movs	r1, #44	; 0x2c
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	4413      	add	r3, r2
 80048be:	3360      	adds	r3, #96	; 0x60
 80048c0:	2202      	movs	r2, #2
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e077      	b.n	80049b6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	212c      	movs	r1, #44	; 0x2c
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	3361      	adds	r3, #97	; 0x61
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b05      	cmp	r3, #5
 80048d8:	d109      	bne.n	80048ee <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	212c      	movs	r1, #44	; 0x2c
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	3360      	adds	r3, #96	; 0x60
 80048e8:	2205      	movs	r2, #5
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	e063      	b.n	80049b6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	212c      	movs	r1, #44	; 0x2c
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	3361      	adds	r3, #97	; 0x61
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d009      	beq.n	8004916 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	212c      	movs	r1, #44	; 0x2c
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	4413      	add	r3, r2
 800490e:	3361      	adds	r3, #97	; 0x61
 8004910:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004912:	2b08      	cmp	r3, #8
 8004914:	d14f      	bne.n	80049b6 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	212c      	movs	r1, #44	; 0x2c
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	4413      	add	r3, r2
 8004922:	335c      	adds	r3, #92	; 0x5c
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	202c      	movs	r0, #44	; 0x2c
 800492e:	fb00 f303 	mul.w	r3, r0, r3
 8004932:	440b      	add	r3, r1
 8004934:	335c      	adds	r3, #92	; 0x5c
 8004936:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	212c      	movs	r1, #44	; 0x2c
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	4413      	add	r3, r2
 8004944:	335c      	adds	r3, #92	; 0x5c
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d912      	bls.n	8004972 <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	212c      	movs	r1, #44	; 0x2c
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	4413      	add	r3, r2
 8004958:	335c      	adds	r3, #92	; 0x5c
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	212c      	movs	r1, #44	; 0x2c
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	4413      	add	r3, r2
 800496a:	3360      	adds	r3, #96	; 0x60
 800496c:	2204      	movs	r2, #4
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	e021      	b.n	80049b6 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	212c      	movs	r1, #44	; 0x2c
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	3360      	adds	r3, #96	; 0x60
 8004980:	2202      	movs	r2, #2
 8004982:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800499a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049a2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b0:	461a      	mov	r2, r3
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c2:	461a      	mov	r2, r3
 80049c4:	2302      	movs	r3, #2
 80049c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	b2d9      	uxtb	r1, r3
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	202c      	movs	r0, #44	; 0x2c
 80049d2:	fb00 f303 	mul.w	r3, r0, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3360      	adds	r3, #96	; 0x60
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f00a ff54 	bl	800f88c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80049e4:	bf00      	nop
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	; 0x28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	0c5b      	lsrs	r3, r3, #17
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a20:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d004      	beq.n	8004a32 <HCD_RXQLVL_IRQHandler+0x46>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	f000 80a9 	beq.w	8004b82 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004a30:	e0aa      	b.n	8004b88 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80a6 	beq.w	8004b86 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	3344      	adds	r3, #68	; 0x44
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 809b 	beq.w	8004b86 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3350      	adds	r3, #80	; 0x50
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	441a      	add	r2, r3
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	202c      	movs	r0, #44	; 0x2c
 8004a6a:	fb00 f303 	mul.w	r3, r0, r3
 8004a6e:	440b      	add	r3, r1
 8004a70:	334c      	adds	r3, #76	; 0x4c
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d87a      	bhi.n	8004b6e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	212c      	movs	r1, #44	; 0x2c
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	3344      	adds	r3, #68	; 0x44
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	b292      	uxth	r2, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	f002 fecd 	bl	8007830 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	212c      	movs	r1, #44	; 0x2c
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3344      	adds	r3, #68	; 0x44
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	441a      	add	r2, r3
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	202c      	movs	r0, #44	; 0x2c
 8004ab0:	fb00 f303 	mul.w	r3, r0, r3
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3344      	adds	r3, #68	; 0x44
 8004ab8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	212c      	movs	r1, #44	; 0x2c
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3350      	adds	r3, #80	; 0x50
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	441a      	add	r2, r3
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	202c      	movs	r0, #44	; 0x2c
 8004ad4:	fb00 f303 	mul.w	r3, r0, r3
 8004ad8:	440b      	add	r3, r1
 8004ada:	3350      	adds	r3, #80	; 0x50
 8004adc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	0cdb      	lsrs	r3, r3, #19
 8004aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	212c      	movs	r1, #44	; 0x2c
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	3340      	adds	r3, #64	; 0x40
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d13c      	bne.n	8004b86 <HCD_RXQLVL_IRQHandler+0x19a>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d039      	beq.n	8004b86 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b28:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b30:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3354      	adds	r3, #84	; 0x54
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f083 0301 	eor.w	r3, r3, #1
 8004b58:	b2d8      	uxtb	r0, r3
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	212c      	movs	r1, #44	; 0x2c
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	3354      	adds	r3, #84	; 0x54
 8004b68:	4602      	mov	r2, r0
 8004b6a:	701a      	strb	r2, [r3, #0]
      break;
 8004b6c:	e00b      	b.n	8004b86 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	212c      	movs	r1, #44	; 0x2c
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	3360      	adds	r3, #96	; 0x60
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	701a      	strb	r2, [r3, #0]
      break;
 8004b80:	e001      	b.n	8004b86 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004b86:	bf00      	nop
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3728      	adds	r7, #40	; 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bbc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d10b      	bne.n	8004be0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d102      	bne.n	8004bd8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f00a fe3e 	bl	800f854 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f043 0302 	orr.w	r3, r3, #2
 8004bde:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d132      	bne.n	8004c50 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f043 0308 	orr.w	r3, r3, #8
 8004bf0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d126      	bne.n	8004c4a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d113      	bne.n	8004c2c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c0e:	d106      	bne.n	8004c1e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2102      	movs	r1, #2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f002 ff3a 	bl	8007a90 <USB_InitFSLSPClkSel>
 8004c1c:	e011      	b.n	8004c42 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2101      	movs	r1, #1
 8004c24:	4618      	mov	r0, r3
 8004c26:	f002 ff33 	bl	8007a90 <USB_InitFSLSPClkSel>
 8004c2a:	e00a      	b.n	8004c42 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d106      	bne.n	8004c42 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004c40:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f00a fe30 	bl	800f8a8 <HAL_HCD_PortEnabled_Callback>
 8004c48:	e002      	b.n	8004c50 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f00a fe3a 	bl	800f8c4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d103      	bne.n	8004c62 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f043 0320 	orr.w	r3, r3, #32
 8004c60:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6013      	str	r3, [r2, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c86:	6013      	str	r3, [r2, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40007000 	.word	0x40007000

08004c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40007000 	.word	0x40007000

08004cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc2:	d130      	bne.n	8004d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cc4:	4b23      	ldr	r3, [pc, #140]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd0:	d038      	beq.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cd2:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2232      	movs	r2, #50	; 0x32
 8004ce8:	fb02 f303 	mul.w	r3, r2, r3
 8004cec:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	0c9b      	lsrs	r3, r3, #18
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cf8:	e002      	b.n	8004d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d00:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0c:	d102      	bne.n	8004d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f2      	bne.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d110      	bne.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e00f      	b.n	8004d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d32:	d007      	beq.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d3c:	4a05      	ldr	r2, [pc, #20]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40007000 	.word	0x40007000
 8004d58:	20000000 	.word	0x20000000
 8004d5c:	431bde83 	.word	0x431bde83

08004d60 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d6e:	6053      	str	r3, [r2, #4]
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40007000 	.word	0x40007000

08004d80 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d8e:	6053      	str	r3, [r2, #4]
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40007000 	.word	0x40007000

08004da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f000 bc08 	b.w	80055c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db4:	4b96      	ldr	r3, [pc, #600]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dbe:	4b94      	ldr	r3, [pc, #592]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80e4 	beq.w	8004f9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_RCC_OscConfig+0x4c>
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	f040 808b 	bne.w	8004efa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	f040 8087 	bne.w	8004efa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dec:	4b88      	ldr	r3, [pc, #544]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_OscConfig+0x64>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e3df      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	4b81      	ldr	r3, [pc, #516]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d004      	beq.n	8004e1e <HAL_RCC_OscConfig+0x7e>
 8004e14:	4b7e      	ldr	r3, [pc, #504]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e1c:	e005      	b.n	8004e2a <HAL_RCC_OscConfig+0x8a>
 8004e1e:	4b7c      	ldr	r3, [pc, #496]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d223      	bcs.n	8004e76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fd92 	bl	800595c <RCC_SetFlashLatencyFromMSIRange>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e3c0      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e42:	4b73      	ldr	r3, [pc, #460]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a72      	ldr	r2, [pc, #456]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e48:	f043 0308 	orr.w	r3, r3, #8
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b70      	ldr	r3, [pc, #448]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	496d      	ldr	r1, [pc, #436]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e60:	4b6b      	ldr	r3, [pc, #428]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	4968      	ldr	r1, [pc, #416]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	604b      	str	r3, [r1, #4]
 8004e74:	e025      	b.n	8004ec2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e76:	4b66      	ldr	r3, [pc, #408]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a65      	ldr	r2, [pc, #404]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	f043 0308 	orr.w	r3, r3, #8
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	4b63      	ldr	r3, [pc, #396]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4960      	ldr	r1, [pc, #384]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e94:	4b5e      	ldr	r3, [pc, #376]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	495b      	ldr	r1, [pc, #364]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fd52 	bl	800595c <RCC_SetFlashLatencyFromMSIRange>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e380      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ec2:	f000 fc87 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	4b51      	ldr	r3, [pc, #324]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	4950      	ldr	r1, [pc, #320]	; (8005014 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	5ccb      	ldrb	r3, [r1, r3]
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	fa22 f303 	lsr.w	r3, r2, r3
 8004ede:	4a4e      	ldr	r2, [pc, #312]	; (8005018 <HAL_RCC_OscConfig+0x278>)
 8004ee0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ee2:	4b4e      	ldr	r3, [pc, #312]	; (800501c <HAL_RCC_OscConfig+0x27c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fc fd52 	bl	8001990 <HAL_InitTick>
 8004eec:	4603      	mov	r3, r0
 8004eee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d052      	beq.n	8004f9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	e364      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d032      	beq.n	8004f68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f02:	4b43      	ldr	r3, [pc, #268]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a42      	ldr	r2, [pc, #264]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f0e:	f7fc fd8f 	bl	8001a30 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f16:	f7fc fd8b 	bl	8001a30 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e34d      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f28:	4b39      	ldr	r3, [pc, #228]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f34:	4b36      	ldr	r3, [pc, #216]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a35      	ldr	r2, [pc, #212]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f3a:	f043 0308 	orr.w	r3, r3, #8
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	4b33      	ldr	r3, [pc, #204]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	4930      	ldr	r1, [pc, #192]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f52:	4b2f      	ldr	r3, [pc, #188]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	492b      	ldr	r1, [pc, #172]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	604b      	str	r3, [r1, #4]
 8004f66:	e01a      	b.n	8004f9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f68:	4b29      	ldr	r3, [pc, #164]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a28      	ldr	r2, [pc, #160]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f74:	f7fc fd5c 	bl	8001a30 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f7c:	f7fc fd58 	bl	8001a30 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e31a      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x1dc>
 8004f9a:	e000      	b.n	8004f9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d073      	beq.n	8005092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_OscConfig+0x21c>
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b0c      	cmp	r3, #12
 8004fb4:	d10e      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d10b      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d063      	beq.n	8005090 <HAL_RCC_OscConfig+0x2f0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d15f      	bne.n	8005090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e2f7      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCC_OscConfig+0x24c>
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a0b      	ldr	r2, [pc, #44]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e025      	b.n	8005038 <HAL_RCC_OscConfig+0x298>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff4:	d114      	bne.n	8005020 <HAL_RCC_OscConfig+0x280>
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a05      	ldr	r2, [pc, #20]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8004ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4b03      	ldr	r3, [pc, #12]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a02      	ldr	r2, [pc, #8]	; (8005010 <HAL_RCC_OscConfig+0x270>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e013      	b.n	8005038 <HAL_RCC_OscConfig+0x298>
 8005010:	40021000 	.word	0x40021000
 8005014:	08011448 	.word	0x08011448
 8005018:	20000000 	.word	0x20000000
 800501c:	20000004 	.word	0x20000004
 8005020:	4ba0      	ldr	r3, [pc, #640]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a9f      	ldr	r2, [pc, #636]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b9d      	ldr	r3, [pc, #628]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a9c      	ldr	r2, [pc, #624]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fc fcf6 	bl	8001a30 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005048:	f7fc fcf2 	bl	8001a30 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e2b4      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800505a:	4b92      	ldr	r3, [pc, #584]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x2a8>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fc fce2 	bl	8001a30 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005070:	f7fc fcde 	bl	8001a30 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e2a0      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005082:	4b88      	ldr	r3, [pc, #544]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x2d0>
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d060      	beq.n	8005160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_OscConfig+0x310>
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d119      	bne.n	80050de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d116      	bne.n	80050de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b0:	4b7c      	ldr	r3, [pc, #496]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_OscConfig+0x328>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e27d      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	4b76      	ldr	r3, [pc, #472]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	4973      	ldr	r1, [pc, #460]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050dc:	e040      	b.n	8005160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d023      	beq.n	800512e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e6:	4b6f      	ldr	r3, [pc, #444]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6e      	ldr	r2, [pc, #440]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f2:	f7fc fc9d 	bl	8001a30 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050fa:	f7fc fc99 	bl	8001a30 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e25b      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800510c:	4b65      	ldr	r3, [pc, #404]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005118:	4b62      	ldr	r3, [pc, #392]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	061b      	lsls	r3, r3, #24
 8005126:	495f      	ldr	r1, [pc, #380]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005128:	4313      	orrs	r3, r2
 800512a:	604b      	str	r3, [r1, #4]
 800512c:	e018      	b.n	8005160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512e:	4b5d      	ldr	r3, [pc, #372]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a5c      	ldr	r2, [pc, #368]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7fc fc79 	bl	8001a30 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005142:	f7fc fc75 	bl	8001a30 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e237      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005154:	4b53      	ldr	r3, [pc, #332]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1f0      	bne.n	8005142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b00      	cmp	r3, #0
 800516a:	d03c      	beq.n	80051e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01c      	beq.n	80051ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005174:	4b4b      	ldr	r3, [pc, #300]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800517a:	4a4a      	ldr	r2, [pc, #296]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7fc fc54 	bl	8001a30 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518c:	f7fc fc50 	bl	8001a30 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e212      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800519e:	4b41      	ldr	r3, [pc, #260]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 80051a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0ef      	beq.n	800518c <HAL_RCC_OscConfig+0x3ec>
 80051ac:	e01b      	b.n	80051e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ae:	4b3d      	ldr	r3, [pc, #244]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 80051b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b4:	4a3b      	ldr	r2, [pc, #236]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051be:	f7fc fc37 	bl	8001a30 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c6:	f7fc fc33 	bl	8001a30 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e1f5      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051d8:	4b32      	ldr	r3, [pc, #200]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 80051da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1ef      	bne.n	80051c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 80a6 	beq.w	8005340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f4:	2300      	movs	r3, #0
 80051f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051f8:	4b2a      	ldr	r3, [pc, #168]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10d      	bne.n	8005220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005204:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005208:	4a26      	ldr	r2, [pc, #152]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 800520a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520e:	6593      	str	r3, [r2, #88]	; 0x58
 8005210:	4b24      	ldr	r3, [pc, #144]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521c:	2301      	movs	r3, #1
 800521e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005220:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <HAL_RCC_OscConfig+0x508>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d118      	bne.n	800525e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800522c:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <HAL_RCC_OscConfig+0x508>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <HAL_RCC_OscConfig+0x508>)
 8005232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005238:	f7fc fbfa 	bl	8001a30 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005240:	f7fc fbf6 	bl	8001a30 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e1b8      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <HAL_RCC_OscConfig+0x508>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d108      	bne.n	8005278 <HAL_RCC_OscConfig+0x4d8>
 8005266:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	4a0d      	ldr	r2, [pc, #52]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005276:	e029      	b.n	80052cc <HAL_RCC_OscConfig+0x52c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b05      	cmp	r3, #5
 800527e:	d115      	bne.n	80052ac <HAL_RCC_OscConfig+0x50c>
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	4a07      	ldr	r2, [pc, #28]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005288:	f043 0304 	orr.w	r3, r3, #4
 800528c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	4a03      	ldr	r2, [pc, #12]	; (80052a4 <HAL_RCC_OscConfig+0x504>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052a0:	e014      	b.n	80052cc <HAL_RCC_OscConfig+0x52c>
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40007000 	.word	0x40007000
 80052ac:	4b9d      	ldr	r3, [pc, #628]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b2:	4a9c      	ldr	r2, [pc, #624]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052bc:	4b99      	ldr	r3, [pc, #612]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c2:	4a98      	ldr	r2, [pc, #608]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d016      	beq.n	8005302 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d4:	f7fc fbac 	bl	8001a30 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052da:	e00a      	b.n	80052f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052dc:	f7fc fba8 	bl	8001a30 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e168      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f2:	4b8c      	ldr	r3, [pc, #560]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0ed      	beq.n	80052dc <HAL_RCC_OscConfig+0x53c>
 8005300:	e015      	b.n	800532e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005302:	f7fc fb95 	bl	8001a30 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005308:	e00a      	b.n	8005320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fc fb91 	bl	8001a30 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	; 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e151      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005320:	4b80      	ldr	r3, [pc, #512]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1ed      	bne.n	800530a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800532e:	7ffb      	ldrb	r3, [r7, #31]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d105      	bne.n	8005340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005334:	4b7b      	ldr	r3, [pc, #492]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	4a7a      	ldr	r2, [pc, #488]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 800533a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800533e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d03c      	beq.n	80053c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01c      	beq.n	800538e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005354:	4b73      	ldr	r3, [pc, #460]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 8005356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800535a:	4a72      	ldr	r2, [pc, #456]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fc fb64 	bl	8001a30 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800536c:	f7fc fb60 	bl	8001a30 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e122      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800537e:	4b69      	ldr	r3, [pc, #420]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 8005380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ef      	beq.n	800536c <HAL_RCC_OscConfig+0x5cc>
 800538c:	e01b      	b.n	80053c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800538e:	4b65      	ldr	r3, [pc, #404]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 8005390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005394:	4a63      	ldr	r2, [pc, #396]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539e:	f7fc fb47 	bl	8001a30 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053a6:	f7fc fb43 	bl	8001a30 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e105      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053b8:	4b5a      	ldr	r3, [pc, #360]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80053ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1ef      	bne.n	80053a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 80f9 	beq.w	80055c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	f040 80cf 	bne.w	8005578 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053da:	4b52      	ldr	r3, [pc, #328]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f003 0203 	and.w	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d12c      	bne.n	8005448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	3b01      	subs	r3, #1
 80053fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d123      	bne.n	8005448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d11b      	bne.n	8005448 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d113      	bne.n	8005448 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	3b01      	subs	r3, #1
 800542e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005430:	429a      	cmp	r2, r3
 8005432:	d109      	bne.n	8005448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	3b01      	subs	r3, #1
 8005442:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005444:	429a      	cmp	r2, r3
 8005446:	d071      	beq.n	800552c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b0c      	cmp	r3, #12
 800544c:	d068      	beq.n	8005520 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800544e:	4b35      	ldr	r3, [pc, #212]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d105      	bne.n	8005466 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800545a:	4b32      	ldr	r3, [pc, #200]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e0ac      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800546a:	4b2e      	ldr	r3, [pc, #184]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a2d      	ldr	r2, [pc, #180]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 8005470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005474:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005476:	f7fc fadb 	bl	8001a30 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547e:	f7fc fad7 	bl	8001a30 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e099      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005490:	4b24      	ldr	r3, [pc, #144]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f0      	bne.n	800547e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800549c:	4b21      	ldr	r3, [pc, #132]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <HAL_RCC_OscConfig+0x788>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054ac:	3a01      	subs	r2, #1
 80054ae:	0112      	lsls	r2, r2, #4
 80054b0:	4311      	orrs	r1, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054b6:	0212      	lsls	r2, r2, #8
 80054b8:	4311      	orrs	r1, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054be:	0852      	lsrs	r2, r2, #1
 80054c0:	3a01      	subs	r2, #1
 80054c2:	0552      	lsls	r2, r2, #21
 80054c4:	4311      	orrs	r1, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054ca:	0852      	lsrs	r2, r2, #1
 80054cc:	3a01      	subs	r2, #1
 80054ce:	0652      	lsls	r2, r2, #25
 80054d0:	4311      	orrs	r1, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054d6:	06d2      	lsls	r2, r2, #27
 80054d8:	430a      	orrs	r2, r1
 80054da:	4912      	ldr	r1, [pc, #72]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0f      	ldr	r2, [pc, #60]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80054e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054ec:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 80054f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054f8:	f7fc fa9a 	bl	8001a30 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005500:	f7fc fa96 	bl	8001a30 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e058      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005512:	4b04      	ldr	r3, [pc, #16]	; (8005524 <HAL_RCC_OscConfig+0x784>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f0      	beq.n	8005500 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800551e:	e050      	b.n	80055c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e04f      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
 8005524:	40021000 	.word	0x40021000
 8005528:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800552c:	4b27      	ldr	r3, [pc, #156]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d144      	bne.n	80055c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005538:	4b24      	ldr	r3, [pc, #144]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a23      	ldr	r2, [pc, #140]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 800553e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005542:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005544:	4b21      	ldr	r3, [pc, #132]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4a20      	ldr	r2, [pc, #128]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 800554a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800554e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005550:	f7fc fa6e 	bl	8001a30 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005558:	f7fc fa6a 	bl	8001a30 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e02c      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800556a:	4b18      	ldr	r3, [pc, #96]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f0      	beq.n	8005558 <HAL_RCC_OscConfig+0x7b8>
 8005576:	e024      	b.n	80055c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d01f      	beq.n	80055be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a12      	ldr	r2, [pc, #72]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 8005584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558a:	f7fc fa51 	bl	8001a30 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005592:	f7fc fa4d 	bl	8001a30 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e00f      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055a4:	4b09      	ldr	r3, [pc, #36]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f0      	bne.n	8005592 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	4905      	ldr	r1, [pc, #20]	; (80055cc <HAL_RCC_OscConfig+0x82c>)
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <HAL_RCC_OscConfig+0x830>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	60cb      	str	r3, [r1, #12]
 80055bc:	e001      	b.n	80055c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000
 80055d0:	feeefffc 	.word	0xfeeefffc

080055d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0e7      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055e8:	4b75      	ldr	r3, [pc, #468]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d910      	bls.n	8005618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b72      	ldr	r3, [pc, #456]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 0207 	bic.w	r2, r3, #7
 80055fe:	4970      	ldr	r1, [pc, #448]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b6e      	ldr	r3, [pc, #440]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0cf      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d010      	beq.n	8005646 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	4b66      	ldr	r3, [pc, #408]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005630:	429a      	cmp	r2, r3
 8005632:	d908      	bls.n	8005646 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	4b63      	ldr	r3, [pc, #396]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4960      	ldr	r1, [pc, #384]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04c      	beq.n	80056ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565a:	4b5a      	ldr	r3, [pc, #360]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d121      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0a6      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005672:	4b54      	ldr	r3, [pc, #336]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d115      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e09a      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800568a:	4b4e      	ldr	r3, [pc, #312]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e08e      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800569a:	4b4a      	ldr	r3, [pc, #296]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e086      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056aa:	4b46      	ldr	r3, [pc, #280]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f023 0203 	bic.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4943      	ldr	r1, [pc, #268]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056bc:	f7fc f9b8 	bl	8001a30 <HAL_GetTick>
 80056c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	e00a      	b.n	80056da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c4:	f7fc f9b4 	bl	8001a30 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e06e      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	4b3a      	ldr	r3, [pc, #232]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 020c 	and.w	r2, r3, #12
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d1eb      	bne.n	80056c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005704:	429a      	cmp	r2, r3
 8005706:	d208      	bcs.n	800571a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005708:	4b2e      	ldr	r3, [pc, #184]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	492b      	ldr	r1, [pc, #172]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800571a:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d210      	bcs.n	800574a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005728:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f023 0207 	bic.w	r2, r3, #7
 8005730:	4923      	ldr	r1, [pc, #140]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	4313      	orrs	r3, r2
 8005736:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e036      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005756:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4918      	ldr	r1, [pc, #96]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005774:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4910      	ldr	r1, [pc, #64]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005784:	4313      	orrs	r3, r2
 8005786:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005788:	f000 f824 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	490b      	ldr	r1, [pc, #44]	; (80057c8 <HAL_RCC_ClockConfig+0x1f4>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
 80057a4:	4a09      	ldr	r2, [pc, #36]	; (80057cc <HAL_RCC_ClockConfig+0x1f8>)
 80057a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <HAL_RCC_ClockConfig+0x1fc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fc f8ef 	bl	8001990 <HAL_InitTick>
 80057b2:	4603      	mov	r3, r0
 80057b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80057b6:	7afb      	ldrb	r3, [r7, #11]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40022000 	.word	0x40022000
 80057c4:	40021000 	.word	0x40021000
 80057c8:	08011448 	.word	0x08011448
 80057cc:	20000000 	.word	0x20000000
 80057d0:	20000004 	.word	0x20000004

080057d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	; 0x24
 80057d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e2:	4b3e      	ldr	r3, [pc, #248]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ec:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_GetSysClockFreq+0x34>
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d121      	bne.n	8005846 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d11e      	bne.n	8005846 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005808:	4b34      	ldr	r3, [pc, #208]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005814:	4b31      	ldr	r3, [pc, #196]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e005      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005824:	4b2d      	ldr	r3, [pc, #180]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005830:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005838:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10d      	bne.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005844:	e00a      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b04      	cmp	r3, #4
 800584a:	d102      	bne.n	8005852 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800584c:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e004      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d101      	bne.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005858:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800585a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b0c      	cmp	r3, #12
 8005860:	d134      	bne.n	80058cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d003      	beq.n	800587a <HAL_RCC_GetSysClockFreq+0xa6>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b03      	cmp	r3, #3
 8005876:	d003      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0xac>
 8005878:	e005      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800587a:	4b1a      	ldr	r3, [pc, #104]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800587c:	617b      	str	r3, [r7, #20]
      break;
 800587e:	e005      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005880:	4b19      	ldr	r3, [pc, #100]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005882:	617b      	str	r3, [r7, #20]
      break;
 8005884:	e002      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	617b      	str	r3, [r7, #20]
      break;
 800588a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800588c:	4b13      	ldr	r3, [pc, #76]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	3301      	adds	r3, #1
 8005898:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800589a:	4b10      	ldr	r3, [pc, #64]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	fb03 f202 	mul.w	r2, r3, r2
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058b2:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	0e5b      	lsrs	r3, r3, #25
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	3301      	adds	r3, #1
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058cc:	69bb      	ldr	r3, [r7, #24]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3724      	adds	r7, #36	; 0x24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	08011460 	.word	0x08011460
 80058e4:	00f42400 	.word	0x00f42400
 80058e8:	007a1200 	.word	0x007a1200

080058ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <HAL_RCC_GetHCLKFreq+0x14>)
 80058f2:	681b      	ldr	r3, [r3, #0]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000000 	.word	0x20000000

08005904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005908:	f7ff fff0 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 800590c:	4602      	mov	r2, r0
 800590e:	4b06      	ldr	r3, [pc, #24]	; (8005928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	4904      	ldr	r1, [pc, #16]	; (800592c <HAL_RCC_GetPCLK1Freq+0x28>)
 800591a:	5ccb      	ldrb	r3, [r1, r3]
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005924:	4618      	mov	r0, r3
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	08011458 	.word	0x08011458

08005930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005934:	f7ff ffda 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0adb      	lsrs	r3, r3, #11
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4904      	ldr	r1, [pc, #16]	; (8005958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40021000 	.word	0x40021000
 8005958:	08011458 	.word	0x08011458

0800595c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005968:	4b2a      	ldr	r3, [pc, #168]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800596a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005974:	f7ff f990 	bl	8004c98 <HAL_PWREx_GetVoltageRange>
 8005978:	6178      	str	r0, [r7, #20]
 800597a:	e014      	b.n	80059a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800597c:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005980:	4a24      	ldr	r2, [pc, #144]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005986:	6593      	str	r3, [r2, #88]	; 0x58
 8005988:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800598a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005994:	f7ff f980 	bl	8004c98 <HAL_PWREx_GetVoltageRange>
 8005998:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800599a:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ac:	d10b      	bne.n	80059c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d919      	bls.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2ba0      	cmp	r3, #160	; 0xa0
 80059b8:	d902      	bls.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059ba:	2302      	movs	r3, #2
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	e013      	b.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059c0:	2301      	movs	r3, #1
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	e010      	b.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d902      	bls.n	80059d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059cc:	2303      	movs	r3, #3
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	e00a      	b.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d102      	bne.n	80059de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059d8:	2302      	movs	r3, #2
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	e004      	b.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b70      	cmp	r3, #112	; 0x70
 80059e2:	d101      	bne.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059e4:	2301      	movs	r3, #1
 80059e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f023 0207 	bic.w	r2, r3, #7
 80059f0:	4909      	ldr	r1, [pc, #36]	; (8005a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059f8:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d001      	beq.n	8005a0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40022000 	.word	0x40022000

08005a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a24:	2300      	movs	r3, #0
 8005a26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a28:	2300      	movs	r3, #0
 8005a2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d041      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a40:	d02a      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a46:	d824      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a4c:	d008      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a52:	d81e      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a5c:	d010      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a5e:	e018      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a60:	4b86      	ldr	r3, [pc, #536]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	4a85      	ldr	r2, [pc, #532]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a6c:	e015      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fadd 	bl	8006034 <RCCEx_PLLSAI1_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a7e:	e00c      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3320      	adds	r3, #32
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fbc6 	bl	8006218 <RCCEx_PLLSAI2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a90:	e003      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	74fb      	strb	r3, [r7, #19]
      break;
 8005a96:	e000      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a9a:	7cfb      	ldrb	r3, [r7, #19]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10b      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aa0:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aae:	4973      	ldr	r1, [pc, #460]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005ab6:	e001      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab8:	7cfb      	ldrb	r3, [r7, #19]
 8005aba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d041      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005acc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ad0:	d02a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005ad2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ad6:	d824      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005adc:	d008      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ae2:	d81e      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aec:	d010      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005aee:	e018      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005af0:	4b62      	ldr	r3, [pc, #392]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4a61      	ldr	r2, [pc, #388]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005afc:	e015      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	2100      	movs	r1, #0
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fa95 	bl	8006034 <RCCEx_PLLSAI1_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b0e:	e00c      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3320      	adds	r3, #32
 8005b14:	2100      	movs	r1, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fb7e 	bl	8006218 <RCCEx_PLLSAI2_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b20:	e003      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	74fb      	strb	r3, [r7, #19]
      break;
 8005b26:	e000      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b30:	4b52      	ldr	r3, [pc, #328]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3e:	494f      	ldr	r1, [pc, #316]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b46:	e001      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b48:	7cfb      	ldrb	r3, [r7, #19]
 8005b4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80a0 	beq.w	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b5e:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00d      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b74:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b78:	4a40      	ldr	r2, [pc, #256]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8005b80:	4b3e      	ldr	r3, [pc, #248]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b90:	4b3b      	ldr	r3, [pc, #236]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a3a      	ldr	r2, [pc, #232]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b9c:	f7fb ff48 	bl	8001a30 <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ba2:	e009      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba4:	f7fb ff44 	bl	8001a30 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d902      	bls.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	74fb      	strb	r3, [r7, #19]
        break;
 8005bb6:	e005      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bb8:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0ef      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d15c      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bca:	4b2c      	ldr	r3, [pc, #176]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01f      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d019      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005be8:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bf4:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfa:	4a20      	ldr	r2, [pc, #128]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c04:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0a:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c14:	4a19      	ldr	r2, [pc, #100]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d016      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c26:	f7fb ff03 	bl	8001a30 <HAL_GetTick>
 8005c2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c2c:	e00b      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2e:	f7fb feff 	bl	8001a30 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d902      	bls.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	74fb      	strb	r3, [r7, #19]
            break;
 8005c44:	e006      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0ec      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005c54:	7cfb      	ldrb	r3, [r7, #19]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10c      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c5a:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6a:	4904      	ldr	r1, [pc, #16]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c72:	e009      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c74:	7cfb      	ldrb	r3, [r7, #19]
 8005c76:	74bb      	strb	r3, [r7, #18]
 8005c78:	e006      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	7cfb      	ldrb	r3, [r7, #19]
 8005c86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c88:	7c7b      	ldrb	r3, [r7, #17]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d105      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c8e:	4ba6      	ldr	r3, [pc, #664]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	4aa5      	ldr	r2, [pc, #660]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ca6:	4ba0      	ldr	r3, [pc, #640]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	f023 0203 	bic.w	r2, r3, #3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	499c      	ldr	r1, [pc, #624]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cc8:	4b97      	ldr	r3, [pc, #604]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f023 020c 	bic.w	r2, r3, #12
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd6:	4994      	ldr	r1, [pc, #592]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cea:	4b8f      	ldr	r3, [pc, #572]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	498b      	ldr	r1, [pc, #556]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d0c:	4b86      	ldr	r3, [pc, #536]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	4983      	ldr	r1, [pc, #524]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d2e:	4b7e      	ldr	r3, [pc, #504]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d3c:	497a      	ldr	r1, [pc, #488]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d50:	4b75      	ldr	r3, [pc, #468]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5e:	4972      	ldr	r1, [pc, #456]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d72:	4b6d      	ldr	r3, [pc, #436]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d80:	4969      	ldr	r1, [pc, #420]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d94:	4b64      	ldr	r3, [pc, #400]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da2:	4961      	ldr	r1, [pc, #388]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005db6:	4b5c      	ldr	r3, [pc, #368]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc4:	4958      	ldr	r1, [pc, #352]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dd8:	4b53      	ldr	r3, [pc, #332]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de6:	4950      	ldr	r1, [pc, #320]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dfa:	4b4b      	ldr	r3, [pc, #300]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e08:	4947      	ldr	r1, [pc, #284]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e1c:	4b42      	ldr	r3, [pc, #264]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e22:	f023 0203 	bic.w	r2, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2a:	493f      	ldr	r1, [pc, #252]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d028      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e3e:	4b3a      	ldr	r3, [pc, #232]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4936      	ldr	r1, [pc, #216]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e5c:	d106      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e5e:	4b32      	ldr	r3, [pc, #200]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	4a31      	ldr	r2, [pc, #196]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e68:	60d3      	str	r3, [r2, #12]
 8005e6a:	e011      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e74:	d10c      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 f8d9 	bl	8006034 <RCCEx_PLLSAI1_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e86:	7cfb      	ldrb	r3, [r7, #19]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005e8c:	7cfb      	ldrb	r3, [r7, #19]
 8005e8e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d028      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e9c:	4b22      	ldr	r3, [pc, #136]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eaa:	491f      	ldr	r1, [pc, #124]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eba:	d106      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a19      	ldr	r2, [pc, #100]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ec6:	60d3      	str	r3, [r2, #12]
 8005ec8:	e011      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ed2:	d10c      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	2101      	movs	r1, #1
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f8aa 	bl	8006034 <RCCEx_PLLSAI1_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ee4:	7cfb      	ldrb	r3, [r7, #19]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005eea:	7cfb      	ldrb	r3, [r7, #19]
 8005eec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d02a      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f08:	4907      	ldr	r1, [pc, #28]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f18:	d108      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f1a:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	4a02      	ldr	r2, [pc, #8]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f24:	60d3      	str	r3, [r2, #12]
 8005f26:	e013      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005f28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 f879 	bl	8006034 <RCCEx_PLLSAI1_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005f4c:	7cfb      	ldrb	r3, [r7, #19]
 8005f4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d02f      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f5c:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f6a:	4929      	ldr	r1, [pc, #164]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f7a:	d10d      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	2102      	movs	r1, #2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 f856 	bl	8006034 <RCCEx_PLLSAI1_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f8c:	7cfb      	ldrb	r3, [r7, #19]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d014      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005f92:	7cfb      	ldrb	r3, [r7, #19]
 8005f94:	74bb      	strb	r3, [r7, #18]
 8005f96:	e011      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fa0:	d10c      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3320      	adds	r3, #32
 8005fa6:	2102      	movs	r1, #2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 f935 	bl	8006218 <RCCEx_PLLSAI2_Config>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fb2:	7cfb      	ldrb	r3, [r7, #19]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005fb8:	7cfb      	ldrb	r3, [r7, #19]
 8005fba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00b      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fc8:	4b11      	ldr	r3, [pc, #68]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fd8:	490d      	ldr	r1, [pc, #52]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00b      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fec:	4b08      	ldr	r3, [pc, #32]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ffc:	4904      	ldr	r1, [pc, #16]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006004:	7cbb      	ldrb	r3, [r7, #18]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000

08006014 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800601e:	f043 0304 	orr.w	r3, r3, #4
 8006022:	6013      	str	r3, [r2, #0]
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000

08006034 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006042:	4b74      	ldr	r3, [pc, #464]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d018      	beq.n	8006080 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800604e:	4b71      	ldr	r3, [pc, #452]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0203 	and.w	r2, r3, #3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d10d      	bne.n	800607a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
       ||
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006066:	4b6b      	ldr	r3, [pc, #428]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
       ||
 8006076:	429a      	cmp	r2, r3
 8006078:	d047      	beq.n	800610a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
 800607e:	e044      	b.n	800610a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b03      	cmp	r3, #3
 8006086:	d018      	beq.n	80060ba <RCCEx_PLLSAI1_Config+0x86>
 8006088:	2b03      	cmp	r3, #3
 800608a:	d825      	bhi.n	80060d8 <RCCEx_PLLSAI1_Config+0xa4>
 800608c:	2b01      	cmp	r3, #1
 800608e:	d002      	beq.n	8006096 <RCCEx_PLLSAI1_Config+0x62>
 8006090:	2b02      	cmp	r3, #2
 8006092:	d009      	beq.n	80060a8 <RCCEx_PLLSAI1_Config+0x74>
 8006094:	e020      	b.n	80060d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006096:	4b5f      	ldr	r3, [pc, #380]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d11d      	bne.n	80060de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a6:	e01a      	b.n	80060de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060a8:	4b5a      	ldr	r3, [pc, #360]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d116      	bne.n	80060e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b8:	e013      	b.n	80060e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060ba:	4b56      	ldr	r3, [pc, #344]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10f      	bne.n	80060e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060c6:	4b53      	ldr	r3, [pc, #332]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060d6:	e006      	b.n	80060e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	73fb      	strb	r3, [r7, #15]
      break;
 80060dc:	e004      	b.n	80060e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10d      	bne.n	800610a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060ee:	4b49      	ldr	r3, [pc, #292]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6819      	ldr	r1, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	3b01      	subs	r3, #1
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	430b      	orrs	r3, r1
 8006104:	4943      	ldr	r1, [pc, #268]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006106:	4313      	orrs	r3, r2
 8006108:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d17c      	bne.n	800620a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006110:	4b40      	ldr	r3, [pc, #256]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a3f      	ldr	r2, [pc, #252]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006116:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800611a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800611c:	f7fb fc88 	bl	8001a30 <HAL_GetTick>
 8006120:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006122:	e009      	b.n	8006138 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006124:	f7fb fc84 	bl	8001a30 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d902      	bls.n	8006138 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	73fb      	strb	r3, [r7, #15]
        break;
 8006136:	e005      	b.n	8006144 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006138:	4b36      	ldr	r3, [pc, #216]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1ef      	bne.n	8006124 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d15f      	bne.n	800620a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d110      	bne.n	8006172 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006150:	4b30      	ldr	r3, [pc, #192]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006158:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6892      	ldr	r2, [r2, #8]
 8006160:	0211      	lsls	r1, r2, #8
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68d2      	ldr	r2, [r2, #12]
 8006166:	06d2      	lsls	r2, r2, #27
 8006168:	430a      	orrs	r2, r1
 800616a:	492a      	ldr	r1, [pc, #168]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800616c:	4313      	orrs	r3, r2
 800616e:	610b      	str	r3, [r1, #16]
 8006170:	e027      	b.n	80061c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d112      	bne.n	800619e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006178:	4b26      	ldr	r3, [pc, #152]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006180:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6892      	ldr	r2, [r2, #8]
 8006188:	0211      	lsls	r1, r2, #8
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6912      	ldr	r2, [r2, #16]
 800618e:	0852      	lsrs	r2, r2, #1
 8006190:	3a01      	subs	r2, #1
 8006192:	0552      	lsls	r2, r2, #21
 8006194:	430a      	orrs	r2, r1
 8006196:	491f      	ldr	r1, [pc, #124]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006198:	4313      	orrs	r3, r2
 800619a:	610b      	str	r3, [r1, #16]
 800619c:	e011      	b.n	80061c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800619e:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6892      	ldr	r2, [r2, #8]
 80061ae:	0211      	lsls	r1, r2, #8
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6952      	ldr	r2, [r2, #20]
 80061b4:	0852      	lsrs	r2, r2, #1
 80061b6:	3a01      	subs	r2, #1
 80061b8:	0652      	lsls	r2, r2, #25
 80061ba:	430a      	orrs	r2, r1
 80061bc:	4915      	ldr	r1, [pc, #84]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061c2:	4b14      	ldr	r3, [pc, #80]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a13      	ldr	r2, [pc, #76]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ce:	f7fb fc2f 	bl	8001a30 <HAL_GetTick>
 80061d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061d4:	e009      	b.n	80061ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061d6:	f7fb fc2b 	bl	8001a30 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d902      	bls.n	80061ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	73fb      	strb	r3, [r7, #15]
          break;
 80061e8:	e005      	b.n	80061f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061ea:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0ef      	beq.n	80061d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	4903      	ldr	r1, [pc, #12]	; (8006214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006206:	4313      	orrs	r3, r2
 8006208:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40021000 	.word	0x40021000

08006218 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006226:	4b69      	ldr	r3, [pc, #420]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d018      	beq.n	8006264 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006232:	4b66      	ldr	r3, [pc, #408]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f003 0203 	and.w	r2, r3, #3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d10d      	bne.n	800625e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
       ||
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800624a:	4b60      	ldr	r3, [pc, #384]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	091b      	lsrs	r3, r3, #4
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
       ||
 800625a:	429a      	cmp	r2, r3
 800625c:	d047      	beq.n	80062ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
 8006262:	e044      	b.n	80062ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d018      	beq.n	800629e <RCCEx_PLLSAI2_Config+0x86>
 800626c:	2b03      	cmp	r3, #3
 800626e:	d825      	bhi.n	80062bc <RCCEx_PLLSAI2_Config+0xa4>
 8006270:	2b01      	cmp	r3, #1
 8006272:	d002      	beq.n	800627a <RCCEx_PLLSAI2_Config+0x62>
 8006274:	2b02      	cmp	r3, #2
 8006276:	d009      	beq.n	800628c <RCCEx_PLLSAI2_Config+0x74>
 8006278:	e020      	b.n	80062bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800627a:	4b54      	ldr	r3, [pc, #336]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d11d      	bne.n	80062c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800628a:	e01a      	b.n	80062c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800628c:	4b4f      	ldr	r3, [pc, #316]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006294:	2b00      	cmp	r3, #0
 8006296:	d116      	bne.n	80062c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800629c:	e013      	b.n	80062c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800629e:	4b4b      	ldr	r3, [pc, #300]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10f      	bne.n	80062ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062aa:	4b48      	ldr	r3, [pc, #288]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ba:	e006      	b.n	80062ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
      break;
 80062c0:	e004      	b.n	80062cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062c2:	bf00      	nop
 80062c4:	e002      	b.n	80062cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10d      	bne.n	80062ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062d2:	4b3e      	ldr	r3, [pc, #248]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6819      	ldr	r1, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	430b      	orrs	r3, r1
 80062e8:	4938      	ldr	r1, [pc, #224]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d166      	bne.n	80063c2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80062f4:	4b35      	ldr	r3, [pc, #212]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a34      	ldr	r2, [pc, #208]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80062fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006300:	f7fb fb96 	bl	8001a30 <HAL_GetTick>
 8006304:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006306:	e009      	b.n	800631c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006308:	f7fb fb92 	bl	8001a30 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d902      	bls.n	800631c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	73fb      	strb	r3, [r7, #15]
        break;
 800631a:	e005      	b.n	8006328 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800631c:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1ef      	bne.n	8006308 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d149      	bne.n	80063c2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d110      	bne.n	8006356 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006334:	4b25      	ldr	r3, [pc, #148]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800633c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6892      	ldr	r2, [r2, #8]
 8006344:	0211      	lsls	r1, r2, #8
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68d2      	ldr	r2, [r2, #12]
 800634a:	06d2      	lsls	r2, r2, #27
 800634c:	430a      	orrs	r2, r1
 800634e:	491f      	ldr	r1, [pc, #124]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006350:	4313      	orrs	r3, r2
 8006352:	614b      	str	r3, [r1, #20]
 8006354:	e011      	b.n	800637a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800635e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6892      	ldr	r2, [r2, #8]
 8006366:	0211      	lsls	r1, r2, #8
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6912      	ldr	r2, [r2, #16]
 800636c:	0852      	lsrs	r2, r2, #1
 800636e:	3a01      	subs	r2, #1
 8006370:	0652      	lsls	r2, r2, #25
 8006372:	430a      	orrs	r2, r1
 8006374:	4915      	ldr	r1, [pc, #84]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006376:	4313      	orrs	r3, r2
 8006378:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800637a:	4b14      	ldr	r3, [pc, #80]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a13      	ldr	r2, [pc, #76]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006384:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006386:	f7fb fb53 	bl	8001a30 <HAL_GetTick>
 800638a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800638c:	e009      	b.n	80063a2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800638e:	f7fb fb4f 	bl	8001a30 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d902      	bls.n	80063a2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	73fb      	strb	r3, [r7, #15]
          break;
 80063a0:	e005      	b.n	80063ae <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063a2:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0ef      	beq.n	800638e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80063b6:	695a      	ldr	r2, [r3, #20]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	4903      	ldr	r1, [pc, #12]	; (80063cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40021000 	.word	0x40021000

080063d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e040      	b.n	8006464 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fb f92e 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2224      	movs	r2, #36	; 0x24
 80063fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0201 	bic.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fbc2 	bl	8006b98 <UART_SetConfig>
 8006414:	4603      	mov	r3, r0
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e022      	b.n	8006464 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fe6e 	bl	8007108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800643a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800644a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fef5 	bl	800724c <UART_CheckIdleState>
 8006462:	4603      	mov	r3, r0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	4613      	mov	r3, r2
 800647a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006480:	2b20      	cmp	r3, #32
 8006482:	f040 8082 	bne.w	800658a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_UART_Transmit+0x26>
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e07a      	b.n	800658c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_UART_Transmit+0x38>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e073      	b.n	800658c <HAL_UART_Transmit+0x120>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2221      	movs	r2, #33	; 0x21
 80064b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ba:	f7fb fab9 	bl	8001a30 <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	88fa      	ldrh	r2, [r7, #6]
 80064cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d8:	d108      	bne.n	80064ec <HAL_UART_Transmit+0x80>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	e003      	b.n	80064f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064fc:	e02d      	b.n	800655a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2200      	movs	r2, #0
 8006506:	2180      	movs	r1, #128	; 0x80
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fee8 	bl	80072de <UART_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e039      	b.n	800658c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800652a:	b292      	uxth	r2, r2
 800652c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	3302      	adds	r3, #2
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e008      	b.n	8006548 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	781a      	ldrb	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	b292      	uxth	r2, r2
 8006540:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	3301      	adds	r3, #1
 8006546:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1cb      	bne.n	80064fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2200      	movs	r2, #0
 800656e:	2140      	movs	r1, #64	; 0x40
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 feb4 	bl	80072de <UART_WaitOnFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e005      	b.n	800658c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	e000      	b.n	800658c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800658a:	2302      	movs	r3, #2
  }
}
 800658c:	4618      	mov	r0, r3
 800658e:	3720      	adds	r7, #32
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b0ba      	sub	sp, #232	; 0xe8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065be:	f640 030f 	movw	r3, #2063	; 0x80f
 80065c2:	4013      	ands	r3, r2
 80065c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d115      	bne.n	80065fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00f      	beq.n	80065fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d009      	beq.n	80065fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 82a6 	beq.w	8006b3e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
      }
      return;
 80065fa:	e2a0      	b.n	8006b3e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80065fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8117 	beq.w	8006834 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006612:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006616:	4b85      	ldr	r3, [pc, #532]	; (800682c <HAL_UART_IRQHandler+0x298>)
 8006618:	4013      	ands	r3, r2
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 810a 	beq.w	8006834 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d011      	beq.n	8006650 <HAL_UART_IRQHandler+0xbc>
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2201      	movs	r2, #1
 800663e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006646:	f043 0201 	orr.w	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d011      	beq.n	8006680 <HAL_UART_IRQHandler+0xec>
 800665c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2202      	movs	r2, #2
 800666e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006676:	f043 0204 	orr.w	r2, r3, #4
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d011      	beq.n	80066b0 <HAL_UART_IRQHandler+0x11c>
 800668c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2204      	movs	r2, #4
 800669e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a6:	f043 0202 	orr.w	r2, r3, #2
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d017      	beq.n	80066ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2208      	movs	r2, #8
 80066da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066e2:	f043 0208 	orr.w	r2, r3, #8
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d012      	beq.n	800671e <HAL_UART_IRQHandler+0x18a>
 80066f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00c      	beq.n	800671e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800670c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006714:	f043 0220 	orr.w	r2, r3, #32
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 820c 	beq.w	8006b42 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00d      	beq.n	8006752 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d007      	beq.n	8006752 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006758:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006766:	2b40      	cmp	r3, #64	; 0x40
 8006768:	d005      	beq.n	8006776 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800676a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800676e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006772:	2b00      	cmp	r3, #0
 8006774:	d04f      	beq.n	8006816 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fe75 	bl	8007466 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d141      	bne.n	800680e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3308      	adds	r3, #8
 8006790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3308      	adds	r3, #8
 80067b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1d9      	bne.n	800678a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d013      	beq.n	8006806 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	4a13      	ldr	r2, [pc, #76]	; (8006830 <HAL_UART_IRQHandler+0x29c>)
 80067e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fc fcf7 	bl	80031de <HAL_DMA_Abort_IT>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d017      	beq.n	8006826 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	e00f      	b.n	8006826 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f9b0 	bl	8006b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	e00b      	b.n	8006826 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f9ac 	bl	8006b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006814:	e007      	b.n	8006826 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f9a8 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006824:	e18d      	b.n	8006b42 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006826:	bf00      	nop
    return;
 8006828:	e18b      	b.n	8006b42 <HAL_UART_IRQHandler+0x5ae>
 800682a:	bf00      	nop
 800682c:	04000120 	.word	0x04000120
 8006830:	0800752d 	.word	0x0800752d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006838:	2b01      	cmp	r3, #1
 800683a:	f040 8146 	bne.w	8006aca <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800683e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 813f 	beq.w	8006aca <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800684c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006850:	f003 0310 	and.w	r3, r3, #16
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8138 	beq.w	8006aca <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2210      	movs	r2, #16
 8006860:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	f040 80b4 	bne.w	80069da <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800687e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 815f 	beq.w	8006b46 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800688e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006892:	429a      	cmp	r2, r3
 8006894:	f080 8157 	bcs.w	8006b46 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800689e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 8085 	bne.w	80069be <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1da      	bne.n	80068b4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800690e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006922:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006926:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800692a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e1      	bne.n	80068fe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3308      	adds	r3, #8
 8006940:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800694a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800694c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3308      	adds	r3, #8
 800695a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800695e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800696c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e3      	bne.n	800693a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800698c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698e:	f023 0310 	bic.w	r3, r3, #16
 8006992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80069a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e4      	bne.n	800697e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fc fbd2 	bl	8003162 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8d4 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069d8:	e0b5      	b.n	8006b46 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 80a7 	beq.w	8006b4a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80069fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80a2 	beq.w	8006b4a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a28:	647b      	str	r3, [r7, #68]	; 0x44
 8006a2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e4      	bne.n	8006a06 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3308      	adds	r3, #8
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	f023 0301 	bic.w	r3, r3, #1
 8006a52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a60:	633a      	str	r2, [r7, #48]	; 0x30
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e3      	bne.n	8006a3c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0310 	bic.w	r3, r3, #16
 8006a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	69b9      	ldr	r1, [r7, #24]
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e4      	bne.n	8006a86 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f85c 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ac8:	e03f      	b.n	8006b4a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00e      	beq.n	8006af4 <HAL_UART_IRQHandler+0x560>
 8006ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d008      	beq.n	8006af4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006aea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fd5d 	bl	80075ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006af2:	e02d      	b.n	8006b50 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00e      	beq.n	8006b1e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01c      	beq.n	8006b4e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4798      	blx	r3
    }
    return;
 8006b1c:	e017      	b.n	8006b4e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d012      	beq.n	8006b50 <HAL_UART_IRQHandler+0x5bc>
 8006b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00c      	beq.n	8006b50 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fd0e 	bl	8007558 <UART_EndTransmit_IT>
    return;
 8006b3c:	e008      	b.n	8006b50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006b3e:	bf00      	nop
 8006b40:	e006      	b.n	8006b50 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006b42:	bf00      	nop
 8006b44:	e004      	b.n	8006b50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006b46:	bf00      	nop
 8006b48:	e002      	b.n	8006b50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006b4a:	bf00      	nop
 8006b4c:	e000      	b.n	8006b50 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006b4e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b50:	37e8      	adds	r7, #232	; 0xe8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop

08006b58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b9c:	b08a      	sub	sp, #40	; 0x28
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4ba4      	ldr	r3, [pc, #656]	; (8006e58 <UART_SetConfig+0x2c0>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a99      	ldr	r2, [pc, #612]	; (8006e5c <UART_SetConfig+0x2c4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c00:	4313      	orrs	r3, r2
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c14:	430a      	orrs	r2, r1
 8006c16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a90      	ldr	r2, [pc, #576]	; (8006e60 <UART_SetConfig+0x2c8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d126      	bne.n	8006c70 <UART_SetConfig+0xd8>
 8006c22:	4b90      	ldr	r3, [pc, #576]	; (8006e64 <UART_SetConfig+0x2cc>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d81b      	bhi.n	8006c68 <UART_SetConfig+0xd0>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0xa0>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c59 	.word	0x08006c59
 8006c40:	08006c51 	.word	0x08006c51
 8006c44:	08006c61 	.word	0x08006c61
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4e:	e116      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006c50:	2302      	movs	r3, #2
 8006c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c56:	e112      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5e:	e10e      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006c60:	2308      	movs	r3, #8
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c66:	e10a      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006c68:	2310      	movs	r3, #16
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6e:	e106      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a7c      	ldr	r2, [pc, #496]	; (8006e68 <UART_SetConfig+0x2d0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d138      	bne.n	8006cec <UART_SetConfig+0x154>
 8006c7a:	4b7a      	ldr	r3, [pc, #488]	; (8006e64 <UART_SetConfig+0x2cc>)
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c80:	f003 030c 	and.w	r3, r3, #12
 8006c84:	2b0c      	cmp	r3, #12
 8006c86:	d82d      	bhi.n	8006ce4 <UART_SetConfig+0x14c>
 8006c88:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <UART_SetConfig+0xf8>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006cc5 	.word	0x08006cc5
 8006c94:	08006ce5 	.word	0x08006ce5
 8006c98:	08006ce5 	.word	0x08006ce5
 8006c9c:	08006ce5 	.word	0x08006ce5
 8006ca0:	08006cd5 	.word	0x08006cd5
 8006ca4:	08006ce5 	.word	0x08006ce5
 8006ca8:	08006ce5 	.word	0x08006ce5
 8006cac:	08006ce5 	.word	0x08006ce5
 8006cb0:	08006ccd 	.word	0x08006ccd
 8006cb4:	08006ce5 	.word	0x08006ce5
 8006cb8:	08006ce5 	.word	0x08006ce5
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006cdd 	.word	0x08006cdd
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cca:	e0d8      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd2:	e0d4      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cda:	e0d0      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce2:	e0cc      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cea:	e0c8      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a5e      	ldr	r2, [pc, #376]	; (8006e6c <UART_SetConfig+0x2d4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d125      	bne.n	8006d42 <UART_SetConfig+0x1aa>
 8006cf6:	4b5b      	ldr	r3, [pc, #364]	; (8006e64 <UART_SetConfig+0x2cc>)
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d00:	2b30      	cmp	r3, #48	; 0x30
 8006d02:	d016      	beq.n	8006d32 <UART_SetConfig+0x19a>
 8006d04:	2b30      	cmp	r3, #48	; 0x30
 8006d06:	d818      	bhi.n	8006d3a <UART_SetConfig+0x1a2>
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	d00a      	beq.n	8006d22 <UART_SetConfig+0x18a>
 8006d0c:	2b20      	cmp	r3, #32
 8006d0e:	d814      	bhi.n	8006d3a <UART_SetConfig+0x1a2>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <UART_SetConfig+0x182>
 8006d14:	2b10      	cmp	r3, #16
 8006d16:	d008      	beq.n	8006d2a <UART_SetConfig+0x192>
 8006d18:	e00f      	b.n	8006d3a <UART_SetConfig+0x1a2>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d20:	e0ad      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006d22:	2302      	movs	r3, #2
 8006d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d28:	e0a9      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006d2a:	2304      	movs	r3, #4
 8006d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d30:	e0a5      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006d32:	2308      	movs	r3, #8
 8006d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d38:	e0a1      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006d3a:	2310      	movs	r3, #16
 8006d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d40:	e09d      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a4a      	ldr	r2, [pc, #296]	; (8006e70 <UART_SetConfig+0x2d8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d125      	bne.n	8006d98 <UART_SetConfig+0x200>
 8006d4c:	4b45      	ldr	r3, [pc, #276]	; (8006e64 <UART_SetConfig+0x2cc>)
 8006d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d56:	2bc0      	cmp	r3, #192	; 0xc0
 8006d58:	d016      	beq.n	8006d88 <UART_SetConfig+0x1f0>
 8006d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d5c:	d818      	bhi.n	8006d90 <UART_SetConfig+0x1f8>
 8006d5e:	2b80      	cmp	r3, #128	; 0x80
 8006d60:	d00a      	beq.n	8006d78 <UART_SetConfig+0x1e0>
 8006d62:	2b80      	cmp	r3, #128	; 0x80
 8006d64:	d814      	bhi.n	8006d90 <UART_SetConfig+0x1f8>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <UART_SetConfig+0x1d8>
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d008      	beq.n	8006d80 <UART_SetConfig+0x1e8>
 8006d6e:	e00f      	b.n	8006d90 <UART_SetConfig+0x1f8>
 8006d70:	2300      	movs	r3, #0
 8006d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d76:	e082      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d7e:	e07e      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006d80:	2304      	movs	r3, #4
 8006d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d86:	e07a      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006d88:	2308      	movs	r3, #8
 8006d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8e:	e076      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006d90:	2310      	movs	r3, #16
 8006d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d96:	e072      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a35      	ldr	r2, [pc, #212]	; (8006e74 <UART_SetConfig+0x2dc>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d12a      	bne.n	8006df8 <UART_SetConfig+0x260>
 8006da2:	4b30      	ldr	r3, [pc, #192]	; (8006e64 <UART_SetConfig+0x2cc>)
 8006da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db0:	d01a      	beq.n	8006de8 <UART_SetConfig+0x250>
 8006db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db6:	d81b      	bhi.n	8006df0 <UART_SetConfig+0x258>
 8006db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dbc:	d00c      	beq.n	8006dd8 <UART_SetConfig+0x240>
 8006dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc2:	d815      	bhi.n	8006df0 <UART_SetConfig+0x258>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <UART_SetConfig+0x238>
 8006dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dcc:	d008      	beq.n	8006de0 <UART_SetConfig+0x248>
 8006dce:	e00f      	b.n	8006df0 <UART_SetConfig+0x258>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dd6:	e052      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dde:	e04e      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006de0:	2304      	movs	r3, #4
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de6:	e04a      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006de8:	2308      	movs	r3, #8
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dee:	e046      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006df0:	2310      	movs	r3, #16
 8006df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df6:	e042      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a17      	ldr	r2, [pc, #92]	; (8006e5c <UART_SetConfig+0x2c4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d13a      	bne.n	8006e78 <UART_SetConfig+0x2e0>
 8006e02:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <UART_SetConfig+0x2cc>)
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e10:	d01a      	beq.n	8006e48 <UART_SetConfig+0x2b0>
 8006e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e16:	d81b      	bhi.n	8006e50 <UART_SetConfig+0x2b8>
 8006e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1c:	d00c      	beq.n	8006e38 <UART_SetConfig+0x2a0>
 8006e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e22:	d815      	bhi.n	8006e50 <UART_SetConfig+0x2b8>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <UART_SetConfig+0x298>
 8006e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2c:	d008      	beq.n	8006e40 <UART_SetConfig+0x2a8>
 8006e2e:	e00f      	b.n	8006e50 <UART_SetConfig+0x2b8>
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e36:	e022      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3e:	e01e      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e46:	e01a      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e4e:	e016      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e56:	e012      	b.n	8006e7e <UART_SetConfig+0x2e6>
 8006e58:	efff69f3 	.word	0xefff69f3
 8006e5c:	40008000 	.word	0x40008000
 8006e60:	40013800 	.word	0x40013800
 8006e64:	40021000 	.word	0x40021000
 8006e68:	40004400 	.word	0x40004400
 8006e6c:	40004800 	.word	0x40004800
 8006e70:	40004c00 	.word	0x40004c00
 8006e74:	40005000 	.word	0x40005000
 8006e78:	2310      	movs	r3, #16
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a9f      	ldr	r2, [pc, #636]	; (8007100 <UART_SetConfig+0x568>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d17a      	bne.n	8006f7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d824      	bhi.n	8006eda <UART_SetConfig+0x342>
 8006e90:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <UART_SetConfig+0x300>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ebd 	.word	0x08006ebd
 8006e9c:	08006edb 	.word	0x08006edb
 8006ea0:	08006ec5 	.word	0x08006ec5
 8006ea4:	08006edb 	.word	0x08006edb
 8006ea8:	08006ecb 	.word	0x08006ecb
 8006eac:	08006edb 	.word	0x08006edb
 8006eb0:	08006edb 	.word	0x08006edb
 8006eb4:	08006edb 	.word	0x08006edb
 8006eb8:	08006ed3 	.word	0x08006ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ebc:	f7fe fd22 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8006ec0:	61f8      	str	r0, [r7, #28]
        break;
 8006ec2:	e010      	b.n	8006ee6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ec4:	4b8f      	ldr	r3, [pc, #572]	; (8007104 <UART_SetConfig+0x56c>)
 8006ec6:	61fb      	str	r3, [r7, #28]
        break;
 8006ec8:	e00d      	b.n	8006ee6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eca:	f7fe fc83 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8006ece:	61f8      	str	r0, [r7, #28]
        break;
 8006ed0:	e009      	b.n	8006ee6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ed6:	61fb      	str	r3, [r7, #28]
        break;
 8006ed8:	e005      	b.n	8006ee6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ee4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 80fb 	beq.w	80070e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	4413      	add	r3, r2
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d305      	bcc.n	8006f0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d903      	bls.n	8006f12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f10:	e0e8      	b.n	80070e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	2200      	movs	r2, #0
 8006f16:	461c      	mov	r4, r3
 8006f18:	4615      	mov	r5, r2
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	022b      	lsls	r3, r5, #8
 8006f24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f28:	0222      	lsls	r2, r4, #8
 8006f2a:	68f9      	ldr	r1, [r7, #12]
 8006f2c:	6849      	ldr	r1, [r1, #4]
 8006f2e:	0849      	lsrs	r1, r1, #1
 8006f30:	2000      	movs	r0, #0
 8006f32:	4688      	mov	r8, r1
 8006f34:	4681      	mov	r9, r0
 8006f36:	eb12 0a08 	adds.w	sl, r2, r8
 8006f3a:	eb43 0b09 	adc.w	fp, r3, r9
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	603b      	str	r3, [r7, #0]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f4c:	4650      	mov	r0, sl
 8006f4e:	4659      	mov	r1, fp
 8006f50:	f7f9 fcbc 	bl	80008cc <__aeabi_uldivmod>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4613      	mov	r3, r2
 8006f5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f62:	d308      	bcc.n	8006f76 <UART_SetConfig+0x3de>
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f6a:	d204      	bcs.n	8006f76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	60da      	str	r2, [r3, #12]
 8006f74:	e0b6      	b.n	80070e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f7c:	e0b2      	b.n	80070e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f86:	d15e      	bne.n	8007046 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d828      	bhi.n	8006fe2 <UART_SetConfig+0x44a>
 8006f90:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <UART_SetConfig+0x400>)
 8006f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f96:	bf00      	nop
 8006f98:	08006fbd 	.word	0x08006fbd
 8006f9c:	08006fc5 	.word	0x08006fc5
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	08006fe3 	.word	0x08006fe3
 8006fa8:	08006fd3 	.word	0x08006fd3
 8006fac:	08006fe3 	.word	0x08006fe3
 8006fb0:	08006fe3 	.word	0x08006fe3
 8006fb4:	08006fe3 	.word	0x08006fe3
 8006fb8:	08006fdb 	.word	0x08006fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fbc:	f7fe fca2 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8006fc0:	61f8      	str	r0, [r7, #28]
        break;
 8006fc2:	e014      	b.n	8006fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fc4:	f7fe fcb4 	bl	8005930 <HAL_RCC_GetPCLK2Freq>
 8006fc8:	61f8      	str	r0, [r7, #28]
        break;
 8006fca:	e010      	b.n	8006fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fcc:	4b4d      	ldr	r3, [pc, #308]	; (8007104 <UART_SetConfig+0x56c>)
 8006fce:	61fb      	str	r3, [r7, #28]
        break;
 8006fd0:	e00d      	b.n	8006fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fd2:	f7fe fbff 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8006fd6:	61f8      	str	r0, [r7, #28]
        break;
 8006fd8:	e009      	b.n	8006fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fde:	61fb      	str	r3, [r7, #28]
        break;
 8006fe0:	e005      	b.n	8006fee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d077      	beq.n	80070e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	005a      	lsls	r2, r3, #1
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	441a      	add	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	fbb2 f3f3 	udiv	r3, r2, r3
 8007008:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	2b0f      	cmp	r3, #15
 800700e:	d916      	bls.n	800703e <UART_SetConfig+0x4a6>
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007016:	d212      	bcs.n	800703e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f023 030f 	bic.w	r3, r3, #15
 8007020:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	085b      	lsrs	r3, r3, #1
 8007026:	b29b      	uxth	r3, r3
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	b29a      	uxth	r2, r3
 800702e:	8afb      	ldrh	r3, [r7, #22]
 8007030:	4313      	orrs	r3, r2
 8007032:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	8afa      	ldrh	r2, [r7, #22]
 800703a:	60da      	str	r2, [r3, #12]
 800703c:	e052      	b.n	80070e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007044:	e04e      	b.n	80070e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007046:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800704a:	2b08      	cmp	r3, #8
 800704c:	d827      	bhi.n	800709e <UART_SetConfig+0x506>
 800704e:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <UART_SetConfig+0x4bc>)
 8007050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007054:	08007079 	.word	0x08007079
 8007058:	08007081 	.word	0x08007081
 800705c:	08007089 	.word	0x08007089
 8007060:	0800709f 	.word	0x0800709f
 8007064:	0800708f 	.word	0x0800708f
 8007068:	0800709f 	.word	0x0800709f
 800706c:	0800709f 	.word	0x0800709f
 8007070:	0800709f 	.word	0x0800709f
 8007074:	08007097 	.word	0x08007097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007078:	f7fe fc44 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 800707c:	61f8      	str	r0, [r7, #28]
        break;
 800707e:	e014      	b.n	80070aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007080:	f7fe fc56 	bl	8005930 <HAL_RCC_GetPCLK2Freq>
 8007084:	61f8      	str	r0, [r7, #28]
        break;
 8007086:	e010      	b.n	80070aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007088:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <UART_SetConfig+0x56c>)
 800708a:	61fb      	str	r3, [r7, #28]
        break;
 800708c:	e00d      	b.n	80070aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708e:	f7fe fba1 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8007092:	61f8      	str	r0, [r7, #28]
        break;
 8007094:	e009      	b.n	80070aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709a:	61fb      	str	r3, [r7, #28]
        break;
 800709c:	e005      	b.n	80070aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070a8:	bf00      	nop
    }

    if (pclk != 0U)
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d019      	beq.n	80070e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	085a      	lsrs	r2, r3, #1
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	441a      	add	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2b0f      	cmp	r3, #15
 80070c8:	d909      	bls.n	80070de <UART_SetConfig+0x546>
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d0:	d205      	bcs.n	80070de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60da      	str	r2, [r3, #12]
 80070dc:	e002      	b.n	80070e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3728      	adds	r7, #40	; 0x28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070fe:	bf00      	nop
 8007100:	40008000 	.word	0x40008000
 8007104:	00f42400 	.word	0x00f42400

08007108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00a      	beq.n	8007132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	f003 0310 	and.w	r3, r3, #16
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d01a      	beq.n	800721e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007206:	d10a      	bne.n	800721e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	605a      	str	r2, [r3, #4]
  }
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af02      	add	r7, sp, #8
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800725c:	f7fa fbe8 	bl	8001a30 <HAL_GetTick>
 8007260:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b08      	cmp	r3, #8
 800726e:	d10e      	bne.n	800728e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f82d 	bl	80072de <UART_WaitOnFlagUntilTimeout>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e023      	b.n	80072d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b04      	cmp	r3, #4
 800729a:	d10e      	bne.n	80072ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800729c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f817 	bl	80072de <UART_WaitOnFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e00d      	b.n	80072d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2220      	movs	r2, #32
 80072be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b09c      	sub	sp, #112	; 0x70
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	603b      	str	r3, [r7, #0]
 80072ea:	4613      	mov	r3, r2
 80072ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ee:	e0a5      	b.n	800743c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072f6:	f000 80a1 	beq.w	800743c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fa:	f7fa fb99 	bl	8001a30 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007306:	429a      	cmp	r2, r3
 8007308:	d302      	bcc.n	8007310 <UART_WaitOnFlagUntilTimeout+0x32>
 800730a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730c:	2b00      	cmp	r3, #0
 800730e:	d13e      	bne.n	800738e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800731e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007324:	667b      	str	r3, [r7, #100]	; 0x64
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800732e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007330:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800733c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e6      	bne.n	8007310 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	663b      	str	r3, [r7, #96]	; 0x60
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007362:	64ba      	str	r2, [r7, #72]	; 0x48
 8007364:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e5      	bne.n	8007342 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e067      	b.n	800745e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	d04f      	beq.n	800743c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073aa:	d147      	bne.n	800743c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34
 80073d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e6      	bne.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3308      	adds	r3, #8
 80073ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	613b      	str	r3, [r7, #16]
   return(result);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3308      	adds	r3, #8
 8007406:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007408:	623a      	str	r2, [r7, #32]
 800740a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	69f9      	ldr	r1, [r7, #28]
 800740e:	6a3a      	ldr	r2, [r7, #32]
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	61bb      	str	r3, [r7, #24]
   return(result);
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e5      	bne.n	80073e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e010      	b.n	800745e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69da      	ldr	r2, [r3, #28]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	4013      	ands	r3, r2
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	429a      	cmp	r2, r3
 800744a:	bf0c      	ite	eq
 800744c:	2301      	moveq	r3, #1
 800744e:	2300      	movne	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	461a      	mov	r2, r3
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	429a      	cmp	r2, r3
 8007458:	f43f af4a 	beq.w	80072f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3770      	adds	r7, #112	; 0x70
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007466:	b480      	push	{r7}
 8007468:	b095      	sub	sp, #84	; 0x54
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748c:	643b      	str	r3, [r7, #64]	; 0x40
 800748e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e6      	bne.n	800746e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3308      	adds	r3, #8
 80074a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e5      	bne.n	80074a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d118      	bne.n	800750e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f023 0310 	bic.w	r3, r3, #16
 80074f0:	647b      	str	r3, [r7, #68]	; 0x44
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074fa:	61bb      	str	r3, [r7, #24]
 80074fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6979      	ldr	r1, [r7, #20]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	613b      	str	r3, [r7, #16]
   return(result);
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e6      	bne.n	80074dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2220      	movs	r2, #32
 8007512:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007520:	bf00      	nop
 8007522:	3754      	adds	r7, #84	; 0x54
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff fb0e 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	60bb      	str	r3, [r7, #8]
   return(result);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6979      	ldr	r1, [r7, #20]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	613b      	str	r3, [r7, #16]
   return(result);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e6      	bne.n	8007560 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2220      	movs	r2, #32
 8007596:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fada 	bl	8006b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a4:	bf00      	nop
 80075a6:	3720      	adds	r7, #32
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075c0:	b084      	sub	sp, #16
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	f107 001c 	add.w	r0, r7, #28
 80075ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f9a0 	bl	8007924 <USB_CoreReset>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80075e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38
 80075fa:	e005      	b.n	8007608 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007614:	b004      	add	sp, #16
 8007616:	4770      	bx	lr

08007618 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f043 0201 	orr.w	r2, r3, #1
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f023 0201 	bic.w	r2, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d115      	bne.n	80076aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800768a:	2001      	movs	r0, #1
 800768c:	f7fa f9dc 	bl	8001a48 <HAL_Delay>
      ms++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3301      	adds	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f935 	bl	8007906 <USB_GetMode>
 800769c:	4603      	mov	r3, r0
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d01e      	beq.n	80076e0 <USB_SetCurrentMode+0x84>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b31      	cmp	r3, #49	; 0x31
 80076a6:	d9f0      	bls.n	800768a <USB_SetCurrentMode+0x2e>
 80076a8:	e01a      	b.n	80076e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d115      	bne.n	80076dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076bc:	2001      	movs	r0, #1
 80076be:	f7fa f9c3 	bl	8001a48 <HAL_Delay>
      ms++;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3301      	adds	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f91c 	bl	8007906 <USB_GetMode>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <USB_SetCurrentMode+0x84>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b31      	cmp	r3, #49	; 0x31
 80076d8:	d9f0      	bls.n	80076bc <USB_SetCurrentMode+0x60>
 80076da:	e001      	b.n	80076e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e005      	b.n	80076ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b32      	cmp	r3, #50	; 0x32
 80076e4:	d101      	bne.n	80076ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e000      	b.n	80076ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4a13      	ldr	r2, [pc, #76]	; (8007758 <USB_FlushTxFifo+0x64>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d901      	bls.n	8007714 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e01b      	b.n	800774c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	daf2      	bge.n	8007702 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	019b      	lsls	r3, r3, #6
 8007724:	f043 0220 	orr.w	r2, r3, #32
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4a08      	ldr	r2, [pc, #32]	; (8007758 <USB_FlushTxFifo+0x64>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d901      	bls.n	800773e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e006      	b.n	800774c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b20      	cmp	r3, #32
 8007748:	d0f0      	beq.n	800772c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	00030d40 	.word	0x00030d40

0800775c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4a11      	ldr	r2, [pc, #68]	; (80077b8 <USB_FlushRxFifo+0x5c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d901      	bls.n	800777a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e018      	b.n	80077ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	daf2      	bge.n	8007768 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2210      	movs	r2, #16
 800778a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3301      	adds	r3, #1
 8007790:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <USB_FlushRxFifo+0x5c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d901      	bls.n	800779e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e006      	b.n	80077ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	2b10      	cmp	r3, #16
 80077a8:	d0f0      	beq.n	800778c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	00030d40 	.word	0x00030d40

080077bc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80077bc:	b480      	push	{r7}
 80077be:	b089      	sub	sp, #36	; 0x24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4611      	mov	r1, r2
 80077c8:	461a      	mov	r2, r3
 80077ca:	460b      	mov	r3, r1
 80077cc:	71fb      	strb	r3, [r7, #7]
 80077ce:	4613      	mov	r3, r2
 80077d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80077da:	88bb      	ldrh	r3, [r7, #4]
 80077dc:	3303      	adds	r3, #3
 80077de:	089b      	lsrs	r3, r3, #2
 80077e0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80077e2:	2300      	movs	r3, #0
 80077e4:	61bb      	str	r3, [r7, #24]
 80077e6:	e018      	b.n	800781a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	031a      	lsls	r2, r3, #12
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f4:	461a      	mov	r2, r3
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6013      	str	r3, [r2, #0]
    pSrc++;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	3301      	adds	r3, #1
 8007800:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	3301      	adds	r3, #1
 8007806:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	3301      	adds	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	3301      	adds	r3, #1
 8007812:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	3301      	adds	r3, #1
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	429a      	cmp	r2, r3
 8007820:	d3e2      	bcc.n	80077e8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3724      	adds	r7, #36	; 0x24
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007830:	b480      	push	{r7}
 8007832:	b08b      	sub	sp, #44	; 0x2c
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007846:	88fb      	ldrh	r3, [r7, #6]
 8007848:	089b      	lsrs	r3, r3, #2
 800784a:	b29b      	uxth	r3, r3
 800784c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800784e:	88fb      	ldrh	r3, [r7, #6]
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007856:	2300      	movs	r3, #0
 8007858:	623b      	str	r3, [r7, #32]
 800785a:	e014      	b.n	8007886 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	601a      	str	r2, [r3, #0]
    pDest++;
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	3301      	adds	r3, #1
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	3301      	adds	r3, #1
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	3301      	adds	r3, #1
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	3301      	adds	r3, #1
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	3301      	adds	r3, #1
 8007884:	623b      	str	r3, [r7, #32]
 8007886:	6a3a      	ldr	r2, [r7, #32]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	429a      	cmp	r2, r3
 800788c:	d3e6      	bcc.n	800785c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800788e:	8bfb      	ldrh	r3, [r7, #30]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01e      	beq.n	80078d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789e:	461a      	mov	r2, r3
 80078a0:	f107 0310 	add.w	r3, r7, #16
 80078a4:	6812      	ldr	r2, [r2, #0]
 80078a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	fa22 f303 	lsr.w	r3, r2, r3
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	701a      	strb	r2, [r3, #0]
      i++;
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	3301      	adds	r3, #1
 80078be:	623b      	str	r3, [r7, #32]
      pDest++;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	3301      	adds	r3, #1
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80078c6:	8bfb      	ldrh	r3, [r7, #30]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80078cc:	8bfb      	ldrh	r3, [r7, #30]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1ea      	bne.n	80078a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	372c      	adds	r7, #44	; 0x2c
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4013      	ands	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078f8:	68fb      	ldr	r3, [r7, #12]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	f003 0301 	and.w	r3, r3, #1
}
 8007916:	4618      	mov	r0, r3
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
	...

08007924 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4a13      	ldr	r2, [pc, #76]	; (8007988 <USB_CoreReset+0x64>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d901      	bls.n	8007942 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e01b      	b.n	800797a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	daf2      	bge.n	8007930 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f043 0201 	orr.w	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3301      	adds	r3, #1
 800795e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4a09      	ldr	r2, [pc, #36]	; (8007988 <USB_CoreReset+0x64>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d901      	bls.n	800796c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e006      	b.n	800797a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b01      	cmp	r3, #1
 8007976:	d0f0      	beq.n	800795a <USB_CoreReset+0x36>

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	00030d40 	.word	0x00030d40

0800798c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800798c:	b084      	sub	sp, #16
 800798e:	b580      	push	{r7, lr}
 8007990:	b086      	sub	sp, #24
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800799a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079ac:	461a      	mov	r2, r3
 80079ae:	2300      	movs	r3, #0
 80079b0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079d8:	f023 0304 	bic.w	r3, r3, #4
 80079dc:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079de:	2110      	movs	r1, #16
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fe87 	bl	80076f4 <USB_FlushTxFifo>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff feb3 	bl	800775c <USB_FlushRxFifo>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	e015      	b.n	8007a32 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a12:	461a      	mov	r2, r3
 8007a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a18:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a26:	461a      	mov	r2, r3
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d3e5      	bcc.n	8007a06 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a46:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2280      	movs	r2, #128	; 0x80
 8007a4c:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a0c      	ldr	r2, [pc, #48]	; (8007a84 <USB_HostInit+0xf8>)
 8007a52:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a0c      	ldr	r2, [pc, #48]	; (8007a88 <USB_HostInit+0xfc>)
 8007a58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	f043 0210 	orr.w	r2, r3, #16
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699a      	ldr	r2, [r3, #24]
 8007a6c:	4b07      	ldr	r3, [pc, #28]	; (8007a8c <USB_HostInit+0x100>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a80:	b004      	add	sp, #16
 8007a82:	4770      	bx	lr
 8007a84:	00600080 	.word	0x00600080
 8007a88:	004000e0 	.word	0x004000e0
 8007a8c:	a3200008 	.word	0xa3200008

08007a90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	f003 0303 	and.w	r3, r3, #3
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d107      	bne.n	8007ae2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ade:	6053      	str	r3, [r2, #4]
 8007ae0:	e009      	b.n	8007af6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007ae2:	78fb      	ldrb	r3, [r7, #3]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d106      	bne.n	8007af6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aee:	461a      	mov	r2, r3
 8007af0:	f241 7370 	movw	r3, #6000	; 0x1770
 8007af4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d109      	bne.n	8007b48 <USB_DriveVbus+0x44>
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d106      	bne.n	8007b48 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b46:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b52:	d109      	bne.n	8007b68 <USB_DriveVbus+0x64>
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b66:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	0c5b      	lsrs	r3, r3, #17
 8007b94:	f003 0303 	and.w	r3, r3, #3
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	b29b      	uxth	r3, r3
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
	...

08007bc8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	70fb      	strb	r3, [r7, #3]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	70bb      	strb	r3, [r7, #2]
 8007bde:	4613      	mov	r3, r2
 8007be0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bfc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d867      	bhi.n	8007cd6 <USB_HC_Init+0x10e>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <USB_HC_Init+0x44>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c1d 	.word	0x08007c1d
 8007c10:	08007c99 	.word	0x08007c99
 8007c14:	08007c1d 	.word	0x08007c1d
 8007c18:	08007c5b 	.word	0x08007c5b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f240 439d 	movw	r3, #1181	; 0x49d
 8007c2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007c30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	da51      	bge.n	8007cdc <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c56:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007c58:	e040      	b.n	8007cdc <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c66:	461a      	mov	r2, r3
 8007c68:	f240 639d 	movw	r3, #1693	; 0x69d
 8007c6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	da34      	bge.n	8007ce0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c94:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007c96:	e023      	b.n	8007ce0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f240 2325 	movw	r3, #549	; 0x225
 8007caa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007cac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	da17      	bge.n	8007ce4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007cb4:	78fb      	ldrb	r3, [r7, #3]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cce:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007cd2:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007cd4:	e006      	b.n	8007ce4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	77fb      	strb	r3, [r7, #31]
      break;
 8007cda:	e004      	b.n	8007ce6 <USB_HC_Init+0x11e>
      break;
 8007cdc:	bf00      	nop
 8007cde:	e002      	b.n	8007ce6 <USB_HC_Init+0x11e>
      break;
 8007ce0:	bf00      	nop
 8007ce2:	e000      	b.n	8007ce6 <USB_HC_Init+0x11e>
      break;
 8007ce4:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007ce6:	78fb      	ldrb	r3, [r7, #3]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d00:	f043 0302 	orr.w	r3, r3, #2
 8007d04:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d0c:	699a      	ldr	r2, [r3, #24]
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	f003 030f 	and.w	r3, r3, #15
 8007d14:	2101      	movs	r1, #1
 8007d16:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1a:	6939      	ldr	r1, [r7, #16]
 8007d1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d20:	4313      	orrs	r3, r2
 8007d22:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007d30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	da03      	bge.n	8007d40 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	e001      	b.n	8007d44 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff16 	bl	8007b76 <USB_GetHostSpeed>
 8007d4a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007d4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d106      	bne.n	8007d62 <USB_HC_Init+0x19a>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d003      	beq.n	8007d62 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e001      	b.n	8007d66 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d66:	787b      	ldrb	r3, [r7, #1]
 8007d68:	059b      	lsls	r3, r3, #22
 8007d6a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d6e:	78bb      	ldrb	r3, [r7, #2]
 8007d70:	02db      	lsls	r3, r3, #11
 8007d72:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d76:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d7c:	049b      	lsls	r3, r3, #18
 8007d7e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d82:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d8a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	0159      	lsls	r1, r3, #5
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	440b      	add	r3, r1
 8007d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d9c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007da2:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007da4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d003      	beq.n	8007db4 <USB_HC_Init+0x1ec>
 8007dac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d10f      	bne.n	8007dd4 <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dd2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3720      	adds	r7, #32
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop

08007de0 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	785b      	ldrb	r3, [r3, #1]
 8007df2:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007df8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d018      	beq.n	8007e34 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	8912      	ldrh	r2, [r2, #8]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	8912      	ldrh	r2, [r2, #8]
 8007e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e16:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8007e18:	8bfa      	ldrh	r2, [r7, #30]
 8007e1a:	8a7b      	ldrh	r3, [r7, #18]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d90b      	bls.n	8007e38 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8007e20:	8a7b      	ldrh	r3, [r7, #18]
 8007e22:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e24:	8bfb      	ldrh	r3, [r7, #30]
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	8912      	ldrh	r2, [r2, #8]
 8007e2a:	fb03 f202 	mul.w	r2, r3, r2
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	611a      	str	r2, [r3, #16]
 8007e32:	e001      	b.n	8007e38 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8007e34:	2301      	movs	r3, #1
 8007e36:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	78db      	ldrb	r3, [r3, #3]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d007      	beq.n	8007e50 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e40:	8bfb      	ldrh	r3, [r7, #30]
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	8912      	ldrh	r2, [r2, #8]
 8007e46:	fb03 f202 	mul.w	r2, r3, r2
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	611a      	str	r2, [r3, #16]
 8007e4e:	e003      	b.n	8007e58 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	695a      	ldr	r2, [r3, #20]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e60:	8bfb      	ldrh	r3, [r7, #30]
 8007e62:	04d9      	lsls	r1, r3, #19
 8007e64:	4b59      	ldr	r3, [pc, #356]	; (8007fcc <USB_HC_StartXfer+0x1ec>)
 8007e66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	7a9b      	ldrb	r3, [r3, #10]
 8007e6e:	075b      	lsls	r3, r3, #29
 8007e70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e74:	6979      	ldr	r1, [r7, #20]
 8007e76:	0148      	lsls	r0, r1, #5
 8007e78:	69b9      	ldr	r1, [r7, #24]
 8007e7a:	4401      	add	r1, r0
 8007e7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e82:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	bf0c      	ite	eq
 8007e94:	2301      	moveq	r3, #1
 8007e96:	2300      	movne	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007eba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	7c7b      	ldrb	r3, [r7, #17]
 8007ecc:	075b      	lsls	r3, r3, #29
 8007ece:	6979      	ldr	r1, [r7, #20]
 8007ed0:	0148      	lsls	r0, r1, #5
 8007ed2:	69b9      	ldr	r1, [r7, #24]
 8007ed4:	4401      	add	r1, r0
 8007ed6:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007eda:	4313      	orrs	r3, r2
 8007edc:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ef4:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	78db      	ldrb	r3, [r3, #3]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f04:	60bb      	str	r3, [r7, #8]
 8007f06:	e003      	b.n	8007f10 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f0e:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f16:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f24:	461a      	mov	r2, r3
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	78db      	ldrb	r3, [r3, #3]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d147      	bne.n	8007fc2 <USB_HC_StartXfer+0x1e2>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d043      	beq.n	8007fc2 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	79db      	ldrb	r3, [r3, #7]
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d830      	bhi.n	8007fa4 <USB_HC_StartXfer+0x1c4>
 8007f42:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <USB_HC_StartXfer+0x168>)
 8007f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f48:	08007f59 	.word	0x08007f59
 8007f4c:	08007f7d 	.word	0x08007f7d
 8007f50:	08007f59 	.word	0x08007f59
 8007f54:	08007f7d 	.word	0x08007f7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	3303      	adds	r3, #3
 8007f5e:	089b      	lsrs	r3, r3, #2
 8007f60:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007f62:	89fa      	ldrh	r2, [r7, #14]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d91c      	bls.n	8007fa8 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f043 0220 	orr.w	r2, r3, #32
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	619a      	str	r2, [r3, #24]
        }
        break;
 8007f7a:	e015      	b.n	8007fa8 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	3303      	adds	r3, #3
 8007f82:	089b      	lsrs	r3, r3, #2
 8007f84:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007f86:	89fa      	ldrh	r2, [r7, #14]
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d90a      	bls.n	8007fac <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007fa2:	e003      	b.n	8007fac <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8007fa4:	bf00      	nop
 8007fa6:	e002      	b.n	8007fae <USB_HC_StartXfer+0x1ce>
        break;
 8007fa8:	bf00      	nop
 8007faa:	e000      	b.n	8007fae <USB_HC_StartXfer+0x1ce>
        break;
 8007fac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68d9      	ldr	r1, [r3, #12]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	785a      	ldrb	r2, [r3, #1]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fbfd 	bl	80077bc <USB_WritePacket>
  }

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3720      	adds	r7, #32
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	1ff80000 	.word	0x1ff80000

08007fd0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	b29b      	uxth	r3, r3
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b089      	sub	sp, #36	; 0x24
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008002:	78fb      	ldrb	r3, [r7, #3]
 8008004:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	4413      	add	r3, r2
 8008012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	0c9b      	lsrs	r3, r3, #18
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	4413      	add	r3, r2
 8008028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	0fdb      	lsrs	r3, r3, #31
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b20      	cmp	r3, #32
 8008040:	d104      	bne.n	800804c <USB_HC_Halt+0x5a>
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008048:	2300      	movs	r3, #0
 800804a:	e0c8      	b.n	80081de <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <USB_HC_Halt+0x66>
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d163      	bne.n	8008120 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	4413      	add	r3, r2
 8008060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	440a      	add	r2, r1
 800806e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008072:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008076:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b00      	cmp	r3, #0
 8008082:	f040 80ab 	bne.w	80081dc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d133      	bne.n	80080fa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	4413      	add	r3, r2
 800809a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	0151      	lsls	r1, r2, #5
 80080c4:	69fa      	ldr	r2, [r7, #28]
 80080c6:	440a      	add	r2, r1
 80080c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080d0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3301      	adds	r3, #1
 80080d6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080de:	d81d      	bhi.n	800811c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080f6:	d0ec      	beq.n	80080d2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80080f8:	e070      	b.n	80081dc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	4413      	add	r3, r2
 8008102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	440a      	add	r2, r1
 8008110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008118:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800811a:	e05f      	b.n	80081dc <USB_HC_Halt+0x1ea>
            break;
 800811c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800811e:	e05d      	b.n	80081dc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	4413      	add	r3, r2
 8008128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	0151      	lsls	r1, r2, #5
 8008132:	69fa      	ldr	r2, [r7, #28]
 8008134:	440a      	add	r2, r1
 8008136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800813a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800813e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d133      	bne.n	80081b8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	0151      	lsls	r1, r2, #5
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	440a      	add	r2, r1
 8008166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800816a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800816e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	0151      	lsls	r1, r2, #5
 8008182:	69fa      	ldr	r2, [r7, #28]
 8008184:	440a      	add	r2, r1
 8008186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800818a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800818e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3301      	adds	r3, #1
 8008194:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800819c:	d81d      	bhi.n	80081da <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b4:	d0ec      	beq.n	8008190 <USB_HC_Halt+0x19e>
 80081b6:	e011      	b.n	80081dc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	0151      	lsls	r1, r2, #5
 80081ca:	69fa      	ldr	r2, [r7, #28]
 80081cc:	440a      	add	r2, r1
 80081ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e000      	b.n	80081dc <USB_HC_Halt+0x1ea>
          break;
 80081da:	bf00      	nop
    }
  }

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3724      	adds	r7, #36	; 0x24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b088      	sub	sp, #32
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff fa1b 	bl	800763a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008204:	2110      	movs	r1, #16
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff fa74 	bl	80076f4 <USB_FlushTxFifo>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff faa0 	bl	800775c <USB_FlushRxFifo>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008226:	2300      	movs	r3, #0
 8008228:	61bb      	str	r3, [r7, #24]
 800822a:	e01f      	b.n	800826c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	4413      	add	r3, r2
 8008234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008242:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800824a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008252:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	4413      	add	r3, r2
 800825c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008260:	461a      	mov	r2, r3
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	3301      	adds	r3, #1
 800826a:	61bb      	str	r3, [r7, #24]
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	2b0f      	cmp	r3, #15
 8008270:	d9dc      	bls.n	800822c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008272:	2300      	movs	r3, #0
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	e034      	b.n	80082e2 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	4413      	add	r3, r2
 8008280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800828e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008296:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800829e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ac:	461a      	mov	r2, r3
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3301      	adds	r3, #1
 80082b6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082be:	d80c      	bhi.n	80082da <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082d6:	d0ec      	beq.n	80082b2 <USB_StopHost+0xc8>
 80082d8:	e000      	b.n	80082dc <USB_StopHost+0xf2>
        break;
 80082da:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	3301      	adds	r3, #1
 80082e0:	61bb      	str	r3, [r7, #24]
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b0f      	cmp	r3, #15
 80082e6:	d9c7      	bls.n	8008278 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ee:	461a      	mov	r2, r3
 80082f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082f4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082fc:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff f98a 	bl	8007618 <USB_EnableGlobalInt>

  return ret;
 8008304:	7ffb      	ldrb	r3, [r7, #31]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3720      	adds	r7, #32
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008314:	4904      	ldr	r1, [pc, #16]	; (8008328 <MX_FATFS_Init+0x18>)
 8008316:	4805      	ldr	r0, [pc, #20]	; (800832c <MX_FATFS_Init+0x1c>)
 8008318:	f007 f8d6 	bl	800f4c8 <FATFS_LinkDriver>
 800831c:	4603      	mov	r3, r0
 800831e:	461a      	mov	r2, r3
 8008320:	4b03      	ldr	r3, [pc, #12]	; (8008330 <MX_FATFS_Init+0x20>)
 8008322:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008324:	bf00      	nop
 8008326:	bd80      	pop	{r7, pc}
 8008328:	200002e0 	.word	0x200002e0
 800832c:	08011490 	.word	0x08011490
 8008330:	200002dc 	.word	0x200002dc

08008334 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008338:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800833a:	4618      	mov	r0, r3
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	4619      	mov	r1, r3
 800836e:	4808      	ldr	r0, [pc, #32]	; (8008390 <USBH_status+0x34>)
 8008370:	f000 fe1a 	bl	8008fa8 <USBH_MSC_UnitIsReady>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <USBH_status+0x24>
  {
    res = RES_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]
 800837e:	e001      	b.n	8008384 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008384:	7bfb      	ldrb	r3, [r7, #15]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	2000280c 	.word	0x2000280c

08008394 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b094      	sub	sp, #80	; 0x50
 8008398:	af02      	add	r7, sp, #8
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	4603      	mov	r3, r0
 80083a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80083aa:	7bf9      	ldrb	r1, [r7, #15]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	4813      	ldr	r0, [pc, #76]	; (8008404 <USBH_read+0x70>)
 80083b6:	f000 fe41 	bl	800903c <USBH_MSC_Read>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d103      	bne.n	80083c8 <USBH_read+0x34>
  {
    res = RES_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80083c6:	e017      	b.n	80083f8 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80083c8:	f107 0210 	add.w	r2, r7, #16
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	4619      	mov	r1, r3
 80083d0:	480c      	ldr	r0, [pc, #48]	; (8008404 <USBH_read+0x70>)
 80083d2:	f000 fe0f 	bl	8008ff4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80083d6:	7f7b      	ldrb	r3, [r7, #29]
 80083d8:	2b3a      	cmp	r3, #58	; 0x3a
 80083da:	d005      	beq.n	80083e8 <USBH_read+0x54>
 80083dc:	2b3a      	cmp	r3, #58	; 0x3a
 80083de:	dc07      	bgt.n	80083f0 <USBH_read+0x5c>
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d001      	beq.n	80083e8 <USBH_read+0x54>
 80083e4:	2b28      	cmp	r3, #40	; 0x28
 80083e6:	d103      	bne.n	80083f0 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80083e8:	2303      	movs	r3, #3
 80083ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80083ee:	e003      	b.n	80083f8 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80083f6:	bf00      	nop
    }
  }

  return res;
 80083f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3748      	adds	r7, #72	; 0x48
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	2000280c 	.word	0x2000280c

08008408 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b094      	sub	sp, #80	; 0x50
 800840c:	af02      	add	r7, sp, #8
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
 8008412:	603b      	str	r3, [r7, #0]
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800841e:	7bf9      	ldrb	r1, [r7, #15]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4817      	ldr	r0, [pc, #92]	; (8008488 <USBH_write+0x80>)
 800842a:	f000 fe70 	bl	800910e <USBH_MSC_Write>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <USBH_write+0x34>
  {
    res = RES_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800843a:	e01f      	b.n	800847c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800843c:	f107 0210 	add.w	r2, r7, #16
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	4619      	mov	r1, r3
 8008444:	4810      	ldr	r0, [pc, #64]	; (8008488 <USBH_write+0x80>)
 8008446:	f000 fdd5 	bl	8008ff4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800844a:	7f7b      	ldrb	r3, [r7, #29]
 800844c:	2b3a      	cmp	r3, #58	; 0x3a
 800844e:	d00d      	beq.n	800846c <USBH_write+0x64>
 8008450:	2b3a      	cmp	r3, #58	; 0x3a
 8008452:	dc0f      	bgt.n	8008474 <USBH_write+0x6c>
 8008454:	2b28      	cmp	r3, #40	; 0x28
 8008456:	d009      	beq.n	800846c <USBH_write+0x64>
 8008458:	2b28      	cmp	r3, #40	; 0x28
 800845a:	dc0b      	bgt.n	8008474 <USBH_write+0x6c>
 800845c:	2b04      	cmp	r3, #4
 800845e:	d005      	beq.n	800846c <USBH_write+0x64>
 8008460:	2b27      	cmp	r3, #39	; 0x27
 8008462:	d107      	bne.n	8008474 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008464:	2302      	movs	r3, #2
 8008466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800846a:	e007      	b.n	800847c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800846c:	2303      	movs	r3, #3
 800846e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008472:	e003      	b.n	800847c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800847a:	bf00      	nop
    }
  }

  return res;
 800847c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008480:	4618      	mov	r0, r3
 8008482:	3748      	adds	r7, #72	; 0x48
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	2000280c 	.word	0x2000280c

0800848c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b090      	sub	sp, #64	; 0x40
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	603a      	str	r2, [r7, #0]
 8008496:	71fb      	strb	r3, [r7, #7]
 8008498:	460b      	mov	r3, r1
 800849a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80084a2:	79bb      	ldrb	r3, [r7, #6]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d852      	bhi.n	800854e <USBH_ioctl+0xc2>
 80084a8:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <USBH_ioctl+0x24>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	080084c9 	.word	0x080084c9
 80084b8:	080084f3 	.word	0x080084f3
 80084bc:	0800851f 	.word	0x0800851f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80084c6:	e045      	b.n	8008554 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80084c8:	f107 0208 	add.w	r2, r7, #8
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	4619      	mov	r1, r3
 80084d0:	4823      	ldr	r0, [pc, #140]	; (8008560 <USBH_ioctl+0xd4>)
 80084d2:	f000 fd8f 	bl	8008ff4 <USBH_MSC_GetLUNInfo>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d106      	bne.n	80084ea <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80084e8:	e034      	b.n	8008554 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80084f0:	e030      	b.n	8008554 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80084f2:	f107 0208 	add.w	r2, r7, #8
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	4619      	mov	r1, r3
 80084fa:	4819      	ldr	r0, [pc, #100]	; (8008560 <USBH_ioctl+0xd4>)
 80084fc:	f000 fd7a 	bl	8008ff4 <USBH_MSC_GetLUNInfo>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d107      	bne.n	8008516 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008506:	8a3b      	ldrh	r3, [r7, #16]
 8008508:	461a      	mov	r2, r3
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008514:	e01e      	b.n	8008554 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800851c:	e01a      	b.n	8008554 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800851e:	f107 0208 	add.w	r2, r7, #8
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	4619      	mov	r1, r3
 8008526:	480e      	ldr	r0, [pc, #56]	; (8008560 <USBH_ioctl+0xd4>)
 8008528:	f000 fd64 	bl	8008ff4 <USBH_MSC_GetLUNInfo>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008532:	8a3b      	ldrh	r3, [r7, #16]
 8008534:	0a5b      	lsrs	r3, r3, #9
 8008536:	b29b      	uxth	r3, r3
 8008538:	461a      	mov	r2, r3
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008544:	e006      	b.n	8008554 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800854c:	e002      	b.n	8008554 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800854e:	2304      	movs	r3, #4
 8008550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008554:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008558:	4618      	mov	r0, r3
 800855a:	3740      	adds	r7, #64	; 0x40
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	2000280c 	.word	0x2000280c

08008564 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008564:	b590      	push	{r4, r7, lr}
 8008566:	b089      	sub	sp, #36	; 0x24
 8008568:	af04      	add	r7, sp, #16
 800856a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008572:	7919      	ldrb	r1, [r3, #4]
 8008574:	2350      	movs	r3, #80	; 0x50
 8008576:	2206      	movs	r2, #6
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 fc53 	bl	8009e24 <USBH_FindInterface>
 800857e:	4603      	mov	r3, r0
 8008580:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	2bff      	cmp	r3, #255	; 0xff
 8008586:	d002      	beq.n	800858e <USBH_MSC_InterfaceInit+0x2a>
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d901      	bls.n	8008592 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800858e:	2302      	movs	r3, #2
 8008590:	e0ef      	b.n	8008772 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fc28 	bl	8009dec <USBH_SelectInterface>
 800859c:	4603      	mov	r3, r0
 800859e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80085a6:	2302      	movs	r3, #2
 80085a8:	e0e3      	b.n	8008772 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80085b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80085b4:	f007 fbae 	bl	800fd14 <malloc>
 80085b8:	4603      	mov	r3, r0
 80085ba:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80085cc:	2302      	movs	r3, #2
 80085ce:	e0d0      	b.n	8008772 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80085d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085d4:	2100      	movs	r1, #0
 80085d6:	68b8      	ldr	r0, [r7, #8]
 80085d8:	f007 fbba 	bl	800fd50 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	211a      	movs	r1, #26
 80085e2:	fb01 f303 	mul.w	r3, r1, r3
 80085e6:	4413      	add	r3, r2
 80085e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b25b      	sxtb	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	da16      	bge.n	8008622 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	211a      	movs	r1, #26
 80085fa:	fb01 f303 	mul.w	r3, r1, r3
 80085fe:	4413      	add	r3, r2
 8008600:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008604:	781a      	ldrb	r2, [r3, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	211a      	movs	r1, #26
 8008610:	fb01 f303 	mul.w	r3, r1, r3
 8008614:	4413      	add	r3, r2
 8008616:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800861a:	881a      	ldrh	r2, [r3, #0]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	815a      	strh	r2, [r3, #10]
 8008620:	e015      	b.n	800864e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	211a      	movs	r1, #26
 8008628:	fb01 f303 	mul.w	r3, r1, r3
 800862c:	4413      	add	r3, r2
 800862e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008632:	781a      	ldrb	r2, [r3, #0]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	211a      	movs	r1, #26
 800863e:	fb01 f303 	mul.w	r3, r1, r3
 8008642:	4413      	add	r3, r2
 8008644:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008648:	881a      	ldrh	r2, [r3, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	211a      	movs	r1, #26
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	4413      	add	r3, r2
 800865a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b25b      	sxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	da16      	bge.n	8008694 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	211a      	movs	r1, #26
 800866c:	fb01 f303 	mul.w	r3, r1, r3
 8008670:	4413      	add	r3, r2
 8008672:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008676:	781a      	ldrb	r2, [r3, #0]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	211a      	movs	r1, #26
 8008682:	fb01 f303 	mul.w	r3, r1, r3
 8008686:	4413      	add	r3, r2
 8008688:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800868c:	881a      	ldrh	r2, [r3, #0]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	815a      	strh	r2, [r3, #10]
 8008692:	e015      	b.n	80086c0 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	211a      	movs	r1, #26
 800869a:	fb01 f303 	mul.w	r3, r1, r3
 800869e:	4413      	add	r3, r2
 80086a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80086a4:	781a      	ldrb	r2, [r3, #0]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	211a      	movs	r1, #26
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80086ba:	881a      	ldrh	r2, [r3, #0]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2200      	movs	r2, #0
 80086ca:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2200      	movs	r2, #0
 80086d0:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	799b      	ldrb	r3, [r3, #6]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 ff2e 	bl	800a53a <USBH_AllocPipe>
 80086de:	4603      	mov	r3, r0
 80086e0:	461a      	mov	r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	79db      	ldrb	r3, [r3, #7]
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 ff24 	bl	800a53a <USBH_AllocPipe>
 80086f2:	4603      	mov	r3, r0
 80086f4:	461a      	mov	r2, r3
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fdac 	bl	8009258 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	7959      	ldrb	r1, [r3, #5]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	7998      	ldrb	r0, [r3, #6]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	8912      	ldrh	r2, [r2, #8]
 8008718:	9202      	str	r2, [sp, #8]
 800871a:	2202      	movs	r2, #2
 800871c:	9201      	str	r2, [sp, #4]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	4623      	mov	r3, r4
 8008722:	4602      	mov	r2, r0
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f001 fed9 	bl	800a4dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	7919      	ldrb	r1, [r3, #4]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	79d8      	ldrb	r0, [r3, #7]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	8952      	ldrh	r2, [r2, #10]
 8008742:	9202      	str	r2, [sp, #8]
 8008744:	2202      	movs	r2, #2
 8008746:	9201      	str	r2, [sp, #4]
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	4623      	mov	r3, r4
 800874c:	4602      	mov	r2, r0
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fec4 	bl	800a4dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	791b      	ldrb	r3, [r3, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f007 f9ed 	bl	800fb3c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	795b      	ldrb	r3, [r3, #5]
 8008766:	2200      	movs	r2, #0
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f007 f9e6 	bl	800fb3c <USBH_LL_SetToggle>

  return USBH_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	bd90      	pop	{r4, r7, pc}

0800877a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	795b      	ldrb	r3, [r3, #5]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00e      	beq.n	80087b2 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	795b      	ldrb	r3, [r3, #5]
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 febd 	bl	800a51a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	795b      	ldrb	r3, [r3, #5]
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 fee8 	bl	800a57c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	791b      	ldrb	r3, [r3, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00e      	beq.n	80087d8 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	791b      	ldrb	r3, [r3, #4]
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 feaa 	bl	800a51a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	791b      	ldrb	r3, [r3, #4]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 fed5 	bl	800a57c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00b      	beq.n	80087fc <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f007 fa99 	bl	800fd24 <free>
    phost->pActiveClass->pData = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f8:	2200      	movs	r2, #0
 80087fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	7b9b      	ldrb	r3, [r3, #14]
 8008820:	2b03      	cmp	r3, #3
 8008822:	d041      	beq.n	80088a8 <USBH_MSC_ClassRequest+0xa2>
 8008824:	2b03      	cmp	r3, #3
 8008826:	dc4b      	bgt.n	80088c0 <USBH_MSC_ClassRequest+0xba>
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <USBH_MSC_ClassRequest+0x2a>
 800882c:	2b02      	cmp	r3, #2
 800882e:	d147      	bne.n	80088c0 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fcf0 	bl	800921a <USBH_MSC_BOT_REQ_GetMaxLUN>
 800883a:	4603      	mov	r3, r0
 800883c:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	2b03      	cmp	r3, #3
 8008842:	d104      	bne.n	800884e <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d137      	bne.n	80088c4 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b02      	cmp	r3, #2
 800885a:	d804      	bhi.n	8008866 <USBH_MSC_ClassRequest+0x60>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	3301      	adds	r3, #1
 8008862:	b2da      	uxtb	r2, r3
 8008864:	e000      	b.n	8008868 <USBH_MSC_ClassRequest+0x62>
 8008866:	2202      	movs	r2, #2
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800886c:	2300      	movs	r3, #0
 800886e:	73bb      	strb	r3, [r7, #14]
 8008870:	e014      	b.n	800889c <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	2134      	movs	r1, #52	; 0x34
 8008878:	fb01 f303 	mul.w	r3, r1, r3
 800887c:	4413      	add	r3, r2
 800887e:	3392      	adds	r3, #146	; 0x92
 8008880:	2202      	movs	r2, #2
 8008882:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	2134      	movs	r1, #52	; 0x34
 800888a:	fb01 f303 	mul.w	r3, r1, r3
 800888e:	4413      	add	r3, r2
 8008890:	33c1      	adds	r3, #193	; 0xc1
 8008892:	2200      	movs	r2, #0
 8008894:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	3301      	adds	r3, #1
 800889a:	73bb      	strb	r3, [r7, #14]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	7bba      	ldrb	r2, [r7, #14]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d3e5      	bcc.n	8008872 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80088a6:	e00d      	b.n	80088c4 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80088a8:	2100      	movs	r1, #0
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 fba0 	bl	8009ff0 <USBH_ClrFeature>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d108      	bne.n	80088c8 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	7bda      	ldrb	r2, [r3, #15]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	739a      	strb	r2, [r3, #14]
      }
      break;
 80088be:	e003      	b.n	80088c8 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80088c0:	bf00      	nop
 80088c2:	e002      	b.n	80088ca <USBH_MSC_ClassRequest+0xc4>
      break;
 80088c4:	bf00      	nop
 80088c6:	e000      	b.n	80088ca <USBH_MSC_ClassRequest+0xc4>
      break;
 80088c8:	bf00      	nop
  }

  return status;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80088e6:	2301      	movs	r3, #1
 80088e8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80088ea:	2301      	movs	r3, #1
 80088ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80088ee:	2301      	movs	r3, #1
 80088f0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	7b1b      	ldrb	r3, [r3, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <USBH_MSC_Process+0x2e>
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	f000 8271 	beq.w	8008de2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008900:	e272      	b.n	8008de8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	b29b      	uxth	r3, r3
 800890e:	429a      	cmp	r2, r3
 8008910:	f080 824f 	bcs.w	8008db2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800891a:	4619      	mov	r1, r3
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	2334      	movs	r3, #52	; 0x34
 8008920:	fb01 f303 	mul.w	r3, r1, r3
 8008924:	4413      	add	r3, r2
 8008926:	3391      	adds	r3, #145	; 0x91
 8008928:	2201      	movs	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008932:	4619      	mov	r1, r3
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	2334      	movs	r3, #52	; 0x34
 8008938:	fb01 f303 	mul.w	r3, r1, r3
 800893c:	4413      	add	r3, r2
 800893e:	3390      	adds	r3, #144	; 0x90
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b08      	cmp	r3, #8
 8008944:	f200 8243 	bhi.w	8008dce <USBH_MSC_Process+0x4fa>
 8008948:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <USBH_MSC_Process+0x7c>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	08008975 	.word	0x08008975
 8008954:	08008dcf 	.word	0x08008dcf
 8008958:	08008a3d 	.word	0x08008a3d
 800895c:	08008bc1 	.word	0x08008bc1
 8008960:	0800899b 	.word	0x0800899b
 8008964:	08008c8d 	.word	0x08008c8d
 8008968:	08008dcf 	.word	0x08008dcf
 800896c:	08008dcf 	.word	0x08008dcf
 8008970:	08008da1 	.word	0x08008da1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800897a:	4619      	mov	r1, r3
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	2334      	movs	r3, #52	; 0x34
 8008980:	fb01 f303 	mul.w	r3, r1, r3
 8008984:	4413      	add	r3, r2
 8008986:	3390      	adds	r3, #144	; 0x90
 8008988:	2204      	movs	r2, #4
 800898a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008998:	e222      	b.n	8008de0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089a0:	b2d9      	uxtb	r1, r3
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089a8:	461a      	mov	r2, r3
 80089aa:	2334      	movs	r3, #52	; 0x34
 80089ac:	fb02 f303 	mul.w	r3, r2, r3
 80089b0:	3398      	adds	r3, #152	; 0x98
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	4413      	add	r3, r2
 80089b6:	3307      	adds	r3, #7
 80089b8:	461a      	mov	r2, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 ff6a 	bl	8009894 <USBH_MSC_SCSI_Inquiry>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10b      	bne.n	80089e2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089d0:	4619      	mov	r1, r3
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	2334      	movs	r3, #52	; 0x34
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	4413      	add	r3, r2
 80089dc:	3390      	adds	r3, #144	; 0x90
 80089de:	2202      	movs	r2, #2
 80089e0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d10c      	bne.n	8008a02 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089ee:	4619      	mov	r1, r3
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	2334      	movs	r3, #52	; 0x34
 80089f4:	fb01 f303 	mul.w	r3, r1, r3
 80089f8:	4413      	add	r3, r2
 80089fa:	3390      	adds	r3, #144	; 0x90
 80089fc:	2205      	movs	r2, #5
 80089fe:	701a      	strb	r2, [r3, #0]
            break;
 8008a00:	e1e7      	b.n	8008dd2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	f040 81e4 	bne.w	8008dd2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a10:	4619      	mov	r1, r3
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	2334      	movs	r3, #52	; 0x34
 8008a16:	fb01 f303 	mul.w	r3, r1, r3
 8008a1a:	4413      	add	r3, r2
 8008a1c:	3390      	adds	r3, #144	; 0x90
 8008a1e:	2201      	movs	r2, #1
 8008a20:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a28:	4619      	mov	r1, r3
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	2334      	movs	r3, #52	; 0x34
 8008a2e:	fb01 f303 	mul.w	r3, r1, r3
 8008a32:	4413      	add	r3, r2
 8008a34:	3391      	adds	r3, #145	; 0x91
 8008a36:	2202      	movs	r2, #2
 8008a38:	701a      	strb	r2, [r3, #0]
            break;
 8008a3a:	e1ca      	b.n	8008dd2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fe66 	bl	8009718 <USBH_MSC_SCSI_TestUnitReady>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d149      	bne.n	8008aea <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	2334      	movs	r3, #52	; 0x34
 8008a62:	fb01 f303 	mul.w	r3, r1, r3
 8008a66:	4413      	add	r3, r2
 8008a68:	3392      	adds	r3, #146	; 0x92
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00c      	beq.n	8008a8a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a76:	4619      	mov	r1, r3
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	2334      	movs	r3, #52	; 0x34
 8008a7c:	fb01 f303 	mul.w	r3, r1, r3
 8008a80:	4413      	add	r3, r2
 8008a82:	33c1      	adds	r3, #193	; 0xc1
 8008a84:	2201      	movs	r2, #1
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	e00b      	b.n	8008aa2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a90:	4619      	mov	r1, r3
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	2334      	movs	r3, #52	; 0x34
 8008a96:	fb01 f303 	mul.w	r3, r1, r3
 8008a9a:	4413      	add	r3, r2
 8008a9c:	33c1      	adds	r3, #193	; 0xc1
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	2334      	movs	r3, #52	; 0x34
 8008aae:	fb01 f303 	mul.w	r3, r1, r3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	3390      	adds	r3, #144	; 0x90
 8008ab6:	2203      	movs	r2, #3
 8008ab8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	2334      	movs	r3, #52	; 0x34
 8008ac6:	fb01 f303 	mul.w	r3, r1, r3
 8008aca:	4413      	add	r3, r2
 8008acc:	3391      	adds	r3, #145	; 0x91
 8008ace:	2200      	movs	r2, #0
 8008ad0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ad8:	4619      	mov	r1, r3
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	2334      	movs	r3, #52	; 0x34
 8008ade:	fb01 f303 	mul.w	r3, r1, r3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3392      	adds	r3, #146	; 0x92
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d14a      	bne.n	8008b86 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008af6:	4619      	mov	r1, r3
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	2334      	movs	r3, #52	; 0x34
 8008afc:	fb01 f303 	mul.w	r3, r1, r3
 8008b00:	4413      	add	r3, r2
 8008b02:	3392      	adds	r3, #146	; 0x92
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d00c      	beq.n	8008b24 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b10:	4619      	mov	r1, r3
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	2334      	movs	r3, #52	; 0x34
 8008b16:	fb01 f303 	mul.w	r3, r1, r3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	33c1      	adds	r3, #193	; 0xc1
 8008b1e:	2201      	movs	r2, #1
 8008b20:	701a      	strb	r2, [r3, #0]
 8008b22:	e00b      	b.n	8008b3c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	2334      	movs	r3, #52	; 0x34
 8008b30:	fb01 f303 	mul.w	r3, r1, r3
 8008b34:	4413      	add	r3, r2
 8008b36:	33c1      	adds	r3, #193	; 0xc1
 8008b38:	2200      	movs	r2, #0
 8008b3a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b42:	4619      	mov	r1, r3
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	2334      	movs	r3, #52	; 0x34
 8008b48:	fb01 f303 	mul.w	r3, r1, r3
 8008b4c:	4413      	add	r3, r2
 8008b4e:	3390      	adds	r3, #144	; 0x90
 8008b50:	2205      	movs	r2, #5
 8008b52:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	2334      	movs	r3, #52	; 0x34
 8008b60:	fb01 f303 	mul.w	r3, r1, r3
 8008b64:	4413      	add	r3, r2
 8008b66:	3391      	adds	r3, #145	; 0x91
 8008b68:	2201      	movs	r2, #1
 8008b6a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b72:	4619      	mov	r1, r3
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	2334      	movs	r3, #52	; 0x34
 8008b78:	fb01 f303 	mul.w	r3, r1, r3
 8008b7c:	4413      	add	r3, r2
 8008b7e:	3392      	adds	r3, #146	; 0x92
 8008b80:	2202      	movs	r2, #2
 8008b82:	701a      	strb	r2, [r3, #0]
            break;
 8008b84:	e127      	b.n	8008dd6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	f040 8124 	bne.w	8008dd6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b94:	4619      	mov	r1, r3
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	2334      	movs	r3, #52	; 0x34
 8008b9a:	fb01 f303 	mul.w	r3, r1, r3
 8008b9e:	4413      	add	r3, r2
 8008ba0:	3390      	adds	r3, #144	; 0x90
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bac:	4619      	mov	r1, r3
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	2334      	movs	r3, #52	; 0x34
 8008bb2:	fb01 f303 	mul.w	r3, r1, r3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	3391      	adds	r3, #145	; 0x91
 8008bba:	2202      	movs	r2, #2
 8008bbc:	701a      	strb	r2, [r3, #0]
            break;
 8008bbe:	e10a      	b.n	8008dd6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bc6:	b2d9      	uxtb	r1, r3
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bce:	461a      	mov	r2, r3
 8008bd0:	2334      	movs	r3, #52	; 0x34
 8008bd2:	fb02 f303 	mul.w	r3, r2, r3
 8008bd6:	3390      	adds	r3, #144	; 0x90
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	4413      	add	r3, r2
 8008bdc:	3304      	adds	r3, #4
 8008bde:	461a      	mov	r2, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fddc 	bl	800979e <USBH_MSC_SCSI_ReadCapacity>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d120      	bne.n	8008c32 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	2334      	movs	r3, #52	; 0x34
 8008bfc:	fb01 f303 	mul.w	r3, r1, r3
 8008c00:	4413      	add	r3, r2
 8008c02:	3390      	adds	r3, #144	; 0x90
 8008c04:	2201      	movs	r2, #1
 8008c06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c0e:	4619      	mov	r1, r3
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	2334      	movs	r3, #52	; 0x34
 8008c14:	fb01 f303 	mul.w	r3, r1, r3
 8008c18:	4413      	add	r3, r2
 8008c1a:	3391      	adds	r3, #145	; 0x91
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c26:	3301      	adds	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008c30:	e0d3      	b.n	8008dda <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d10c      	bne.n	8008c52 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c3e:	4619      	mov	r1, r3
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	2334      	movs	r3, #52	; 0x34
 8008c44:	fb01 f303 	mul.w	r3, r1, r3
 8008c48:	4413      	add	r3, r2
 8008c4a:	3390      	adds	r3, #144	; 0x90
 8008c4c:	2205      	movs	r2, #5
 8008c4e:	701a      	strb	r2, [r3, #0]
            break;
 8008c50:	e0c3      	b.n	8008dda <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	f040 80c0 	bne.w	8008dda <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c60:	4619      	mov	r1, r3
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	2334      	movs	r3, #52	; 0x34
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	3390      	adds	r3, #144	; 0x90
 8008c6e:	2201      	movs	r2, #1
 8008c70:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c78:	4619      	mov	r1, r3
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	2334      	movs	r3, #52	; 0x34
 8008c7e:	fb01 f303 	mul.w	r3, r1, r3
 8008c82:	4413      	add	r3, r2
 8008c84:	3391      	adds	r3, #145	; 0x91
 8008c86:	2202      	movs	r2, #2
 8008c88:	701a      	strb	r2, [r3, #0]
            break;
 8008c8a:	e0a6      	b.n	8008dda <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c92:	b2d9      	uxtb	r1, r3
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	2334      	movs	r3, #52	; 0x34
 8008c9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ca2:	3398      	adds	r3, #152	; 0x98
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	3304      	adds	r3, #4
 8008caa:	461a      	mov	r2, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fe96 	bl	80099de <USBH_MSC_SCSI_RequestSense>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d145      	bne.n	8008d48 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	2334      	movs	r3, #52	; 0x34
 8008cc8:	fb01 f303 	mul.w	r3, r1, r3
 8008ccc:	4413      	add	r3, r2
 8008cce:	339c      	adds	r3, #156	; 0x9c
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2b06      	cmp	r3, #6
 8008cd4:	d00c      	beq.n	8008cf0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cdc:	4619      	mov	r1, r3
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	2334      	movs	r3, #52	; 0x34
 8008ce2:	fb01 f303 	mul.w	r3, r1, r3
 8008ce6:	4413      	add	r3, r2
 8008ce8:	339c      	adds	r3, #156	; 0x9c
 8008cea:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d117      	bne.n	8008d20 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	f242 720f 	movw	r2, #9999	; 0x270f
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d80c      	bhi.n	8008d20 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	2334      	movs	r3, #52	; 0x34
 8008d12:	fb01 f303 	mul.w	r3, r1, r3
 8008d16:	4413      	add	r3, r2
 8008d18:	3390      	adds	r3, #144	; 0x90
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	701a      	strb	r2, [r3, #0]
                  break;
 8008d1e:	e05f      	b.n	8008de0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d26:	4619      	mov	r1, r3
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	2334      	movs	r3, #52	; 0x34
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	4413      	add	r3, r2
 8008d32:	3390      	adds	r3, #144	; 0x90
 8008d34:	2201      	movs	r2, #1
 8008d36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d3e:	3301      	adds	r3, #1
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d10c      	bne.n	8008d68 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d54:	4619      	mov	r1, r3
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	2334      	movs	r3, #52	; 0x34
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	4413      	add	r3, r2
 8008d60:	3390      	adds	r3, #144	; 0x90
 8008d62:	2208      	movs	r2, #8
 8008d64:	701a      	strb	r2, [r3, #0]
            break;
 8008d66:	e03a      	b.n	8008dde <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d137      	bne.n	8008dde <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d74:	4619      	mov	r1, r3
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	2334      	movs	r3, #52	; 0x34
 8008d7a:	fb01 f303 	mul.w	r3, r1, r3
 8008d7e:	4413      	add	r3, r2
 8008d80:	3390      	adds	r3, #144	; 0x90
 8008d82:	2201      	movs	r2, #1
 8008d84:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	2334      	movs	r3, #52	; 0x34
 8008d92:	fb01 f303 	mul.w	r3, r1, r3
 8008d96:	4413      	add	r3, r2
 8008d98:	3391      	adds	r3, #145	; 0x91
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	701a      	strb	r2, [r3, #0]
            break;
 8008d9e:	e01e      	b.n	8008dde <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008da6:	3301      	adds	r3, #1
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008db0:	e016      	b.n	8008de0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008dc6:	2102      	movs	r1, #2
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	4798      	blx	r3
      break;
 8008dcc:	e00c      	b.n	8008de8 <USBH_MSC_Process+0x514>
            break;
 8008dce:	bf00      	nop
 8008dd0:	e00a      	b.n	8008de8 <USBH_MSC_Process+0x514>
            break;
 8008dd2:	bf00      	nop
 8008dd4:	e008      	b.n	8008de8 <USBH_MSC_Process+0x514>
            break;
 8008dd6:	bf00      	nop
 8008dd8:	e006      	b.n	8008de8 <USBH_MSC_Process+0x514>
            break;
 8008dda:	bf00      	nop
 8008ddc:	e004      	b.n	8008de8 <USBH_MSC_Process+0x514>
            break;
 8008dde:	bf00      	nop
      break;
 8008de0:	e002      	b.n	8008de8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	75fb      	strb	r3, [r7, #23]
      break;
 8008de6:	bf00      	nop
  }
  return error;
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop

08008df4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b088      	sub	sp, #32
 8008e0e:	af02      	add	r7, sp, #8
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008e20:	2301      	movs	r3, #1
 8008e22:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008e24:	2301      	movs	r3, #1
 8008e26:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	2134      	movs	r1, #52	; 0x34
 8008e2e:	fb01 f303 	mul.w	r3, r1, r3
 8008e32:	4413      	add	r3, r2
 8008e34:	3390      	adds	r3, #144	; 0x90
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	2b07      	cmp	r3, #7
 8008e3a:	d03c      	beq.n	8008eb6 <USBH_MSC_RdWrProcess+0xac>
 8008e3c:	2b07      	cmp	r3, #7
 8008e3e:	f300 80a7 	bgt.w	8008f90 <USBH_MSC_RdWrProcess+0x186>
 8008e42:	2b05      	cmp	r3, #5
 8008e44:	d06c      	beq.n	8008f20 <USBH_MSC_RdWrProcess+0x116>
 8008e46:	2b06      	cmp	r3, #6
 8008e48:	f040 80a2 	bne.w	8008f90 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008e4c:	78f9      	ldrb	r1, [r7, #3]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	2300      	movs	r3, #0
 8008e54:	2200      	movs	r2, #0
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fea5 	bl	8009ba6 <USBH_MSC_SCSI_Read>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10b      	bne.n	8008e7e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	2134      	movs	r1, #52	; 0x34
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	4413      	add	r3, r2
 8008e72:	3390      	adds	r3, #144	; 0x90
 8008e74:	2201      	movs	r2, #1
 8008e76:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e7c:	e08a      	b.n	8008f94 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d109      	bne.n	8008e98 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	2134      	movs	r1, #52	; 0x34
 8008e8a:	fb01 f303 	mul.w	r3, r1, r3
 8008e8e:	4413      	add	r3, r2
 8008e90:	3390      	adds	r3, #144	; 0x90
 8008e92:	2205      	movs	r2, #5
 8008e94:	701a      	strb	r2, [r3, #0]
      break;
 8008e96:	e07d      	b.n	8008f94 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d17a      	bne.n	8008f94 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008e9e:	78fb      	ldrb	r3, [r7, #3]
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	2134      	movs	r1, #52	; 0x34
 8008ea4:	fb01 f303 	mul.w	r3, r1, r3
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3390      	adds	r3, #144	; 0x90
 8008eac:	2208      	movs	r2, #8
 8008eae:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8008eb4:	e06e      	b.n	8008f94 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008eb6:	78f9      	ldrb	r1, [r7, #3]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fe05 	bl	8009ad0 <USBH_MSC_SCSI_Write>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10b      	bne.n	8008ee8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	2134      	movs	r1, #52	; 0x34
 8008ed6:	fb01 f303 	mul.w	r3, r1, r3
 8008eda:	4413      	add	r3, r2
 8008edc:	3390      	adds	r3, #144	; 0x90
 8008ede:	2201      	movs	r2, #1
 8008ee0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ee6:	e057      	b.n	8008f98 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d109      	bne.n	8008f02 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008eee:	78fb      	ldrb	r3, [r7, #3]
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	2134      	movs	r1, #52	; 0x34
 8008ef4:	fb01 f303 	mul.w	r3, r1, r3
 8008ef8:	4413      	add	r3, r2
 8008efa:	3390      	adds	r3, #144	; 0x90
 8008efc:	2205      	movs	r2, #5
 8008efe:	701a      	strb	r2, [r3, #0]
      break;
 8008f00:	e04a      	b.n	8008f98 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d147      	bne.n	8008f98 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	2134      	movs	r1, #52	; 0x34
 8008f0e:	fb01 f303 	mul.w	r3, r1, r3
 8008f12:	4413      	add	r3, r2
 8008f14:	3390      	adds	r3, #144	; 0x90
 8008f16:	2208      	movs	r2, #8
 8008f18:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f1e:	e03b      	b.n	8008f98 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	2234      	movs	r2, #52	; 0x34
 8008f24:	fb02 f303 	mul.w	r3, r2, r3
 8008f28:	3398      	adds	r3, #152	; 0x98
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	1d1a      	adds	r2, r3, #4
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fd52 	bl	80099de <USBH_MSC_SCSI_RequestSense>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d113      	bne.n	8008f6c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	2134      	movs	r1, #52	; 0x34
 8008f4a:	fb01 f303 	mul.w	r3, r1, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	3390      	adds	r3, #144	; 0x90
 8008f52:	2201      	movs	r2, #1
 8008f54:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008f56:	78fb      	ldrb	r3, [r7, #3]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	2134      	movs	r1, #52	; 0x34
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	4413      	add	r3, r2
 8008f62:	3391      	adds	r3, #145	; 0x91
 8008f64:	2202      	movs	r2, #2
 8008f66:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d014      	beq.n	8008f9c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d111      	bne.n	8008f9c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	2134      	movs	r1, #52	; 0x34
 8008f7e:	fb01 f303 	mul.w	r3, r1, r3
 8008f82:	4413      	add	r3, r2
 8008f84:	3390      	adds	r3, #144	; 0x90
 8008f86:	2208      	movs	r2, #8
 8008f88:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f8e:	e005      	b.n	8008f9c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008f90:	bf00      	nop
 8008f92:	e004      	b.n	8008f9e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008f94:	bf00      	nop
 8008f96:	e002      	b.n	8008f9e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008f98:	bf00      	nop
 8008f9a:	e000      	b.n	8008f9e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008f9c:	bf00      	nop

  }
  return error;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b0b      	cmp	r3, #11
 8008fc6:	d10c      	bne.n	8008fe2 <USBH_MSC_UnitIsReady+0x3a>
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	2134      	movs	r1, #52	; 0x34
 8008fce:	fb01 f303 	mul.w	r3, r1, r3
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3391      	adds	r3, #145	; 0x91
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d102      	bne.n	8008fe2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	73fb      	strb	r3, [r7, #15]
 8008fe0:	e001      	b.n	8008fe6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b0b      	cmp	r3, #11
 8009014:	d10d      	bne.n	8009032 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	2234      	movs	r2, #52	; 0x34
 800901a:	fb02 f303 	mul.w	r3, r2, r3
 800901e:	3390      	adds	r3, #144	; 0x90
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	4413      	add	r3, r2
 8009024:	2234      	movs	r2, #52	; 0x34
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f006 fe83 	bl	800fd34 <memcpy>
    return USBH_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	e000      	b.n	8009034 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009032:	2302      	movs	r3, #2
  }
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b088      	sub	sp, #32
 8009040:	af02      	add	r7, sp, #8
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	607a      	str	r2, [r7, #4]
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	460b      	mov	r3, r1
 800904a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00e      	beq.n	8009080 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009068:	2b0b      	cmp	r3, #11
 800906a:	d109      	bne.n	8009080 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	2134      	movs	r1, #52	; 0x34
 8009072:	fb01 f303 	mul.w	r3, r1, r3
 8009076:	4413      	add	r3, r2
 8009078:	3390      	adds	r3, #144	; 0x90
 800907a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800907c:	2b01      	cmp	r3, #1
 800907e:	d001      	beq.n	8009084 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009080:	2302      	movs	r3, #2
 8009082:	e040      	b.n	8009106 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2206      	movs	r2, #6
 8009088:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800908a:	7afb      	ldrb	r3, [r7, #11]
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	2134      	movs	r1, #52	; 0x34
 8009090:	fb01 f303 	mul.w	r3, r1, r3
 8009094:	4413      	add	r3, r2
 8009096:	3390      	adds	r3, #144	; 0x90
 8009098:	2206      	movs	r2, #6
 800909a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800909c:	7afb      	ldrb	r3, [r7, #11]
 800909e:	b29a      	uxth	r2, r3
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80090a6:	7af9      	ldrb	r1, [r7, #11]
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 fd78 	bl	8009ba6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090bc:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80090be:	e016      	b.n	80090ee <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	1ad2      	subs	r2, r2, r3
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80090d0:	fb01 f303 	mul.w	r3, r1, r3
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d805      	bhi.n	80090e4 <USBH_MSC_Read+0xa8>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d104      	bne.n	80090ee <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2201      	movs	r2, #1
 80090e8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80090ea:	2302      	movs	r3, #2
 80090ec:	e00b      	b.n	8009106 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	4619      	mov	r1, r3
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff fe89 	bl	8008e0a <USBH_MSC_RdWrProcess>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d0e0      	beq.n	80090c0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2201      	movs	r2, #1
 8009102:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b088      	sub	sp, #32
 8009112:	af02      	add	r7, sp, #8
 8009114:	60f8      	str	r0, [r7, #12]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
 800911a:	460b      	mov	r3, r1
 800911c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00e      	beq.n	8009152 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800913a:	2b0b      	cmp	r3, #11
 800913c:	d109      	bne.n	8009152 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800913e:	7afb      	ldrb	r3, [r7, #11]
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	2134      	movs	r1, #52	; 0x34
 8009144:	fb01 f303 	mul.w	r3, r1, r3
 8009148:	4413      	add	r3, r2
 800914a:	3390      	adds	r3, #144	; 0x90
 800914c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800914e:	2b01      	cmp	r3, #1
 8009150:	d001      	beq.n	8009156 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009152:	2302      	movs	r3, #2
 8009154:	e040      	b.n	80091d8 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2207      	movs	r2, #7
 800915a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800915c:	7afb      	ldrb	r3, [r7, #11]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	2134      	movs	r1, #52	; 0x34
 8009162:	fb01 f303 	mul.w	r3, r1, r3
 8009166:	4413      	add	r3, r2
 8009168:	3390      	adds	r3, #144	; 0x90
 800916a:	2207      	movs	r2, #7
 800916c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800916e:	7afb      	ldrb	r3, [r7, #11]
 8009170:	b29a      	uxth	r2, r3
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009178:	7af9      	ldrb	r1, [r7, #11]
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f000 fca4 	bl	8009ad0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800918e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009190:	e016      	b.n	80091c0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	1ad2      	subs	r2, r2, r3
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	f242 7110 	movw	r1, #10000	; 0x2710
 80091a2:	fb01 f303 	mul.w	r3, r1, r3
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d805      	bhi.n	80091b6 <USBH_MSC_Write+0xa8>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d104      	bne.n	80091c0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2201      	movs	r2, #1
 80091ba:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80091bc:	2302      	movs	r3, #2
 80091be:	e00b      	b.n	80091d8 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80091c0:	7afb      	ldrb	r3, [r7, #11]
 80091c2:	4619      	mov	r1, r3
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f7ff fe20 	bl	8008e0a <USBH_MSC_RdWrProcess>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d0e0      	beq.n	8009192 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2201      	movs	r2, #1
 80091d4:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2221      	movs	r2, #33	; 0x21
 80091ec:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	22ff      	movs	r2, #255	; 0xff
 80091f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009206:	2200      	movs	r2, #0
 8009208:	2100      	movs	r1, #0
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 ff14 	bl	800a038 <USBH_CtlReq>
 8009210:	4603      	mov	r3, r0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	22a1      	movs	r2, #161	; 0xa1
 8009228:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	22fe      	movs	r2, #254	; 0xfe
 800922e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009242:	2201      	movs	r2, #1
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fef6 	bl	800a038 <USBH_CtlReq>
 800924c:	4603      	mov	r3, r0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4a09      	ldr	r2, [pc, #36]	; (8009294 <USBH_MSC_BOT_Init+0x3c>)
 800926e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4a09      	ldr	r2, [pc, #36]	; (8009298 <USBH_MSC_BOT_Init+0x40>)
 8009274:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	43425355 	.word	0x43425355
 8009298:	20304050 	.word	0x20304050

0800929c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80092a8:	2301      	movs	r3, #1
 80092aa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80092ac:	2301      	movs	r3, #1
 80092ae:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80092b0:	2301      	movs	r3, #1
 80092b2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80092b4:	2300      	movs	r3, #0
 80092b6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092cc:	3b01      	subs	r3, #1
 80092ce:	2b0a      	cmp	r3, #10
 80092d0:	f200 819e 	bhi.w	8009610 <USBH_MSC_BOT_Process+0x374>
 80092d4:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <USBH_MSC_BOT_Process+0x40>)
 80092d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092da:	bf00      	nop
 80092dc:	08009309 	.word	0x08009309
 80092e0:	08009331 	.word	0x08009331
 80092e4:	0800939b 	.word	0x0800939b
 80092e8:	080093b9 	.word	0x080093b9
 80092ec:	0800943d 	.word	0x0800943d
 80092f0:	0800945f 	.word	0x0800945f
 80092f4:	080094f7 	.word	0x080094f7
 80092f8:	08009513 	.word	0x08009513
 80092fc:	08009565 	.word	0x08009565
 8009300:	08009595 	.word	0x08009595
 8009304:	080095f7 	.word	0x080095f7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	78fa      	ldrb	r2, [r7, #3]
 800930c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	795b      	ldrb	r3, [r3, #5]
 8009322:	2201      	movs	r2, #1
 8009324:	9200      	str	r2, [sp, #0]
 8009326:	221f      	movs	r2, #31
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 f894 	bl	800a456 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800932e:	e17e      	b.n	800962e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	795b      	ldrb	r3, [r3, #5]
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f006 fbd6 	bl	800fae8 <USBH_LL_GetURBState>
 800933c:	4603      	mov	r3, r0
 800933e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009340:	7d3b      	ldrb	r3, [r7, #20]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d118      	bne.n	8009378 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00f      	beq.n	800936e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009354:	b25b      	sxtb	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	da04      	bge.n	8009364 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2203      	movs	r2, #3
 800935e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009362:	e157      	b.n	8009614 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2205      	movs	r2, #5
 8009368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800936c:	e152      	b.n	8009614 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2207      	movs	r2, #7
 8009372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009376:	e14d      	b.n	8009614 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009378:	7d3b      	ldrb	r3, [r7, #20]
 800937a:	2b02      	cmp	r3, #2
 800937c:	d104      	bne.n	8009388 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009386:	e145      	b.n	8009614 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009388:	7d3b      	ldrb	r3, [r7, #20]
 800938a:	2b05      	cmp	r3, #5
 800938c:	f040 8142 	bne.w	8009614 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	220a      	movs	r2, #10
 8009394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009398:	e13c      	b.n	8009614 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	895a      	ldrh	r2, [r3, #10]
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	791b      	ldrb	r3, [r3, #4]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 f879 	bl	800a4a0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	2204      	movs	r2, #4
 80093b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80093b6:	e13a      	b.n	800962e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	791b      	ldrb	r3, [r3, #4]
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f006 fb92 	bl	800fae8 <USBH_LL_GetURBState>
 80093c4:	4603      	mov	r3, r0
 80093c6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80093c8:	7d3b      	ldrb	r3, [r7, #20]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d12d      	bne.n	800942a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	8952      	ldrh	r2, [r2, #10]
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d910      	bls.n	80093fc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	8952      	ldrh	r2, [r2, #10]
 80093e4:	441a      	add	r2, r3
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	8952      	ldrh	r2, [r2, #10]
 80093f4:	1a9a      	subs	r2, r3, r2
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80093fa:	e002      	b.n	8009402 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2200      	movs	r2, #0
 8009400:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	895a      	ldrh	r2, [r3, #10]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	791b      	ldrb	r3, [r3, #4]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 f841 	bl	800a4a0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800941e:	e0fb      	b.n	8009618 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2207      	movs	r2, #7
 8009424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009428:	e0f6      	b.n	8009618 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800942a:	7d3b      	ldrb	r3, [r7, #20]
 800942c:	2b05      	cmp	r3, #5
 800942e:	f040 80f3 	bne.w	8009618 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	2209      	movs	r2, #9
 8009436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800943a:	e0ed      	b.n	8009618 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	891a      	ldrh	r2, [r3, #8]
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	795b      	ldrb	r3, [r3, #5]
 800944a:	2001      	movs	r0, #1
 800944c:	9000      	str	r0, [sp, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f001 f801 	bl	800a456 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2206      	movs	r2, #6
 8009458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800945c:	e0e7      	b.n	800962e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	795b      	ldrb	r3, [r3, #5]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f006 fb3f 	bl	800fae8 <USBH_LL_GetURBState>
 800946a:	4603      	mov	r3, r0
 800946c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800946e:	7d3b      	ldrb	r3, [r7, #20]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d12f      	bne.n	80094d4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	8912      	ldrh	r2, [r2, #8]
 800947c:	4293      	cmp	r3, r2
 800947e:	d910      	bls.n	80094a2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	8912      	ldrh	r2, [r2, #8]
 800948a:	441a      	add	r2, r3
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	8912      	ldrh	r2, [r2, #8]
 800949a:	1a9a      	subs	r2, r3, r2
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	65da      	str	r2, [r3, #92]	; 0x5c
 80094a0:	e002      	b.n	80094a8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	2200      	movs	r2, #0
 80094a6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00c      	beq.n	80094ca <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	891a      	ldrh	r2, [r3, #8]
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	795b      	ldrb	r3, [r3, #5]
 80094be:	2001      	movs	r0, #1
 80094c0:	9000      	str	r0, [sp, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 ffc7 	bl	800a456 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80094c8:	e0a8      	b.n	800961c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	2207      	movs	r2, #7
 80094ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094d2:	e0a3      	b.n	800961c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094d4:	7d3b      	ldrb	r3, [r7, #20]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d104      	bne.n	80094e4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	2205      	movs	r2, #5
 80094de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094e2:	e09b      	b.n	800961c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80094e4:	7d3b      	ldrb	r3, [r7, #20]
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	f040 8098 	bne.w	800961c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	220a      	movs	r2, #10
 80094f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094f4:	e092      	b.n	800961c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	791b      	ldrb	r3, [r3, #4]
 8009500:	220d      	movs	r2, #13
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 ffcc 	bl	800a4a0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	2208      	movs	r2, #8
 800950c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009510:	e08d      	b.n	800962e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	791b      	ldrb	r3, [r3, #4]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f006 fae5 	bl	800fae8 <USBH_LL_GetURBState>
 800951e:	4603      	mov	r3, r0
 8009520:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009522:	7d3b      	ldrb	r3, [r7, #20]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d115      	bne.n	8009554 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f8a9 	bl	8009690 <USBH_MSC_DecodeCSW>
 800953e:	4603      	mov	r3, r0
 8009540:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009542:	7d7b      	ldrb	r3, [r7, #21]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d102      	bne.n	800954e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800954c:	e068      	b.n	8009620 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800954e:	2302      	movs	r3, #2
 8009550:	75fb      	strb	r3, [r7, #23]
      break;
 8009552:	e065      	b.n	8009620 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009554:	7d3b      	ldrb	r3, [r7, #20]
 8009556:	2b05      	cmp	r3, #5
 8009558:	d162      	bne.n	8009620 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2209      	movs	r2, #9
 800955e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009562:	e05d      	b.n	8009620 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	2200      	movs	r2, #0
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f864 	bl	8009638 <USBH_MSC_BOT_Abort>
 8009570:	4603      	mov	r3, r0
 8009572:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009574:	7dbb      	ldrb	r3, [r7, #22]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d104      	bne.n	8009584 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2207      	movs	r2, #7
 800957e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009582:	e04f      	b.n	8009624 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009584:	7dbb      	ldrb	r3, [r7, #22]
 8009586:	2b04      	cmp	r3, #4
 8009588:	d14c      	bne.n	8009624 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	220b      	movs	r2, #11
 800958e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009592:	e047      	b.n	8009624 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	2201      	movs	r2, #1
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f84c 	bl	8009638 <USBH_MSC_BOT_Abort>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80095a4:	7dbb      	ldrb	r3, [r7, #22]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d11d      	bne.n	80095e6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	795b      	ldrb	r3, [r3, #5]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f006 faf3 	bl	800fb9c <USBH_LL_GetToggle>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	7959      	ldrb	r1, [r3, #5]
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	f1c3 0301 	rsb	r3, r3, #1
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	461a      	mov	r2, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f006 fab7 	bl	800fb3c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	791b      	ldrb	r3, [r3, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f006 fab0 	bl	800fb3c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	2209      	movs	r2, #9
 80095e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80095e4:	e020      	b.n	8009628 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80095e6:	7dbb      	ldrb	r3, [r7, #22]
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	d11d      	bne.n	8009628 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	220b      	movs	r2, #11
 80095f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095f4:	e018      	b.n	8009628 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7ff fdf2 	bl	80091e0 <USBH_MSC_BOT_REQ_Reset>
 80095fc:	4603      	mov	r3, r0
 80095fe:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d112      	bne.n	800962c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800960e:	e00d      	b.n	800962c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009610:	bf00      	nop
 8009612:	e00c      	b.n	800962e <USBH_MSC_BOT_Process+0x392>
      break;
 8009614:	bf00      	nop
 8009616:	e00a      	b.n	800962e <USBH_MSC_BOT_Process+0x392>
      break;
 8009618:	bf00      	nop
 800961a:	e008      	b.n	800962e <USBH_MSC_BOT_Process+0x392>
      break;
 800961c:	bf00      	nop
 800961e:	e006      	b.n	800962e <USBH_MSC_BOT_Process+0x392>
      break;
 8009620:	bf00      	nop
 8009622:	e004      	b.n	800962e <USBH_MSC_BOT_Process+0x392>
      break;
 8009624:	bf00      	nop
 8009626:	e002      	b.n	800962e <USBH_MSC_BOT_Process+0x392>
      break;
 8009628:	bf00      	nop
 800962a:	e000      	b.n	800962e <USBH_MSC_BOT_Process+0x392>
      break;
 800962c:	bf00      	nop
  }
  return status;
 800962e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
 8009644:	4613      	mov	r3, r2
 8009646:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009648:	2302      	movs	r3, #2
 800964a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009656:	78bb      	ldrb	r3, [r7, #2]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <USBH_MSC_BOT_Abort+0x2a>
 800965c:	2b01      	cmp	r3, #1
 800965e:	d009      	beq.n	8009674 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009660:	e011      	b.n	8009686 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	79db      	ldrb	r3, [r3, #7]
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fcc1 	bl	8009ff0 <USBH_ClrFeature>
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]
      break;
 8009672:	e008      	b.n	8009686 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	799b      	ldrb	r3, [r3, #6]
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fcb8 	bl	8009ff0 <USBH_ClrFeature>
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]
      break;
 8009684:	bf00      	nop
  }
  return status;
 8009686:	7bfb      	ldrb	r3, [r7, #15]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80096a2:	2301      	movs	r3, #1
 80096a4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	791b      	ldrb	r3, [r3, #4]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f006 f989 	bl	800f9c4 <USBH_LL_GetLastXferSize>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b0d      	cmp	r3, #13
 80096b6:	d002      	beq.n	80096be <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80096b8:	2302      	movs	r3, #2
 80096ba:	73fb      	strb	r3, [r7, #15]
 80096bc:	e024      	b.n	8009708 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096c2:	4a14      	ldr	r2, [pc, #80]	; (8009714 <USBH_MSC_DecodeCSW+0x84>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d11d      	bne.n	8009704 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d119      	bne.n	8009708 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]
 80096e2:	e011      	b.n	8009708 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d102      	bne.n	80096f4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80096ee:	2301      	movs	r3, #1
 80096f0:	73fb      	strb	r3, [r7, #15]
 80096f2:	e009      	b.n	8009708 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d104      	bne.n	8009708 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80096fe:	2302      	movs	r3, #2
 8009700:	73fb      	strb	r3, [r7, #15]
 8009702:	e001      	b.n	8009708 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009704:	2302      	movs	r3, #2
 8009706:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009708:	7bfb      	ldrb	r3, [r7, #15]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	53425355 	.word	0x53425355

08009718 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009724:	2302      	movs	r3, #2
 8009726:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009738:	2b01      	cmp	r3, #1
 800973a:	d002      	beq.n	8009742 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800973c:	2b02      	cmp	r3, #2
 800973e:	d021      	beq.n	8009784 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009740:	e028      	b.n	8009794 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2200      	movs	r2, #0
 8009746:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	220a      	movs	r2, #10
 8009754:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	3363      	adds	r3, #99	; 0x63
 800975c:	2210      	movs	r2, #16
 800975e:	2100      	movs	r1, #0
 8009760:	4618      	mov	r0, r3
 8009762:	f006 faf5 	bl	800fd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2202      	movs	r2, #2
 800977a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800977e:	2301      	movs	r3, #1
 8009780:	73fb      	strb	r3, [r7, #15]
      break;
 8009782:	e007      	b.n	8009794 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff fd87 	bl	800929c <USBH_MSC_BOT_Process>
 800978e:	4603      	mov	r3, r0
 8009790:	73fb      	strb	r3, [r7, #15]
      break;
 8009792:	bf00      	nop
  }

  return error;
 8009794:	7bfb      	ldrb	r3, [r7, #15]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b086      	sub	sp, #24
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	460b      	mov	r3, r1
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80097ac:	2301      	movs	r3, #1
 80097ae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d002      	beq.n	80097ca <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d027      	beq.n	8009818 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80097c8:	e05f      	b.n	800988a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2208      	movs	r2, #8
 80097ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2280      	movs	r2, #128	; 0x80
 80097d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	220a      	movs	r2, #10
 80097dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	3363      	adds	r3, #99	; 0x63
 80097e4:	2210      	movs	r2, #16
 80097e6:	2100      	movs	r1, #0
 80097e8:	4618      	mov	r0, r3
 80097ea:	f006 fab1 	bl	800fd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	2225      	movs	r2, #37	; 0x25
 80097f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2202      	movs	r2, #2
 8009802:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f103 0210 	add.w	r2, r3, #16
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009812:	2301      	movs	r3, #1
 8009814:	75fb      	strb	r3, [r7, #23]
      break;
 8009816:	e038      	b.n	800988a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	4619      	mov	r1, r3
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7ff fd3d 	bl	800929c <USBH_MSC_BOT_Process>
 8009822:	4603      	mov	r3, r0
 8009824:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009826:	7dfb      	ldrb	r3, [r7, #23]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d12d      	bne.n	8009888 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009832:	3303      	adds	r3, #3
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800983e:	3302      	adds	r3, #2
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800984c:	3301      	adds	r3, #1
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009852:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	061b      	lsls	r3, r3, #24
 800985e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800986a:	3307      	adds	r3, #7
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	b29a      	uxth	r2, r3
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009876:	3306      	adds	r3, #6
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	b29b      	uxth	r3, r3
 800987c:	021b      	lsls	r3, r3, #8
 800987e:	b29b      	uxth	r3, r3
 8009880:	4313      	orrs	r3, r2
 8009882:	b29a      	uxth	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	809a      	strh	r2, [r3, #4]
      break;
 8009888:	bf00      	nop
  }

  return error;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	460b      	mov	r3, r1
 800989e:	607a      	str	r2, [r7, #4]
 80098a0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80098a2:	2302      	movs	r3, #2
 80098a4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ac:	69db      	ldr	r3, [r3, #28]
 80098ae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d002      	beq.n	80098c0 <USBH_MSC_SCSI_Inquiry+0x2c>
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d03d      	beq.n	800993a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80098be:	e089      	b.n	80099d4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2224      	movs	r2, #36	; 0x24
 80098c4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2280      	movs	r2, #128	; 0x80
 80098ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	220a      	movs	r2, #10
 80098d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	3363      	adds	r3, #99	; 0x63
 80098da:	220a      	movs	r2, #10
 80098dc:	2100      	movs	r1, #0
 80098de:	4618      	mov	r0, r3
 80098e0:	f006 fa36 	bl	800fd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	2212      	movs	r2, #18
 80098e8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	015b      	lsls	r3, r3, #5
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	2224      	movs	r2, #36	; 0x24
 800990c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f103 0210 	add.w	r2, r3, #16
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009934:	2301      	movs	r3, #1
 8009936:	75fb      	strb	r3, [r7, #23]
      break;
 8009938:	e04c      	b.n	80099d4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800993a:	7afb      	ldrb	r3, [r7, #11]
 800993c:	4619      	mov	r1, r3
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f7ff fcac 	bl	800929c <USBH_MSC_BOT_Process>
 8009944:	4603      	mov	r3, r0
 8009946:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d141      	bne.n	80099d2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800994e:	2222      	movs	r2, #34	; 0x22
 8009950:	2100      	movs	r1, #0
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f006 f9fc 	bl	800fd50 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f003 031f 	and.w	r3, r3, #31
 8009964:	b2da      	uxtb	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	095b      	lsrs	r3, r3, #5
 8009974:	b2da      	uxtb	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009980:	3301      	adds	r3, #1
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	b25b      	sxtb	r3, r3
 8009986:	2b00      	cmp	r3, #0
 8009988:	da03      	bge.n	8009992 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	709a      	strb	r2, [r3, #2]
 8009990:	e002      	b.n	8009998 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	1cd8      	adds	r0, r3, #3
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099a2:	3308      	adds	r3, #8
 80099a4:	2208      	movs	r2, #8
 80099a6:	4619      	mov	r1, r3
 80099a8:	f006 f9c4 	bl	800fd34 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f103 000c 	add.w	r0, r3, #12
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099b8:	3310      	adds	r3, #16
 80099ba:	2210      	movs	r2, #16
 80099bc:	4619      	mov	r1, r3
 80099be:	f006 f9b9 	bl	800fd34 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	331d      	adds	r3, #29
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80099cc:	3220      	adds	r2, #32
 80099ce:	6812      	ldr	r2, [r2, #0]
 80099d0:	601a      	str	r2, [r3, #0]
      break;
 80099d2:	bf00      	nop
  }

  return error;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b086      	sub	sp, #24
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	460b      	mov	r3, r1
 80099e8:	607a      	str	r2, [r7, #4]
 80099ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80099ec:	2302      	movs	r3, #2
 80099ee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d002      	beq.n	8009a0a <USBH_MSC_SCSI_RequestSense+0x2c>
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d03d      	beq.n	8009a84 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009a08:	e05d      	b.n	8009ac6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	220e      	movs	r2, #14
 8009a0e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	2280      	movs	r2, #128	; 0x80
 8009a14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	220a      	movs	r2, #10
 8009a1c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	3363      	adds	r3, #99	; 0x63
 8009a24:	2210      	movs	r2, #16
 8009a26:	2100      	movs	r1, #0
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f006 f991 	bl	800fd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2203      	movs	r2, #3
 8009a32:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009a36:	7afb      	ldrb	r3, [r7, #11]
 8009a38:	015b      	lsls	r3, r3, #5
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	220e      	movs	r2, #14
 8009a56:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	f103 0210 	add.w	r2, r3, #16
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75fb      	strb	r3, [r7, #23]
      break;
 8009a82:	e020      	b.n	8009ac6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	4619      	mov	r1, r3
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f7ff fc07 	bl	800929c <USBH_MSC_BOT_Process>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d115      	bne.n	8009ac4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a9e:	3302      	adds	r3, #2
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	f003 030f 	and.w	r3, r3, #15
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab2:	7b1a      	ldrb	r2, [r3, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009abe:	7b5a      	ldrb	r2, [r3, #13]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	709a      	strb	r2, [r3, #2]
      break;
 8009ac4:	bf00      	nop
  }

  return error;
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	607a      	str	r2, [r7, #4]
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	460b      	mov	r3, r1
 8009ade:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aea:	69db      	ldr	r3, [r3, #28]
 8009aec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d002      	beq.n	8009afe <USBH_MSC_SCSI_Write+0x2e>
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d047      	beq.n	8009b8c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009afc:	e04e      	b.n	8009b9c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009b04:	461a      	mov	r2, r3
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	fb03 f202 	mul.w	r2, r3, r2
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	220a      	movs	r2, #10
 8009b1c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	3363      	adds	r3, #99	; 0x63
 8009b24:	2210      	movs	r2, #16
 8009b26:	2100      	movs	r1, #0
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f006 f911 	bl	800fd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	222a      	movs	r2, #42	; 0x2a
 8009b32:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009b36:	79fa      	ldrb	r2, [r7, #7]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009b3e:	79ba      	ldrb	r2, [r7, #6]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009b46:	797a      	ldrb	r2, [r7, #5]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009b4e:	1d3b      	adds	r3, r7, #4
 8009b50:	781a      	ldrb	r2, [r3, #0]
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009b58:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009b62:	f107 0320 	add.w	r3, r7, #32
 8009b66:	781a      	ldrb	r2, [r3, #0]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009b86:	2301      	movs	r3, #1
 8009b88:	75fb      	strb	r3, [r7, #23]
      break;
 8009b8a:	e007      	b.n	8009b9c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b8c:	7afb      	ldrb	r3, [r7, #11]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f7ff fb83 	bl	800929c <USBH_MSC_BOT_Process>
 8009b96:	4603      	mov	r3, r0
 8009b98:	75fb      	strb	r3, [r7, #23]
      break;
 8009b9a:	bf00      	nop
  }

  return error;
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b086      	sub	sp, #24
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	603b      	str	r3, [r7, #0]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d002      	beq.n	8009bd4 <USBH_MSC_SCSI_Read+0x2e>
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d047      	beq.n	8009c62 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009bd2:	e04e      	b.n	8009c72 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	fb03 f202 	mul.w	r2, r3, r2
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	2280      	movs	r2, #128	; 0x80
 8009bea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	220a      	movs	r2, #10
 8009bf2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	3363      	adds	r3, #99	; 0x63
 8009bfa:	2210      	movs	r2, #16
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f006 f8a6 	bl	800fd50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	2228      	movs	r2, #40	; 0x28
 8009c08:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009c0c:	79fa      	ldrb	r2, [r7, #7]
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009c14:	79ba      	ldrb	r2, [r7, #6]
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009c1c:	797a      	ldrb	r2, [r7, #5]
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009c24:	1d3b      	adds	r3, r7, #4
 8009c26:	781a      	ldrb	r2, [r3, #0]
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009c2e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009c38:	f107 0320 	add.w	r3, r7, #32
 8009c3c:	781a      	ldrb	r2, [r3, #0]
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c60:	e007      	b.n	8009c72 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009c62:	7afb      	ldrb	r3, [r7, #11]
 8009c64:	4619      	mov	r1, r3
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7ff fb18 	bl	800929c <USBH_MSC_BOT_Process>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c70:	bf00      	nop
  }

  return error;
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	4613      	mov	r3, r2
 8009c88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009c90:	2302      	movs	r3, #2
 8009c92:	e029      	b.n	8009ce8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	79fa      	ldrb	r2, [r7, #7]
 8009c98:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f81f 	bl	8009cf0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f005 fdfd 	bl	800f8e0 <USBH_LL_Init>

  return USBH_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	60fb      	str	r3, [r7, #12]
 8009d00:	e009      	b.n	8009d16 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	33e0      	adds	r3, #224	; 0xe0
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	3301      	adds	r3, #1
 8009d14:	60fb      	str	r3, [r7, #12]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b0e      	cmp	r3, #14
 8009d1a:	d9f2      	bls.n	8009d02 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e009      	b.n	8009d36 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3301      	adds	r3, #1
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d3c:	d3f1      	bcc.n	8009d22 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2240      	movs	r2, #64	; 0x40
 8009d62:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d016      	beq.n	8009dda <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10e      	bne.n	8009dd4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009dbc:	1c59      	adds	r1, r3, #1
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	33de      	adds	r3, #222	; 0xde
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	73fb      	strb	r3, [r7, #15]
 8009dd2:	e004      	b.n	8009dde <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	73fb      	strb	r3, [r7, #15]
 8009dd8:	e001      	b.n	8009dde <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009dda:	2302      	movs	r3, #2
 8009ddc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009e02:	78fa      	ldrb	r2, [r7, #3]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d204      	bcs.n	8009e12 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	78fa      	ldrb	r2, [r7, #3]
 8009e0c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009e10:	e001      	b.n	8009e16 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009e12:	2302      	movs	r3, #2
 8009e14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	4611      	mov	r1, r2
 8009e30:	461a      	mov	r2, r3
 8009e32:	4603      	mov	r3, r0
 8009e34:	70fb      	strb	r3, [r7, #3]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70bb      	strb	r3, [r7, #2]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009e42:	2300      	movs	r3, #0
 8009e44:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009e4c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009e4e:	e025      	b.n	8009e9c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
 8009e52:	221a      	movs	r2, #26
 8009e54:	fb02 f303 	mul.w	r3, r2, r3
 8009e58:	3308      	adds	r3, #8
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3302      	adds	r3, #2
 8009e60:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	795b      	ldrb	r3, [r3, #5]
 8009e66:	78fa      	ldrb	r2, [r7, #3]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d002      	beq.n	8009e72 <USBH_FindInterface+0x4e>
 8009e6c:	78fb      	ldrb	r3, [r7, #3]
 8009e6e:	2bff      	cmp	r3, #255	; 0xff
 8009e70:	d111      	bne.n	8009e96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009e76:	78ba      	ldrb	r2, [r7, #2]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d002      	beq.n	8009e82 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e7c:	78bb      	ldrb	r3, [r7, #2]
 8009e7e:	2bff      	cmp	r3, #255	; 0xff
 8009e80:	d109      	bne.n	8009e96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e86:	787a      	ldrb	r2, [r7, #1]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d002      	beq.n	8009e92 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e8c:	787b      	ldrb	r3, [r7, #1]
 8009e8e:	2bff      	cmp	r3, #255	; 0xff
 8009e90:	d101      	bne.n	8009e96 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	e006      	b.n	8009ea4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d9d6      	bls.n	8009e50 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009ea2:	23ff      	movs	r3, #255	; 0xff
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	371c      	adds	r7, #28
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f005 fd4d 	bl	800f958 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f005 fe24 	bl	800fb0e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009ee2:	bf00      	nop
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f804 	bl	8009f12 <USBH_HandleSof>
}
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b082      	sub	sp, #8
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b0b      	cmp	r3, #11
 8009f22:	d10a      	bne.n	8009f3a <USBH_HandleSof+0x28>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d005      	beq.n	8009f3a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	4798      	blx	r3
  }
}
 8009f3a:	bf00      	nop
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009f52:	bf00      	nop
}
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009f6e:	bf00      	nop
}
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b083      	sub	sp, #12
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f005 fce0 	bl	800f98e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	791b      	ldrb	r3, [r3, #4]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fad1 	bl	800a57c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	795b      	ldrb	r3, [r3, #5]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 facb 	bl	800a57c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	789b      	ldrb	r3, [r3, #2]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d10f      	bne.n	800a024 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a016:	78fb      	ldrb	r3, [r7, #3]
 800a018:	b29a      	uxth	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a024:	2200      	movs	r2, #0
 800a026:	2100      	movs	r1, #0
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f805 	bl	800a038 <USBH_CtlReq>
 800a02e:	4603      	mov	r3, r0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	4613      	mov	r3, r2
 800a044:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a046:	2301      	movs	r3, #1
 800a048:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	789b      	ldrb	r3, [r3, #2]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d002      	beq.n	800a058 <USBH_CtlReq+0x20>
 800a052:	2b02      	cmp	r3, #2
 800a054:	d00f      	beq.n	800a076 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a056:	e027      	b.n	800a0a8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	88fa      	ldrh	r2, [r7, #6]
 800a062:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2201      	movs	r2, #1
 800a068:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2202      	movs	r2, #2
 800a06e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a070:	2301      	movs	r3, #1
 800a072:	75fb      	strb	r3, [r7, #23]
      break;
 800a074:	e018      	b.n	800a0a8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 f81c 	bl	800a0b4 <USBH_HandleControl>
 800a07c:	4603      	mov	r3, r0
 800a07e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a080:	7dfb      	ldrb	r3, [r7, #23]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <USBH_CtlReq+0x54>
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	2b03      	cmp	r3, #3
 800a08a:	d106      	bne.n	800a09a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2201      	movs	r2, #1
 800a090:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	761a      	strb	r2, [r3, #24]
      break;
 800a098:	e005      	b.n	800a0a6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d102      	bne.n	800a0a6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	709a      	strb	r2, [r3, #2]
      break;
 800a0a6:	bf00      	nop
  }
  return status;
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	7e1b      	ldrb	r3, [r3, #24]
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	2b0a      	cmp	r3, #10
 800a0cc:	f200 8156 	bhi.w	800a37c <USBH_HandleControl+0x2c8>
 800a0d0:	a201      	add	r2, pc, #4	; (adr r2, 800a0d8 <USBH_HandleControl+0x24>)
 800a0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d6:	bf00      	nop
 800a0d8:	0800a105 	.word	0x0800a105
 800a0dc:	0800a11f 	.word	0x0800a11f
 800a0e0:	0800a189 	.word	0x0800a189
 800a0e4:	0800a1af 	.word	0x0800a1af
 800a0e8:	0800a1e7 	.word	0x0800a1e7
 800a0ec:	0800a211 	.word	0x0800a211
 800a0f0:	0800a263 	.word	0x0800a263
 800a0f4:	0800a285 	.word	0x0800a285
 800a0f8:	0800a2c1 	.word	0x0800a2c1
 800a0fc:	0800a2e7 	.word	0x0800a2e7
 800a100:	0800a325 	.word	0x0800a325
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f103 0110 	add.w	r1, r3, #16
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	795b      	ldrb	r3, [r3, #5]
 800a10e:	461a      	mov	r2, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f943 	bl	800a39c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2202      	movs	r2, #2
 800a11a:	761a      	strb	r2, [r3, #24]
      break;
 800a11c:	e139      	b.n	800a392 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	795b      	ldrb	r3, [r3, #5]
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f005 fcdf 	bl	800fae8 <USBH_LL_GetURBState>
 800a12a:	4603      	mov	r3, r0
 800a12c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d11e      	bne.n	800a172 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	7c1b      	ldrb	r3, [r3, #16]
 800a138:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a13c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	8adb      	ldrh	r3, [r3, #22]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00a      	beq.n	800a15c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a146:	7b7b      	ldrb	r3, [r7, #13]
 800a148:	2b80      	cmp	r3, #128	; 0x80
 800a14a:	d103      	bne.n	800a154 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2203      	movs	r2, #3
 800a150:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a152:	e115      	b.n	800a380 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2205      	movs	r2, #5
 800a158:	761a      	strb	r2, [r3, #24]
      break;
 800a15a:	e111      	b.n	800a380 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a15c:	7b7b      	ldrb	r3, [r7, #13]
 800a15e:	2b80      	cmp	r3, #128	; 0x80
 800a160:	d103      	bne.n	800a16a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2209      	movs	r2, #9
 800a166:	761a      	strb	r2, [r3, #24]
      break;
 800a168:	e10a      	b.n	800a380 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2207      	movs	r2, #7
 800a16e:	761a      	strb	r2, [r3, #24]
      break;
 800a170:	e106      	b.n	800a380 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a172:	7bbb      	ldrb	r3, [r7, #14]
 800a174:	2b04      	cmp	r3, #4
 800a176:	d003      	beq.n	800a180 <USBH_HandleControl+0xcc>
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	f040 8100 	bne.w	800a380 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	220b      	movs	r2, #11
 800a184:	761a      	strb	r2, [r3, #24]
      break;
 800a186:	e0fb      	b.n	800a380 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a18e:	b29a      	uxth	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6899      	ldr	r1, [r3, #8]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	899a      	ldrh	r2, [r3, #12]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	791b      	ldrb	r3, [r3, #4]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f93a 	bl	800a41a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2204      	movs	r2, #4
 800a1aa:	761a      	strb	r2, [r3, #24]
      break;
 800a1ac:	e0f1      	b.n	800a392 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	791b      	ldrb	r3, [r3, #4]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f005 fc97 	bl	800fae8 <USBH_LL_GetURBState>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d102      	bne.n	800a1ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2209      	movs	r2, #9
 800a1c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	2b05      	cmp	r3, #5
 800a1ce:	d102      	bne.n	800a1d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1d4:	e0d6      	b.n	800a384 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	2b04      	cmp	r3, #4
 800a1da:	f040 80d3 	bne.w	800a384 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	220b      	movs	r2, #11
 800a1e2:	761a      	strb	r2, [r3, #24]
      break;
 800a1e4:	e0ce      	b.n	800a384 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6899      	ldr	r1, [r3, #8]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	899a      	ldrh	r2, [r3, #12]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	795b      	ldrb	r3, [r3, #5]
 800a1f2:	2001      	movs	r0, #1
 800a1f4:	9000      	str	r0, [sp, #0]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f8ea 	bl	800a3d0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a202:	b29a      	uxth	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2206      	movs	r2, #6
 800a20c:	761a      	strb	r2, [r3, #24]
      break;
 800a20e:	e0c0      	b.n	800a392 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	795b      	ldrb	r3, [r3, #5]
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f005 fc66 	bl	800fae8 <USBH_LL_GetURBState>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a220:	7bbb      	ldrb	r3, [r7, #14]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d103      	bne.n	800a22e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2207      	movs	r2, #7
 800a22a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a22c:	e0ac      	b.n	800a388 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a22e:	7bbb      	ldrb	r3, [r7, #14]
 800a230:	2b05      	cmp	r3, #5
 800a232:	d105      	bne.n	800a240 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	220c      	movs	r2, #12
 800a238:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a23a:	2303      	movs	r3, #3
 800a23c:	73fb      	strb	r3, [r7, #15]
      break;
 800a23e:	e0a3      	b.n	800a388 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a240:	7bbb      	ldrb	r3, [r7, #14]
 800a242:	2b02      	cmp	r3, #2
 800a244:	d103      	bne.n	800a24e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2205      	movs	r2, #5
 800a24a:	761a      	strb	r2, [r3, #24]
      break;
 800a24c:	e09c      	b.n	800a388 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	2b04      	cmp	r3, #4
 800a252:	f040 8099 	bne.w	800a388 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	220b      	movs	r2, #11
 800a25a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a25c:	2302      	movs	r3, #2
 800a25e:	73fb      	strb	r3, [r7, #15]
      break;
 800a260:	e092      	b.n	800a388 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	791b      	ldrb	r3, [r3, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	2100      	movs	r1, #0
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f8d5 	bl	800a41a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a276:	b29a      	uxth	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2208      	movs	r2, #8
 800a280:	761a      	strb	r2, [r3, #24]

      break;
 800a282:	e086      	b.n	800a392 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	791b      	ldrb	r3, [r3, #4]
 800a288:	4619      	mov	r1, r3
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f005 fc2c 	bl	800fae8 <USBH_LL_GetURBState>
 800a290:	4603      	mov	r3, r0
 800a292:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d105      	bne.n	800a2a6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	220d      	movs	r2, #13
 800a29e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a2a4:	e072      	b.n	800a38c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a2a6:	7bbb      	ldrb	r3, [r7, #14]
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d103      	bne.n	800a2b4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	220b      	movs	r2, #11
 800a2b0:	761a      	strb	r2, [r3, #24]
      break;
 800a2b2:	e06b      	b.n	800a38c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
 800a2b6:	2b05      	cmp	r3, #5
 800a2b8:	d168      	bne.n	800a38c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a2be:	e065      	b.n	800a38c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	795b      	ldrb	r3, [r3, #5]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	9200      	str	r2, [sp, #0]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f87f 	bl	800a3d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	220a      	movs	r2, #10
 800a2e2:	761a      	strb	r2, [r3, #24]
      break;
 800a2e4:	e055      	b.n	800a392 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	795b      	ldrb	r3, [r3, #5]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f005 fbfb 	bl	800fae8 <USBH_LL_GetURBState>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a2f6:	7bbb      	ldrb	r3, [r7, #14]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d105      	bne.n	800a308 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	220d      	movs	r2, #13
 800a304:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a306:	e043      	b.n	800a390 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a308:	7bbb      	ldrb	r3, [r7, #14]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d103      	bne.n	800a316 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2209      	movs	r2, #9
 800a312:	761a      	strb	r2, [r3, #24]
      break;
 800a314:	e03c      	b.n	800a390 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	2b04      	cmp	r3, #4
 800a31a:	d139      	bne.n	800a390 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	220b      	movs	r2, #11
 800a320:	761a      	strb	r2, [r3, #24]
      break;
 800a322:	e035      	b.n	800a390 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	7e5b      	ldrb	r3, [r3, #25]
 800a328:	3301      	adds	r3, #1
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	765a      	strb	r2, [r3, #25]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	7e5b      	ldrb	r3, [r3, #25]
 800a334:	2b02      	cmp	r3, #2
 800a336:	d806      	bhi.n	800a346 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a344:	e025      	b.n	800a392 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a34c:	2106      	movs	r1, #6
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	795b      	ldrb	r3, [r3, #5]
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f90c 	bl	800a57c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	791b      	ldrb	r3, [r3, #4]
 800a368:	4619      	mov	r1, r3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f906 	bl	800a57c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a376:	2302      	movs	r3, #2
 800a378:	73fb      	strb	r3, [r7, #15]
      break;
 800a37a:	e00a      	b.n	800a392 <USBH_HandleControl+0x2de>

    default:
      break;
 800a37c:	bf00      	nop
 800a37e:	e008      	b.n	800a392 <USBH_HandleControl+0x2de>
      break;
 800a380:	bf00      	nop
 800a382:	e006      	b.n	800a392 <USBH_HandleControl+0x2de>
      break;
 800a384:	bf00      	nop
 800a386:	e004      	b.n	800a392 <USBH_HandleControl+0x2de>
      break;
 800a388:	bf00      	nop
 800a38a:	e002      	b.n	800a392 <USBH_HandleControl+0x2de>
      break;
 800a38c:	bf00      	nop
 800a38e:	e000      	b.n	800a392 <USBH_HandleControl+0x2de>
      break;
 800a390:	bf00      	nop
  }

  return status;
 800a392:	7bfb      	ldrb	r3, [r7, #15]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af04      	add	r7, sp, #16
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3aa:	79f9      	ldrb	r1, [r7, #7]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9303      	str	r3, [sp, #12]
 800a3b0:	2308      	movs	r3, #8
 800a3b2:	9302      	str	r3, [sp, #8]
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	9301      	str	r3, [sp, #4]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	2300      	movs	r3, #0
 800a3be:	2200      	movs	r2, #0
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f005 fb60 	bl	800fa86 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b088      	sub	sp, #32
 800a3d4:	af04      	add	r7, sp, #16
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	4611      	mov	r1, r2
 800a3dc:	461a      	mov	r2, r3
 800a3de:	460b      	mov	r3, r1
 800a3e0:	80fb      	strh	r3, [r7, #6]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3f4:	7979      	ldrb	r1, [r7, #5]
 800a3f6:	7e3b      	ldrb	r3, [r7, #24]
 800a3f8:	9303      	str	r3, [sp, #12]
 800a3fa:	88fb      	ldrh	r3, [r7, #6]
 800a3fc:	9302      	str	r3, [sp, #8]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	9301      	str	r3, [sp, #4]
 800a402:	2301      	movs	r3, #1
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	2300      	movs	r3, #0
 800a408:	2200      	movs	r2, #0
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f005 fb3b 	bl	800fa86 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b088      	sub	sp, #32
 800a41e:	af04      	add	r7, sp, #16
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	4611      	mov	r1, r2
 800a426:	461a      	mov	r2, r3
 800a428:	460b      	mov	r3, r1
 800a42a:	80fb      	strh	r3, [r7, #6]
 800a42c:	4613      	mov	r3, r2
 800a42e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a430:	7979      	ldrb	r1, [r7, #5]
 800a432:	2300      	movs	r3, #0
 800a434:	9303      	str	r3, [sp, #12]
 800a436:	88fb      	ldrh	r3, [r7, #6]
 800a438:	9302      	str	r3, [sp, #8]
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	9301      	str	r3, [sp, #4]
 800a43e:	2301      	movs	r3, #1
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	2300      	movs	r3, #0
 800a444:	2201      	movs	r2, #1
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f005 fb1d 	bl	800fa86 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a44c:	2300      	movs	r3, #0

}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b088      	sub	sp, #32
 800a45a:	af04      	add	r7, sp, #16
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	4611      	mov	r1, r2
 800a462:	461a      	mov	r2, r3
 800a464:	460b      	mov	r3, r1
 800a466:	80fb      	strh	r3, [r7, #6]
 800a468:	4613      	mov	r3, r2
 800a46a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a47a:	7979      	ldrb	r1, [r7, #5]
 800a47c:	7e3b      	ldrb	r3, [r7, #24]
 800a47e:	9303      	str	r3, [sp, #12]
 800a480:	88fb      	ldrh	r3, [r7, #6]
 800a482:	9302      	str	r3, [sp, #8]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	2301      	movs	r3, #1
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	2302      	movs	r3, #2
 800a48e:	2200      	movs	r2, #0
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f005 faf8 	bl	800fa86 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af04      	add	r7, sp, #16
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	80fb      	strh	r3, [r7, #6]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a4b6:	7979      	ldrb	r1, [r7, #5]
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	9303      	str	r3, [sp, #12]
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	9302      	str	r3, [sp, #8]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	9301      	str	r3, [sp, #4]
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f005 fada 	bl	800fa86 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af04      	add	r7, sp, #16
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	4608      	mov	r0, r1
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	70fb      	strb	r3, [r7, #3]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	70bb      	strb	r3, [r7, #2]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a4f6:	7878      	ldrb	r0, [r7, #1]
 800a4f8:	78ba      	ldrb	r2, [r7, #2]
 800a4fa:	78f9      	ldrb	r1, [r7, #3]
 800a4fc:	8b3b      	ldrh	r3, [r7, #24]
 800a4fe:	9302      	str	r3, [sp, #8]
 800a500:	7d3b      	ldrb	r3, [r7, #20]
 800a502:	9301      	str	r3, [sp, #4]
 800a504:	7c3b      	ldrb	r3, [r7, #16]
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	4603      	mov	r3, r0
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f005 fa6d 	bl	800f9ea <USBH_LL_OpenPipe>

  return USBH_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	4619      	mov	r1, r3
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f005 fa8c 	bl	800fa48 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	460b      	mov	r3, r1
 800a544:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f836 	bl	800a5b8 <USBH_GetFreePipe>
 800a54c:	4603      	mov	r3, r0
 800a54e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a550:	89fb      	ldrh	r3, [r7, #14]
 800a552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a556:	4293      	cmp	r3, r2
 800a558:	d00a      	beq.n	800a570 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a55a:	78fa      	ldrb	r2, [r7, #3]
 800a55c:	89fb      	ldrh	r3, [r7, #14]
 800a55e:	f003 030f 	and.w	r3, r3, #15
 800a562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a566:	6879      	ldr	r1, [r7, #4]
 800a568:	33e0      	adds	r3, #224	; 0xe0
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	440b      	add	r3, r1
 800a56e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a570:	89fb      	ldrh	r3, [r7, #14]
 800a572:	b2db      	uxtb	r3, r3
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a588:	78fb      	ldrb	r3, [r7, #3]
 800a58a:	2b0a      	cmp	r3, #10
 800a58c:	d80d      	bhi.n	800a5aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a58e:	78fb      	ldrb	r3, [r7, #3]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	33e0      	adds	r3, #224	; 0xe0
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4413      	add	r3, r2
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	78fb      	ldrb	r3, [r7, #3]
 800a59c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	33e0      	adds	r3, #224	; 0xe0
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	440b      	add	r3, r1
 800a5a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	73fb      	strb	r3, [r7, #15]
 800a5c8:	e00f      	b.n	800a5ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	33e0      	adds	r3, #224	; 0xe0
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4413      	add	r3, r2
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d102      	bne.n	800a5e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	e007      	b.n	800a5f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	73fb      	strb	r3, [r7, #15]
 800a5ea:	7bfb      	ldrb	r3, [r7, #15]
 800a5ec:	2b0a      	cmp	r3, #10
 800a5ee:	d9ec      	bls.n	800a5ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a5f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a60a:	79fb      	ldrb	r3, [r7, #7]
 800a60c:	4a08      	ldr	r2, [pc, #32]	; (800a630 <disk_status+0x30>)
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	79fa      	ldrb	r2, [r7, #7]
 800a618:	4905      	ldr	r1, [pc, #20]	; (800a630 <disk_status+0x30>)
 800a61a:	440a      	add	r2, r1
 800a61c:	7a12      	ldrb	r2, [r2, #8]
 800a61e:	4610      	mov	r0, r2
 800a620:	4798      	blx	r3
 800a622:	4603      	mov	r3, r0
 800a624:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a626:	7bfb      	ldrb	r3, [r7, #15]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	20002800 	.word	0x20002800

0800a634 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	4a0d      	ldr	r2, [pc, #52]	; (800a67c <disk_initialize+0x48>)
 800a646:	5cd3      	ldrb	r3, [r2, r3]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d111      	bne.n	800a670 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	4a0b      	ldr	r2, [pc, #44]	; (800a67c <disk_initialize+0x48>)
 800a650:	2101      	movs	r1, #1
 800a652:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	4a09      	ldr	r2, [pc, #36]	; (800a67c <disk_initialize+0x48>)
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	79fa      	ldrb	r2, [r7, #7]
 800a662:	4906      	ldr	r1, [pc, #24]	; (800a67c <disk_initialize+0x48>)
 800a664:	440a      	add	r2, r1
 800a666:	7a12      	ldrb	r2, [r2, #8]
 800a668:	4610      	mov	r0, r2
 800a66a:	4798      	blx	r3
 800a66c:	4603      	mov	r3, r0
 800a66e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a670:	7bfb      	ldrb	r3, [r7, #15]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20002800 	.word	0x20002800

0800a680 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a680:	b590      	push	{r4, r7, lr}
 800a682:	b087      	sub	sp, #28
 800a684:	af00      	add	r7, sp, #0
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
 800a68a:	603b      	str	r3, [r7, #0]
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	4a0a      	ldr	r2, [pc, #40]	; (800a6bc <disk_read+0x3c>)
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4413      	add	r3, r2
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	689c      	ldr	r4, [r3, #8]
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	4a07      	ldr	r2, [pc, #28]	; (800a6bc <disk_read+0x3c>)
 800a6a0:	4413      	add	r3, r2
 800a6a2:	7a18      	ldrb	r0, [r3, #8]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	68b9      	ldr	r1, [r7, #8]
 800a6aa:	47a0      	blx	r4
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800a6b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	371c      	adds	r7, #28
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd90      	pop	{r4, r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20002800 	.word	0x20002800

0800a6c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60b9      	str	r1, [r7, #8]
 800a6c8:	607a      	str	r2, [r7, #4]
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
 800a6d2:	4a0a      	ldr	r2, [pc, #40]	; (800a6fc <disk_write+0x3c>)
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	68dc      	ldr	r4, [r3, #12]
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
 800a6de:	4a07      	ldr	r2, [pc, #28]	; (800a6fc <disk_write+0x3c>)
 800a6e0:	4413      	add	r3, r2
 800a6e2:	7a18      	ldrb	r0, [r3, #8]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	47a0      	blx	r4
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd90      	pop	{r4, r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20002800 	.word	0x20002800

0800a700 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	603a      	str	r2, [r7, #0]
 800a70a:	71fb      	strb	r3, [r7, #7]
 800a70c:	460b      	mov	r3, r1
 800a70e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a710:	79fb      	ldrb	r3, [r7, #7]
 800a712:	4a09      	ldr	r2, [pc, #36]	; (800a738 <disk_ioctl+0x38>)
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	79fa      	ldrb	r2, [r7, #7]
 800a71e:	4906      	ldr	r1, [pc, #24]	; (800a738 <disk_ioctl+0x38>)
 800a720:	440a      	add	r2, r1
 800a722:	7a10      	ldrb	r0, [r2, #8]
 800a724:	79b9      	ldrb	r1, [r7, #6]
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	4798      	blx	r3
 800a72a:	4603      	mov	r3, r0
 800a72c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	20002800 	.word	0x20002800

0800a73c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	3301      	adds	r3, #1
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a74c:	89fb      	ldrh	r3, [r7, #14]
 800a74e:	021b      	lsls	r3, r3, #8
 800a750:	b21a      	sxth	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	b21b      	sxth	r3, r3
 800a758:	4313      	orrs	r3, r2
 800a75a:	b21b      	sxth	r3, r3
 800a75c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a75e:	89fb      	ldrh	r3, [r7, #14]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3303      	adds	r3, #3
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	021b      	lsls	r3, r3, #8
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	3202      	adds	r2, #2
 800a784:	7812      	ldrb	r2, [r2, #0]
 800a786:	4313      	orrs	r3, r2
 800a788:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	021b      	lsls	r3, r3, #8
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	3201      	adds	r2, #1
 800a792:	7812      	ldrb	r2, [r2, #0]
 800a794:	4313      	orrs	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	021b      	lsls	r3, r3, #8
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	7812      	ldrb	r2, [r2, #0]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800a7b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a7b6:	b09d      	sub	sp, #116	; 0x74
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800a7bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7be:	3307      	adds	r3, #7
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	469a      	mov	sl, r3
 800a7c8:	4693      	mov	fp, r2
 800a7ca:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800a7ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a7d2:	f04f 0000 	mov.w	r0, #0
 800a7d6:	f04f 0100 	mov.w	r1, #0
 800a7da:	0219      	lsls	r1, r3, #8
 800a7dc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a7e0:	0210      	lsls	r0, r2, #8
 800a7e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7e4:	3306      	adds	r3, #6
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	461c      	mov	r4, r3
 800a7ee:	4615      	mov	r5, r2
 800a7f0:	ea40 0804 	orr.w	r8, r0, r4
 800a7f4:	ea41 0905 	orr.w	r9, r1, r5
 800a7f8:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800a7fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a800:	f04f 0000 	mov.w	r0, #0
 800a804:	f04f 0100 	mov.w	r1, #0
 800a808:	0219      	lsls	r1, r3, #8
 800a80a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a80e:	0210      	lsls	r0, r2, #8
 800a810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a812:	3305      	adds	r3, #5
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2200      	movs	r2, #0
 800a81a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a81c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a81e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800a822:	4623      	mov	r3, r4
 800a824:	4303      	orrs	r3, r0
 800a826:	62bb      	str	r3, [r7, #40]	; 0x28
 800a828:	462b      	mov	r3, r5
 800a82a:	430b      	orrs	r3, r1
 800a82c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a82e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800a832:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800a836:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a83a:	f04f 0000 	mov.w	r0, #0
 800a83e:	f04f 0100 	mov.w	r1, #0
 800a842:	0219      	lsls	r1, r3, #8
 800a844:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a848:	0210      	lsls	r0, r2, #8
 800a84a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a84c:	3304      	adds	r3, #4
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2200      	movs	r2, #0
 800a854:	653b      	str	r3, [r7, #80]	; 0x50
 800a856:	657a      	str	r2, [r7, #84]	; 0x54
 800a858:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800a85c:	4623      	mov	r3, r4
 800a85e:	4303      	orrs	r3, r0
 800a860:	623b      	str	r3, [r7, #32]
 800a862:	462b      	mov	r3, r5
 800a864:	430b      	orrs	r3, r1
 800a866:	627b      	str	r3, [r7, #36]	; 0x24
 800a868:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a86c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800a870:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a874:	f04f 0000 	mov.w	r0, #0
 800a878:	f04f 0100 	mov.w	r1, #0
 800a87c:	0219      	lsls	r1, r3, #8
 800a87e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a882:	0210      	lsls	r0, r2, #8
 800a884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a886:	3303      	adds	r3, #3
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2200      	movs	r2, #0
 800a88e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a890:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a892:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800a896:	4623      	mov	r3, r4
 800a898:	4303      	orrs	r3, r0
 800a89a:	61bb      	str	r3, [r7, #24]
 800a89c:	462b      	mov	r3, r5
 800a89e:	430b      	orrs	r3, r1
 800a8a0:	61fb      	str	r3, [r7, #28]
 800a8a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a8a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800a8aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a8ae:	f04f 0000 	mov.w	r0, #0
 800a8b2:	f04f 0100 	mov.w	r1, #0
 800a8b6:	0219      	lsls	r1, r3, #8
 800a8b8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a8bc:	0210      	lsls	r0, r2, #8
 800a8be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8c0:	3302      	adds	r3, #2
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a8ca:	647a      	str	r2, [r7, #68]	; 0x44
 800a8cc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800a8d0:	4623      	mov	r3, r4
 800a8d2:	4303      	orrs	r3, r0
 800a8d4:	613b      	str	r3, [r7, #16]
 800a8d6:	462b      	mov	r3, r5
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a8e0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800a8e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a8e8:	f04f 0200 	mov.w	r2, #0
 800a8ec:	f04f 0300 	mov.w	r3, #0
 800a8f0:	020b      	lsls	r3, r1, #8
 800a8f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8f6:	0202      	lsls	r2, r0, #8
 800a8f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a8fa:	3101      	adds	r1, #1
 800a8fc:	7809      	ldrb	r1, [r1, #0]
 800a8fe:	b2c9      	uxtb	r1, r1
 800a900:	2000      	movs	r0, #0
 800a902:	63b9      	str	r1, [r7, #56]	; 0x38
 800a904:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a906:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800a90a:	4621      	mov	r1, r4
 800a90c:	4311      	orrs	r1, r2
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	4629      	mov	r1, r5
 800a912:	4319      	orrs	r1, r3
 800a914:	60f9      	str	r1, [r7, #12]
 800a916:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a91a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800a91e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a922:	f04f 0200 	mov.w	r2, #0
 800a926:	f04f 0300 	mov.w	r3, #0
 800a92a:	020b      	lsls	r3, r1, #8
 800a92c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a930:	0202      	lsls	r2, r0, #8
 800a932:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a934:	7809      	ldrb	r1, [r1, #0]
 800a936:	b2c9      	uxtb	r1, r1
 800a938:	2000      	movs	r0, #0
 800a93a:	6339      	str	r1, [r7, #48]	; 0x30
 800a93c:	6378      	str	r0, [r7, #52]	; 0x34
 800a93e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a942:	4621      	mov	r1, r4
 800a944:	4311      	orrs	r1, r2
 800a946:	6039      	str	r1, [r7, #0]
 800a948:	4629      	mov	r1, r5
 800a94a:	4319      	orrs	r1, r3
 800a94c:	6079      	str	r1, [r7, #4]
 800a94e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a952:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800a956:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800a95a:	4610      	mov	r0, r2
 800a95c:	4619      	mov	r1, r3
 800a95e:	3774      	adds	r7, #116	; 0x74
 800a960:	46bd      	mov	sp, r7
 800a962:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a966:	4770      	bx	lr

0800a968 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	1c5a      	adds	r2, r3, #1
 800a978:	607a      	str	r2, [r7, #4]
 800a97a:	887a      	ldrh	r2, [r7, #2]
 800a97c:	b2d2      	uxtb	r2, r2
 800a97e:	701a      	strb	r2, [r3, #0]
 800a980:	887b      	ldrh	r3, [r7, #2]
 800a982:	0a1b      	lsrs	r3, r3, #8
 800a984:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	1c5a      	adds	r2, r3, #1
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	887a      	ldrh	r2, [r7, #2]
 800a98e:	b2d2      	uxtb	r2, r2
 800a990:	701a      	strb	r2, [r3, #0]
}
 800a992:	bf00      	nop
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	607a      	str	r2, [r7, #4]
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	b2d2      	uxtb	r2, r2
 800a9b2:	701a      	strb	r2, [r3, #0]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	0a1b      	lsrs	r3, r3, #8
 800a9b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	1c5a      	adds	r2, r3, #1
 800a9be:	607a      	str	r2, [r7, #4]
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	b2d2      	uxtb	r2, r2
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	0a1b      	lsrs	r3, r3, #8
 800a9ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	b2d2      	uxtb	r2, r2
 800a9d6:	701a      	strb	r2, [r3, #0]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	0a1b      	lsrs	r3, r3, #8
 800a9dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	b2d2      	uxtb	r2, r2
 800a9e8:	701a      	strb	r2, [r3, #0]
}
 800a9ea:	bf00      	nop
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b085      	sub	sp, #20
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	60f8      	str	r0, [r7, #12]
 800a9fe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	60fa      	str	r2, [r7, #12]
 800aa08:	783a      	ldrb	r2, [r7, #0]
 800aa0a:	701a      	strb	r2, [r3, #0]
 800aa0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa10:	f04f 0200 	mov.w	r2, #0
 800aa14:	f04f 0300 	mov.w	r3, #0
 800aa18:	0a02      	lsrs	r2, r0, #8
 800aa1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800aa1e:	0a0b      	lsrs	r3, r1, #8
 800aa20:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	60fa      	str	r2, [r7, #12]
 800aa2a:	783a      	ldrb	r2, [r7, #0]
 800aa2c:	701a      	strb	r2, [r3, #0]
 800aa2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	f04f 0300 	mov.w	r3, #0
 800aa3a:	0a02      	lsrs	r2, r0, #8
 800aa3c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800aa40:	0a0b      	lsrs	r3, r1, #8
 800aa42:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	60fa      	str	r2, [r7, #12]
 800aa4c:	783a      	ldrb	r2, [r7, #0]
 800aa4e:	701a      	strb	r2, [r3, #0]
 800aa50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa54:	f04f 0200 	mov.w	r2, #0
 800aa58:	f04f 0300 	mov.w	r3, #0
 800aa5c:	0a02      	lsrs	r2, r0, #8
 800aa5e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800aa62:	0a0b      	lsrs	r3, r1, #8
 800aa64:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	60fa      	str	r2, [r7, #12]
 800aa6e:	783a      	ldrb	r2, [r7, #0]
 800aa70:	701a      	strb	r2, [r3, #0]
 800aa72:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa76:	f04f 0200 	mov.w	r2, #0
 800aa7a:	f04f 0300 	mov.w	r3, #0
 800aa7e:	0a02      	lsrs	r2, r0, #8
 800aa80:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800aa84:	0a0b      	lsrs	r3, r1, #8
 800aa86:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	1c5a      	adds	r2, r3, #1
 800aa8e:	60fa      	str	r2, [r7, #12]
 800aa90:	783a      	ldrb	r2, [r7, #0]
 800aa92:	701a      	strb	r2, [r3, #0]
 800aa94:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa98:	f04f 0200 	mov.w	r2, #0
 800aa9c:	f04f 0300 	mov.w	r3, #0
 800aaa0:	0a02      	lsrs	r2, r0, #8
 800aaa2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800aaa6:	0a0b      	lsrs	r3, r1, #8
 800aaa8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	60fa      	str	r2, [r7, #12]
 800aab2:	783a      	ldrb	r2, [r7, #0]
 800aab4:	701a      	strb	r2, [r3, #0]
 800aab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaba:	f04f 0200 	mov.w	r2, #0
 800aabe:	f04f 0300 	mov.w	r3, #0
 800aac2:	0a02      	lsrs	r2, r0, #8
 800aac4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800aac8:	0a0b      	lsrs	r3, r1, #8
 800aaca:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	60fa      	str	r2, [r7, #12]
 800aad4:	783a      	ldrb	r2, [r7, #0]
 800aad6:	701a      	strb	r2, [r3, #0]
 800aad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aadc:	f04f 0200 	mov.w	r2, #0
 800aae0:	f04f 0300 	mov.w	r3, #0
 800aae4:	0a02      	lsrs	r2, r0, #8
 800aae6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800aaea:	0a0b      	lsrs	r3, r1, #8
 800aaec:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	1c5a      	adds	r2, r3, #1
 800aaf4:	60fa      	str	r2, [r7, #12]
 800aaf6:	783a      	ldrb	r2, [r7, #0]
 800aaf8:	701a      	strb	r2, [r3, #0]
}
 800aafa:	bf00      	nop
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ab06:	b480      	push	{r7}
 800ab08:	b087      	sub	sp, #28
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	60f8      	str	r0, [r7, #12]
 800ab0e:	60b9      	str	r1, [r7, #8]
 800ab10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00d      	beq.n	800ab3c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	1c53      	adds	r3, r2, #1
 800ab24:	613b      	str	r3, [r7, #16]
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	1c59      	adds	r1, r3, #1
 800ab2a:	6179      	str	r1, [r7, #20]
 800ab2c:	7812      	ldrb	r2, [r2, #0]
 800ab2e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	607b      	str	r3, [r7, #4]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f1      	bne.n	800ab20 <mem_cpy+0x1a>
	}
}
 800ab3c:	bf00      	nop
 800ab3e:	371c      	adds	r7, #28
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	1c5a      	adds	r2, r3, #1
 800ab5c:	617a      	str	r2, [r7, #20]
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	b2d2      	uxtb	r2, r2
 800ab62:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3b01      	subs	r3, #1
 800ab68:	607b      	str	r3, [r7, #4]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1f3      	bne.n	800ab58 <mem_set+0x10>
}
 800ab70:	bf00      	nop
 800ab72:	bf00      	nop
 800ab74:	371c      	adds	r7, #28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ab7e:	b480      	push	{r7}
 800ab80:	b089      	sub	sp, #36	; 0x24
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60f8      	str	r0, [r7, #12]
 800ab86:	60b9      	str	r1, [r7, #8]
 800ab88:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	61fb      	str	r3, [r7, #28]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	61fa      	str	r2, [r7, #28]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	1c5a      	adds	r2, r3, #1
 800aba4:	61ba      	str	r2, [r7, #24]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	1acb      	subs	r3, r1, r3
 800abaa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3b01      	subs	r3, #1
 800abb0:	607b      	str	r3, [r7, #4]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <mem_cmp+0x40>
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0eb      	beq.n	800ab96 <mem_cmp+0x18>

	return r;
 800abbe:	697b      	ldr	r3, [r7, #20]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3724      	adds	r7, #36	; 0x24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800abd6:	e002      	b.n	800abde <chk_chr+0x12>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3301      	adds	r3, #1
 800abdc:	607b      	str	r3, [r7, #4]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d005      	beq.n	800abf2 <chk_chr+0x26>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	461a      	mov	r2, r3
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	4293      	cmp	r3, r2
 800abf0:	d1f2      	bne.n	800abd8 <chk_chr+0xc>
	return *str;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	781b      	ldrb	r3, [r3, #0]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
	...

0800ac04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60bb      	str	r3, [r7, #8]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	e029      	b.n	800ac6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ac18:	4a27      	ldr	r2, [pc, #156]	; (800acb8 <chk_lock+0xb4>)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	011b      	lsls	r3, r3, #4
 800ac1e:	4413      	add	r3, r2
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d01d      	beq.n	800ac62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac26:	4a24      	ldr	r2, [pc, #144]	; (800acb8 <chk_lock+0xb4>)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	011b      	lsls	r3, r3, #4
 800ac2c:	4413      	add	r3, r2
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d116      	bne.n	800ac66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ac38:	4a1f      	ldr	r2, [pc, #124]	; (800acb8 <chk_lock+0xb4>)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	011b      	lsls	r3, r3, #4
 800ac3e:	4413      	add	r3, r2
 800ac40:	3304      	adds	r3, #4
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d10c      	bne.n	800ac66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ac4c:	4a1a      	ldr	r2, [pc, #104]	; (800acb8 <chk_lock+0xb4>)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	011b      	lsls	r3, r3, #4
 800ac52:	4413      	add	r3, r2
 800ac54:	3308      	adds	r3, #8
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d102      	bne.n	800ac66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ac60:	e007      	b.n	800ac72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ac62:	2301      	movs	r3, #1
 800ac64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d9d2      	bls.n	800ac18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d109      	bne.n	800ac8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <chk_lock+0x80>
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d101      	bne.n	800ac88 <chk_lock+0x84>
 800ac84:	2300      	movs	r3, #0
 800ac86:	e010      	b.n	800acaa <chk_lock+0xa6>
 800ac88:	2312      	movs	r3, #18
 800ac8a:	e00e      	b.n	800acaa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d108      	bne.n	800aca4 <chk_lock+0xa0>
 800ac92:	4a09      	ldr	r2, [pc, #36]	; (800acb8 <chk_lock+0xb4>)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	011b      	lsls	r3, r3, #4
 800ac98:	4413      	add	r3, r2
 800ac9a:	330c      	adds	r3, #12
 800ac9c:	881b      	ldrh	r3, [r3, #0]
 800ac9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aca2:	d101      	bne.n	800aca8 <chk_lock+0xa4>
 800aca4:	2310      	movs	r3, #16
 800aca6:	e000      	b.n	800acaa <chk_lock+0xa6>
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	20002380 	.word	0x20002380

0800acbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800acc2:	2300      	movs	r3, #0
 800acc4:	607b      	str	r3, [r7, #4]
 800acc6:	e002      	b.n	800acce <enq_lock+0x12>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	3301      	adds	r3, #1
 800accc:	607b      	str	r3, [r7, #4]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d806      	bhi.n	800ace2 <enq_lock+0x26>
 800acd4:	4a09      	ldr	r2, [pc, #36]	; (800acfc <enq_lock+0x40>)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	011b      	lsls	r3, r3, #4
 800acda:	4413      	add	r3, r2
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1f2      	bne.n	800acc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	bf14      	ite	ne
 800ace8:	2301      	movne	r3, #1
 800acea:	2300      	moveq	r3, #0
 800acec:	b2db      	uxtb	r3, r3
}
 800acee:	4618      	mov	r0, r3
 800acf0:	370c      	adds	r7, #12
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	20002380 	.word	0x20002380

0800ad00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	60fb      	str	r3, [r7, #12]
 800ad0e:	e01f      	b.n	800ad50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ad10:	4a41      	ldr	r2, [pc, #260]	; (800ae18 <inc_lock+0x118>)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	011b      	lsls	r3, r3, #4
 800ad16:	4413      	add	r3, r2
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d113      	bne.n	800ad4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ad22:	4a3d      	ldr	r2, [pc, #244]	; (800ae18 <inc_lock+0x118>)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	011b      	lsls	r3, r3, #4
 800ad28:	4413      	add	r3, r2
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d109      	bne.n	800ad4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ad36:	4a38      	ldr	r2, [pc, #224]	; (800ae18 <inc_lock+0x118>)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	011b      	lsls	r3, r3, #4
 800ad3c:	4413      	add	r3, r2
 800ad3e:	3308      	adds	r3, #8
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d006      	beq.n	800ad58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d9dc      	bls.n	800ad10 <inc_lock+0x10>
 800ad56:	e000      	b.n	800ad5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ad58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d132      	bne.n	800adc6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad60:	2300      	movs	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]
 800ad64:	e002      	b.n	800ad6c <inc_lock+0x6c>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	60fb      	str	r3, [r7, #12]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d806      	bhi.n	800ad80 <inc_lock+0x80>
 800ad72:	4a29      	ldr	r2, [pc, #164]	; (800ae18 <inc_lock+0x118>)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	011b      	lsls	r3, r3, #4
 800ad78:	4413      	add	r3, r2
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1f2      	bne.n	800ad66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d101      	bne.n	800ad8a <inc_lock+0x8a>
 800ad86:	2300      	movs	r3, #0
 800ad88:	e040      	b.n	800ae0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	4922      	ldr	r1, [pc, #136]	; (800ae18 <inc_lock+0x118>)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	011b      	lsls	r3, r3, #4
 800ad94:	440b      	add	r3, r1
 800ad96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	689a      	ldr	r2, [r3, #8]
 800ad9c:	491e      	ldr	r1, [pc, #120]	; (800ae18 <inc_lock+0x118>)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	011b      	lsls	r3, r3, #4
 800ada2:	440b      	add	r3, r1
 800ada4:	3304      	adds	r3, #4
 800ada6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adac:	491a      	ldr	r1, [pc, #104]	; (800ae18 <inc_lock+0x118>)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	011b      	lsls	r3, r3, #4
 800adb2:	440b      	add	r3, r1
 800adb4:	3308      	adds	r3, #8
 800adb6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800adb8:	4a17      	ldr	r2, [pc, #92]	; (800ae18 <inc_lock+0x118>)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	011b      	lsls	r3, r3, #4
 800adbe:	4413      	add	r3, r2
 800adc0:	330c      	adds	r3, #12
 800adc2:	2200      	movs	r2, #0
 800adc4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d009      	beq.n	800ade0 <inc_lock+0xe0>
 800adcc:	4a12      	ldr	r2, [pc, #72]	; (800ae18 <inc_lock+0x118>)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	011b      	lsls	r3, r3, #4
 800add2:	4413      	add	r3, r2
 800add4:	330c      	adds	r3, #12
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d001      	beq.n	800ade0 <inc_lock+0xe0>
 800addc:	2300      	movs	r3, #0
 800adde:	e015      	b.n	800ae0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d108      	bne.n	800adf8 <inc_lock+0xf8>
 800ade6:	4a0c      	ldr	r2, [pc, #48]	; (800ae18 <inc_lock+0x118>)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	4413      	add	r3, r2
 800adee:	330c      	adds	r3, #12
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	e001      	b.n	800adfc <inc_lock+0xfc>
 800adf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adfc:	4906      	ldr	r1, [pc, #24]	; (800ae18 <inc_lock+0x118>)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	011b      	lsls	r3, r3, #4
 800ae02:	440b      	add	r3, r1
 800ae04:	330c      	adds	r3, #12
 800ae06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	3301      	adds	r3, #1
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	20002380 	.word	0x20002380

0800ae1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	3b01      	subs	r3, #1
 800ae28:	607b      	str	r3, [r7, #4]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d825      	bhi.n	800ae7c <dec_lock+0x60>
		n = Files[i].ctr;
 800ae30:	4a17      	ldr	r2, [pc, #92]	; (800ae90 <dec_lock+0x74>)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	4413      	add	r3, r2
 800ae38:	330c      	adds	r3, #12
 800ae3a:	881b      	ldrh	r3, [r3, #0]
 800ae3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ae3e:	89fb      	ldrh	r3, [r7, #14]
 800ae40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae44:	d101      	bne.n	800ae4a <dec_lock+0x2e>
 800ae46:	2300      	movs	r3, #0
 800ae48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ae4a:	89fb      	ldrh	r3, [r7, #14]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <dec_lock+0x3a>
 800ae50:	89fb      	ldrh	r3, [r7, #14]
 800ae52:	3b01      	subs	r3, #1
 800ae54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ae56:	4a0e      	ldr	r2, [pc, #56]	; (800ae90 <dec_lock+0x74>)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	4413      	add	r3, r2
 800ae5e:	330c      	adds	r3, #12
 800ae60:	89fa      	ldrh	r2, [r7, #14]
 800ae62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ae64:	89fb      	ldrh	r3, [r7, #14]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d105      	bne.n	800ae76 <dec_lock+0x5a>
 800ae6a:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <dec_lock+0x74>)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	011b      	lsls	r3, r3, #4
 800ae70:	4413      	add	r3, r2
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	737b      	strb	r3, [r7, #13]
 800ae7a:	e001      	b.n	800ae80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ae80:	7b7b      	ldrb	r3, [r7, #13]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	20002380 	.word	0x20002380

0800ae94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	e010      	b.n	800aec4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aea2:	4a0d      	ldr	r2, [pc, #52]	; (800aed8 <clear_lock+0x44>)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	011b      	lsls	r3, r3, #4
 800aea8:	4413      	add	r3, r2
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d105      	bne.n	800aebe <clear_lock+0x2a>
 800aeb2:	4a09      	ldr	r2, [pc, #36]	; (800aed8 <clear_lock+0x44>)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	011b      	lsls	r3, r3, #4
 800aeb8:	4413      	add	r3, r2
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3301      	adds	r3, #1
 800aec2:	60fb      	str	r3, [r7, #12]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d9eb      	bls.n	800aea2 <clear_lock+0xe>
	}
}
 800aeca:	bf00      	nop
 800aecc:	bf00      	nop
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	20002380 	.word	0x20002380

0800aedc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	78db      	ldrb	r3, [r3, #3]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d034      	beq.n	800af5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	7858      	ldrb	r0, [r3, #1]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800af00:	2301      	movs	r3, #1
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	f7ff fbdc 	bl	800a6c0 <disk_write>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <sync_window+0x38>
			res = FR_DISK_ERR;
 800af0e:	2301      	movs	r3, #1
 800af10:	73fb      	strb	r3, [r7, #15]
 800af12:	e022      	b.n	800af5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	1ad2      	subs	r2, r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	429a      	cmp	r2, r3
 800af28:	d217      	bcs.n	800af5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	789b      	ldrb	r3, [r3, #2]
 800af2e:	613b      	str	r3, [r7, #16]
 800af30:	e010      	b.n	800af54 <sync_window+0x78>
					wsect += fs->fsize;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	4413      	add	r3, r2
 800af3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	7858      	ldrb	r0, [r3, #1]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800af46:	2301      	movs	r3, #1
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	f7ff fbb9 	bl	800a6c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	3b01      	subs	r3, #1
 800af52:	613b      	str	r3, [r7, #16]
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d8eb      	bhi.n	800af32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d01b      	beq.n	800afb4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7ff ffad 	bl	800aedc <sync_window>
 800af82:	4603      	mov	r3, r0
 800af84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800af86:	7bfb      	ldrb	r3, [r7, #15]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d113      	bne.n	800afb4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7858      	ldrb	r0, [r3, #1]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800af96:	2301      	movs	r3, #1
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	f7ff fb71 	bl	800a680 <disk_read>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d004      	beq.n	800afae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800afa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afa8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800afaa:	2301      	movs	r3, #1
 800afac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff ff87 	bl	800aedc <sync_window>
 800afce:	4603      	mov	r3, r0
 800afd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d159      	bne.n	800b08c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d149      	bne.n	800b074 <sync_fs+0xb4>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	791b      	ldrb	r3, [r3, #4]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d145      	bne.n	800b074 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	899b      	ldrh	r3, [r3, #12]
 800aff2:	461a      	mov	r2, r3
 800aff4:	2100      	movs	r1, #0
 800aff6:	f7ff fda7 	bl	800ab48 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	333c      	adds	r3, #60	; 0x3c
 800affe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b002:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b006:	4618      	mov	r0, r3
 800b008:	f7ff fcae 	bl	800a968 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	333c      	adds	r3, #60	; 0x3c
 800b010:	4921      	ldr	r1, [pc, #132]	; (800b098 <sync_fs+0xd8>)
 800b012:	4618      	mov	r0, r3
 800b014:	f7ff fcc3 	bl	800a99e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	333c      	adds	r3, #60	; 0x3c
 800b01c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b020:	491e      	ldr	r1, [pc, #120]	; (800b09c <sync_fs+0xdc>)
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff fcbb 	bl	800a99e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	333c      	adds	r3, #60	; 0x3c
 800b02c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	69db      	ldr	r3, [r3, #28]
 800b034:	4619      	mov	r1, r3
 800b036:	4610      	mov	r0, r2
 800b038:	f7ff fcb1 	bl	800a99e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	333c      	adds	r3, #60	; 0x3c
 800b040:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	4619      	mov	r1, r3
 800b04a:	4610      	mov	r0, r2
 800b04c:	f7ff fca7 	bl	800a99e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b054:	1c5a      	adds	r2, r3, #1
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	7858      	ldrb	r0, [r3, #1]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b068:	2301      	movs	r3, #1
 800b06a:	f7ff fb29 	bl	800a6c0 <disk_write>
			fs->fsi_flag = 0;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	785b      	ldrb	r3, [r3, #1]
 800b078:	2200      	movs	r2, #0
 800b07a:	2100      	movs	r1, #0
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff fb3f 	bl	800a700 <disk_ioctl>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <sync_fs+0xcc>
 800b088:	2301      	movs	r3, #1
 800b08a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	41615252 	.word	0x41615252
 800b09c:	61417272 	.word	0x61417272

0800b0a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	3b02      	subs	r3, #2
 800b0ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	3b02      	subs	r3, #2
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d301      	bcc.n	800b0c0 <clust2sect+0x20>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	e008      	b.n	800b0d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	895b      	ldrh	r3, [r3, #10]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	fb03 f202 	mul.w	r2, r3, r2
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d0:	4413      	add	r3, r2
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
	...

0800b0e0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b0e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b0e4:	b088      	sub	sp, #32
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d904      	bls.n	800b102 <get_fat+0x22>
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	6a1b      	ldr	r3, [r3, #32]
 800b0fc:	683a      	ldr	r2, [r7, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d302      	bcc.n	800b108 <get_fat+0x28>
		val = 1;	/* Internal error */
 800b102:	2301      	movs	r3, #1
 800b104:	61fb      	str	r3, [r7, #28]
 800b106:	e13a      	b.n	800b37e <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b10c:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	3b01      	subs	r3, #1
 800b114:	2b03      	cmp	r3, #3
 800b116:	f200 8126 	bhi.w	800b366 <get_fat+0x286>
 800b11a:	a201      	add	r2, pc, #4	; (adr r2, 800b120 <get_fat+0x40>)
 800b11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b120:	0800b131 	.word	0x0800b131
 800b124:	0800b1df 	.word	0x0800b1df
 800b128:	0800b22b 	.word	0x0800b22b
 800b12c:	0800b27b 	.word	0x0800b27b
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	899b      	ldrh	r3, [r3, #12]
 800b146:	4619      	mov	r1, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b14e:	4413      	add	r3, r2
 800b150:	4619      	mov	r1, r3
 800b152:	69b8      	ldr	r0, [r7, #24]
 800b154:	f7ff ff06 	bl	800af64 <move_window>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f040 8106 	bne.w	800b36c <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	60fa      	str	r2, [r7, #12]
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	8992      	ldrh	r2, [r2, #12]
 800b16a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b16e:	fb01 f202 	mul.w	r2, r1, r2
 800b172:	1a9b      	subs	r3, r3, r2
 800b174:	69ba      	ldr	r2, [r7, #24]
 800b176:	4413      	add	r3, r2
 800b178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b17c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	899b      	ldrh	r3, [r3, #12]
 800b186:	4619      	mov	r1, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b18e:	4413      	add	r3, r2
 800b190:	4619      	mov	r1, r3
 800b192:	69b8      	ldr	r0, [r7, #24]
 800b194:	f7ff fee6 	bl	800af64 <move_window>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f040 80e8 	bne.w	800b370 <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	899b      	ldrh	r3, [r3, #12]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1ac:	fb01 f202 	mul.w	r2, r1, r2
 800b1b0:	1a9b      	subs	r3, r3, r2
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1ba:	021b      	lsls	r3, r3, #8
 800b1bc:	461a      	mov	r2, r3
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	f003 0301 	and.w	r3, r3, #1
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d002      	beq.n	800b1d4 <get_fat+0xf4>
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	091b      	lsrs	r3, r3, #4
 800b1d2:	e002      	b.n	800b1da <get_fat+0xfa>
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1da:	61fb      	str	r3, [r7, #28]
			break;
 800b1dc:	e0cf      	b.n	800b37e <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	899b      	ldrh	r3, [r3, #12]
 800b1e6:	085b      	lsrs	r3, r3, #1
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1f2:	4413      	add	r3, r2
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	69b8      	ldr	r0, [r7, #24]
 800b1f8:	f7ff feb4 	bl	800af64 <move_window>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f040 80b8 	bne.w	800b374 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	8992      	ldrh	r2, [r2, #12]
 800b212:	fbb3 f0f2 	udiv	r0, r3, r2
 800b216:	fb00 f202 	mul.w	r2, r0, r2
 800b21a:	1a9b      	subs	r3, r3, r2
 800b21c:	440b      	add	r3, r1
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff fa8c 	bl	800a73c <ld_word>
 800b224:	4603      	mov	r3, r0
 800b226:	61fb      	str	r3, [r7, #28]
			break;
 800b228:	e0a9      	b.n	800b37e <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	899b      	ldrh	r3, [r3, #12]
 800b232:	089b      	lsrs	r3, r3, #2
 800b234:	b29b      	uxth	r3, r3
 800b236:	4619      	mov	r1, r3
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b23e:	4413      	add	r3, r2
 800b240:	4619      	mov	r1, r3
 800b242:	69b8      	ldr	r0, [r7, #24]
 800b244:	f7ff fe8e 	bl	800af64 <move_window>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f040 8094 	bne.w	800b378 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	8992      	ldrh	r2, [r2, #12]
 800b25e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b262:	fb00 f202 	mul.w	r2, r0, r2
 800b266:	1a9b      	subs	r3, r3, r2
 800b268:	440b      	add	r3, r1
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7ff fa7e 	bl	800a76c <ld_dword>
 800b270:	4603      	mov	r3, r0
 800b272:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b276:	61fb      	str	r3, [r7, #28]
			break;
 800b278:	e081      	b.n	800b37e <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b280:	4313      	orrs	r3, r2
 800b282:	d070      	beq.n	800b366 <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b294:	1e54      	subs	r4, r2, #1
 800b296:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	899b      	ldrh	r3, [r3, #12]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4698      	mov	r8, r3
 800b2a4:	4691      	mov	r9, r2
 800b2a6:	4642      	mov	r2, r8
 800b2a8:	464b      	mov	r3, r9
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	f7f5 fb0d 	bl	80008cc <__aeabi_uldivmod>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	895b      	ldrh	r3, [r3, #10]
 800b2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2be:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	79db      	ldrb	r3, [r3, #7]
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d10e      	bne.n	800b2e6 <get_fat+0x206>
					if (cofs <= clen) {
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d80a      	bhi.n	800b2e6 <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d002      	beq.n	800b2de <get_fat+0x1fe>
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	e001      	b.n	800b2e2 <get_fat+0x202>
 800b2de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b2e2:	61fb      	str	r3, [r7, #28]
						break;
 800b2e4:	e04b      	b.n	800b37e <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	79db      	ldrb	r3, [r3, #7]
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	d108      	bne.n	800b300 <get_fat+0x220>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d203      	bcs.n	800b300 <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	61fb      	str	r3, [r7, #28]
					break;
 800b2fe:	e03e      	b.n	800b37e <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	79db      	ldrb	r3, [r3, #7]
 800b304:	2b02      	cmp	r3, #2
 800b306:	d02e      	beq.n	800b366 <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	69db      	ldr	r3, [r3, #28]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d003      	beq.n	800b318 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800b310:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b314:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800b316:	e032      	b.n	800b37e <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	899b      	ldrh	r3, [r3, #12]
 800b320:	089b      	lsrs	r3, r3, #2
 800b322:	b29b      	uxth	r3, r3
 800b324:	4619      	mov	r1, r3
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	fbb3 f3f1 	udiv	r3, r3, r1
 800b32c:	4413      	add	r3, r2
 800b32e:	4619      	mov	r1, r3
 800b330:	69b8      	ldr	r0, [r7, #24]
 800b332:	f7ff fe17 	bl	800af64 <move_window>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d11f      	bne.n	800b37c <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	69ba      	ldr	r2, [r7, #24]
 800b348:	8992      	ldrh	r2, [r2, #12]
 800b34a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b34e:	fb00 f202 	mul.w	r2, r0, r2
 800b352:	1a9b      	subs	r3, r3, r2
 800b354:	440b      	add	r3, r1
 800b356:	4618      	mov	r0, r3
 800b358:	f7ff fa08 	bl	800a76c <ld_dword>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b362:	61fb      	str	r3, [r7, #28]
					break;
 800b364:	e00b      	b.n	800b37e <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b366:	2301      	movs	r3, #1
 800b368:	61fb      	str	r3, [r7, #28]
 800b36a:	e008      	b.n	800b37e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b36c:	bf00      	nop
 800b36e:	e006      	b.n	800b37e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b370:	bf00      	nop
 800b372:	e004      	b.n	800b37e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b374:	bf00      	nop
 800b376:	e002      	b.n	800b37e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b378:	bf00      	nop
 800b37a:	e000      	b.n	800b37e <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b37c:	bf00      	nop
		}
	}

	return val;
 800b37e:	69fb      	ldr	r3, [r7, #28]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3720      	adds	r7, #32
 800b384:	46bd      	mov	sp, r7
 800b386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b38a:	bf00      	nop

0800b38c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b38c:	b590      	push	{r4, r7, lr}
 800b38e:	b089      	sub	sp, #36	; 0x24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b398:	2302      	movs	r3, #2
 800b39a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	f240 8106 	bls.w	800b5b0 <put_fat+0x224>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	f080 8100 	bcs.w	800b5b0 <put_fat+0x224>
		switch (fs->fs_type) {
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	2b04      	cmp	r3, #4
 800b3b6:	f300 8104 	bgt.w	800b5c2 <put_fat+0x236>
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	f280 80b3 	bge.w	800b526 <put_fat+0x19a>
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d003      	beq.n	800b3cc <put_fat+0x40>
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	f000 8083 	beq.w	800b4d0 <put_fat+0x144>
 800b3ca:	e0fa      	b.n	800b5c2 <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	61bb      	str	r3, [r7, #24]
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	085b      	lsrs	r3, r3, #1
 800b3d4:	69ba      	ldr	r2, [r7, #24]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	899b      	ldrh	r3, [r3, #12]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3ea:	4413      	add	r3, r2
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7ff fdb8 	bl	800af64 <move_window>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3f8:	7ffb      	ldrb	r3, [r7, #31]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f040 80da 	bne.w	800b5b4 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	61ba      	str	r2, [r7, #24]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	8992      	ldrh	r2, [r2, #12]
 800b410:	fbb3 f0f2 	udiv	r0, r3, r2
 800b414:	fb00 f202 	mul.w	r2, r0, r2
 800b418:	1a9b      	subs	r3, r3, r2
 800b41a:	440b      	add	r3, r1
 800b41c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	f003 0301 	and.w	r3, r3, #1
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00d      	beq.n	800b444 <put_fat+0xb8>
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	b25b      	sxtb	r3, r3
 800b42e:	f003 030f 	and.w	r3, r3, #15
 800b432:	b25a      	sxtb	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	b2db      	uxtb	r3, r3
 800b438:	011b      	lsls	r3, r3, #4
 800b43a:	b25b      	sxtb	r3, r3
 800b43c:	4313      	orrs	r3, r2
 800b43e:	b25b      	sxtb	r3, r3
 800b440:	b2db      	uxtb	r3, r3
 800b442:	e001      	b.n	800b448 <put_fat+0xbc>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	b2db      	uxtb	r3, r3
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2201      	movs	r2, #1
 800b450:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	899b      	ldrh	r3, [r3, #12]
 800b45a:	4619      	mov	r1, r3
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b462:	4413      	add	r3, r2
 800b464:	4619      	mov	r1, r3
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f7ff fd7c 	bl	800af64 <move_window>
 800b46c:	4603      	mov	r3, r0
 800b46e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b470:	7ffb      	ldrb	r3, [r7, #31]
 800b472:	2b00      	cmp	r3, #0
 800b474:	f040 80a0 	bne.w	800b5b8 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	899b      	ldrh	r3, [r3, #12]
 800b482:	461a      	mov	r2, r3
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	fbb3 f0f2 	udiv	r0, r3, r2
 800b48a:	fb00 f202 	mul.w	r2, r0, r2
 800b48e:	1a9b      	subs	r3, r3, r2
 800b490:	440b      	add	r3, r1
 800b492:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f003 0301 	and.w	r3, r3, #1
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d003      	beq.n	800b4a6 <put_fat+0x11a>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	091b      	lsrs	r3, r3, #4
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	e00e      	b.n	800b4c4 <put_fat+0x138>
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	b25b      	sxtb	r3, r3
 800b4ac:	f023 030f 	bic.w	r3, r3, #15
 800b4b0:	b25a      	sxtb	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	0a1b      	lsrs	r3, r3, #8
 800b4b6:	b25b      	sxtb	r3, r3
 800b4b8:	f003 030f 	and.w	r3, r3, #15
 800b4bc:	b25b      	sxtb	r3, r3
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	b25b      	sxtb	r3, r3
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	70da      	strb	r2, [r3, #3]
			break;
 800b4ce:	e078      	b.n	800b5c2 <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	899b      	ldrh	r3, [r3, #12]
 800b4d8:	085b      	lsrs	r3, r3, #1
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	4619      	mov	r1, r3
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4e4:	4413      	add	r3, r2
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff fd3b 	bl	800af64 <move_window>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4f2:	7ffb      	ldrb	r3, [r7, #31]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d161      	bne.n	800b5bc <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	8992      	ldrh	r2, [r2, #12]
 800b506:	fbb3 f0f2 	udiv	r0, r3, r2
 800b50a:	fb00 f202 	mul.w	r2, r0, r2
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	440b      	add	r3, r1
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	b292      	uxth	r2, r2
 800b516:	4611      	mov	r1, r2
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff fa25 	bl	800a968 <st_word>
			fs->wflag = 1;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2201      	movs	r2, #1
 800b522:	70da      	strb	r2, [r3, #3]
			break;
 800b524:	e04d      	b.n	800b5c2 <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	899b      	ldrh	r3, [r3, #12]
 800b52e:	089b      	lsrs	r3, r3, #2
 800b530:	b29b      	uxth	r3, r3
 800b532:	4619      	mov	r1, r3
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	fbb3 f3f1 	udiv	r3, r3, r1
 800b53a:	4413      	add	r3, r2
 800b53c:	4619      	mov	r1, r3
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7ff fd10 	bl	800af64 <move_window>
 800b544:	4603      	mov	r3, r0
 800b546:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b548:	7ffb      	ldrb	r3, [r7, #31]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d138      	bne.n	800b5c0 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	2b04      	cmp	r3, #4
 800b554:	d017      	beq.n	800b586 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	8992      	ldrh	r2, [r2, #12]
 800b56a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b56e:	fb00 f202 	mul.w	r2, r0, r2
 800b572:	1a9b      	subs	r3, r3, r2
 800b574:	440b      	add	r3, r1
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff f8f8 	bl	800a76c <ld_dword>
 800b57c:	4603      	mov	r3, r0
 800b57e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b582:	4323      	orrs	r3, r4
 800b584:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	8992      	ldrh	r2, [r2, #12]
 800b594:	fbb3 f0f2 	udiv	r0, r3, r2
 800b598:	fb00 f202 	mul.w	r2, r0, r2
 800b59c:	1a9b      	subs	r3, r3, r2
 800b59e:	440b      	add	r3, r1
 800b5a0:	6879      	ldr	r1, [r7, #4]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff f9fb 	bl	800a99e <st_dword>
			fs->wflag = 1;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	70da      	strb	r2, [r3, #3]
			break;
 800b5ae:	e008      	b.n	800b5c2 <put_fat+0x236>
		}
	}
 800b5b0:	bf00      	nop
 800b5b2:	e006      	b.n	800b5c2 <put_fat+0x236>
			if (res != FR_OK) break;
 800b5b4:	bf00      	nop
 800b5b6:	e004      	b.n	800b5c2 <put_fat+0x236>
			if (res != FR_OK) break;
 800b5b8:	bf00      	nop
 800b5ba:	e002      	b.n	800b5c2 <put_fat+0x236>
			if (res != FR_OK) break;
 800b5bc:	bf00      	nop
 800b5be:	e000      	b.n	800b5c2 <put_fat+0x236>
			if (res != FR_OK) break;
 800b5c0:	bf00      	nop
	return res;
 800b5c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3724      	adds	r7, #36	; 0x24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd90      	pop	{r4, r7, pc}

0800b5cc <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b08a      	sub	sp, #40	; 0x28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	3b02      	subs	r3, #2
 800b5dc:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	3b02      	subs	r3, #2
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d301      	bcc.n	800b5ee <find_bitmap+0x22>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	61fb      	str	r3, [r7, #28]
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	61bb      	str	r3, [r7, #24]
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	08db      	lsrs	r3, r3, #3
 800b602:	68f9      	ldr	r1, [r7, #12]
 800b604:	8989      	ldrh	r1, [r1, #12]
 800b606:	fbb3 f3f1 	udiv	r3, r3, r1
 800b60a:	4413      	add	r3, r2
 800b60c:	4619      	mov	r1, r3
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f7ff fca8 	bl	800af64 <move_window>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d002      	beq.n	800b620 <find_bitmap+0x54>
 800b61a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b61e:	e058      	b.n	800b6d2 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	08db      	lsrs	r3, r3, #3
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	8992      	ldrh	r2, [r2, #12]
 800b628:	fbb3 f1f2 	udiv	r1, r3, r2
 800b62c:	fb01 f202 	mul.w	r2, r1, r2
 800b630:	1a9b      	subs	r3, r3, r2
 800b632:	623b      	str	r3, [r7, #32]
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	f003 0307 	and.w	r3, r3, #7
 800b63a:	2201      	movs	r2, #1
 800b63c:	fa02 f303 	lsl.w	r3, r2, r3
 800b640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	4413      	add	r3, r2
 800b64a:	333c      	adds	r3, #60	; 0x3c
 800b64c:	781a      	ldrb	r2, [r3, #0]
 800b64e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b652:	4013      	ands	r3, r2
 800b654:	74fb      	strb	r3, [r7, #19]
 800b656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	3301      	adds	r3, #1
 800b664:	61fb      	str	r3, [r7, #28]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a1b      	ldr	r3, [r3, #32]
 800b66a:	3b02      	subs	r3, #2
 800b66c:	69fa      	ldr	r2, [r7, #28]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d307      	bcc.n	800b682 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800b672:	2300      	movs	r3, #0
 800b674:	61fb      	str	r3, [r7, #28]
 800b676:	2300      	movs	r3, #0
 800b678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	899b      	ldrh	r3, [r3, #12]
 800b680:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800b682:	7cfb      	ldrb	r3, [r7, #19]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d109      	bne.n	800b69c <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	3301      	adds	r3, #1
 800b68c:	617b      	str	r3, [r7, #20]
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	429a      	cmp	r2, r3
 800b694:	d106      	bne.n	800b6a4 <find_bitmap+0xd8>
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	3302      	adds	r3, #2
 800b69a:	e01a      	b.n	800b6d2 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	61bb      	str	r3, [r7, #24]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800b6a4:	69fa      	ldr	r2, [r7, #28]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d101      	bne.n	800b6b0 <find_bitmap+0xe4>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	e010      	b.n	800b6d2 <find_bitmap+0x106>
			} while (bm);
 800b6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1c5      	bne.n	800b644 <find_bitmap+0x78>
			bm = 1;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	623b      	str	r3, [r7, #32]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	899b      	ldrh	r3, [r3, #12]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d3b9      	bcc.n	800b644 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800b6d0:	e793      	b.n	800b5fa <find_bitmap+0x2e>
	}
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3728      	adds	r7, #40	; 0x28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b088      	sub	sp, #32
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	60f8      	str	r0, [r7, #12]
 800b6e2:	60b9      	str	r1, [r7, #8]
 800b6e4:	607a      	str	r2, [r7, #4]
 800b6e6:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	3b02      	subs	r3, #2
 800b6ec:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	08db      	lsrs	r3, r3, #3
 800b6f6:	68f9      	ldr	r1, [r7, #12]
 800b6f8:	8989      	ldrh	r1, [r1, #12]
 800b6fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6fe:	4413      	add	r3, r2
 800b700:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	08db      	lsrs	r3, r3, #3
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	8992      	ldrh	r2, [r2, #12]
 800b70a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b70e:	fb01 f202 	mul.w	r2, r1, r2
 800b712:	1a9b      	subs	r3, r3, r2
 800b714:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	f003 0307 	and.w	r3, r3, #7
 800b71c:	2201      	movs	r2, #1
 800b71e:	fa02 f303 	lsl.w	r3, r2, r3
 800b722:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	617a      	str	r2, [r7, #20]
 800b72a:	4619      	mov	r1, r3
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7ff fc19 	bl	800af64 <move_window>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d001      	beq.n	800b73c <change_bitmap+0x62>
 800b738:	2301      	movs	r3, #1
 800b73a:	e03f      	b.n	800b7bc <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	4413      	add	r3, r2
 800b742:	333c      	adds	r3, #60	; 0x3c
 800b744:	781a      	ldrb	r2, [r3, #0]
 800b746:	7ffb      	ldrb	r3, [r7, #31]
 800b748:	4013      	ands	r3, r2
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	bf14      	ite	ne
 800b750:	2301      	movne	r3, #1
 800b752:	2300      	moveq	r3, #0
 800b754:	b2db      	uxtb	r3, r3
 800b756:	461a      	mov	r2, r3
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d101      	bne.n	800b762 <change_bitmap+0x88>
 800b75e:	2302      	movs	r3, #2
 800b760:	e02c      	b.n	800b7bc <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	4413      	add	r3, r2
 800b768:	333c      	adds	r3, #60	; 0x3c
 800b76a:	781a      	ldrb	r2, [r3, #0]
 800b76c:	7ffb      	ldrb	r3, [r7, #31]
 800b76e:	4053      	eors	r3, r2
 800b770:	b2d9      	uxtb	r1, r3
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	4413      	add	r3, r2
 800b778:	333c      	adds	r3, #60	; 0x3c
 800b77a:	460a      	mov	r2, r1
 800b77c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2201      	movs	r2, #1
 800b782:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3b01      	subs	r3, #1
 800b788:	607b      	str	r3, [r7, #4]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <change_bitmap+0xba>
 800b790:	2300      	movs	r3, #0
 800b792:	e013      	b.n	800b7bc <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800b794:	7ffb      	ldrb	r3, [r7, #31]
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	77fb      	strb	r3, [r7, #31]
 800b79a:	7ffb      	ldrb	r3, [r7, #31]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1cd      	bne.n	800b73c <change_bitmap+0x62>
			bm = 1;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	61bb      	str	r3, [r7, #24]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	899b      	ldrh	r3, [r3, #12]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d3c2      	bcc.n	800b73c <change_bitmap+0x62>
		i = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b7ba:	e7b3      	b.n	800b724 <change_bitmap+0x4a>
	}
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3720      	adds	r7, #32
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	79db      	ldrb	r3, [r3, #7]
 800b7d0:	2b03      	cmp	r3, #3
 800b7d2:	d121      	bne.n	800b818 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	617b      	str	r3, [r7, #20]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	699b      	ldr	r3, [r3, #24]
 800b7de:	613b      	str	r3, [r7, #16]
 800b7e0:	e014      	b.n	800b80c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6818      	ldr	r0, [r3, #0]
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	6979      	ldr	r1, [r7, #20]
 800b7ee:	f7ff fdcd 	bl	800b38c <put_fat>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <fill_first_frag+0x3c>
 800b7fc:	7bfb      	ldrb	r3, [r7, #15]
 800b7fe:	e00c      	b.n	800b81a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	3301      	adds	r3, #1
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	3b01      	subs	r3, #1
 800b80a:	613b      	str	r3, [r7, #16]
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1e7      	bne.n	800b7e2 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3718      	adds	r7, #24
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b086      	sub	sp, #24
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b82e:	e020      	b.n	800b872 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6818      	ldr	r0, [r3, #0]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	69db      	ldr	r3, [r3, #28]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	1c59      	adds	r1, r3, #1
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d905      	bls.n	800b852 <fill_last_frag+0x30>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	69db      	ldr	r3, [r3, #28]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	3302      	adds	r3, #2
 800b850:	e000      	b.n	800b854 <fill_last_frag+0x32>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	461a      	mov	r2, r3
 800b856:	f7ff fd99 	bl	800b38c <put_fat>
 800b85a:	4603      	mov	r3, r0
 800b85c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <fill_last_frag+0x46>
 800b864:	7dfb      	ldrb	r3, [r7, #23]
 800b866:	e009      	b.n	800b87c <fill_last_frag+0x5a>
		obj->n_frag--;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	69db      	ldr	r3, [r3, #28]
 800b86c:	1e5a      	subs	r2, r3, #1
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	69db      	ldr	r3, [r3, #28]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1da      	bne.n	800b830 <fill_last_frag+0xe>
	}
	return FR_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b08a      	sub	sp, #40	; 0x28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b890:	2300      	movs	r3, #0
 800b892:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d904      	bls.n	800b8b2 <remove_chain+0x2e>
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d301      	bcc.n	800b8b6 <remove_chain+0x32>
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	e096      	b.n	800b9e4 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d014      	beq.n	800b8e6 <remove_chain+0x62>
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b04      	cmp	r3, #4
 800b8c2:	d103      	bne.n	800b8cc <remove_chain+0x48>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	79db      	ldrb	r3, [r3, #7]
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d00c      	beq.n	800b8e6 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b8cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8d0:	6879      	ldr	r1, [r7, #4]
 800b8d2:	69b8      	ldr	r0, [r7, #24]
 800b8d4:	f7ff fd5a 	bl	800b38c <put_fat>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b8dc:	7ffb      	ldrb	r3, [r7, #31]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <remove_chain+0x62>
 800b8e2:	7ffb      	ldrb	r3, [r7, #31]
 800b8e4:	e07e      	b.n	800b9e4 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b8e6:	68b9      	ldr	r1, [r7, #8]
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7ff fbf9 	bl	800b0e0 <get_fat>
 800b8ee:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d055      	beq.n	800b9a2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d101      	bne.n	800b900 <remove_chain+0x7c>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e071      	b.n	800b9e4 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b906:	d101      	bne.n	800b90c <remove_chain+0x88>
 800b908:	2301      	movs	r3, #1
 800b90a:	e06b      	b.n	800b9e4 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	2b04      	cmp	r3, #4
 800b912:	d00b      	beq.n	800b92c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b914:	2200      	movs	r2, #0
 800b916:	68b9      	ldr	r1, [r7, #8]
 800b918:	69b8      	ldr	r0, [r7, #24]
 800b91a:	f7ff fd37 	bl	800b38c <put_fat>
 800b91e:	4603      	mov	r3, r0
 800b920:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b922:	7ffb      	ldrb	r3, [r7, #31]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <remove_chain+0xa8>
 800b928:	7ffb      	ldrb	r3, [r7, #31]
 800b92a:	e05b      	b.n	800b9e4 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	69da      	ldr	r2, [r3, #28]
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	6a1b      	ldr	r3, [r3, #32]
 800b934:	3b02      	subs	r3, #2
 800b936:	429a      	cmp	r2, r3
 800b938:	d20b      	bcs.n	800b952 <remove_chain+0xce>
			fs->free_clst++;
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	1c5a      	adds	r2, r3, #1
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	791b      	ldrb	r3, [r3, #4]
 800b948:	f043 0301 	orr.w	r3, r3, #1
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	3301      	adds	r3, #1
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d102      	bne.n	800b962 <remove_chain+0xde>
			ecl = nxt;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	623b      	str	r3, [r7, #32]
 800b960:	e017      	b.n	800b992 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b04      	cmp	r3, #4
 800b968:	d10f      	bne.n	800b98a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800b96a:	6a3a      	ldr	r2, [r7, #32]
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	2300      	movs	r3, #0
 800b974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b976:	69b8      	ldr	r0, [r7, #24]
 800b978:	f7ff feaf 	bl	800b6da <change_bitmap>
 800b97c:	4603      	mov	r3, r0
 800b97e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800b980:	7ffb      	ldrb	r3, [r7, #31]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <remove_chain+0x106>
 800b986:	7ffb      	ldrb	r3, [r7, #31]
 800b988:	e02c      	b.n	800b9e4 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	623b      	str	r3, [r7, #32]
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d3a2      	bcc.n	800b8e6 <remove_chain+0x62>
 800b9a0:	e000      	b.n	800b9a4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800b9a2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	2b04      	cmp	r3, #4
 800b9aa:	d11a      	bne.n	800b9e2 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d103      	bne.n	800b9ba <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	71da      	strb	r2, [r3, #7]
 800b9b8:	e013      	b.n	800b9e2 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	79db      	ldrb	r3, [r3, #7]
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d10f      	bne.n	800b9e2 <remove_chain+0x15e>
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d30a      	bcc.n	800b9e2 <remove_chain+0x15e>
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d802      	bhi.n	800b9e2 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2202      	movs	r2, #2
 800b9e0:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3728      	adds	r7, #40	; 0x28
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b088      	sub	sp, #32
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10d      	bne.n	800ba1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d004      	beq.n	800ba18 <create_chain+0x2c>
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	6a1b      	ldr	r3, [r3, #32]
 800ba12:	69ba      	ldr	r2, [r7, #24]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d31b      	bcc.n	800ba50 <create_chain+0x64>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	61bb      	str	r3, [r7, #24]
 800ba1c:	e018      	b.n	800ba50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7ff fb5d 	bl	800b0e0 <get_fat>
 800ba26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d801      	bhi.n	800ba32 <create_chain+0x46>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e0d9      	b.n	800bbe6 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba38:	d101      	bne.n	800ba3e <create_chain+0x52>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	e0d3      	b.n	800bbe6 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	6a1b      	ldr	r3, [r3, #32]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d201      	bcs.n	800ba4c <create_chain+0x60>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	e0cc      	b.n	800bbe6 <create_chain+0x1fa>
		scl = clst;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d164      	bne.n	800bb22 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800ba58:	2201      	movs	r2, #1
 800ba5a:	69b9      	ldr	r1, [r7, #24]
 800ba5c:	6938      	ldr	r0, [r7, #16]
 800ba5e:	f7ff fdb5 	bl	800b5cc <find_bitmap>
 800ba62:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <create_chain+0x86>
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba70:	d101      	bne.n	800ba76 <create_chain+0x8a>
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	e0b7      	b.n	800bbe6 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800ba76:	2301      	movs	r3, #1
 800ba78:	2201      	movs	r2, #1
 800ba7a:	69f9      	ldr	r1, [r7, #28]
 800ba7c:	6938      	ldr	r0, [r7, #16]
 800ba7e:	f7ff fe2c 	bl	800b6da <change_bitmap>
 800ba82:	4603      	mov	r3, r0
 800ba84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800ba86:	7dfb      	ldrb	r3, [r7, #23]
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d101      	bne.n	800ba90 <create_chain+0xa4>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e0aa      	b.n	800bbe6 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d102      	bne.n	800ba9c <create_chain+0xb0>
 800ba96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba9a:	e0a4      	b.n	800bbe6 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d103      	bne.n	800baaa <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2202      	movs	r2, #2
 800baa6:	71da      	strb	r2, [r3, #7]
 800baa8:	e011      	b.n	800bace <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	79db      	ldrb	r3, [r3, #7]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d10d      	bne.n	800bace <create_chain+0xe2>
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	3301      	adds	r3, #1
 800bab6:	69fa      	ldr	r2, [r7, #28]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d008      	beq.n	800bace <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	69ba      	ldr	r2, [r7, #24]
 800bac2:	1ad2      	subs	r2, r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2203      	movs	r2, #3
 800bacc:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	79db      	ldrb	r3, [r3, #7]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d064      	beq.n	800bba0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	3301      	adds	r3, #1
 800bada:	69fa      	ldr	r2, [r7, #28]
 800badc:	429a      	cmp	r2, r3
 800bade:	d10b      	bne.n	800baf8 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	69db      	ldr	r3, [r3, #28]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <create_chain+0x104>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	69db      	ldr	r3, [r3, #28]
 800baec:	3301      	adds	r3, #1
 800baee:	e000      	b.n	800baf2 <create_chain+0x106>
 800baf0:	2302      	movs	r3, #2
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	61d3      	str	r3, [r2, #28]
 800baf6:	e053      	b.n	800bba0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d102      	bne.n	800bb06 <create_chain+0x11a>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800bb06:	69fa      	ldr	r2, [r7, #28]
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7ff fe89 	bl	800b822 <fill_last_frag>
 800bb10:	4603      	mov	r3, r0
 800bb12:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d142      	bne.n	800bba0 <create_chain+0x1b4>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	61da      	str	r2, [r3, #28]
 800bb20:	e03e      	b.n	800bba0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	6a1b      	ldr	r3, [r3, #32]
 800bb30:	69fa      	ldr	r2, [r7, #28]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d307      	bcc.n	800bb46 <create_chain+0x15a>
				ncl = 2;
 800bb36:	2302      	movs	r3, #2
 800bb38:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bb3a:	69fa      	ldr	r2, [r7, #28]
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d901      	bls.n	800bb46 <create_chain+0x15a>
 800bb42:	2300      	movs	r3, #0
 800bb44:	e04f      	b.n	800bbe6 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bb46:	69f9      	ldr	r1, [r7, #28]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7ff fac9 	bl	800b0e0 <get_fat>
 800bb4e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00e      	beq.n	800bb74 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d003      	beq.n	800bb64 <create_chain+0x178>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb62:	d101      	bne.n	800bb68 <create_chain+0x17c>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	e03e      	b.n	800bbe6 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800bb68:	69fa      	ldr	r2, [r7, #28]
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d1da      	bne.n	800bb26 <create_chain+0x13a>
 800bb70:	2300      	movs	r3, #0
 800bb72:	e038      	b.n	800bbe6 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800bb74:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bb76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb7a:	69f9      	ldr	r1, [r7, #28]
 800bb7c:	6938      	ldr	r0, [r7, #16]
 800bb7e:	f7ff fc05 	bl	800b38c <put_fat>
 800bb82:	4603      	mov	r3, r0
 800bb84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d109      	bne.n	800bba0 <create_chain+0x1b4>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d006      	beq.n	800bba0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bb92:	69fa      	ldr	r2, [r7, #28]
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6938      	ldr	r0, [r7, #16]
 800bb98:	f7ff fbf8 	bl	800b38c <put_fat>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d116      	bne.n	800bbd4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	69fa      	ldr	r2, [r7, #28]
 800bbaa:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	69da      	ldr	r2, [r3, #28]
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	6a1b      	ldr	r3, [r3, #32]
 800bbb4:	3b02      	subs	r3, #2
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d804      	bhi.n	800bbc4 <create_chain+0x1d8>
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	69db      	ldr	r3, [r3, #28]
 800bbbe:	1e5a      	subs	r2, r3, #1
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	791b      	ldrb	r3, [r3, #4]
 800bbc8:	f043 0301 	orr.w	r3, r3, #1
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	711a      	strb	r2, [r3, #4]
 800bbd2:	e007      	b.n	800bbe4 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d102      	bne.n	800bbe0 <create_chain+0x1f4>
 800bbda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbde:	e000      	b.n	800bbe2 <create_chain+0x1f6>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bbe4:	69fb      	ldr	r3, [r7, #28]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3720      	adds	r7, #32
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bbee:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc06:	3304      	adds	r3, #4
 800bc08:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	899b      	ldrh	r3, [r3, #12]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	2200      	movs	r2, #0
 800bc12:	4698      	mov	r8, r3
 800bc14:	4691      	mov	r9, r2
 800bc16:	4642      	mov	r2, r8
 800bc18:	464b      	mov	r3, r9
 800bc1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc1e:	f7f4 fe55 	bl	80008cc <__aeabi_uldivmod>
 800bc22:	4602      	mov	r2, r0
 800bc24:	460b      	mov	r3, r1
 800bc26:	4610      	mov	r0, r2
 800bc28:	4619      	mov	r1, r3
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	895b      	ldrh	r3, [r3, #10]
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	2200      	movs	r2, #0
 800bc32:	461c      	mov	r4, r3
 800bc34:	4615      	mov	r5, r2
 800bc36:	4622      	mov	r2, r4
 800bc38:	462b      	mov	r3, r5
 800bc3a:	f7f4 fe47 	bl	80008cc <__aeabi_uldivmod>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	4613      	mov	r3, r2
 800bc44:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	1d1a      	adds	r2, r3, #4
 800bc4a:	61ba      	str	r2, [r7, #24]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d101      	bne.n	800bc5a <clmt_clust+0x6c>
 800bc56:	2300      	movs	r3, #0
 800bc58:	e010      	b.n	800bc7c <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800bc5a:	69fa      	ldr	r2, [r7, #28]
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d307      	bcc.n	800bc72 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	61fb      	str	r3, [r7, #28]
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc70:	e7e9      	b.n	800bc46 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800bc72:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	4413      	add	r3, r2
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3720      	adds	r7, #32
 800bc80:	46bd      	mov	sp, r7
 800bc82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800bc86 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b086      	sub	sp, #24
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	d102      	bne.n	800bca4 <dir_sdi+0x1e>
 800bc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bca2:	e001      	b.n	800bca8 <dir_sdi+0x22>
 800bca4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d904      	bls.n	800bcb8 <dir_sdi+0x32>
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	f003 031f 	and.w	r3, r3, #31
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d001      	beq.n	800bcbc <dir_sdi+0x36>
		return FR_INT_ERR;
 800bcb8:	2302      	movs	r3, #2
 800bcba:	e074      	b.n	800bda6 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d109      	bne.n	800bce2 <dir_sdi+0x5c>
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d905      	bls.n	800bce2 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcda:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10c      	bne.n	800bd02 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	095b      	lsrs	r3, r3, #5
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	8912      	ldrh	r2, [r2, #8]
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d301      	bcc.n	800bcf8 <dir_sdi+0x72>
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	e056      	b.n	800bda6 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	639a      	str	r2, [r3, #56]	; 0x38
 800bd00:	e02d      	b.n	800bd5e <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	895b      	ldrh	r3, [r3, #10]
 800bd06:	461a      	mov	r2, r3
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	899b      	ldrh	r3, [r3, #12]
 800bd0c:	fb02 f303 	mul.w	r3, r2, r3
 800bd10:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd12:	e019      	b.n	800bd48 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6979      	ldr	r1, [r7, #20]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff f9e1 	bl	800b0e0 <get_fat>
 800bd1e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd26:	d101      	bne.n	800bd2c <dir_sdi+0xa6>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e03c      	b.n	800bda6 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d904      	bls.n	800bd3c <dir_sdi+0xb6>
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	6a1b      	ldr	r3, [r3, #32]
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d301      	bcc.n	800bd40 <dir_sdi+0xba>
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	e032      	b.n	800bda6 <dir_sdi+0x120>
			ofs -= csz;
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d2e1      	bcs.n	800bd14 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800bd50:	6979      	ldr	r1, [r7, #20]
 800bd52:	6938      	ldr	r0, [r7, #16]
 800bd54:	f7ff f9a4 	bl	800b0a0 <clust2sect>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d101      	bne.n	800bd70 <dir_sdi+0xea>
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	e01a      	b.n	800bda6 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	899b      	ldrh	r3, [r3, #12]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd80:	441a      	add	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	899b      	ldrh	r3, [r3, #12]
 800bd90:	461a      	mov	r2, r3
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd98:	fb00 f202 	mul.w	r2, r0, r2
 800bd9c:	1a9b      	subs	r3, r3, r2
 800bd9e:	18ca      	adds	r2, r1, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b086      	sub	sp, #24
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc2:	3320      	adds	r3, #32
 800bdc4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00b      	beq.n	800bde6 <dir_next+0x38>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	2b04      	cmp	r3, #4
 800bdd4:	d102      	bne.n	800bddc <dir_next+0x2e>
 800bdd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdda:	e001      	b.n	800bde0 <dir_next+0x32>
 800bddc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d801      	bhi.n	800bdea <dir_next+0x3c>
 800bde6:	2304      	movs	r3, #4
 800bde8:	e0c3      	b.n	800bf72 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	899b      	ldrh	r3, [r3, #12]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdf6:	fb01 f202 	mul.w	r2, r1, r2
 800bdfa:	1a9b      	subs	r3, r3, r2
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f040 80a5 	bne.w	800bf4c <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10b      	bne.n	800be2c <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	095b      	lsrs	r3, r3, #5
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	8912      	ldrh	r2, [r2, #8]
 800be1c:	4293      	cmp	r3, r2
 800be1e:	f0c0 8095 	bcc.w	800bf4c <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	639a      	str	r2, [r3, #56]	; 0x38
 800be28:	2304      	movs	r3, #4
 800be2a:	e0a2      	b.n	800bf72 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	899b      	ldrh	r3, [r3, #12]
 800be30:	461a      	mov	r2, r3
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	fbb3 f3f2 	udiv	r3, r3, r2
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	8952      	ldrh	r2, [r2, #10]
 800be3c:	3a01      	subs	r2, #1
 800be3e:	4013      	ands	r3, r2
 800be40:	2b00      	cmp	r3, #0
 800be42:	f040 8083 	bne.w	800bf4c <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be4c:	4619      	mov	r1, r3
 800be4e:	4610      	mov	r0, r2
 800be50:	f7ff f946 	bl	800b0e0 <get_fat>
 800be54:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d801      	bhi.n	800be60 <dir_next+0xb2>
 800be5c:	2302      	movs	r3, #2
 800be5e:	e088      	b.n	800bf72 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be66:	d101      	bne.n	800be6c <dir_next+0xbe>
 800be68:	2301      	movs	r3, #1
 800be6a:	e082      	b.n	800bf72 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6a1b      	ldr	r3, [r3, #32]
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	429a      	cmp	r2, r3
 800be74:	d360      	bcc.n	800bf38 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d104      	bne.n	800be86 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	639a      	str	r2, [r3, #56]	; 0x38
 800be82:	2304      	movs	r3, #4
 800be84:	e075      	b.n	800bf72 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be8c:	4619      	mov	r1, r3
 800be8e:	4610      	mov	r0, r2
 800be90:	f7ff fdac 	bl	800b9ec <create_chain>
 800be94:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <dir_next+0xf2>
 800be9c:	2307      	movs	r3, #7
 800be9e:	e068      	b.n	800bf72 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d101      	bne.n	800beaa <dir_next+0xfc>
 800bea6:	2302      	movs	r3, #2
 800bea8:	e063      	b.n	800bf72 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beb0:	d101      	bne.n	800beb6 <dir_next+0x108>
 800beb2:	2301      	movs	r3, #1
 800beb4:	e05d      	b.n	800bf72 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	79db      	ldrb	r3, [r3, #7]
 800beba:	f043 0304 	orr.w	r3, r3, #4
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f7ff f809 	bl	800aedc <sync_window>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <dir_next+0x126>
 800bed0:	2301      	movs	r3, #1
 800bed2:	e04e      	b.n	800bf72 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	899b      	ldrh	r3, [r3, #12]
 800bede:	461a      	mov	r2, r3
 800bee0:	2100      	movs	r1, #0
 800bee2:	f7fe fe31 	bl	800ab48 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bee6:	2300      	movs	r3, #0
 800bee8:	613b      	str	r3, [r7, #16]
 800beea:	6979      	ldr	r1, [r7, #20]
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7ff f8d7 	bl	800b0a0 <clust2sect>
 800bef2:	4602      	mov	r2, r0
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	639a      	str	r2, [r3, #56]	; 0x38
 800bef8:	e012      	b.n	800bf20 <dir_next+0x172>
						fs->wflag = 1;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2201      	movs	r2, #1
 800befe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f7fe ffeb 	bl	800aedc <sync_window>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <dir_next+0x162>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e030      	b.n	800bf72 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	3301      	adds	r3, #1
 800bf14:	613b      	str	r3, [r7, #16]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	639a      	str	r2, [r3, #56]	; 0x38
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	895b      	ldrh	r3, [r3, #10]
 800bf24:	461a      	mov	r2, r3
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d3e6      	bcc.n	800befa <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	1ad2      	subs	r2, r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800bf3e:	6979      	ldr	r1, [r7, #20]
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7ff f8ad 	bl	800b0a0 <clust2sect>
 800bf46:	4602      	mov	r2, r0
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	899b      	ldrh	r3, [r3, #12]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf64:	fb00 f202 	mul.w	r2, r0, r2
 800bf68:	1a9b      	subs	r3, r3, r2
 800bf6a:	18ca      	adds	r2, r1, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b086      	sub	sp, #24
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
 800bf82:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bf8a:	2100      	movs	r1, #0
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff fe7a 	bl	800bc86 <dir_sdi>
 800bf92:	4603      	mov	r3, r0
 800bf94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d140      	bne.n	800c01e <dir_alloc+0xa4>
		n = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f7fe ffdc 	bl	800af64 <move_window>
 800bfac:	4603      	mov	r3, r0
 800bfae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d132      	bne.n	800c01c <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b04      	cmp	r3, #4
 800bfbc:	d108      	bne.n	800bfd0 <dir_alloc+0x56>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	b25b      	sxtb	r3, r3
 800bfc6:	43db      	mvns	r3, r3
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	09db      	lsrs	r3, r3, #7
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	e00f      	b.n	800bff0 <dir_alloc+0x76>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	2be5      	cmp	r3, #229	; 0xe5
 800bfd8:	d004      	beq.n	800bfe4 <dir_alloc+0x6a>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d101      	bne.n	800bfe8 <dir_alloc+0x6e>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e000      	b.n	800bfea <dir_alloc+0x70>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d007      	beq.n	800c004 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	3301      	adds	r3, #1
 800bff8:	613b      	str	r3, [r7, #16]
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d102      	bne.n	800c008 <dir_alloc+0x8e>
 800c002:	e00c      	b.n	800c01e <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c004:	2300      	movs	r3, #0
 800c006:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c008:	2101      	movs	r1, #1
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7ff fecf 	bl	800bdae <dir_next>
 800c010:	4603      	mov	r3, r0
 800c012:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c014:	7dfb      	ldrb	r3, [r7, #23]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d0c2      	beq.n	800bfa0 <dir_alloc+0x26>
 800c01a:	e000      	b.n	800c01e <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800c01c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
 800c020:	2b04      	cmp	r3, #4
 800c022:	d101      	bne.n	800c028 <dir_alloc+0xae>
 800c024:	2307      	movs	r3, #7
 800c026:	75fb      	strb	r3, [r7, #23]
	return res;
 800c028:	7dfb      	ldrb	r3, [r7, #23]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3718      	adds	r7, #24
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b084      	sub	sp, #16
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	331a      	adds	r3, #26
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fb7b 	bl	800a73c <ld_word>
 800c046:	4603      	mov	r3, r0
 800c048:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	2b03      	cmp	r3, #3
 800c050:	d109      	bne.n	800c066 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	3314      	adds	r3, #20
 800c056:	4618      	mov	r0, r3
 800c058:	f7fe fb70 	bl	800a73c <ld_word>
 800c05c:	4603      	mov	r3, r0
 800c05e:	041b      	lsls	r3, r3, #16
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	4313      	orrs	r3, r2
 800c064:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c066:	68fb      	ldr	r3, [r7, #12]
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	331a      	adds	r3, #26
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	b292      	uxth	r2, r2
 800c084:	4611      	mov	r1, r2
 800c086:	4618      	mov	r0, r3
 800c088:	f7fe fc6e 	bl	800a968 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	2b03      	cmp	r3, #3
 800c092:	d109      	bne.n	800c0a8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	f103 0214 	add.w	r2, r3, #20
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	0c1b      	lsrs	r3, r3, #16
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	4610      	mov	r0, r2
 800c0a4:	f7fe fc60 	bl	800a968 <st_word>
	}
}
 800c0a8:	bf00      	nop
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c0b0:	b590      	push	{r4, r7, lr}
 800c0b2:	b087      	sub	sp, #28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	331a      	adds	r3, #26
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fe fb3c 	bl	800a73c <ld_word>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <cmp_lfn+0x1e>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	e059      	b.n	800c182 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0d6:	1e5a      	subs	r2, r3, #1
 800c0d8:	4613      	mov	r3, r2
 800c0da:	005b      	lsls	r3, r3, #1
 800c0dc:	4413      	add	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	81fb      	strh	r3, [r7, #14]
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	613b      	str	r3, [r7, #16]
 800c0ec:	e033      	b.n	800c156 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c0ee:	4a27      	ldr	r2, [pc, #156]	; (800c18c <cmp_lfn+0xdc>)
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fe fb1d 	bl	800a73c <ld_word>
 800c102:	4603      	mov	r3, r0
 800c104:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c106:	89fb      	ldrh	r3, [r7, #14]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01a      	beq.n	800c142 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	2bfe      	cmp	r3, #254	; 0xfe
 800c110:	d812      	bhi.n	800c138 <cmp_lfn+0x88>
 800c112:	89bb      	ldrh	r3, [r7, #12]
 800c114:	4618      	mov	r0, r3
 800c116:	f003 fa23 	bl	800f560 <ff_wtoupper>
 800c11a:	4603      	mov	r3, r0
 800c11c:	461c      	mov	r4, r3
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	617a      	str	r2, [r7, #20]
 800c124:	005b      	lsls	r3, r3, #1
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	4413      	add	r3, r2
 800c12a:	881b      	ldrh	r3, [r3, #0]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f003 fa17 	bl	800f560 <ff_wtoupper>
 800c132:	4603      	mov	r3, r0
 800c134:	429c      	cmp	r4, r3
 800c136:	d001      	beq.n	800c13c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c138:	2300      	movs	r3, #0
 800c13a:	e022      	b.n	800c182 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c13c:	89bb      	ldrh	r3, [r7, #12]
 800c13e:	81fb      	strh	r3, [r7, #14]
 800c140:	e006      	b.n	800c150 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c142:	89bb      	ldrh	r3, [r7, #12]
 800c144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c148:	4293      	cmp	r3, r2
 800c14a:	d001      	beq.n	800c150 <cmp_lfn+0xa0>
 800c14c:	2300      	movs	r3, #0
 800c14e:	e018      	b.n	800c182 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	3301      	adds	r3, #1
 800c154:	613b      	str	r3, [r7, #16]
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	2b0c      	cmp	r3, #12
 800c15a:	d9c8      	bls.n	800c0ee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00b      	beq.n	800c180 <cmp_lfn+0xd0>
 800c168:	89fb      	ldrh	r3, [r7, #14]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d008      	beq.n	800c180 <cmp_lfn+0xd0>
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	4413      	add	r3, r2
 800c176:	881b      	ldrh	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <cmp_lfn+0xd0>
 800c17c:	2300      	movs	r3, #0
 800c17e:	e000      	b.n	800c182 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c180:	2301      	movs	r3, #1
}
 800c182:	4618      	mov	r0, r3
 800c184:	371c      	adds	r7, #28
 800c186:	46bd      	mov	sp, r7
 800c188:	bd90      	pop	{r4, r7, pc}
 800c18a:	bf00      	nop
 800c18c:	08011524 	.word	0x08011524

0800c190 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	331a      	adds	r3, #26
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe facc 	bl	800a73c <ld_word>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <pick_lfn+0x1e>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	e04d      	b.n	800c24a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1b6:	1e5a      	subs	r2, r3, #1
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	4413      	add	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	81fb      	strh	r3, [r7, #14]
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	613b      	str	r3, [r7, #16]
 800c1cc:	e028      	b.n	800c220 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c1ce:	4a21      	ldr	r2, [pc, #132]	; (800c254 <pick_lfn+0xc4>)
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	4413      	add	r3, r2
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe faad 	bl	800a73c <ld_word>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c1e6:	89fb      	ldrh	r3, [r7, #14]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00f      	beq.n	800c20c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	2bfe      	cmp	r3, #254	; 0xfe
 800c1f0:	d901      	bls.n	800c1f6 <pick_lfn+0x66>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e029      	b.n	800c24a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c1f6:	89bb      	ldrh	r3, [r7, #12]
 800c1f8:	81fb      	strh	r3, [r7, #14]
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	1c5a      	adds	r2, r3, #1
 800c1fe:	617a      	str	r2, [r7, #20]
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	4413      	add	r3, r2
 800c206:	89fa      	ldrh	r2, [r7, #14]
 800c208:	801a      	strh	r2, [r3, #0]
 800c20a:	e006      	b.n	800c21a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c20c:	89bb      	ldrh	r3, [r7, #12]
 800c20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c212:	4293      	cmp	r3, r2
 800c214:	d001      	beq.n	800c21a <pick_lfn+0x8a>
 800c216:	2300      	movs	r3, #0
 800c218:	e017      	b.n	800c24a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	3301      	adds	r3, #1
 800c21e:	613b      	str	r3, [r7, #16]
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	2b0c      	cmp	r3, #12
 800c224:	d9d3      	bls.n	800c1ce <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d00a      	beq.n	800c248 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	2bfe      	cmp	r3, #254	; 0xfe
 800c236:	d901      	bls.n	800c23c <pick_lfn+0xac>
 800c238:	2300      	movs	r3, #0
 800c23a:	e006      	b.n	800c24a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	005b      	lsls	r3, r3, #1
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	4413      	add	r3, r2
 800c244:	2200      	movs	r2, #0
 800c246:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c248:	2301      	movs	r3, #1
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3718      	adds	r7, #24
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	08011524 	.word	0x08011524

0800c258 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b088      	sub	sp, #32
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	4611      	mov	r1, r2
 800c264:	461a      	mov	r2, r3
 800c266:	460b      	mov	r3, r1
 800c268:	71fb      	strb	r3, [r7, #7]
 800c26a:	4613      	mov	r3, r2
 800c26c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	330d      	adds	r3, #13
 800c272:	79ba      	ldrb	r2, [r7, #6]
 800c274:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	330b      	adds	r3, #11
 800c27a:	220f      	movs	r2, #15
 800c27c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	330c      	adds	r3, #12
 800c282:	2200      	movs	r2, #0
 800c284:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	331a      	adds	r3, #26
 800c28a:	2100      	movs	r1, #0
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fe fb6b 	bl	800a968 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c292:	79fb      	ldrb	r3, [r7, #7]
 800c294:	1e5a      	subs	r2, r3, #1
 800c296:	4613      	mov	r3, r2
 800c298:	005b      	lsls	r3, r3, #1
 800c29a:	4413      	add	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	82fb      	strh	r3, [r7, #22]
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c2aa:	8afb      	ldrh	r3, [r7, #22]
 800c2ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d007      	beq.n	800c2c4 <put_lfn+0x6c>
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	1c5a      	adds	r2, r3, #1
 800c2b8:	61fa      	str	r2, [r7, #28]
 800c2ba:	005b      	lsls	r3, r3, #1
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	4413      	add	r3, r2
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c2c4:	4a17      	ldr	r2, [pc, #92]	; (800c324 <put_lfn+0xcc>)
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	8afa      	ldrh	r2, [r7, #22]
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fe fb46 	bl	800a968 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c2dc:	8afb      	ldrh	r3, [r7, #22]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d102      	bne.n	800c2e8 <put_lfn+0x90>
 800c2e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2e6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	61bb      	str	r3, [r7, #24]
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	2b0c      	cmp	r3, #12
 800c2f2:	d9da      	bls.n	800c2aa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c2f4:	8afb      	ldrh	r3, [r7, #22]
 800c2f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d006      	beq.n	800c30c <put_lfn+0xb4>
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	005b      	lsls	r3, r3, #1
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	4413      	add	r3, r2
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d103      	bne.n	800c314 <put_lfn+0xbc>
 800c30c:	79fb      	ldrb	r3, [r7, #7]
 800c30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c312:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	79fa      	ldrb	r2, [r7, #7]
 800c318:	701a      	strb	r2, [r3, #0]
}
 800c31a:	bf00      	nop
 800c31c:	3720      	adds	r7, #32
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	08011524 	.word	0x08011524

0800c328 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08c      	sub	sp, #48	; 0x30
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c336:	220b      	movs	r2, #11
 800c338:	68b9      	ldr	r1, [r7, #8]
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f7fe fbe3 	bl	800ab06 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	2b05      	cmp	r3, #5
 800c344:	d92b      	bls.n	800c39e <gen_numname+0x76>
		sr = seq;
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c34a:	e022      	b.n	800c392 <gen_numname+0x6a>
			wc = *lfn++;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	1c9a      	adds	r2, r3, #2
 800c350:	607a      	str	r2, [r7, #4]
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c356:	2300      	movs	r3, #0
 800c358:	62bb      	str	r3, [r7, #40]	; 0x28
 800c35a:	e017      	b.n	800c38c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	005a      	lsls	r2, r3, #1
 800c360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c362:	f003 0301 	and.w	r3, r3, #1
 800c366:	4413      	add	r3, r2
 800c368:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c36a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c36c:	085b      	lsrs	r3, r3, #1
 800c36e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c376:	2b00      	cmp	r3, #0
 800c378:	d005      	beq.n	800c386 <gen_numname+0x5e>
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c380:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c384:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c388:	3301      	adds	r3, #1
 800c38a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38e:	2b0f      	cmp	r3, #15
 800c390:	d9e4      	bls.n	800c35c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1d8      	bne.n	800c34c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c39e:	2307      	movs	r3, #7
 800c3a0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	f003 030f 	and.w	r3, r3, #15
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	3330      	adds	r3, #48	; 0x30
 800c3ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3b6:	2b39      	cmp	r3, #57	; 0x39
 800c3b8:	d904      	bls.n	800c3c4 <gen_numname+0x9c>
 800c3ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3be:	3307      	adds	r3, #7
 800c3c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	1e5a      	subs	r2, r3, #1
 800c3c8:	62ba      	str	r2, [r7, #40]	; 0x28
 800c3ca:	3330      	adds	r3, #48	; 0x30
 800c3cc:	443b      	add	r3, r7
 800c3ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c3d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	091b      	lsrs	r3, r3, #4
 800c3da:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1df      	bne.n	800c3a2 <gen_numname+0x7a>
	ns[i] = '~';
 800c3e2:	f107 0214 	add.w	r2, r7, #20
 800c3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e8:	4413      	add	r3, r2
 800c3ea:	227e      	movs	r2, #126	; 0x7e
 800c3ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	627b      	str	r3, [r7, #36]	; 0x24
 800c3f2:	e002      	b.n	800c3fa <gen_numname+0xd2>
 800c3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c3fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d205      	bcs.n	800c40e <gen_numname+0xe6>
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	4413      	add	r3, r2
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	2b20      	cmp	r3, #32
 800c40c:	d1f2      	bne.n	800c3f4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c410:	2b07      	cmp	r3, #7
 800c412:	d807      	bhi.n	800c424 <gen_numname+0xfc>
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	1c5a      	adds	r2, r3, #1
 800c418:	62ba      	str	r2, [r7, #40]	; 0x28
 800c41a:	3330      	adds	r3, #48	; 0x30
 800c41c:	443b      	add	r3, r7
 800c41e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c422:	e000      	b.n	800c426 <gen_numname+0xfe>
 800c424:	2120      	movs	r1, #32
 800c426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c428:	1c5a      	adds	r2, r3, #1
 800c42a:	627a      	str	r2, [r7, #36]	; 0x24
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	4413      	add	r3, r2
 800c430:	460a      	mov	r2, r1
 800c432:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c436:	2b07      	cmp	r3, #7
 800c438:	d9e9      	bls.n	800c40e <gen_numname+0xe6>
}
 800c43a:	bf00      	nop
 800c43c:	bf00      	nop
 800c43e:	3730      	adds	r7, #48	; 0x30
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c450:	230b      	movs	r3, #11
 800c452:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	b2da      	uxtb	r2, r3
 800c458:	0852      	lsrs	r2, r2, #1
 800c45a:	01db      	lsls	r3, r3, #7
 800c45c:	4313      	orrs	r3, r2
 800c45e:	b2da      	uxtb	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	1c59      	adds	r1, r3, #1
 800c464:	6079      	str	r1, [r7, #4]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	4413      	add	r3, r2
 800c46a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	3b01      	subs	r3, #1
 800c470:	60bb      	str	r3, [r7, #8]
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1ed      	bne.n	800c454 <sum_sfn+0x10>
	return sum;
 800c478:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3714      	adds	r7, #20
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800c486:	b480      	push	{r7}
 800c488:	b087      	sub	sp, #28
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	3301      	adds	r3, #1
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	3301      	adds	r3, #1
 800c496:	015b      	lsls	r3, r3, #5
 800c498:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800c49a:	2300      	movs	r3, #0
 800c49c:	827b      	strh	r3, [r7, #18]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	617b      	str	r3, [r7, #20]
 800c4a2:	e018      	b.n	800c4d6 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d103      	bne.n	800c4b2 <xdir_sum+0x2c>
			i++;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	e00e      	b.n	800c4d0 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c4b2:	8a7b      	ldrh	r3, [r7, #18]
 800c4b4:	03db      	lsls	r3, r3, #15
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	8a7b      	ldrh	r3, [r7, #18]
 800c4ba:	085b      	lsrs	r3, r3, #1
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	4413      	add	r3, r2
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	6879      	ldr	r1, [r7, #4]
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	440b      	add	r3, r1
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	4413      	add	r3, r2
 800c4ce:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	617b      	str	r3, [r7, #20]
 800c4d6:	697a      	ldr	r2, [r7, #20]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d3e2      	bcc.n	800c4a4 <xdir_sum+0x1e>
		}
	}
	return sum;
 800c4de:	8a7b      	ldrh	r3, [r7, #18]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	371c      	adds	r7, #28
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800c4f8:	e01f      	b.n	800c53a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800c4fa:	89bb      	ldrh	r3, [r7, #12]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f003 f82f 	bl	800f560 <ff_wtoupper>
 800c502:	4603      	mov	r3, r0
 800c504:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800c506:	89fb      	ldrh	r3, [r7, #14]
 800c508:	03db      	lsls	r3, r3, #15
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	89fb      	ldrh	r3, [r7, #14]
 800c50e:	085b      	lsrs	r3, r3, #1
 800c510:	b29b      	uxth	r3, r3
 800c512:	4413      	add	r3, r2
 800c514:	b29a      	uxth	r2, r3
 800c516:	89bb      	ldrh	r3, [r7, #12]
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	4413      	add	r3, r2
 800c51e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800c520:	89fb      	ldrh	r3, [r7, #14]
 800c522:	03db      	lsls	r3, r3, #15
 800c524:	b29a      	uxth	r2, r3
 800c526:	89fb      	ldrh	r3, [r7, #14]
 800c528:	085b      	lsrs	r3, r3, #1
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	4413      	add	r3, r2
 800c52e:	b29a      	uxth	r2, r3
 800c530:	89bb      	ldrh	r3, [r7, #12]
 800c532:	0a1b      	lsrs	r3, r3, #8
 800c534:	b29b      	uxth	r3, r3
 800c536:	4413      	add	r3, r2
 800c538:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	1c9a      	adds	r2, r3, #2
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	81bb      	strh	r3, [r7, #12]
 800c544:	89bb      	ldrh	r3, [r7, #12]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1d7      	bne.n	800c4fa <xname_sum+0xe>
	}
	return sum;
 800c54a:	89fb      	ldrh	r3, [r7, #14]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b086      	sub	sp, #24
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800c562:	2340      	movs	r3, #64	; 0x40
 800c564:	613b      	str	r3, [r7, #16]
 800c566:	2300      	movs	r3, #0
 800c568:	60fb      	str	r3, [r7, #12]
 800c56a:	e02c      	b.n	800c5c6 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	f003 031f 	and.w	r3, r3, #31
 800c572:	2b00      	cmp	r3, #0
 800c574:	d102      	bne.n	800c57c <get_xdir_info+0x28>
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	3302      	adds	r3, #2
 800c57a:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	4413      	add	r3, r2
 800c582:	4618      	mov	r0, r3
 800c584:	f7fe f8da 	bl	800a73c <ld_word>
 800c588:	4603      	mov	r3, r0
 800c58a:	2100      	movs	r1, #0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f002 ffab 	bl	800f4e8 <ff_convert>
 800c592:	4603      	mov	r3, r0
 800c594:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800c596:	897b      	ldrh	r3, [r7, #10]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <get_xdir_info+0x4e>
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	2bfe      	cmp	r3, #254	; 0xfe
 800c5a0:	d902      	bls.n	800c5a8 <get_xdir_info+0x54>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	617b      	str	r3, [r7, #20]
 800c5a6:	e015      	b.n	800c5d4 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	1c5a      	adds	r2, r3, #1
 800c5ac:	617a      	str	r2, [r7, #20]
 800c5ae:	897a      	ldrh	r2, [r7, #10]
 800c5b0:	b2d1      	uxtb	r1, r2
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	460a      	mov	r2, r1
 800c5b8:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	3302      	adds	r3, #2
 800c5be:	613b      	str	r3, [r7, #16]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	60fb      	str	r3, [r7, #12]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3323      	adds	r3, #35	; 0x23
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d3cb      	bcc.n	800c56c <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d106      	bne.n	800c5e8 <get_xdir_info+0x94>
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	617a      	str	r2, [r7, #20]
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	223f      	movs	r2, #63	; 0x3f
 800c5e6:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	331a      	adds	r3, #26
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	791a      	ldrb	r2, [r3, #4]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	7b1b      	ldrb	r3, [r3, #12]
 800c606:	f003 0310 	and.w	r3, r3, #16
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d107      	bne.n	800c61e <get_xdir_info+0xca>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	3338      	adds	r3, #56	; 0x38
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe f8cd 	bl	800a7b2 <ld_qword>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	e003      	b.n	800c626 <get_xdir_info+0xd2>
 800c61e:	f04f 0200 	mov.w	r2, #0
 800c622:	f04f 0300 	mov.w	r3, #0
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	330c      	adds	r3, #12
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe f883 	bl	800a73c <ld_word>
 800c636:	4603      	mov	r3, r0
 800c638:	461a      	mov	r2, r3
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	330e      	adds	r3, #14
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe f87a 	bl	800a73c <ld_word>
 800c648:	4603      	mov	r3, r0
 800c64a:	461a      	mov	r2, r3
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	811a      	strh	r2, [r3, #8]
}
 800c650:	bf00      	nop
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800c658:	b590      	push	{r4, r7, lr}
 800c65a:	b087      	sub	sp, #28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c670:	4619      	mov	r1, r3
 800c672:	4610      	mov	r0, r2
 800c674:	f7fe fc76 	bl	800af64 <move_window>
 800c678:	4603      	mov	r3, r0
 800c67a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <load_xdir+0x2e>
 800c682:	7bfb      	ldrb	r3, [r7, #15]
 800c684:	e09f      	b.n	800c7c6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b85      	cmp	r3, #133	; 0x85
 800c68e:	d001      	beq.n	800c694 <load_xdir+0x3c>
 800c690:	2302      	movs	r3, #2
 800c692:	e098      	b.n	800c7c6 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c698:	2220      	movs	r2, #32
 800c69a:	4619      	mov	r1, r3
 800c69c:	6938      	ldr	r0, [r7, #16]
 800c69e:	f7fe fa32 	bl	800ab06 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	015b      	lsls	r3, r3, #5
 800c6ac:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	2b5f      	cmp	r3, #95	; 0x5f
 800c6b2:	d903      	bls.n	800c6bc <load_xdir+0x64>
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c6ba:	d901      	bls.n	800c6c0 <load_xdir+0x68>
 800c6bc:	2302      	movs	r3, #2
 800c6be:	e082      	b.n	800c7c6 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff fb73 	bl	800bdae <dir_next>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <load_xdir+0x7e>
 800c6d2:	7bfb      	ldrb	r3, [r7, #15]
 800c6d4:	e077      	b.n	800c7c6 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6de:	4619      	mov	r1, r3
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	f7fe fc3f 	bl	800af64 <move_window>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <load_xdir+0x9c>
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
 800c6f2:	e068      	b.n	800c7c6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	2bc0      	cmp	r3, #192	; 0xc0
 800c6fc:	d001      	beq.n	800c702 <load_xdir+0xaa>
 800c6fe:	2302      	movs	r3, #2
 800c700:	e061      	b.n	800c7c6 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f103 0020 	add.w	r0, r3, #32
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c70c:	2220      	movs	r2, #32
 800c70e:	4619      	mov	r1, r3
 800c710:	f7fe f9f9 	bl	800ab06 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	3323      	adds	r3, #35	; 0x23
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	332c      	adds	r3, #44	; 0x2c
 800c71c:	4a2c      	ldr	r2, [pc, #176]	; (800c7d0 <load_xdir+0x178>)
 800c71e:	fba2 2303 	umull	r2, r3, r2, r3
 800c722:	08db      	lsrs	r3, r3, #3
 800c724:	015b      	lsls	r3, r3, #5
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d201      	bcs.n	800c730 <load_xdir+0xd8>
 800c72c:	2302      	movs	r3, #2
 800c72e:	e04a      	b.n	800c7c6 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800c730:	2340      	movs	r3, #64	; 0x40
 800c732:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800c734:	2100      	movs	r1, #0
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff fb39 	bl	800bdae <dir_next>
 800c73c:	4603      	mov	r3, r0
 800c73e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d001      	beq.n	800c74a <load_xdir+0xf2>
 800c746:	7bfb      	ldrb	r3, [r7, #15]
 800c748:	e03d      	b.n	800c7c6 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c752:	4619      	mov	r1, r3
 800c754:	4610      	mov	r0, r2
 800c756:	f7fe fc05 	bl	800af64 <move_window>
 800c75a:	4603      	mov	r3, r0
 800c75c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d001      	beq.n	800c768 <load_xdir+0x110>
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	e02e      	b.n	800c7c6 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	2bc1      	cmp	r3, #193	; 0xc1
 800c770:	d001      	beq.n	800c776 <load_xdir+0x11e>
 800c772:	2302      	movs	r3, #2
 800c774:	e027      	b.n	800c7c6 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c77c:	d208      	bcs.n	800c790 <load_xdir+0x138>
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	18d0      	adds	r0, r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c788:	2220      	movs	r2, #32
 800c78a:	4619      	mov	r1, r3
 800c78c:	f7fe f9bb 	bl	800ab06 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	3320      	adds	r3, #32
 800c794:	617b      	str	r3, [r7, #20]
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d3ca      	bcc.n	800c734 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c7a4:	d80e      	bhi.n	800c7c4 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800c7a6:	6938      	ldr	r0, [r7, #16]
 800c7a8:	f7ff fe6d 	bl	800c486 <xdir_sum>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	461c      	mov	r4, r3
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	3302      	adds	r3, #2
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fd ffc1 	bl	800a73c <ld_word>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	429c      	cmp	r4, r3
 800c7be:	d001      	beq.n	800c7c4 <load_xdir+0x16c>
 800c7c0:	2302      	movs	r3, #2
 800c7c2:	e000      	b.n	800c7c6 <load_xdir+0x16e>
	}
	return FR_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	371c      	adds	r7, #28
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd90      	pop	{r4, r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	88888889 	.word	0x88888889

0800c7d4 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800c7d4:	b5b0      	push	{r4, r5, r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800c7de:	6839      	ldr	r1, [r7, #0]
 800c7e0:	6808      	ldr	r0, [r1, #0]
 800c7e2:	6879      	ldr	r1, [r7, #4]
 800c7e4:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800c7e6:	6839      	ldr	r1, [r7, #0]
 800c7e8:	6a08      	ldr	r0, [r1, #32]
 800c7ea:	6879      	ldr	r1, [r7, #4]
 800c7ec:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800c7f2:	b2c8      	uxtb	r0, r1
 800c7f4:	6879      	ldr	r1, [r7, #4]
 800c7f6:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	460c      	mov	r4, r1
 800c800:	4605      	mov	r5, r0
 800c802:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800c806:	2300      	movs	r3, #0
 800c808:	6879      	ldr	r1, [r7, #4]
 800c80a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c81a:	4619      	mov	r1, r3
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f7ff fa32 	bl	800bc86 <dir_sdi>
 800c822:	4603      	mov	r3, r0
 800c824:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c826:	7bfb      	ldrb	r3, [r7, #15]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d104      	bne.n	800c836 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7ff ff13 	bl	800c658 <load_xdir>
 800c832:	4603      	mov	r3, r0
 800c834:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800c836:	7bfb      	ldrb	r3, [r7, #15]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bdb0      	pop	{r4, r5, r7, pc}

0800c840 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800c840:	b590      	push	{r4, r7, lr}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	695b      	ldr	r3, [r3, #20]
 800c84e:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	1c9c      	adds	r4, r3, #2
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f7ff fe16 	bl	800c486 <xdir_sum>
 800c85a:	4603      	mov	r3, r0
 800c85c:	4619      	mov	r1, r3
 800c85e:	4620      	mov	r0, r4
 800c860:	f7fe f882 	bl	800a968 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	3301      	adds	r3, #1
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	3301      	adds	r3, #1
 800c86c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c872:	4619      	mov	r1, r3
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff fa06 	bl	800bc86 <dir_sdi>
 800c87a:	4603      	mov	r3, r0
 800c87c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c87e:	e026      	b.n	800c8ce <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c888:	4619      	mov	r1, r3
 800c88a:	4610      	mov	r0, r2
 800c88c:	f7fe fb6a 	bl	800af64 <move_window>
 800c890:	4603      	mov	r3, r0
 800c892:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c894:	7dfb      	ldrb	r3, [r7, #23]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d11d      	bne.n	800c8d6 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89e:	2220      	movs	r2, #32
 800c8a0:	68f9      	ldr	r1, [r7, #12]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe f92f 	bl	800ab06 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	3b01      	subs	r3, #1
 800c8b4:	613b      	str	r3, [r7, #16]
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00e      	beq.n	800c8da <store_xdir+0x9a>
		dirb += SZDIRE;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3320      	adds	r3, #32
 800c8c0:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800c8c2:	2100      	movs	r1, #0
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7ff fa72 	bl	800bdae <dir_next>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c8ce:	7dfb      	ldrb	r3, [r7, #23]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d0d5      	beq.n	800c880 <store_xdir+0x40>
 800c8d4:	e002      	b.n	800c8dc <store_xdir+0x9c>
		if (res != FR_OK) break;
 800c8d6:	bf00      	nop
 800c8d8:	e000      	b.n	800c8dc <store_xdir+0x9c>
		if (--nent == 0) break;
 800c8da:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800c8dc:	7dfb      	ldrb	r3, [r7, #23]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d002      	beq.n	800c8e8 <store_xdir+0xa8>
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d101      	bne.n	800c8ec <store_xdir+0xac>
 800c8e8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ea:	e000      	b.n	800c8ee <store_xdir+0xae>
 800c8ec:	2302      	movs	r3, #2
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	371c      	adds	r7, #28
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd90      	pop	{r4, r7, pc}

0800c8f6 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800c8f6:	b590      	push	{r4, r7, lr}
 800c8f8:	b085      	sub	sp, #20
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800c900:	2240      	movs	r2, #64	; 0x40
 800c902:	2100      	movs	r1, #0
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7fe f91f 	bl	800ab48 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2285      	movs	r2, #133	; 0x85
 800c90e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	3320      	adds	r3, #32
 800c914:	22c0      	movs	r2, #192	; 0xc0
 800c916:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800c918:	2300      	movs	r3, #0
 800c91a:	72bb      	strb	r3, [r7, #10]
 800c91c:	2301      	movs	r3, #1
 800c91e:	72fb      	strb	r3, [r7, #11]
 800c920:	2301      	movs	r3, #1
 800c922:	813b      	strh	r3, [r7, #8]
 800c924:	2340      	movs	r3, #64	; 0x40
 800c926:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	1c5a      	adds	r2, r3, #1
 800c92c:	60fa      	str	r2, [r7, #12]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	4413      	add	r3, r2
 800c932:	22c1      	movs	r2, #193	; 0xc1
 800c934:	701a      	strb	r2, [r3, #0]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	1c5a      	adds	r2, r3, #1
 800c93a:	60fa      	str	r2, [r7, #12]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	4413      	add	r3, r2
 800c940:	2200      	movs	r2, #0
 800c942:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c944:	893b      	ldrh	r3, [r7, #8]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00b      	beq.n	800c962 <create_xdir+0x6c>
 800c94a:	7abb      	ldrb	r3, [r7, #10]
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	4413      	add	r3, r2
 800c952:	881b      	ldrh	r3, [r3, #0]
 800c954:	813b      	strh	r3, [r7, #8]
 800c956:	893b      	ldrh	r3, [r7, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <create_xdir+0x6c>
 800c95c:	7abb      	ldrb	r3, [r7, #10]
 800c95e:	3301      	adds	r3, #1
 800c960:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	4413      	add	r3, r2
 800c968:	893a      	ldrh	r2, [r7, #8]
 800c96a:	4611      	mov	r1, r2
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fd fffb 	bl	800a968 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3302      	adds	r3, #2
 800c976:	60fb      	str	r3, [r7, #12]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f003 031f 	and.w	r3, r3, #31
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1e0      	bne.n	800c944 <create_xdir+0x4e>
		nb++;
 800c982:	7afb      	ldrb	r3, [r7, #11]
 800c984:	3301      	adds	r3, #1
 800c986:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c988:	7abb      	ldrb	r3, [r7, #10]
 800c98a:	005b      	lsls	r3, r3, #1
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	4413      	add	r3, r2
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1c8      	bne.n	800c928 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	3323      	adds	r3, #35	; 0x23
 800c99a:	7aba      	ldrb	r2, [r7, #10]
 800c99c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	7afa      	ldrb	r2, [r7, #11]
 800c9a4:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800c9ac:	6838      	ldr	r0, [r7, #0]
 800c9ae:	f7ff fd9d 	bl	800c4ec <xname_sum>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f7fd ffd6 	bl	800a968 <st_word>
}
 800c9bc:	bf00      	nop
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd90      	pop	{r4, r7, pc}

0800c9c4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c9ce:	2304      	movs	r3, #4
 800c9d0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c9d8:	23ff      	movs	r3, #255	; 0xff
 800c9da:	757b      	strb	r3, [r7, #21]
 800c9dc:	23ff      	movs	r3, #255	; 0xff
 800c9de:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c9e0:	e09f      	b.n	800cb22 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6938      	ldr	r0, [r7, #16]
 800c9ea:	f7fe fabb 	bl	800af64 <move_window>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9f2:	7dfb      	ldrb	r3, [r7, #23]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f040 809a 	bne.w	800cb2e <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ca02:	7dbb      	ldrb	r3, [r7, #22]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ca08:	2304      	movs	r3, #4
 800ca0a:	75fb      	strb	r3, [r7, #23]
 800ca0c:	e096      	b.n	800cb3c <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	2b04      	cmp	r3, #4
 800ca14:	d118      	bne.n	800ca48 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800ca16:	7dbb      	ldrb	r3, [r7, #22]
 800ca18:	2b85      	cmp	r3, #133	; 0x85
 800ca1a:	d179      	bne.n	800cb10 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7ff fe17 	bl	800c658 <load_xdir>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d17e      	bne.n	800cb32 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	695b      	ldr	r3, [r3, #20]
 800ca38:	3304      	adds	r3, #4
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ca46:	e074      	b.n	800cb32 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca4c:	330b      	adds	r3, #11
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca54:	73fb      	strb	r3, [r7, #15]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	7bfa      	ldrb	r2, [r7, #15]
 800ca5a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ca5c:	7dbb      	ldrb	r3, [r7, #22]
 800ca5e:	2be5      	cmp	r3, #229	; 0xe5
 800ca60:	d00e      	beq.n	800ca80 <dir_read+0xbc>
 800ca62:	7dbb      	ldrb	r3, [r7, #22]
 800ca64:	2b2e      	cmp	r3, #46	; 0x2e
 800ca66:	d00b      	beq.n	800ca80 <dir_read+0xbc>
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
 800ca6a:	f023 0320 	bic.w	r3, r3, #32
 800ca6e:	2b08      	cmp	r3, #8
 800ca70:	bf0c      	ite	eq
 800ca72:	2301      	moveq	r3, #1
 800ca74:	2300      	movne	r3, #0
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	461a      	mov	r2, r3
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d002      	beq.n	800ca86 <dir_read+0xc2>
				ord = 0xFF;
 800ca80:	23ff      	movs	r3, #255	; 0xff
 800ca82:	757b      	strb	r3, [r7, #21]
 800ca84:	e044      	b.n	800cb10 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
 800ca88:	2b0f      	cmp	r3, #15
 800ca8a:	d12f      	bne.n	800caec <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ca8c:	7dbb      	ldrb	r3, [r7, #22]
 800ca8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00d      	beq.n	800cab2 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca9a:	7b5b      	ldrb	r3, [r3, #13]
 800ca9c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ca9e:	7dbb      	ldrb	r3, [r7, #22]
 800caa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caa4:	75bb      	strb	r3, [r7, #22]
 800caa6:	7dbb      	ldrb	r3, [r7, #22]
 800caa8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cab2:	7dba      	ldrb	r2, [r7, #22]
 800cab4:	7d7b      	ldrb	r3, [r7, #21]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d115      	bne.n	800cae6 <dir_read+0x122>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cabe:	330d      	adds	r3, #13
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	7d3a      	ldrb	r2, [r7, #20]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d10e      	bne.n	800cae6 <dir_read+0x122>
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	691a      	ldr	r2, [r3, #16]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad0:	4619      	mov	r1, r3
 800cad2:	4610      	mov	r0, r2
 800cad4:	f7ff fb5c 	bl	800c190 <pick_lfn>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <dir_read+0x122>
 800cade:	7d7b      	ldrb	r3, [r7, #21]
 800cae0:	3b01      	subs	r3, #1
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	e000      	b.n	800cae8 <dir_read+0x124>
 800cae6:	23ff      	movs	r3, #255	; 0xff
 800cae8:	757b      	strb	r3, [r7, #21]
 800caea:	e011      	b.n	800cb10 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800caec:	7d7b      	ldrb	r3, [r7, #21]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d109      	bne.n	800cb06 <dir_read+0x142>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff fca4 	bl	800c444 <sum_sfn>
 800cafc:	4603      	mov	r3, r0
 800cafe:	461a      	mov	r2, r3
 800cb00:	7d3b      	ldrb	r3, [r7, #20]
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d017      	beq.n	800cb36 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb0c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800cb0e:	e012      	b.n	800cb36 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cb10:	2100      	movs	r1, #0
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7ff f94b 	bl	800bdae <dir_next>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb1c:	7dfb      	ldrb	r3, [r7, #23]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d10b      	bne.n	800cb3a <dir_read+0x176>
	while (dp->sect) {
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	f47f af5b 	bne.w	800c9e2 <dir_read+0x1e>
 800cb2c:	e006      	b.n	800cb3c <dir_read+0x178>
		if (res != FR_OK) break;
 800cb2e:	bf00      	nop
 800cb30:	e004      	b.n	800cb3c <dir_read+0x178>
					break;
 800cb32:	bf00      	nop
 800cb34:	e002      	b.n	800cb3c <dir_read+0x178>
					break;
 800cb36:	bf00      	nop
 800cb38:	e000      	b.n	800cb3c <dir_read+0x178>
		if (res != FR_OK) break;
 800cb3a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <dir_read+0x184>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cb52:	b590      	push	{r4, r7, lr}
 800cb54:	b089      	sub	sp, #36	; 0x24
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cb60:	2100      	movs	r1, #0
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7ff f88f 	bl	800bc86 <dir_sdi>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800cb6c:	7ffb      	ldrb	r3, [r7, #31]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <dir_find+0x24>
 800cb72:	7ffb      	ldrb	r3, [r7, #31]
 800cb74:	e112      	b.n	800cd9c <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	2b04      	cmp	r3, #4
 800cb7c:	d164      	bne.n	800cc48 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7ff fcb2 	bl	800c4ec <xname_sum>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800cb8c:	e04f      	b.n	800cc2e <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	695b      	ldr	r3, [r3, #20]
 800cb92:	3324      	adds	r3, #36	; 0x24
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fd fdd1 	bl	800a73c <ld_word>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	893b      	ldrh	r3, [r7, #8]
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d000      	beq.n	800cba6 <dir_find+0x54>
 800cba4:	e043      	b.n	800cc2e <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	695b      	ldr	r3, [r3, #20]
 800cbaa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cbae:	76fb      	strb	r3, [r7, #27]
 800cbb0:	2340      	movs	r3, #64	; 0x40
 800cbb2:	617b      	str	r3, [r7, #20]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	613b      	str	r3, [r7, #16]
 800cbb8:	e029      	b.n	800cc0e <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	f003 031f 	and.w	r3, r3, #31
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d102      	bne.n	800cbca <dir_find+0x78>
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	3302      	adds	r3, #2
 800cbc8:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	695a      	ldr	r2, [r3, #20]
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fd fdb2 	bl	800a73c <ld_word>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f002 fcc0 	bl	800f560 <ff_wtoupper>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	461c      	mov	r4, r3
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	691a      	ldr	r2, [r3, #16]
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	4413      	add	r3, r2
 800cbee:	881b      	ldrh	r3, [r3, #0]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f002 fcb5 	bl	800f560 <ff_wtoupper>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	429c      	cmp	r4, r3
 800cbfa:	d10c      	bne.n	800cc16 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800cbfc:	7efb      	ldrb	r3, [r7, #27]
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	76fb      	strb	r3, [r7, #27]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	3302      	adds	r3, #2
 800cc06:	617b      	str	r3, [r7, #20]
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	613b      	str	r3, [r7, #16]
 800cc0e:	7efb      	ldrb	r3, [r7, #27]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1d2      	bne.n	800cbba <dir_find+0x68>
 800cc14:	e000      	b.n	800cc18 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800cc16:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800cc18:	7efb      	ldrb	r3, [r7, #27]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d107      	bne.n	800cc2e <dir_find+0xdc>
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	691a      	ldr	r2, [r3, #16]
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	005b      	lsls	r3, r3, #1
 800cc26:	4413      	add	r3, r2
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d009      	beq.n	800cc42 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800cc2e:	2100      	movs	r1, #0
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff fec7 	bl	800c9c4 <dir_read>
 800cc36:	4603      	mov	r3, r0
 800cc38:	77fb      	strb	r3, [r7, #31]
 800cc3a:	7ffb      	ldrb	r3, [r7, #31]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d0a6      	beq.n	800cb8e <dir_find+0x3c>
 800cc40:	e000      	b.n	800cc44 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800cc42:	bf00      	nop
		}
		return res;
 800cc44:	7ffb      	ldrb	r3, [r7, #31]
 800cc46:	e0a9      	b.n	800cd9c <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc48:	23ff      	movs	r3, #255	; 0xff
 800cc4a:	773b      	strb	r3, [r7, #28]
 800cc4c:	7f3b      	ldrb	r3, [r7, #28]
 800cc4e:	777b      	strb	r3, [r7, #29]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc56:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f7fe f980 	bl	800af64 <move_window>
 800cc64:	4603      	mov	r3, r0
 800cc66:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800cc68:	7ffb      	ldrb	r3, [r7, #31]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f040 8090 	bne.w	800cd90 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cc78:	7fbb      	ldrb	r3, [r7, #30]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d102      	bne.n	800cc84 <dir_find+0x132>
 800cc7e:	2304      	movs	r3, #4
 800cc80:	77fb      	strb	r3, [r7, #31]
 800cc82:	e08a      	b.n	800cd9a <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc88:	330b      	adds	r3, #11
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc90:	72fb      	strb	r3, [r7, #11]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	7afa      	ldrb	r2, [r7, #11]
 800cc96:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cc98:	7fbb      	ldrb	r3, [r7, #30]
 800cc9a:	2be5      	cmp	r3, #229	; 0xe5
 800cc9c:	d007      	beq.n	800ccae <dir_find+0x15c>
 800cc9e:	7afb      	ldrb	r3, [r7, #11]
 800cca0:	f003 0308 	and.w	r3, r3, #8
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d009      	beq.n	800ccbc <dir_find+0x16a>
 800cca8:	7afb      	ldrb	r3, [r7, #11]
 800ccaa:	2b0f      	cmp	r3, #15
 800ccac:	d006      	beq.n	800ccbc <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ccae:	23ff      	movs	r3, #255	; 0xff
 800ccb0:	777b      	strb	r3, [r7, #29]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccb8:	64da      	str	r2, [r3, #76]	; 0x4c
 800ccba:	e05e      	b.n	800cd7a <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ccbc:	7afb      	ldrb	r3, [r7, #11]
 800ccbe:	2b0f      	cmp	r3, #15
 800ccc0:	d136      	bne.n	800cd30 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ccc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d154      	bne.n	800cd7a <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ccd0:	7fbb      	ldrb	r3, [r7, #30]
 800ccd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00d      	beq.n	800ccf6 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccde:	7b5b      	ldrb	r3, [r3, #13]
 800cce0:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cce2:	7fbb      	ldrb	r3, [r7, #30]
 800cce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cce8:	77bb      	strb	r3, [r7, #30]
 800ccea:	7fbb      	ldrb	r3, [r7, #30]
 800ccec:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ccf6:	7fba      	ldrb	r2, [r7, #30]
 800ccf8:	7f7b      	ldrb	r3, [r7, #29]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d115      	bne.n	800cd2a <dir_find+0x1d8>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd02:	330d      	adds	r3, #13
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	7f3a      	ldrb	r2, [r7, #28]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d10e      	bne.n	800cd2a <dir_find+0x1d8>
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	691a      	ldr	r2, [r3, #16]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd14:	4619      	mov	r1, r3
 800cd16:	4610      	mov	r0, r2
 800cd18:	f7ff f9ca 	bl	800c0b0 <cmp_lfn>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d003      	beq.n	800cd2a <dir_find+0x1d8>
 800cd22:	7f7b      	ldrb	r3, [r7, #29]
 800cd24:	3b01      	subs	r3, #1
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	e000      	b.n	800cd2c <dir_find+0x1da>
 800cd2a:	23ff      	movs	r3, #255	; 0xff
 800cd2c:	777b      	strb	r3, [r7, #29]
 800cd2e:	e024      	b.n	800cd7a <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cd30:	7f7b      	ldrb	r3, [r7, #29]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d109      	bne.n	800cd4a <dir_find+0x1f8>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff fb82 	bl	800c444 <sum_sfn>
 800cd40:	4603      	mov	r3, r0
 800cd42:	461a      	mov	r2, r3
 800cd44:	7f3b      	ldrb	r3, [r7, #28]
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d024      	beq.n	800cd94 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800cd50:	f003 0301 	and.w	r3, r3, #1
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d10a      	bne.n	800cd6e <dir_find+0x21c>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	3340      	adds	r3, #64	; 0x40
 800cd60:	220b      	movs	r2, #11
 800cd62:	4619      	mov	r1, r3
 800cd64:	f7fd ff0b 	bl	800ab7e <mem_cmp>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d014      	beq.n	800cd98 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd6e:	23ff      	movs	r3, #255	; 0xff
 800cd70:	777b      	strb	r3, [r7, #29]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd78:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff f816 	bl	800bdae <dir_next>
 800cd82:	4603      	mov	r3, r0
 800cd84:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800cd86:	7ffb      	ldrb	r3, [r7, #31]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f43f af65 	beq.w	800cc58 <dir_find+0x106>
 800cd8e:	e004      	b.n	800cd9a <dir_find+0x248>
		if (res != FR_OK) break;
 800cd90:	bf00      	nop
 800cd92:	e002      	b.n	800cd9a <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cd94:	bf00      	nop
 800cd96:	e000      	b.n	800cd9a <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd98:	bf00      	nop

	return res;
 800cd9a:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3724      	adds	r7, #36	; 0x24
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd90      	pop	{r4, r7, pc}

0800cda4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cda4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cda8:	b0a0      	sub	sp, #128	; 0x80
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800cdba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <dir_register+0x22>
 800cdc2:	2306      	movs	r3, #6
 800cdc4:	e192      	b.n	800d0ec <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	677b      	str	r3, [r7, #116]	; 0x74
 800cdca:	e002      	b.n	800cdd2 <dir_register+0x2e>
 800cdcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdce:	3301      	adds	r3, #1
 800cdd0:	677b      	str	r3, [r7, #116]	; 0x74
 800cdd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdd4:	691a      	ldr	r2, [r3, #16]
 800cdd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1f4      	bne.n	800cdcc <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cde2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	2b04      	cmp	r3, #4
 800cde8:	f040 80a3 	bne.w	800cf32 <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800cdec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdee:	330e      	adds	r3, #14
 800cdf0:	4aa4      	ldr	r2, [pc, #656]	; (800d084 <dir_register+0x2e0>)
 800cdf2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf6:	08db      	lsrs	r3, r3, #3
 800cdf8:	3302      	adds	r3, #2
 800cdfa:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800cdfc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7ff f8bb 	bl	800bf7a <dir_alloc>
 800ce04:	4603      	mov	r3, r0
 800ce06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800ce0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d002      	beq.n	800ce18 <dir_register+0x74>
 800ce12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce16:	e169      	b.n	800d0ec <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	015b      	lsls	r3, r3, #5
 800ce22:	1ad2      	subs	r2, r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d076      	beq.n	800cf1e <dir_register+0x17a>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	79db      	ldrb	r3, [r3, #7]
 800ce34:	f003 0304 	and.w	r3, r3, #4
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d070      	beq.n	800cf1e <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce42:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ce44:	8949      	ldrh	r1, [r1, #10]
 800ce46:	4608      	mov	r0, r1
 800ce48:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ce4a:	8989      	ldrh	r1, [r1, #12]
 800ce4c:	fb00 f101 	mul.w	r1, r0, r1
 800ce50:	2000      	movs	r0, #0
 800ce52:	460c      	mov	r4, r1
 800ce54:	4605      	mov	r5, r0
 800ce56:	eb12 0804 	adds.w	r8, r2, r4
 800ce5a:	eb43 0905 	adc.w	r9, r3, r5
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe fcac 	bl	800b7c4 <fill_first_frag>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ce72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d002      	beq.n	800ce80 <dir_register+0xdc>
 800ce7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce7e:	e135      	b.n	800d0ec <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	f7fe fcc9 	bl	800b822 <fill_last_frag>
 800ce90:	4603      	mov	r3, r0
 800ce92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ce96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d002      	beq.n	800cea4 <dir_register+0x100>
 800ce9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cea2:	e123      	b.n	800d0ec <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	f107 0308 	add.w	r3, r7, #8
 800ceaa:	4611      	mov	r1, r2
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7ff fc91 	bl	800c7d4 <load_obj_dir>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ceb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d002      	beq.n	800cec6 <dir_register+0x122>
 800cec0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cec4:	e112      	b.n	800d0ec <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800cec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ced4:	4608      	mov	r0, r1
 800ced6:	f7fd fd8e 	bl	800a9f6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800ceda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cedc:	695b      	ldr	r3, [r3, #20]
 800cede:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cee8:	4608      	mov	r0, r1
 800ceea:	f7fd fd84 	bl	800a9f6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	79da      	ldrb	r2, [r3, #7]
 800cef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cef4:	695b      	ldr	r3, [r3, #20]
 800cef6:	3321      	adds	r3, #33	; 0x21
 800cef8:	f042 0201 	orr.w	r2, r2, #1
 800cefc:	b2d2      	uxtb	r2, r2
 800cefe:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800cf00:	f107 0308 	add.w	r3, r7, #8
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7ff fc9b 	bl	800c840 <store_xdir>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800cf10:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <dir_register+0x17a>
 800cf18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cf1c:	e0e6      	b.n	800d0ec <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800cf1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf20:	695a      	ldr	r2, [r3, #20]
 800cf22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf24:	691b      	ldr	r3, [r3, #16]
 800cf26:	4619      	mov	r1, r3
 800cf28:	4610      	mov	r0, r2
 800cf2a:	f7ff fce4 	bl	800c8f6 <create_xdir>
		return FR_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e0dc      	b.n	800d0ec <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800cf38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cf3c:	220c      	movs	r2, #12
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fd fde1 	bl	800ab06 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cf44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf48:	f003 0301 	and.w	r3, r3, #1
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d033      	beq.n	800cfb8 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2240      	movs	r2, #64	; 0x40
 800cf54:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800cf58:	2301      	movs	r3, #1
 800cf5a:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf5c:	e016      	b.n	800cf8c <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800cf64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf66:	691a      	ldr	r2, [r3, #16]
 800cf68:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800cf6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf6e:	f7ff f9db 	bl	800c328 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7ff fded 	bl	800cb52 <dir_find>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800cf7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d106      	bne.n	800cf94 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800cf86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf88:	3301      	adds	r3, #1
 800cf8a:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf8e:	2b63      	cmp	r3, #99	; 0x63
 800cf90:	d9e5      	bls.n	800cf5e <dir_register+0x1ba>
 800cf92:	e000      	b.n	800cf96 <dir_register+0x1f2>
			if (res != FR_OK) break;
 800cf94:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cf96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf98:	2b64      	cmp	r3, #100	; 0x64
 800cf9a:	d101      	bne.n	800cfa0 <dir_register+0x1fc>
 800cf9c:	2307      	movs	r3, #7
 800cf9e:	e0a5      	b.n	800d0ec <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cfa0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cfa4:	2b04      	cmp	r3, #4
 800cfa6:	d002      	beq.n	800cfae <dir_register+0x20a>
 800cfa8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cfac:	e09e      	b.n	800d0ec <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cfae:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cfb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfbc:	f003 0302 	and.w	r3, r3, #2
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d007      	beq.n	800cfd4 <dir_register+0x230>
 800cfc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfc6:	330c      	adds	r3, #12
 800cfc8:	4a2f      	ldr	r2, [pc, #188]	; (800d088 <dir_register+0x2e4>)
 800cfca:	fba2 2303 	umull	r2, r3, r2, r3
 800cfce:	089b      	lsrs	r3, r3, #2
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	e000      	b.n	800cfd6 <dir_register+0x232>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cfd8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7fe ffcd 	bl	800bf7a <dir_alloc>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cfe6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d14f      	bne.n	800d08e <dir_register+0x2ea>
 800cfee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cff0:	3b01      	subs	r3, #1
 800cff2:	673b      	str	r3, [r7, #112]	; 0x70
 800cff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d049      	beq.n	800d08e <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d000:	015b      	lsls	r3, r3, #5
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7fe fe3d 	bl	800bc86 <dir_sdi>
 800d00c:	4603      	mov	r3, r0
 800d00e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800d012:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d016:	2b00      	cmp	r3, #0
 800d018:	d139      	bne.n	800d08e <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	3340      	adds	r3, #64	; 0x40
 800d01e:	4618      	mov	r0, r3
 800d020:	f7ff fa10 	bl	800c444 <sum_sfn>
 800d024:	4603      	mov	r3, r0
 800d026:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02e:	4619      	mov	r1, r3
 800d030:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d032:	f7fd ff97 	bl	800af64 <move_window>
 800d036:	4603      	mov	r3, r0
 800d038:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800d03c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d040:	2b00      	cmp	r3, #0
 800d042:	d123      	bne.n	800d08c <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d046:	6918      	ldr	r0, [r3, #16]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d04c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d054:	f7ff f900 	bl	800c258 <put_lfn>
				fs->wflag = 1;
 800d058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d05a:	2201      	movs	r2, #1
 800d05c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d05e:	2100      	movs	r1, #0
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7fe fea4 	bl	800bdae <dir_next>
 800d066:	4603      	mov	r3, r0
 800d068:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800d06c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10c      	bne.n	800d08e <dir_register+0x2ea>
 800d074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d076:	3b01      	subs	r3, #1
 800d078:	673b      	str	r3, [r7, #112]	; 0x70
 800d07a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1d4      	bne.n	800d02a <dir_register+0x286>
 800d080:	e005      	b.n	800d08e <dir_register+0x2ea>
 800d082:	bf00      	nop
 800d084:	88888889 	.word	0x88888889
 800d088:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800d08c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d08e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d092:	2b00      	cmp	r3, #0
 800d094:	d128      	bne.n	800d0e8 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09a:	4619      	mov	r1, r3
 800d09c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d09e:	f7fd ff61 	bl	800af64 <move_window>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800d0a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d11b      	bne.n	800d0e8 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b4:	2220      	movs	r2, #32
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7fd fd45 	bl	800ab48 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	3340      	adds	r3, #64	; 0x40
 800d0c6:	220b      	movs	r2, #11
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	f7fd fd1c 	bl	800ab06 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0d8:	330c      	adds	r3, #12
 800d0da:	f002 0218 	and.w	r2, r2, #24
 800d0de:	b2d2      	uxtb	r2, r2
 800d0e0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d0e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d0e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3780      	adds	r7, #128	; 0x80
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d0f6:	bf00      	nop

0800d0f8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d0f8:	b5b0      	push	{r4, r5, r7, lr}
 800d0fa:	b088      	sub	sp, #32
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	2200      	movs	r2, #0
 800d10c:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d112:	2b00      	cmp	r3, #0
 800d114:	f000 80d8 	beq.w	800d2c8 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	2b04      	cmp	r3, #4
 800d11e:	d106      	bne.n	800d12e <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	695b      	ldr	r3, [r3, #20]
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	4618      	mov	r0, r3
 800d128:	f7ff fa14 	bl	800c554 <get_xdir_info>
		return;
 800d12c:	e0cd      	b.n	800d2ca <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d136:	d032      	beq.n	800d19e <get_fileinfo+0xa6>
			i = j = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	61bb      	str	r3, [r7, #24]
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d140:	e01b      	b.n	800d17a <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d142:	89fb      	ldrh	r3, [r7, #14]
 800d144:	2100      	movs	r1, #0
 800d146:	4618      	mov	r0, r3
 800d148:	f002 f9ce 	bl	800f4e8 <ff_convert>
 800d14c:	4603      	mov	r3, r0
 800d14e:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d150:	89fb      	ldrh	r3, [r7, #14]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d102      	bne.n	800d15c <get_fileinfo+0x64>
 800d156:	2300      	movs	r3, #0
 800d158:	61fb      	str	r3, [r7, #28]
 800d15a:	e01a      	b.n	800d192 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	2bfe      	cmp	r3, #254	; 0xfe
 800d160:	d902      	bls.n	800d168 <get_fileinfo+0x70>
 800d162:	2300      	movs	r3, #0
 800d164:	61fb      	str	r3, [r7, #28]
 800d166:	e014      	b.n	800d192 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	61fa      	str	r2, [r7, #28]
 800d16e:	89fa      	ldrh	r2, [r7, #14]
 800d170:	b2d1      	uxtb	r1, r2
 800d172:	683a      	ldr	r2, [r7, #0]
 800d174:	4413      	add	r3, r2
 800d176:	460a      	mov	r2, r1
 800d178:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	691a      	ldr	r2, [r3, #16]
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	1c59      	adds	r1, r3, #1
 800d182:	61b9      	str	r1, [r7, #24]
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	4413      	add	r3, r2
 800d188:	881b      	ldrh	r3, [r3, #0]
 800d18a:	81fb      	strh	r3, [r7, #14]
 800d18c:	89fb      	ldrh	r3, [r7, #14]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1d7      	bne.n	800d142 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d192:	683a      	ldr	r2, [r7, #0]
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	4413      	add	r3, r2
 800d198:	331a      	adds	r3, #26
 800d19a:	2200      	movs	r2, #0
 800d19c:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	61bb      	str	r3, [r7, #24]
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	331a      	adds	r3, #26
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d1b2:	e04c      	b.n	800d24e <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	1c59      	adds	r1, r3, #1
 800d1bc:	61f9      	str	r1, [r7, #28]
 800d1be:	4413      	add	r3, r2
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	2b20      	cmp	r3, #32
 800d1c8:	d100      	bne.n	800d1cc <get_fileinfo+0xd4>
 800d1ca:	e040      	b.n	800d24e <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d1cc:	7dfb      	ldrb	r3, [r7, #23]
 800d1ce:	2b05      	cmp	r3, #5
 800d1d0:	d101      	bne.n	800d1d6 <get_fileinfo+0xde>
 800d1d2:	23e5      	movs	r3, #229	; 0xe5
 800d1d4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	2b09      	cmp	r3, #9
 800d1da:	d10f      	bne.n	800d1fc <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800d1dc:	89bb      	ldrh	r3, [r7, #12]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d105      	bne.n	800d1ee <get_fileinfo+0xf6>
 800d1e2:	683a      	ldr	r2, [r7, #0]
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	331a      	adds	r3, #26
 800d1ea:	222e      	movs	r2, #46	; 0x2e
 800d1ec:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	1c5a      	adds	r2, r3, #1
 800d1f2:	61ba      	str	r2, [r7, #24]
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	222e      	movs	r2, #46	; 0x2e
 800d1fa:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	4413      	add	r3, r2
 800d202:	330d      	adds	r3, #13
 800d204:	7dfa      	ldrb	r2, [r7, #23]
 800d206:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d208:	89bb      	ldrh	r3, [r7, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d11c      	bne.n	800d248 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d20e:	7dfb      	ldrb	r3, [r7, #23]
 800d210:	2b40      	cmp	r3, #64	; 0x40
 800d212:	d913      	bls.n	800d23c <get_fileinfo+0x144>
 800d214:	7dfb      	ldrb	r3, [r7, #23]
 800d216:	2b5a      	cmp	r3, #90	; 0x5a
 800d218:	d810      	bhi.n	800d23c <get_fileinfo+0x144>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d21e:	330c      	adds	r3, #12
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	461a      	mov	r2, r3
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	2b08      	cmp	r3, #8
 800d228:	d901      	bls.n	800d22e <get_fileinfo+0x136>
 800d22a:	2310      	movs	r3, #16
 800d22c:	e000      	b.n	800d230 <get_fileinfo+0x138>
 800d22e:	2308      	movs	r3, #8
 800d230:	4013      	ands	r3, r2
 800d232:	2b00      	cmp	r3, #0
 800d234:	d002      	beq.n	800d23c <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800d236:	7dfb      	ldrb	r3, [r7, #23]
 800d238:	3320      	adds	r3, #32
 800d23a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	4413      	add	r3, r2
 800d242:	331a      	adds	r3, #26
 800d244:	7dfa      	ldrb	r2, [r7, #23]
 800d246:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	3301      	adds	r3, #1
 800d24c:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	2b0a      	cmp	r3, #10
 800d252:	d9af      	bls.n	800d1b4 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800d254:	89bb      	ldrh	r3, [r7, #12]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d10d      	bne.n	800d276 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	4413      	add	r3, r2
 800d260:	331a      	adds	r3, #26
 800d262:	2200      	movs	r2, #0
 800d264:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26a:	330c      	adds	r3, #12
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d101      	bne.n	800d276 <get_fileinfo+0x17e>
 800d272:	2300      	movs	r3, #0
 800d274:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	4413      	add	r3, r2
 800d27c:	330d      	adds	r3, #13
 800d27e:	2200      	movs	r2, #0
 800d280:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d286:	7ada      	ldrb	r2, [r3, #11]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d290:	331c      	adds	r3, #28
 800d292:	4618      	mov	r0, r3
 800d294:	f7fd fa6a 	bl	800a76c <ld_dword>
 800d298:	4603      	mov	r3, r0
 800d29a:	2200      	movs	r2, #0
 800d29c:	461c      	mov	r4, r3
 800d29e:	4615      	mov	r5, r2
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2aa:	3316      	adds	r3, #22
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fd fa5d 	bl	800a76c <ld_dword>
 800d2b2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	815a      	strh	r2, [r3, #10]
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	0c1b      	lsrs	r3, r3, #16
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	811a      	strh	r2, [r3, #8]
 800d2c6:	e000      	b.n	800d2ca <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d2c8:	bf00      	nop
}
 800d2ca:	3720      	adds	r7, #32
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bdb0      	pop	{r4, r5, r7, pc}

0800d2d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08a      	sub	sp, #40	; 0x28
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	613b      	str	r3, [r7, #16]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	60fb      	str	r3, [r7, #12]
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	617b      	str	r3, [r7, #20]
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	61ba      	str	r2, [r7, #24]
 800d2f6:	693a      	ldr	r2, [r7, #16]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d2fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d300:	2b1f      	cmp	r3, #31
 800d302:	d940      	bls.n	800d386 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d306:	2b2f      	cmp	r3, #47	; 0x2f
 800d308:	d006      	beq.n	800d318 <create_name+0x48>
 800d30a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d30c:	2b5c      	cmp	r3, #92	; 0x5c
 800d30e:	d110      	bne.n	800d332 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d310:	e002      	b.n	800d318 <create_name+0x48>
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	3301      	adds	r3, #1
 800d316:	61bb      	str	r3, [r7, #24]
 800d318:	693a      	ldr	r2, [r7, #16]
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	4413      	add	r3, r2
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	2b2f      	cmp	r3, #47	; 0x2f
 800d322:	d0f6      	beq.n	800d312 <create_name+0x42>
 800d324:	693a      	ldr	r2, [r7, #16]
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	4413      	add	r3, r2
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b5c      	cmp	r3, #92	; 0x5c
 800d32e:	d0f0      	beq.n	800d312 <create_name+0x42>
			break;
 800d330:	e02a      	b.n	800d388 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	2bfe      	cmp	r3, #254	; 0xfe
 800d336:	d901      	bls.n	800d33c <create_name+0x6c>
 800d338:	2306      	movs	r3, #6
 800d33a:	e17d      	b.n	800d638 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d33c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d344:	2101      	movs	r1, #1
 800d346:	4618      	mov	r0, r3
 800d348:	f002 f8ce 	bl	800f4e8 <ff_convert>
 800d34c:	4603      	mov	r3, r0
 800d34e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <create_name+0x8a>
 800d356:	2306      	movs	r3, #6
 800d358:	e16e      	b.n	800d638 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d35a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d35c:	2b7f      	cmp	r3, #127	; 0x7f
 800d35e:	d809      	bhi.n	800d374 <create_name+0xa4>
 800d360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d362:	4619      	mov	r1, r3
 800d364:	488d      	ldr	r0, [pc, #564]	; (800d59c <create_name+0x2cc>)
 800d366:	f7fd fc31 	bl	800abcc <chk_chr>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <create_name+0xa4>
 800d370:	2306      	movs	r3, #6
 800d372:	e161      	b.n	800d638 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	617a      	str	r2, [r7, #20]
 800d37a:	005b      	lsls	r3, r3, #1
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	4413      	add	r3, r2
 800d380:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d382:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d384:	e7b4      	b.n	800d2f0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d386:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	441a      	add	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d394:	2b1f      	cmp	r3, #31
 800d396:	d801      	bhi.n	800d39c <create_name+0xcc>
 800d398:	2304      	movs	r3, #4
 800d39a:	e000      	b.n	800d39e <create_name+0xce>
 800d39c:	2300      	movs	r3, #0
 800d39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d3a2:	e011      	b.n	800d3c8 <create_name+0xf8>
		w = lfn[di - 1];
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	005b      	lsls	r3, r3, #1
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3b8:	2b20      	cmp	r3, #32
 800d3ba:	d002      	beq.n	800d3c2 <create_name+0xf2>
 800d3bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3be:	2b2e      	cmp	r3, #46	; 0x2e
 800d3c0:	d106      	bne.n	800d3d0 <create_name+0x100>
		di--;
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	3b01      	subs	r3, #1
 800d3c6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d1ea      	bne.n	800d3a4 <create_name+0xd4>
 800d3ce:	e000      	b.n	800d3d2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d3d0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	005b      	lsls	r3, r3, #1
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	4413      	add	r3, r2
 800d3da:	2200      	movs	r2, #0
 800d3dc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d101      	bne.n	800d3e8 <create_name+0x118>
 800d3e4:	2306      	movs	r3, #6
 800d3e6:	e127      	b.n	800d638 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	3340      	adds	r3, #64	; 0x40
 800d3ec:	220b      	movs	r2, #11
 800d3ee:	2120      	movs	r1, #32
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fd fba9 	bl	800ab48 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	61bb      	str	r3, [r7, #24]
 800d3fa:	e002      	b.n	800d402 <create_name+0x132>
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	3301      	adds	r3, #1
 800d400:	61bb      	str	r3, [r7, #24]
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	4413      	add	r3, r2
 800d40a:	881b      	ldrh	r3, [r3, #0]
 800d40c:	2b20      	cmp	r3, #32
 800d40e:	d0f5      	beq.n	800d3fc <create_name+0x12c>
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	005b      	lsls	r3, r3, #1
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	4413      	add	r3, r2
 800d418:	881b      	ldrh	r3, [r3, #0]
 800d41a:	2b2e      	cmp	r3, #46	; 0x2e
 800d41c:	d0ee      	beq.n	800d3fc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d009      	beq.n	800d438 <create_name+0x168>
 800d424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d428:	f043 0303 	orr.w	r3, r3, #3
 800d42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d430:	e002      	b.n	800d438 <create_name+0x168>
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	3b01      	subs	r3, #1
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d009      	beq.n	800d452 <create_name+0x182>
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d444:	3b01      	subs	r3, #1
 800d446:	005b      	lsls	r3, r3, #1
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	4413      	add	r3, r2
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	2b2e      	cmp	r3, #46	; 0x2e
 800d450:	d1ef      	bne.n	800d432 <create_name+0x162>

	i = b = 0; ni = 8;
 800d452:	2300      	movs	r3, #0
 800d454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d458:	2300      	movs	r3, #0
 800d45a:	623b      	str	r3, [r7, #32]
 800d45c:	2308      	movs	r3, #8
 800d45e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	1c5a      	adds	r2, r3, #1
 800d464:	61ba      	str	r2, [r7, #24]
 800d466:	005b      	lsls	r3, r3, #1
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	4413      	add	r3, r2
 800d46c:	881b      	ldrh	r3, [r3, #0]
 800d46e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d472:	2b00      	cmp	r3, #0
 800d474:	f000 8090 	beq.w	800d598 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d47a:	2b20      	cmp	r3, #32
 800d47c:	d006      	beq.n	800d48c <create_name+0x1bc>
 800d47e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d480:	2b2e      	cmp	r3, #46	; 0x2e
 800d482:	d10a      	bne.n	800d49a <create_name+0x1ca>
 800d484:	69ba      	ldr	r2, [r7, #24]
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d006      	beq.n	800d49a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d490:	f043 0303 	orr.w	r3, r3, #3
 800d494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d498:	e07d      	b.n	800d596 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d49a:	6a3a      	ldr	r2, [r7, #32]
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d203      	bcs.n	800d4aa <create_name+0x1da>
 800d4a2:	69ba      	ldr	r2, [r7, #24]
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d123      	bne.n	800d4f2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	2b0b      	cmp	r3, #11
 800d4ae:	d106      	bne.n	800d4be <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b4:	f043 0303 	orr.w	r3, r3, #3
 800d4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4bc:	e075      	b.n	800d5aa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d4be:	69ba      	ldr	r2, [r7, #24]
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d005      	beq.n	800d4d2 <create_name+0x202>
 800d4c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4ca:	f043 0303 	orr.w	r3, r3, #3
 800d4ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d4d2:	69ba      	ldr	r2, [r7, #24]
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d866      	bhi.n	800d5a8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	61bb      	str	r3, [r7, #24]
 800d4de:	2308      	movs	r3, #8
 800d4e0:	623b      	str	r3, [r7, #32]
 800d4e2:	230b      	movs	r3, #11
 800d4e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d4e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d4f0:	e051      	b.n	800d596 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d4f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4f4:	2b7f      	cmp	r3, #127	; 0x7f
 800d4f6:	d914      	bls.n	800d522 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d4f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f001 fff3 	bl	800f4e8 <ff_convert>
 800d502:	4603      	mov	r3, r0
 800d504:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d004      	beq.n	800d516 <create_name+0x246>
 800d50c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d50e:	3b80      	subs	r3, #128	; 0x80
 800d510:	4a23      	ldr	r2, [pc, #140]	; (800d5a0 <create_name+0x2d0>)
 800d512:	5cd3      	ldrb	r3, [r2, r3]
 800d514:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d51a:	f043 0302 	orr.w	r3, r3, #2
 800d51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d524:	2b00      	cmp	r3, #0
 800d526:	d007      	beq.n	800d538 <create_name+0x268>
 800d528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d52a:	4619      	mov	r1, r3
 800d52c:	481d      	ldr	r0, [pc, #116]	; (800d5a4 <create_name+0x2d4>)
 800d52e:	f7fd fb4d 	bl	800abcc <chk_chr>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d008      	beq.n	800d54a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d538:	235f      	movs	r3, #95	; 0x5f
 800d53a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d540:	f043 0303 	orr.w	r3, r3, #3
 800d544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d548:	e01b      	b.n	800d582 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d54a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d54c:	2b40      	cmp	r3, #64	; 0x40
 800d54e:	d909      	bls.n	800d564 <create_name+0x294>
 800d550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d552:	2b5a      	cmp	r3, #90	; 0x5a
 800d554:	d806      	bhi.n	800d564 <create_name+0x294>
					b |= 2;
 800d556:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d55a:	f043 0302 	orr.w	r3, r3, #2
 800d55e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d562:	e00e      	b.n	800d582 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d566:	2b60      	cmp	r3, #96	; 0x60
 800d568:	d90b      	bls.n	800d582 <create_name+0x2b2>
 800d56a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d56c:	2b7a      	cmp	r3, #122	; 0x7a
 800d56e:	d808      	bhi.n	800d582 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d570:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d574:	f043 0301 	orr.w	r3, r3, #1
 800d578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d57c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d57e:	3b20      	subs	r3, #32
 800d580:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	1c5a      	adds	r2, r3, #1
 800d586:	623a      	str	r2, [r7, #32]
 800d588:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d58a:	b2d1      	uxtb	r1, r2
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	4413      	add	r3, r2
 800d590:	460a      	mov	r2, r1
 800d592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800d596:	e763      	b.n	800d460 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d598:	bf00      	nop
 800d59a:	e006      	b.n	800d5aa <create_name+0x2da>
 800d59c:	080113b0 	.word	0x080113b0
 800d5a0:	080114a4 	.word	0x080114a4
 800d5a4:	080113bc 	.word	0x080113bc
			if (si > di) break;			/* No extension */
 800d5a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5b0:	2be5      	cmp	r3, #229	; 0xe5
 800d5b2:	d103      	bne.n	800d5bc <create_name+0x2ec>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2205      	movs	r2, #5
 800d5b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	2b08      	cmp	r3, #8
 800d5c0:	d104      	bne.n	800d5cc <create_name+0x2fc>
 800d5c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d5cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5d0:	f003 030c 	and.w	r3, r3, #12
 800d5d4:	2b0c      	cmp	r3, #12
 800d5d6:	d005      	beq.n	800d5e4 <create_name+0x314>
 800d5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5dc:	f003 0303 	and.w	r3, r3, #3
 800d5e0:	2b03      	cmp	r3, #3
 800d5e2:	d105      	bne.n	800d5f0 <create_name+0x320>
 800d5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5e8:	f043 0302 	orr.w	r3, r3, #2
 800d5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5f4:	f003 0302 	and.w	r3, r3, #2
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d117      	bne.n	800d62c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d5fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d600:	f003 0303 	and.w	r3, r3, #3
 800d604:	2b01      	cmp	r3, #1
 800d606:	d105      	bne.n	800d614 <create_name+0x344>
 800d608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d60c:	f043 0310 	orr.w	r3, r3, #16
 800d610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d618:	f003 030c 	and.w	r3, r3, #12
 800d61c:	2b04      	cmp	r3, #4
 800d61e:	d105      	bne.n	800d62c <create_name+0x35c>
 800d620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d624:	f043 0308 	orr.w	r3, r3, #8
 800d628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d632:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800d636:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3728      	adds	r7, #40	; 0x28
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d654:	e002      	b.n	800d65c <follow_path+0x1c>
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	3301      	adds	r3, #1
 800d65a:	603b      	str	r3, [r7, #0]
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b2f      	cmp	r3, #47	; 0x2f
 800d662:	d0f8      	beq.n	800d656 <follow_path+0x16>
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	2b5c      	cmp	r3, #92	; 0x5c
 800d66a:	d0f4      	beq.n	800d656 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	2200      	movs	r2, #0
 800d670:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	2200      	movs	r2, #0
 800d676:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	2b1f      	cmp	r3, #31
 800d67e:	d80a      	bhi.n	800d696 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2280      	movs	r2, #128	; 0x80
 800d684:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800d688:	2100      	movs	r1, #0
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7fe fafb 	bl	800bc86 <dir_sdi>
 800d690:	4603      	mov	r3, r0
 800d692:	75fb      	strb	r3, [r7, #23]
 800d694:	e07d      	b.n	800d792 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d696:	463b      	mov	r3, r7
 800d698:	4619      	mov	r1, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7ff fe18 	bl	800d2d0 <create_name>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d6a4:	7dfb      	ldrb	r3, [r7, #23]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d16e      	bne.n	800d788 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7ff fa51 	bl	800cb52 <dir_find>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d6ba:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d6bc:	7dfb      	ldrb	r3, [r7, #23]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00a      	beq.n	800d6d8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
 800d6c4:	2b04      	cmp	r3, #4
 800d6c6:	d161      	bne.n	800d78c <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d6c8:	7afb      	ldrb	r3, [r7, #11]
 800d6ca:	f003 0304 	and.w	r3, r3, #4
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d15c      	bne.n	800d78c <follow_path+0x14c>
 800d6d2:	2305      	movs	r3, #5
 800d6d4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d6d6:	e059      	b.n	800d78c <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d6d8:	7afb      	ldrb	r3, [r7, #11]
 800d6da:	f003 0304 	and.w	r3, r3, #4
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d156      	bne.n	800d790 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	799b      	ldrb	r3, [r3, #6]
 800d6e6:	f003 0310 	and.w	r3, r3, #16
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d102      	bne.n	800d6f4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800d6ee:	2305      	movs	r3, #5
 800d6f0:	75fb      	strb	r3, [r7, #23]
 800d6f2:	e04e      	b.n	800d792 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	2b04      	cmp	r3, #4
 800d6fa:	d130      	bne.n	800d75e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	689a      	ldr	r2, [r3, #8]
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d70a:	4613      	mov	r3, r2
 800d70c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d710:	693a      	ldr	r2, [r7, #16]
 800d712:	79d2      	ldrb	r2, [r2, #7]
 800d714:	431a      	orrs	r2, r3
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	695b      	ldr	r3, [r3, #20]
 800d726:	3334      	adds	r3, #52	; 0x34
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fd f81f 	bl	800a76c <ld_dword>
 800d72e:	4602      	mov	r2, r0
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	3321      	adds	r3, #33	; 0x21
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	f003 0302 	and.w	r3, r3, #2
 800d740:	b2da      	uxtb	r2, r3
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	695b      	ldr	r3, [r3, #20]
 800d74a:	3338      	adds	r3, #56	; 0x38
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fd f830 	bl	800a7b2 <ld_qword>
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	6939      	ldr	r1, [r7, #16]
 800d758:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d75c:	e79b      	b.n	800d696 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d768:	68fa      	ldr	r2, [r7, #12]
 800d76a:	8992      	ldrh	r2, [r2, #12]
 800d76c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d770:	fb00 f202 	mul.w	r2, r0, r2
 800d774:	1a9b      	subs	r3, r3, r2
 800d776:	440b      	add	r3, r1
 800d778:	4619      	mov	r1, r3
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f7fe fc59 	bl	800c032 <ld_clust>
 800d780:	4602      	mov	r2, r0
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d786:	e786      	b.n	800d696 <follow_path+0x56>
			if (res != FR_OK) break;
 800d788:	bf00      	nop
 800d78a:	e002      	b.n	800d792 <follow_path+0x152>
				break;
 800d78c:	bf00      	nop
 800d78e:	e000      	b.n	800d792 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d790:	bf00      	nop
			}
		}
	}

	return res;
 800d792:	7dfb      	ldrb	r3, [r7, #23]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3718      	adds	r7, #24
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b087      	sub	sp, #28
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d7a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7a8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d031      	beq.n	800d816 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	617b      	str	r3, [r7, #20]
 800d7b8:	e002      	b.n	800d7c0 <get_ldnumber+0x24>
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	617b      	str	r3, [r7, #20]
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	2b1f      	cmp	r3, #31
 800d7c6:	d903      	bls.n	800d7d0 <get_ldnumber+0x34>
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	2b3a      	cmp	r3, #58	; 0x3a
 800d7ce:	d1f4      	bne.n	800d7ba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b3a      	cmp	r3, #58	; 0x3a
 800d7d6:	d11c      	bne.n	800d812 <get_ldnumber+0x76>
			tp = *path;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	60fa      	str	r2, [r7, #12]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	3b30      	subs	r3, #48	; 0x30
 800d7e8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2b09      	cmp	r3, #9
 800d7ee:	d80e      	bhi.n	800d80e <get_ldnumber+0x72>
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d10a      	bne.n	800d80e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d107      	bne.n	800d80e <get_ldnumber+0x72>
					vol = (int)i;
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	3301      	adds	r3, #1
 800d806:	617b      	str	r3, [r7, #20]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	697a      	ldr	r2, [r7, #20]
 800d80c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	e002      	b.n	800d818 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d812:	2300      	movs	r3, #0
 800d814:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d816:	693b      	ldr	r3, [r7, #16]
}
 800d818:	4618      	mov	r0, r3
 800d81a:	371c      	adds	r7, #28
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	70da      	strb	r2, [r3, #3]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d83a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d83c:	6839      	ldr	r1, [r7, #0]
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7fd fb90 	bl	800af64 <move_window>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <check_fs+0x2a>
 800d84a:	2304      	movs	r3, #4
 800d84c:	e044      	b.n	800d8d8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	333c      	adds	r3, #60	; 0x3c
 800d852:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d856:	4618      	mov	r0, r3
 800d858:	f7fc ff70 	bl	800a73c <ld_word>
 800d85c:	4603      	mov	r3, r0
 800d85e:	461a      	mov	r2, r3
 800d860:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d864:	429a      	cmp	r2, r3
 800d866:	d001      	beq.n	800d86c <check_fs+0x48>
 800d868:	2303      	movs	r3, #3
 800d86a:	e035      	b.n	800d8d8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d872:	2be9      	cmp	r3, #233	; 0xe9
 800d874:	d009      	beq.n	800d88a <check_fs+0x66>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d87c:	2beb      	cmp	r3, #235	; 0xeb
 800d87e:	d11e      	bne.n	800d8be <check_fs+0x9a>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d886:	2b90      	cmp	r3, #144	; 0x90
 800d888:	d119      	bne.n	800d8be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	333c      	adds	r3, #60	; 0x3c
 800d88e:	3336      	adds	r3, #54	; 0x36
 800d890:	4618      	mov	r0, r3
 800d892:	f7fc ff6b 	bl	800a76c <ld_dword>
 800d896:	4603      	mov	r3, r0
 800d898:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d89c:	4a10      	ldr	r2, [pc, #64]	; (800d8e0 <check_fs+0xbc>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d101      	bne.n	800d8a6 <check_fs+0x82>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	e018      	b.n	800d8d8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	333c      	adds	r3, #60	; 0x3c
 800d8aa:	3352      	adds	r3, #82	; 0x52
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fc ff5d 	bl	800a76c <ld_dword>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	4a0b      	ldr	r2, [pc, #44]	; (800d8e4 <check_fs+0xc0>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d101      	bne.n	800d8be <check_fs+0x9a>
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	e00c      	b.n	800d8d8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	333c      	adds	r3, #60	; 0x3c
 800d8c2:	220b      	movs	r2, #11
 800d8c4:	4908      	ldr	r1, [pc, #32]	; (800d8e8 <check_fs+0xc4>)
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fd f959 	bl	800ab7e <mem_cmp>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d101      	bne.n	800d8d6 <check_fs+0xb2>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e000      	b.n	800d8d8 <check_fs+0xb4>
#endif
	return 2;
 800d8d6:	2302      	movs	r3, #2
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	00544146 	.word	0x00544146
 800d8e4:	33544146 	.word	0x33544146
 800d8e8:	080113c4 	.word	0x080113c4

0800d8ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8f0:	b09c      	sub	sp, #112	; 0x70
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	61f8      	str	r0, [r7, #28]
 800d8f6:	61b9      	str	r1, [r7, #24]
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	2200      	movs	r2, #0
 800d900:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d902:	69f8      	ldr	r0, [r7, #28]
 800d904:	f7ff ff4a 	bl	800d79c <get_ldnumber>
 800d908:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800d90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	da01      	bge.n	800d914 <find_volume+0x28>
 800d910:	230b      	movs	r3, #11
 800d912:	e376      	b.n	800e002 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d914:	4aa6      	ldr	r2, [pc, #664]	; (800dbb0 <find_volume+0x2c4>)
 800d916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d91c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d920:	2b00      	cmp	r3, #0
 800d922:	d101      	bne.n	800d928 <find_volume+0x3c>
 800d924:	230c      	movs	r3, #12
 800d926:	e36c      	b.n	800e002 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d92c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d92e:	7dfb      	ldrb	r3, [r7, #23]
 800d930:	f023 0301 	bic.w	r3, r3, #1
 800d934:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d01a      	beq.n	800d974 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800d93e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d940:	785b      	ldrb	r3, [r3, #1]
 800d942:	4618      	mov	r0, r3
 800d944:	f7fc fe5c 	bl	800a600 <disk_status>
 800d948:	4603      	mov	r3, r0
 800d94a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d94e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10c      	bne.n	800d974 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d95a:	7dfb      	ldrb	r3, [r7, #23]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d007      	beq.n	800d970 <find_volume+0x84>
 800d960:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d964:	f003 0304 	and.w	r3, r3, #4
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d001      	beq.n	800d970 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800d96c:	230a      	movs	r3, #10
 800d96e:	e348      	b.n	800e002 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800d970:	2300      	movs	r3, #0
 800d972:	e346      	b.n	800e002 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d976:	2200      	movs	r2, #0
 800d978:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d980:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d984:	785b      	ldrb	r3, [r3, #1]
 800d986:	4618      	mov	r0, r3
 800d988:	f7fc fe54 	bl	800a634 <disk_initialize>
 800d98c:	4603      	mov	r3, r0
 800d98e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d992:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d996:	f003 0301 	and.w	r3, r3, #1
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d001      	beq.n	800d9a2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d99e:	2303      	movs	r3, #3
 800d9a0:	e32f      	b.n	800e002 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d9a2:	7dfb      	ldrb	r3, [r7, #23]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d007      	beq.n	800d9b8 <find_volume+0xcc>
 800d9a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d9ac:	f003 0304 	and.w	r3, r3, #4
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d001      	beq.n	800d9b8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800d9b4:	230a      	movs	r3, #10
 800d9b6:	e324      	b.n	800e002 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ba:	7858      	ldrb	r0, [r3, #1]
 800d9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9be:	330c      	adds	r3, #12
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	2102      	movs	r1, #2
 800d9c4:	f7fc fe9c 	bl	800a700 <disk_ioctl>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d001      	beq.n	800d9d2 <find_volume+0xe6>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e317      	b.n	800e002 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d9d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9d4:	899b      	ldrh	r3, [r3, #12]
 800d9d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9da:	d80d      	bhi.n	800d9f8 <find_volume+0x10c>
 800d9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9de:	899b      	ldrh	r3, [r3, #12]
 800d9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9e4:	d308      	bcc.n	800d9f8 <find_volume+0x10c>
 800d9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9e8:	899b      	ldrh	r3, [r3, #12]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ee:	899b      	ldrh	r3, [r3, #12]
 800d9f0:	3b01      	subs	r3, #1
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d001      	beq.n	800d9fc <find_volume+0x110>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e302      	b.n	800e002 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800da00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800da02:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800da04:	f7ff ff0e 	bl	800d824 <check_fs>
 800da08:	4603      	mov	r3, r0
 800da0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800da0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800da12:	2b02      	cmp	r3, #2
 800da14:	d14d      	bne.n	800dab2 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da16:	2300      	movs	r3, #0
 800da18:	65bb      	str	r3, [r7, #88]	; 0x58
 800da1a:	e020      	b.n	800da5e <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800da1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da1e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800da22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da24:	011b      	lsls	r3, r3, #4
 800da26:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800da2a:	4413      	add	r3, r2
 800da2c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800da2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da30:	3304      	adds	r3, #4
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d006      	beq.n	800da46 <find_volume+0x15a>
 800da38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da3a:	3308      	adds	r3, #8
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fc fe95 	bl	800a76c <ld_dword>
 800da42:	4602      	mov	r2, r0
 800da44:	e000      	b.n	800da48 <find_volume+0x15c>
 800da46:	2200      	movs	r2, #0
 800da48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	3360      	adds	r3, #96	; 0x60
 800da4e:	f107 0110 	add.w	r1, r7, #16
 800da52:	440b      	add	r3, r1
 800da54:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da5a:	3301      	adds	r3, #1
 800da5c:	65bb      	str	r3, [r7, #88]	; 0x58
 800da5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da60:	2b03      	cmp	r3, #3
 800da62:	d9db      	bls.n	800da1c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800da64:	2300      	movs	r3, #0
 800da66:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800da68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d002      	beq.n	800da74 <find_volume+0x188>
 800da6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da70:	3b01      	subs	r3, #1
 800da72:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800da74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	3360      	adds	r3, #96	; 0x60
 800da7a:	f107 0210 	add.w	r2, r7, #16
 800da7e:	4413      	add	r3, r2
 800da80:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800da84:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800da86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d005      	beq.n	800da98 <find_volume+0x1ac>
 800da8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800da8e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800da90:	f7ff fec8 	bl	800d824 <check_fs>
 800da94:	4603      	mov	r3, r0
 800da96:	e000      	b.n	800da9a <find_volume+0x1ae>
 800da98:	2303      	movs	r3, #3
 800da9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800da9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d905      	bls.n	800dab2 <find_volume+0x1c6>
 800daa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800daa8:	3301      	adds	r3, #1
 800daaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800daac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800daae:	2b03      	cmp	r3, #3
 800dab0:	d9e0      	bls.n	800da74 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dab2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dab6:	2b04      	cmp	r3, #4
 800dab8:	d101      	bne.n	800dabe <find_volume+0x1d2>
 800daba:	2301      	movs	r3, #1
 800dabc:	e2a1      	b.n	800e002 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dabe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d901      	bls.n	800daca <find_volume+0x1de>
 800dac6:	230d      	movs	r3, #13
 800dac8:	e29b      	b.n	800e002 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800daca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dace:	2b01      	cmp	r3, #1
 800dad0:	f040 8101 	bne.w	800dcd6 <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800dad4:	230b      	movs	r3, #11
 800dad6:	65bb      	str	r3, [r7, #88]	; 0x58
 800dad8:	e002      	b.n	800dae0 <find_volume+0x1f4>
 800dada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dadc:	3301      	adds	r3, #1
 800dade:	65bb      	str	r3, [r7, #88]	; 0x58
 800dae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dae2:	2b3f      	cmp	r3, #63	; 0x3f
 800dae4:	d806      	bhi.n	800daf4 <find_volume+0x208>
 800dae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800daea:	4413      	add	r3, r2
 800daec:	333c      	adds	r3, #60	; 0x3c
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d0f2      	beq.n	800dada <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800daf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800daf6:	2b3f      	cmp	r3, #63	; 0x3f
 800daf8:	d801      	bhi.n	800dafe <find_volume+0x212>
 800dafa:	230d      	movs	r3, #13
 800dafc:	e281      	b.n	800e002 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800dafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db00:	333c      	adds	r3, #60	; 0x3c
 800db02:	3368      	adds	r3, #104	; 0x68
 800db04:	4618      	mov	r0, r3
 800db06:	f7fc fe19 	bl	800a73c <ld_word>
 800db0a:	4603      	mov	r3, r0
 800db0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db10:	d001      	beq.n	800db16 <find_volume+0x22a>
 800db12:	230d      	movs	r3, #13
 800db14:	e275      	b.n	800e002 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800db16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db18:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800db1c:	461a      	mov	r2, r3
 800db1e:	2301      	movs	r3, #1
 800db20:	4093      	lsls	r3, r2
 800db22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db24:	8992      	ldrh	r2, [r2, #12]
 800db26:	4293      	cmp	r3, r2
 800db28:	d001      	beq.n	800db2e <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800db2a:	230d      	movs	r3, #13
 800db2c:	e269      	b.n	800e002 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800db2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db30:	333c      	adds	r3, #60	; 0x3c
 800db32:	3348      	adds	r3, #72	; 0x48
 800db34:	4618      	mov	r0, r3
 800db36:	f7fc fe3c 	bl	800a7b2 <ld_qword>
 800db3a:	4602      	mov	r2, r0
 800db3c:	460b      	mov	r3, r1
 800db3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db40:	2000      	movs	r0, #0
 800db42:	60b9      	str	r1, [r7, #8]
 800db44:	60f8      	str	r0, [r7, #12]
 800db46:	68b9      	ldr	r1, [r7, #8]
 800db48:	1851      	adds	r1, r2, r1
 800db4a:	6039      	str	r1, [r7, #0]
 800db4c:	68f9      	ldr	r1, [r7, #12]
 800db4e:	eb43 0101 	adc.w	r1, r3, r1
 800db52:	6079      	str	r1, [r7, #4]
 800db54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db58:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800db5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800db60:	2b01      	cmp	r3, #1
 800db62:	d301      	bcc.n	800db68 <find_volume+0x27c>
 800db64:	230d      	movs	r3, #13
 800db66:	e24c      	b.n	800e002 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800db68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db6a:	333c      	adds	r3, #60	; 0x3c
 800db6c:	3354      	adds	r3, #84	; 0x54
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fc fdfc 	bl	800a76c <ld_dword>
 800db74:	4602      	mov	r2, r0
 800db76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db78:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800db7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db7c:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800db80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800db84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db86:	789b      	ldrb	r3, [r3, #2]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d001      	beq.n	800db90 <find_volume+0x2a4>
 800db8c:	230d      	movs	r3, #13
 800db8e:	e238      	b.n	800e002 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800db90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db92:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800db96:	461a      	mov	r2, r3
 800db98:	2301      	movs	r3, #1
 800db9a:	4093      	lsls	r3, r2
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800dba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba4:	895b      	ldrh	r3, [r3, #10]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d104      	bne.n	800dbb4 <find_volume+0x2c8>
 800dbaa:	230d      	movs	r3, #13
 800dbac:	e229      	b.n	800e002 <find_volume+0x716>
 800dbae:	bf00      	nop
 800dbb0:	20002378 	.word	0x20002378

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800dbb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbb6:	333c      	adds	r3, #60	; 0x3c
 800dbb8:	335c      	adds	r3, #92	; 0x5c
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fc fdd6 	bl	800a76c <ld_dword>
 800dbc0:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800dbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc4:	4a99      	ldr	r2, [pc, #612]	; (800de2c <find_volume+0x540>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d901      	bls.n	800dbce <find_volume+0x2e2>
 800dbca:	230d      	movs	r3, #13
 800dbcc:	e219      	b.n	800e002 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800dbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbd0:	1c9a      	adds	r2, r3, #2
 800dbd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbd4:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800dbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dbda:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800dbdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbde:	333c      	adds	r3, #60	; 0x3c
 800dbe0:	3358      	adds	r3, #88	; 0x58
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fc fdc2 	bl	800a76c <ld_dword>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbec:	441a      	add	r2, r3
 800dbee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbf0:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800dbf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbf4:	333c      	adds	r3, #60	; 0x3c
 800dbf6:	3350      	adds	r3, #80	; 0x50
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fc fdb7 	bl	800a76c <ld_dword>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc02:	441a      	add	r2, r3
 800dc04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc06:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800dc08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	469a      	mov	sl, r3
 800dc10:	4693      	mov	fp, r2
 800dc12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc14:	895b      	ldrh	r3, [r3, #10]
 800dc16:	461a      	mov	r2, r3
 800dc18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc1a:	fb02 f303 	mul.w	r3, r2, r3
 800dc1e:	2200      	movs	r2, #0
 800dc20:	4698      	mov	r8, r3
 800dc22:	4691      	mov	r9, r2
 800dc24:	eb1a 0408 	adds.w	r4, sl, r8
 800dc28:	eb4b 0509 	adc.w	r5, fp, r9
 800dc2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dc30:	42a2      	cmp	r2, r4
 800dc32:	41ab      	sbcs	r3, r5
 800dc34:	d201      	bcs.n	800dc3a <find_volume+0x34e>
 800dc36:	230d      	movs	r3, #13
 800dc38:	e1e3      	b.n	800e002 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800dc3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc3c:	333c      	adds	r3, #60	; 0x3c
 800dc3e:	3360      	adds	r3, #96	; 0x60
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fc fd93 	bl	800a76c <ld_dword>
 800dc46:	4602      	mov	r2, r0
 800dc48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc4a:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800dc4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc50:	4619      	mov	r1, r3
 800dc52:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dc54:	f7fd fa24 	bl	800b0a0 <clust2sect>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dc5e:	f7fd f981 	bl	800af64 <move_window>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d001      	beq.n	800dc6c <find_volume+0x380>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e1ca      	b.n	800e002 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc70:	e015      	b.n	800dc9e <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800dc72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc76:	4413      	add	r3, r2
 800dc78:	333c      	adds	r3, #60	; 0x3c
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	2b81      	cmp	r3, #129	; 0x81
 800dc7e:	d10b      	bne.n	800dc98 <find_volume+0x3ac>
 800dc80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc82:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800dc86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc88:	3314      	adds	r3, #20
 800dc8a:	4413      	add	r3, r2
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7fc fd6d 	bl	800a76c <ld_dword>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d009      	beq.n	800dcac <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800dc98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc9a:	3320      	adds	r3, #32
 800dc9c:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dca0:	899b      	ldrh	r3, [r3, #12]
 800dca2:	461a      	mov	r2, r3
 800dca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d3e3      	bcc.n	800dc72 <find_volume+0x386>
 800dcaa:	e000      	b.n	800dcae <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800dcac:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800dcae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcb0:	899b      	ldrh	r3, [r3, #12]
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d101      	bne.n	800dcbe <find_volume+0x3d2>
 800dcba:	230d      	movs	r3, #13
 800dcbc:	e1a1      	b.n	800e002 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dcbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcc4:	61da      	str	r2, [r3, #28]
 800dcc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcc8:	69da      	ldr	r2, [r3, #28]
 800dcca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dccc:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800dcce:	2304      	movs	r3, #4
 800dcd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800dcd4:	e17d      	b.n	800dfd2 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dcd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcd8:	333c      	adds	r3, #60	; 0x3c
 800dcda:	330b      	adds	r3, #11
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7fc fd2d 	bl	800a73c <ld_word>
 800dce2:	4603      	mov	r3, r0
 800dce4:	461a      	mov	r2, r3
 800dce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dce8:	899b      	ldrh	r3, [r3, #12]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d001      	beq.n	800dcf2 <find_volume+0x406>
 800dcee:	230d      	movs	r3, #13
 800dcf0:	e187      	b.n	800e002 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dcf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcf4:	333c      	adds	r3, #60	; 0x3c
 800dcf6:	3316      	adds	r3, #22
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fc fd1f 	bl	800a73c <ld_word>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dd02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d106      	bne.n	800dd16 <find_volume+0x42a>
 800dd08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd0a:	333c      	adds	r3, #60	; 0x3c
 800dd0c:	3324      	adds	r3, #36	; 0x24
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fc fd2c 	bl	800a76c <ld_dword>
 800dd14:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800dd16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd1a:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dd1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd1e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800dd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd24:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dd26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd28:	789b      	ldrb	r3, [r3, #2]
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d005      	beq.n	800dd3a <find_volume+0x44e>
 800dd2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd30:	789b      	ldrb	r3, [r3, #2]
 800dd32:	2b02      	cmp	r3, #2
 800dd34:	d001      	beq.n	800dd3a <find_volume+0x44e>
 800dd36:	230d      	movs	r3, #13
 800dd38:	e163      	b.n	800e002 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dd3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd3c:	789b      	ldrb	r3, [r3, #2]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd42:	fb02 f303 	mul.w	r3, r2, r3
 800dd46:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dd48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd4a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd52:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd56:	895b      	ldrh	r3, [r3, #10]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d008      	beq.n	800dd6e <find_volume+0x482>
 800dd5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd5e:	895b      	ldrh	r3, [r3, #10]
 800dd60:	461a      	mov	r2, r3
 800dd62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd64:	895b      	ldrh	r3, [r3, #10]
 800dd66:	3b01      	subs	r3, #1
 800dd68:	4013      	ands	r3, r2
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <find_volume+0x486>
 800dd6e:	230d      	movs	r3, #13
 800dd70:	e147      	b.n	800e002 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dd72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd74:	333c      	adds	r3, #60	; 0x3c
 800dd76:	3311      	adds	r3, #17
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7fc fcdf 	bl	800a73c <ld_word>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	461a      	mov	r2, r3
 800dd82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd84:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dd86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd88:	891b      	ldrh	r3, [r3, #8]
 800dd8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd8c:	8992      	ldrh	r2, [r2, #12]
 800dd8e:	0952      	lsrs	r2, r2, #5
 800dd90:	b292      	uxth	r2, r2
 800dd92:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd96:	fb01 f202 	mul.w	r2, r1, r2
 800dd9a:	1a9b      	subs	r3, r3, r2
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <find_volume+0x4ba>
 800dda2:	230d      	movs	r3, #13
 800dda4:	e12d      	b.n	800e002 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dda6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dda8:	333c      	adds	r3, #60	; 0x3c
 800ddaa:	3313      	adds	r3, #19
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7fc fcc5 	bl	800a73c <ld_word>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ddb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d106      	bne.n	800ddca <find_volume+0x4de>
 800ddbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddbe:	333c      	adds	r3, #60	; 0x3c
 800ddc0:	3320      	adds	r3, #32
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fc fcd2 	bl	800a76c <ld_dword>
 800ddc8:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ddca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddcc:	333c      	adds	r3, #60	; 0x3c
 800ddce:	330e      	adds	r3, #14
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fc fcb3 	bl	800a73c <ld_word>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dddc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d101      	bne.n	800dde8 <find_volume+0x4fc>
 800dde4:	230d      	movs	r3, #13
 800dde6:	e10c      	b.n	800e002 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dde8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ddec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ddee:	4413      	add	r3, r2
 800ddf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ddf2:	8911      	ldrh	r1, [r2, #8]
 800ddf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ddf6:	8992      	ldrh	r2, [r2, #12]
 800ddf8:	0952      	lsrs	r2, r2, #5
 800ddfa:	b292      	uxth	r2, r2
 800ddfc:	fbb1 f2f2 	udiv	r2, r1, r2
 800de00:	b292      	uxth	r2, r2
 800de02:	4413      	add	r3, r2
 800de04:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800de06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d201      	bcs.n	800de12 <find_volume+0x526>
 800de0e:	230d      	movs	r3, #13
 800de10:	e0f7      	b.n	800e002 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800de12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de16:	1ad3      	subs	r3, r2, r3
 800de18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de1a:	8952      	ldrh	r2, [r2, #10]
 800de1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800de20:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800de22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de24:	2b00      	cmp	r3, #0
 800de26:	d103      	bne.n	800de30 <find_volume+0x544>
 800de28:	230d      	movs	r3, #13
 800de2a:	e0ea      	b.n	800e002 <find_volume+0x716>
 800de2c:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800de30:	2303      	movs	r3, #3
 800de32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800de36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de38:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d802      	bhi.n	800de46 <find_volume+0x55a>
 800de40:	2302      	movs	r3, #2
 800de42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800de46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de48:	f640 72f5 	movw	r2, #4085	; 0xff5
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d802      	bhi.n	800de56 <find_volume+0x56a>
 800de50:	2301      	movs	r3, #1
 800de52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800de56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de58:	1c9a      	adds	r2, r3, #2
 800de5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de5c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800de5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800de62:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800de64:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800de68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de6a:	441a      	add	r2, r3
 800de6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de6e:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800de70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800de72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de74:	441a      	add	r2, r3
 800de76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de78:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800de7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de7e:	2b03      	cmp	r3, #3
 800de80:	d11e      	bne.n	800dec0 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800de82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de84:	333c      	adds	r3, #60	; 0x3c
 800de86:	332a      	adds	r3, #42	; 0x2a
 800de88:	4618      	mov	r0, r3
 800de8a:	f7fc fc57 	bl	800a73c <ld_word>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d001      	beq.n	800de98 <find_volume+0x5ac>
 800de94:	230d      	movs	r3, #13
 800de96:	e0b4      	b.n	800e002 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800de98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de9a:	891b      	ldrh	r3, [r3, #8]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d001      	beq.n	800dea4 <find_volume+0x5b8>
 800dea0:	230d      	movs	r3, #13
 800dea2:	e0ae      	b.n	800e002 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dea6:	333c      	adds	r3, #60	; 0x3c
 800dea8:	332c      	adds	r3, #44	; 0x2c
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fc fc5e 	bl	800a76c <ld_dword>
 800deb0:	4602      	mov	r2, r0
 800deb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deb4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800deb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deb8:	6a1b      	ldr	r3, [r3, #32]
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800debe:	e01f      	b.n	800df00 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dec2:	891b      	ldrh	r3, [r3, #8]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d101      	bne.n	800decc <find_volume+0x5e0>
 800dec8:	230d      	movs	r3, #13
 800deca:	e09a      	b.n	800e002 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800decc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ded2:	441a      	add	r2, r3
 800ded4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ded6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ded8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d103      	bne.n	800dee8 <find_volume+0x5fc>
 800dee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dee2:	6a1b      	ldr	r3, [r3, #32]
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	e00a      	b.n	800defe <find_volume+0x612>
 800dee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deea:	6a1a      	ldr	r2, [r3, #32]
 800deec:	4613      	mov	r3, r2
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	4413      	add	r3, r2
 800def2:	085a      	lsrs	r2, r3, #1
 800def4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800def6:	6a1b      	ldr	r3, [r3, #32]
 800def8:	f003 0301 	and.w	r3, r3, #1
 800defc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800defe:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800df00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df06:	899b      	ldrh	r3, [r3, #12]
 800df08:	4619      	mov	r1, r3
 800df0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df0c:	440b      	add	r3, r1
 800df0e:	3b01      	subs	r3, #1
 800df10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df12:	8989      	ldrh	r1, [r1, #12]
 800df14:	fbb3 f3f1 	udiv	r3, r3, r1
 800df18:	429a      	cmp	r2, r3
 800df1a:	d201      	bcs.n	800df20 <find_volume+0x634>
 800df1c:	230d      	movs	r3, #13
 800df1e:	e070      	b.n	800e002 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800df20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df26:	61da      	str	r2, [r3, #28]
 800df28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df2a:	69da      	ldr	r2, [r3, #28]
 800df2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df2e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800df30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df32:	2280      	movs	r2, #128	; 0x80
 800df34:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800df36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800df3a:	2b03      	cmp	r3, #3
 800df3c:	d149      	bne.n	800dfd2 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800df3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df40:	333c      	adds	r3, #60	; 0x3c
 800df42:	3330      	adds	r3, #48	; 0x30
 800df44:	4618      	mov	r0, r3
 800df46:	f7fc fbf9 	bl	800a73c <ld_word>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d140      	bne.n	800dfd2 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800df50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df52:	3301      	adds	r3, #1
 800df54:	4619      	mov	r1, r3
 800df56:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800df58:	f7fd f804 	bl	800af64 <move_window>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d137      	bne.n	800dfd2 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800df62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df64:	2200      	movs	r2, #0
 800df66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800df68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df6a:	333c      	adds	r3, #60	; 0x3c
 800df6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df70:	4618      	mov	r0, r3
 800df72:	f7fc fbe3 	bl	800a73c <ld_word>
 800df76:	4603      	mov	r3, r0
 800df78:	461a      	mov	r2, r3
 800df7a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800df7e:	429a      	cmp	r2, r3
 800df80:	d127      	bne.n	800dfd2 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800df82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df84:	333c      	adds	r3, #60	; 0x3c
 800df86:	4618      	mov	r0, r3
 800df88:	f7fc fbf0 	bl	800a76c <ld_dword>
 800df8c:	4603      	mov	r3, r0
 800df8e:	4a1f      	ldr	r2, [pc, #124]	; (800e00c <find_volume+0x720>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d11e      	bne.n	800dfd2 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800df94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df96:	333c      	adds	r3, #60	; 0x3c
 800df98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fc fbe5 	bl	800a76c <ld_dword>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	4a1a      	ldr	r2, [pc, #104]	; (800e010 <find_volume+0x724>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d113      	bne.n	800dfd2 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dfaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfac:	333c      	adds	r3, #60	; 0x3c
 800dfae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7fc fbda 	bl	800a76c <ld_dword>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfbc:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dfbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfc0:	333c      	adds	r3, #60	; 0x3c
 800dfc2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fc fbd0 	bl	800a76c <ld_dword>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfd0:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dfd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfd4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800dfd8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dfda:	4b0e      	ldr	r3, [pc, #56]	; (800e014 <find_volume+0x728>)
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	4b0c      	ldr	r3, [pc, #48]	; (800e014 <find_volume+0x728>)
 800dfe4:	801a      	strh	r2, [r3, #0]
 800dfe6:	4b0b      	ldr	r3, [pc, #44]	; (800e014 <find_volume+0x728>)
 800dfe8:	881a      	ldrh	r2, [r3, #0]
 800dfea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfec:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dfee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dff0:	4a09      	ldr	r2, [pc, #36]	; (800e018 <find_volume+0x72c>)
 800dff2:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800dff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dff6:	4a09      	ldr	r2, [pc, #36]	; (800e01c <find_volume+0x730>)
 800dff8:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dffa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dffc:	f7fc ff4a 	bl	800ae94 <clear_lock>
#endif
	return FR_OK;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	3770      	adds	r7, #112	; 0x70
 800e006:	46bd      	mov	sp, r7
 800e008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e00c:	41615252 	.word	0x41615252
 800e010:	61417272 	.word	0x61417272
 800e014:	2000237c 	.word	0x2000237c
 800e018:	20002600 	.word	0x20002600
 800e01c:	200023a0 	.word	0x200023a0

0800e020 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e02a:	2309      	movs	r3, #9
 800e02c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d01c      	beq.n	800e06e <validate+0x4e>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d018      	beq.n	800e06e <validate+0x4e>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d013      	beq.n	800e06e <validate+0x4e>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	889a      	ldrh	r2, [r3, #4]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	88db      	ldrh	r3, [r3, #6]
 800e050:	429a      	cmp	r2, r3
 800e052:	d10c      	bne.n	800e06e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	785b      	ldrb	r3, [r3, #1]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fc fad0 	bl	800a600 <disk_status>
 800e060:	4603      	mov	r3, r0
 800e062:	f003 0301 	and.w	r3, r3, #1
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <validate+0x4e>
			res = FR_OK;
 800e06a:	2300      	movs	r3, #0
 800e06c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e06e:	7bfb      	ldrb	r3, [r7, #15]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d102      	bne.n	800e07a <validate+0x5a>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	e000      	b.n	800e07c <validate+0x5c>
 800e07a:	2300      	movs	r3, #0
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	6013      	str	r3, [r2, #0]
	return res;
 800e080:	7bfb      	ldrb	r3, [r7, #15]
}
 800e082:	4618      	mov	r0, r3
 800e084:	3710      	adds	r7, #16
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
	...

0800e08c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	4613      	mov	r3, r2
 800e098:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e09e:	f107 0310 	add.w	r3, r7, #16
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7ff fb7a 	bl	800d79c <get_ldnumber>
 800e0a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	da01      	bge.n	800e0b4 <f_mount+0x28>
 800e0b0:	230b      	movs	r3, #11
 800e0b2:	e02b      	b.n	800e10c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e0b4:	4a17      	ldr	r2, [pc, #92]	; (800e114 <f_mount+0x88>)
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d005      	beq.n	800e0d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e0c4:	69b8      	ldr	r0, [r7, #24]
 800e0c6:	f7fc fee5 	bl	800ae94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d002      	beq.n	800e0dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	490d      	ldr	r1, [pc, #52]	; (800e114 <f_mount+0x88>)
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d002      	beq.n	800e0f2 <f_mount+0x66>
 800e0ec:	79fb      	ldrb	r3, [r7, #7]
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	d001      	beq.n	800e0f6 <f_mount+0x6a>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	e00a      	b.n	800e10c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e0f6:	f107 010c 	add.w	r1, r7, #12
 800e0fa:	f107 0308 	add.w	r3, r7, #8
 800e0fe:	2200      	movs	r2, #0
 800e100:	4618      	mov	r0, r3
 800e102:	f7ff fbf3 	bl	800d8ec <find_volume>
 800e106:	4603      	mov	r3, r0
 800e108:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3720      	adds	r7, #32
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	20002378 	.word	0x20002378

0800e118 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e11c:	b0a8      	sub	sp, #160	; 0xa0
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6278      	str	r0, [r7, #36]	; 0x24
 800e122:	6239      	str	r1, [r7, #32]
 800e124:	4613      	mov	r3, r2
 800e126:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <f_open+0x1a>
 800e12e:	2309      	movs	r3, #9
 800e130:	e2c0      	b.n	800e6b4 <f_open+0x59c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e132:	7ffb      	ldrb	r3, [r7, #31]
 800e134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e138:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800e13a:	7ffb      	ldrb	r3, [r7, #31]
 800e13c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e140:	f107 0020 	add.w	r0, r7, #32
 800e144:	461a      	mov	r2, r3
 800e146:	f7ff fbd1 	bl	800d8ec <find_volume>
 800e14a:	4603      	mov	r3, r0
 800e14c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800e150:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e154:	2b00      	cmp	r3, #0
 800e156:	f040 82a4 	bne.w	800e6a2 <f_open+0x58a>
		dj.obj.fs = fs;
 800e15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15c:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e15e:	6a3b      	ldr	r3, [r7, #32]
 800e160:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e164:	4619      	mov	r1, r3
 800e166:	4610      	mov	r0, r2
 800e168:	f7ff fa6a 	bl	800d640 <follow_path>
 800e16c:	4603      	mov	r3, r0
 800e16e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e172:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e176:	2b00      	cmp	r3, #0
 800e178:	d11a      	bne.n	800e1b0 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e17a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800e17e:	b25b      	sxtb	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	da03      	bge.n	800e18c <f_open+0x74>
				res = FR_INVALID_NAME;
 800e184:	2306      	movs	r3, #6
 800e186:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800e18a:	e011      	b.n	800e1b0 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e18c:	7ffb      	ldrb	r3, [r7, #31]
 800e18e:	f023 0301 	bic.w	r3, r3, #1
 800e192:	2b00      	cmp	r3, #0
 800e194:	bf14      	ite	ne
 800e196:	2301      	movne	r3, #1
 800e198:	2300      	moveq	r3, #0
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	461a      	mov	r2, r3
 800e19e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e1a2:	4611      	mov	r1, r2
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7fc fd2d 	bl	800ac04 <chk_lock>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e1b0:	7ffb      	ldrb	r3, [r7, #31]
 800e1b2:	f003 031c 	and.w	r3, r3, #28
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	f000 8117 	beq.w	800e3ea <f_open+0x2d2>
			if (res != FR_OK) {					/* No file, create new */
 800e1bc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d017      	beq.n	800e1f4 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e1c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e1c8:	2b04      	cmp	r3, #4
 800e1ca:	d10e      	bne.n	800e1ea <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e1cc:	f7fc fd76 	bl	800acbc <enq_lock>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d006      	beq.n	800e1e4 <f_open+0xcc>
 800e1d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fe fde2 	bl	800cda4 <dir_register>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	e000      	b.n	800e1e6 <f_open+0xce>
 800e1e4:	2312      	movs	r3, #18
 800e1e6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e1ea:	7ffb      	ldrb	r3, [r7, #31]
 800e1ec:	f043 0308 	orr.w	r3, r3, #8
 800e1f0:	77fb      	strb	r3, [r7, #31]
 800e1f2:	e011      	b.n	800e218 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e1f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1f8:	f003 0311 	and.w	r3, r3, #17
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d003      	beq.n	800e208 <f_open+0xf0>
					res = FR_DENIED;
 800e200:	2307      	movs	r3, #7
 800e202:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800e206:	e007      	b.n	800e218 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e208:	7ffb      	ldrb	r3, [r7, #31]
 800e20a:	f003 0304 	and.w	r3, r3, #4
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d002      	beq.n	800e218 <f_open+0x100>
 800e212:	2308      	movs	r3, #8
 800e214:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e218:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f040 8100 	bne.w	800e422 <f_open+0x30a>
 800e222:	7ffb      	ldrb	r3, [r7, #31]
 800e224:	f003 0308 	and.w	r3, r3, #8
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f000 80fa 	beq.w	800e422 <f_open+0x30a>
				dw = GET_FATTIME();
 800e22e:	f7fa f881 	bl	8008334 <get_fattime>
 800e232:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b04      	cmp	r3, #4
 800e23c:	f040 8085 	bne.w	800e34a <f_open+0x232>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800e240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800e246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e248:	695b      	ldr	r3, [r3, #20]
 800e24a:	3334      	adds	r3, #52	; 0x34
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fc fa8d 	bl	800a76c <ld_dword>
 800e252:	4602      	mov	r2, r0
 800e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e256:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	695b      	ldr	r3, [r3, #20]
 800e25c:	3338      	adds	r3, #56	; 0x38
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fc faa7 	bl	800a7b2 <ld_qword>
 800e264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e266:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	695b      	ldr	r3, [r3, #20]
 800e26e:	3321      	adds	r3, #33	; 0x21
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	f003 0302 	and.w	r3, r3, #2
 800e276:	b2db      	uxtb	r3, r3
 800e278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e27a:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800e27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27e:	2200      	movs	r2, #0
 800e280:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	3308      	adds	r3, #8
 800e288:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fc fb86 	bl	800a99e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e294:	695b      	ldr	r3, [r3, #20]
 800e296:	f103 0214 	add.w	r2, r3, #20
 800e29a:	2300      	movs	r3, #0
 800e29c:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a0:	695b      	ldr	r3, [r3, #20]
 800e2a2:	330c      	adds	r3, #12
 800e2a4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fc fb78 	bl	800a99e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b0:	695b      	ldr	r3, [r3, #20]
 800e2b2:	f103 0215 	add.w	r2, r3, #21
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800e2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2bc:	695b      	ldr	r3, [r3, #20]
 800e2be:	1d1a      	adds	r2, r3, #4
 800e2c0:	2320      	movs	r3, #32
 800e2c2:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800e2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c6:	695b      	ldr	r3, [r3, #20]
 800e2c8:	3334      	adds	r3, #52	; 0x34
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7fc fb66 	bl	800a99e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800e2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d4:	695b      	ldr	r3, [r3, #20]
 800e2d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e2da:	f04f 0200 	mov.w	r2, #0
 800e2de:	f04f 0300 	mov.w	r3, #0
 800e2e2:	4608      	mov	r0, r1
 800e2e4:	f7fc fb87 	bl	800a9f6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800e2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e2f0:	f04f 0200 	mov.w	r2, #0
 800e2f4:	f04f 0300 	mov.w	r3, #0
 800e2f8:	4608      	mov	r0, r1
 800e2fa:	f7fc fb7c 	bl	800a9f6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	695b      	ldr	r3, [r3, #20]
 800e302:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800e306:	2301      	movs	r3, #1
 800e308:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800e30a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fe fa96 	bl	800c840 <store_xdir>
 800e314:	4603      	mov	r3, r0
 800e316:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800e31a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d17f      	bne.n	800e422 <f_open+0x30a>
 800e322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d07b      	beq.n	800e422 <f_open+0x30a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800e32a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	2200      	movs	r2, #0
 800e332:	4619      	mov	r1, r3
 800e334:	f7fd faa6 	bl	800b884 <remove_chain>
 800e338:	4603      	mov	r3, r0
 800e33a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800e33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e344:	3b01      	subs	r3, #1
 800e346:	6193      	str	r3, [r2, #24]
 800e348:	e06b      	b.n	800e422 <f_open+0x30a>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e34c:	330e      	adds	r3, #14
 800e34e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e352:	4618      	mov	r0, r3
 800e354:	f7fc fb23 	bl	800a99e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e35a:	3316      	adds	r3, #22
 800e35c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e360:	4618      	mov	r0, r3
 800e362:	f7fc fb1c 	bl	800a99e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e368:	f103 020b 	add.w	r2, r3, #11
 800e36c:	2320      	movs	r3, #32
 800e36e:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e374:	4619      	mov	r1, r3
 800e376:	4610      	mov	r0, r2
 800e378:	f7fd fe5b 	bl	800c032 <ld_clust>
 800e37c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e380:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e384:	2200      	movs	r2, #0
 800e386:	4619      	mov	r1, r3
 800e388:	f7fd fe72 	bl	800c070 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e38c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e38e:	331c      	adds	r3, #28
 800e390:	2100      	movs	r1, #0
 800e392:	4618      	mov	r0, r3
 800e394:	f7fc fb03 	bl	800a99e <st_dword>
					fs->wflag = 1;
 800e398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e39a:	2301      	movs	r3, #1
 800e39c:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e39e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d03d      	beq.n	800e422 <f_open+0x30a>
						dw = fs->winsect;
 800e3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800e3ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fd fa63 	bl	800b884 <remove_chain>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800e3c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d12a      	bne.n	800e422 <f_open+0x30a>
							res = move_window(fs, dw);
 800e3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ce:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fc fdc6 	bl	800af64 <move_window>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e3de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	6193      	str	r3, [r2, #24]
 800e3e8:	e01b      	b.n	800e422 <f_open+0x30a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e3ea:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d117      	bne.n	800e422 <f_open+0x30a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e3f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3f6:	f003 0310 	and.w	r3, r3, #16
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <f_open+0x2ee>
					res = FR_NO_FILE;
 800e3fe:	2304      	movs	r3, #4
 800e400:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800e404:	e00d      	b.n	800e422 <f_open+0x30a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e406:	7ffb      	ldrb	r3, [r7, #31]
 800e408:	f003 0302 	and.w	r3, r3, #2
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d008      	beq.n	800e422 <f_open+0x30a>
 800e410:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e414:	f003 0301 	and.w	r3, r3, #1
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d002      	beq.n	800e422 <f_open+0x30a>
						res = FR_DENIED;
 800e41c:	2307      	movs	r3, #7
 800e41e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e422:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e426:	2b00      	cmp	r3, #0
 800e428:	d128      	bne.n	800e47c <f_open+0x364>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e42a:	7ffb      	ldrb	r3, [r7, #31]
 800e42c:	f003 0308 	and.w	r3, r3, #8
 800e430:	2b00      	cmp	r3, #0
 800e432:	d003      	beq.n	800e43c <f_open+0x324>
				mode |= FA_MODIFIED;
 800e434:	7ffb      	ldrb	r3, [r7, #31]
 800e436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e43a:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e442:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800e444:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e448:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e44a:	7ffb      	ldrb	r3, [r7, #31]
 800e44c:	f023 0301 	bic.w	r3, r3, #1
 800e450:	2b00      	cmp	r3, #0
 800e452:	bf14      	ite	ne
 800e454:	2301      	movne	r3, #1
 800e456:	2300      	moveq	r3, #0
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	461a      	mov	r2, r3
 800e45c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e460:	4611      	mov	r1, r2
 800e462:	4618      	mov	r0, r3
 800e464:	f7fc fc4c 	bl	800ad00 <inc_lock>
 800e468:	4602      	mov	r2, r0
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e472:	2b00      	cmp	r3, #0
 800e474:	d102      	bne.n	800e47c <f_open+0x364>
 800e476:	2302      	movs	r3, #2
 800e478:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e47c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e480:	2b00      	cmp	r3, #0
 800e482:	f040 810e 	bne.w	800e6a2 <f_open+0x58a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	2b04      	cmp	r3, #4
 800e48c:	d12d      	bne.n	800e4ea <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800e48e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e494:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e498:	4613      	mov	r3, r2
 800e49a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e49e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e4a2:	431a      	orrs	r2, r3
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800e4a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ac:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b0:	695b      	ldr	r3, [r3, #20]
 800e4b2:	3334      	adds	r3, #52	; 0x34
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fc f959 	bl	800a76c <ld_dword>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	695b      	ldr	r3, [r3, #20]
 800e4c4:	3338      	adds	r3, #56	; 0x38
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fc f973 	bl	800a7b2 <ld_qword>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	695b      	ldr	r3, [r3, #20]
 800e4da:	3321      	adds	r3, #33	; 0x21
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	f003 0302 	and.w	r3, r3, #2
 800e4e2:	b2da      	uxtb	r2, r3
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e6:	71da      	strb	r2, [r3, #7]
 800e4e8:	e016      	b.n	800e518 <f_open+0x400>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e4ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	f7fd fd9e 	bl	800c032 <ld_clust>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e4fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4fe:	331c      	adds	r3, #28
 800e500:	4618      	mov	r0, r3
 800e502:	f7fc f933 	bl	800a76c <ld_dword>
 800e506:	4603      	mov	r3, r0
 800e508:	2200      	movs	r2, #0
 800e50a:	613b      	str	r3, [r7, #16]
 800e50c:	617a      	str	r2, [r7, #20]
 800e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e510:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e514:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	2200      	movs	r2, #0
 800e51c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e51e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e526:	88da      	ldrh	r2, [r3, #6]
 800e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	7ffa      	ldrb	r2, [r7, #31]
 800e530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	2200      	movs	r2, #0
 800e538:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	2200      	movs	r2, #0
 800e540:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e544:	f04f 0200 	mov.w	r2, #0
 800e548:	f04f 0300 	mov.w	r3, #0
 800e54c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	3354      	adds	r3, #84	; 0x54
 800e554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e558:	2100      	movs	r1, #0
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fc faf4 	bl	800ab48 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e560:	7ffb      	ldrb	r3, [r7, #31]
 800e562:	f003 0320 	and.w	r3, r3, #32
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 809b 	beq.w	800e6a2 <f_open+0x58a>
 800e56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e572:	4313      	orrs	r3, r2
 800e574:	f000 8095 	beq.w	800e6a2 <f_open+0x58a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e57e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e580:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e586:	895b      	ldrh	r3, [r3, #10]
 800e588:	461a      	mov	r2, r3
 800e58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58c:	899b      	ldrh	r3, [r3, #12]
 800e58e:	fb02 f303 	mul.w	r3, r2, r3
 800e592:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e5a4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800e5a8:	e023      	b.n	800e5f2 <f_open+0x4da>
					clst = get_fat(&fp->obj, clst);
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ac:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fc fd95 	bl	800b0e0 <get_fat>
 800e5b6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800e5ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d802      	bhi.n	800e5c8 <f_open+0x4b0>
 800e5c2:	2302      	movs	r3, #2
 800e5c4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e5c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e5cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5d0:	d102      	bne.n	800e5d8 <f_open+0x4c0>
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e5d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e5dc:	2200      	movs	r2, #0
 800e5de:	4698      	mov	r8, r3
 800e5e0:	4691      	mov	r9, r2
 800e5e2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800e5e6:	ebb2 0a08 	subs.w	sl, r2, r8
 800e5ea:	eb63 0b09 	sbc.w	fp, r3, r9
 800e5ee:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
 800e5f2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d10a      	bne.n	800e610 <f_open+0x4f8>
 800e5fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e5fe:	2200      	movs	r2, #0
 800e600:	461c      	mov	r4, r3
 800e602:	4615      	mov	r5, r2
 800e604:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800e608:	4294      	cmp	r4, r2
 800e60a:	eb75 0303 	sbcs.w	r3, r5, r3
 800e60e:	d3cc      	bcc.n	800e5aa <f_open+0x492>
				}
				fp->clust = clst;
 800e610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e612:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e616:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e618:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d140      	bne.n	800e6a2 <f_open+0x58a>
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	899b      	ldrh	r3, [r3, #12]
 800e624:	b29b      	uxth	r3, r3
 800e626:	2200      	movs	r2, #0
 800e628:	60bb      	str	r3, [r7, #8]
 800e62a:	60fa      	str	r2, [r7, #12]
 800e62c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800e630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e634:	f7f2 f94a 	bl	80008cc <__aeabi_uldivmod>
 800e638:	4313      	orrs	r3, r2
 800e63a:	d032      	beq.n	800e6a2 <f_open+0x58a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e642:	4618      	mov	r0, r3
 800e644:	f7fc fd2c 	bl	800b0a0 <clust2sect>
 800e648:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800e64c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e650:	2b00      	cmp	r3, #0
 800e652:	d103      	bne.n	800e65c <f_open+0x544>
						res = FR_INT_ERR;
 800e654:	2302      	movs	r3, #2
 800e656:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800e65a:	e022      	b.n	800e6a2 <f_open+0x58a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	899b      	ldrh	r3, [r3, #12]
 800e660:	b29b      	uxth	r3, r3
 800e662:	2200      	movs	r2, #0
 800e664:	603b      	str	r3, [r7, #0]
 800e666:	607a      	str	r2, [r7, #4]
 800e668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e66c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800e670:	f7f2 f92c 	bl	80008cc <__aeabi_uldivmod>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e67c:	441a      	add	r2, r3
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e684:	7858      	ldrb	r0, [r3, #1]
 800e686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e688:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e690:	2301      	movs	r3, #1
 800e692:	f7fb fff5 	bl	800a680 <disk_read>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <f_open+0x58a>
 800e69c:	2301      	movs	r3, #1
 800e69e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e6a2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <f_open+0x598>
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e6b0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	37a0      	adds	r7, #160	; 0xa0
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e6be <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e6be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c2:	b091      	sub	sp, #68	; 0x44
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	61f8      	str	r0, [r7, #28]
 800e6c8:	61b9      	str	r1, [r7, #24]
 800e6ca:	617a      	str	r2, [r7, #20]
 800e6cc:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	f107 0220 	add.w	r2, r7, #32
 800e6de:	4611      	mov	r1, r2
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7ff fc9d 	bl	800e020 <validate>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e6ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d108      	bne.n	800e706 <f_write+0x48>
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e6fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e6fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e702:	2b00      	cmp	r3, #0
 800e704:	d002      	beq.n	800e70c <f_write+0x4e>
 800e706:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e70a:	e1aa      	b.n	800ea62 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e712:	f003 0302 	and.w	r3, r3, #2
 800e716:	2b00      	cmp	r3, #0
 800e718:	d101      	bne.n	800e71e <f_write+0x60>
 800e71a:	2307      	movs	r3, #7
 800e71c:	e1a1      	b.n	800ea62 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e71e:	6a3b      	ldr	r3, [r7, #32]
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	2b04      	cmp	r3, #4
 800e724:	f000 818d 	beq.w	800ea42 <f_write+0x384>
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	18d1      	adds	r1, r2, r3
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e738:	4613      	mov	r3, r2
 800e73a:	4299      	cmp	r1, r3
 800e73c:	f080 8181 	bcs.w	800ea42 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e746:	4613      	mov	r3, r2
 800e748:	43db      	mvns	r3, r3
 800e74a:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e74c:	e179      	b.n	800ea42 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e754:	6a3b      	ldr	r3, [r7, #32]
 800e756:	899b      	ldrh	r3, [r3, #12]
 800e758:	b29b      	uxth	r3, r3
 800e75a:	2200      	movs	r2, #0
 800e75c:	461d      	mov	r5, r3
 800e75e:	4616      	mov	r6, r2
 800e760:	462a      	mov	r2, r5
 800e762:	4633      	mov	r3, r6
 800e764:	f7f2 f8b2 	bl	80008cc <__aeabi_uldivmod>
 800e768:	4313      	orrs	r3, r2
 800e76a:	f040 810a 	bne.w	800e982 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	899b      	ldrh	r3, [r3, #12]
 800e778:	b29b      	uxth	r3, r3
 800e77a:	2200      	movs	r2, #0
 800e77c:	60bb      	str	r3, [r7, #8]
 800e77e:	60fa      	str	r2, [r7, #12]
 800e780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e784:	f7f2 f8a2 	bl	80008cc <__aeabi_uldivmod>
 800e788:	4602      	mov	r2, r0
 800e78a:	460b      	mov	r3, r1
 800e78c:	6a3b      	ldr	r3, [r7, #32]
 800e78e:	895b      	ldrh	r3, [r3, #10]
 800e790:	3b01      	subs	r3, #1
 800e792:	4013      	ands	r3, r2
 800e794:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800e796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d146      	bne.n	800e82a <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	d10c      	bne.n	800e7c0 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	689b      	ldr	r3, [r3, #8]
 800e7aa:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800e7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d11a      	bne.n	800e7e8 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fd f918 	bl	800b9ec <create_chain>
 800e7bc:	63b8      	str	r0, [r7, #56]	; 0x38
 800e7be:	e013      	b.n	800e7e8 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d007      	beq.n	800e7d8 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e7ce:	69f8      	ldr	r0, [r7, #28]
 800e7d0:	f7fd fa0d 	bl	800bbee <clmt_clust>
 800e7d4:	63b8      	str	r0, [r7, #56]	; 0x38
 800e7d6:	e007      	b.n	800e7e8 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e7d8:	69fa      	ldr	r2, [r7, #28]
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7de:	4619      	mov	r1, r3
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	f7fd f903 	bl	800b9ec <create_chain>
 800e7e6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f000 812e 	beq.w	800ea4c <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d105      	bne.n	800e802 <f_write+0x144>
 800e7f6:	69fb      	ldr	r3, [r7, #28]
 800e7f8:	2202      	movs	r2, #2
 800e7fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e7fe:	2302      	movs	r3, #2
 800e800:	e12f      	b.n	800ea62 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e808:	d105      	bne.n	800e816 <f_write+0x158>
 800e80a:	69fb      	ldr	r3, [r7, #28]
 800e80c:	2201      	movs	r2, #1
 800e80e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e812:	2301      	movs	r3, #1
 800e814:	e125      	b.n	800ea62 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e81a:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d102      	bne.n	800e82a <f_write+0x16c>
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e828:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e830:	b25b      	sxtb	r3, r3
 800e832:	2b00      	cmp	r3, #0
 800e834:	da1b      	bge.n	800e86e <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e836:	6a3b      	ldr	r3, [r7, #32]
 800e838:	7858      	ldrb	r0, [r3, #1]
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e844:	2301      	movs	r3, #1
 800e846:	f7fb ff3b 	bl	800a6c0 <disk_write>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d005      	beq.n	800e85c <f_write+0x19e>
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	2201      	movs	r2, #1
 800e854:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e858:	2301      	movs	r3, #1
 800e85a:	e102      	b.n	800ea62 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e866:	b2da      	uxtb	r2, r3
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e86e:	6a3a      	ldr	r2, [r7, #32]
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e874:	4619      	mov	r1, r3
 800e876:	4610      	mov	r0, r2
 800e878:	f7fc fc12 	bl	800b0a0 <clust2sect>
 800e87c:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	2b00      	cmp	r3, #0
 800e882:	d105      	bne.n	800e890 <f_write+0x1d2>
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	2202      	movs	r2, #2
 800e888:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e88c:	2302      	movs	r3, #2
 800e88e:	e0e8      	b.n	800ea62 <f_write+0x3a4>
			sect += csect;
 800e890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e894:	4413      	add	r3, r2
 800e896:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e898:	6a3b      	ldr	r3, [r7, #32]
 800e89a:	899b      	ldrh	r3, [r3, #12]
 800e89c:	461a      	mov	r2, r3
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8a4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d046      	beq.n	800e93a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e8ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b0:	4413      	add	r3, r2
 800e8b2:	6a3a      	ldr	r2, [r7, #32]
 800e8b4:	8952      	ldrh	r2, [r2, #10]
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d905      	bls.n	800e8c6 <f_write+0x208>
					cc = fs->csize - csect;
 800e8ba:	6a3b      	ldr	r3, [r7, #32]
 800e8bc:	895b      	ldrh	r3, [r3, #10]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e8c6:	6a3b      	ldr	r3, [r7, #32]
 800e8c8:	7858      	ldrb	r0, [r3, #1]
 800e8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8d0:	f7fb fef6 	bl	800a6c0 <disk_write>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d005      	beq.n	800e8e6 <f_write+0x228>
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	2201      	movs	r2, #1
 800e8de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e0bd      	b.n	800ea62 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ec:	1ad3      	subs	r3, r2, r3
 800e8ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d91a      	bls.n	800e92a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	6a3a      	ldr	r2, [r7, #32]
 800e904:	8992      	ldrh	r2, [r2, #12]
 800e906:	fb02 f303 	mul.w	r3, r2, r3
 800e90a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e90c:	18d1      	adds	r1, r2, r3
 800e90e:	6a3b      	ldr	r3, [r7, #32]
 800e910:	899b      	ldrh	r3, [r3, #12]
 800e912:	461a      	mov	r2, r3
 800e914:	f7fc f8f7 	bl	800ab06 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e922:	b2da      	uxtb	r2, r3
 800e924:	69fb      	ldr	r3, [r7, #28]
 800e926:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e92a:	6a3b      	ldr	r3, [r7, #32]
 800e92c:	899b      	ldrh	r3, [r3, #12]
 800e92e:	461a      	mov	r2, r3
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	fb02 f303 	mul.w	r3, r2, r3
 800e936:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800e938:	e058      	b.n	800e9ec <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e93e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e940:	429a      	cmp	r2, r3
 800e942:	d01b      	beq.n	800e97c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e950:	4290      	cmp	r0, r2
 800e952:	eb71 0303 	sbcs.w	r3, r1, r3
 800e956:	d211      	bcs.n	800e97c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e958:	6a3b      	ldr	r3, [r7, #32]
 800e95a:	7858      	ldrb	r0, [r3, #1]
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e962:	2301      	movs	r3, #1
 800e964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e966:	f7fb fe8b 	bl	800a680 <disk_read>
 800e96a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d005      	beq.n	800e97c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	2201      	movs	r2, #1
 800e974:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e978:	2301      	movs	r3, #1
 800e97a:	e072      	b.n	800ea62 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e980:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e982:	6a3b      	ldr	r3, [r7, #32]
 800e984:	899b      	ldrh	r3, [r3, #12]
 800e986:	4618      	mov	r0, r3
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e98e:	6a3b      	ldr	r3, [r7, #32]
 800e990:	899b      	ldrh	r3, [r3, #12]
 800e992:	fbb2 f1f3 	udiv	r1, r2, r3
 800e996:	fb01 f303 	mul.w	r3, r1, r3
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	1ac3      	subs	r3, r0, r3
 800e99e:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	d901      	bls.n	800e9ac <f_write+0x2ee>
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e9b8:	6a3b      	ldr	r3, [r7, #32]
 800e9ba:	899b      	ldrh	r3, [r3, #12]
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	2200      	movs	r2, #0
 800e9c0:	603b      	str	r3, [r7, #0]
 800e9c2:	607a      	str	r2, [r7, #4]
 800e9c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9c8:	f7f1 ff80 	bl	80008cc <__aeabi_uldivmod>
 800e9cc:	4613      	mov	r3, r2
 800e9ce:	4423      	add	r3, r4
 800e9d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7fc f896 	bl	800ab06 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e9e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e9e4:	b2da      	uxtb	r2, r3
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e9ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9f0:	4413      	add	r3, r2
 800e9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e9fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	4688      	mov	r8, r1
 800ea00:	4681      	mov	r9, r0
 800ea02:	eb12 0a08 	adds.w	sl, r2, r8
 800ea06:	eb43 0b09 	adc.w	fp, r3, r9
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ea1c:	4290      	cmp	r0, r2
 800ea1e:	eb71 0403 	sbcs.w	r4, r1, r3
 800ea22:	d201      	bcs.n	800ea28 <f_write+0x36a>
 800ea24:	4610      	mov	r0, r2
 800ea26:	4619      	mov	r1, r3
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea34:	441a      	add	r2, r3
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	601a      	str	r2, [r3, #0]
 800ea3a:	697a      	ldr	r2, [r7, #20]
 800ea3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f47f ae82 	bne.w	800e74e <f_write+0x90>
 800ea4a:	e000      	b.n	800ea4e <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ea4c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea58:	b2da      	uxtb	r2, r3
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3744      	adds	r7, #68	; 0x44
 800ea66:	46bd      	mov	sp, r7
 800ea68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea6c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b09a      	sub	sp, #104	; 0x68
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7ff facf 	bl	800e020 <validate>
 800ea82:	4603      	mov	r3, r0
 800ea84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ea88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f040 8105 	bne.w	800ec9c <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	f000 80fd 	beq.w	800ec9c <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eaa8:	b25b      	sxtb	r3, r3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	da17      	bge.n	800eade <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eaae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eab0:	7858      	ldrb	r0, [r3, #1]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eabc:	2301      	movs	r3, #1
 800eabe:	f7fb fdff 	bl	800a6c0 <disk_write>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d001      	beq.n	800eacc <f_sync+0x60>
 800eac8:	2301      	movs	r3, #1
 800eaca:	e0e9      	b.n	800eca0 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ead2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ead6:	b2da      	uxtb	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eade:	f7f9 fc29 	bl	8008334 <get_fattime>
 800eae2:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800eae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	2b04      	cmp	r3, #4
 800eaea:	f040 808c 	bne.w	800ec06 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fc fe67 	bl	800b7c4 <fill_first_frag>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800eafc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10a      	bne.n	800eb1a <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb0e:	4619      	mov	r1, r3
 800eb10:	f7fc fe87 	bl	800b822 <fill_last_frag>
 800eb14:	4603      	mov	r3, r0
 800eb16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800eb1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f040 80bc 	bne.w	800ec9c <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	f107 0308 	add.w	r3, r7, #8
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7fd fe51 	bl	800c7d4 <load_obj_dir>
 800eb32:	4603      	mov	r3, r0
 800eb34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800eb38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f040 80ad 	bne.w	800ec9c <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800eb42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb44:	695b      	ldr	r3, [r3, #20]
 800eb46:	3304      	adds	r3, #4
 800eb48:	781a      	ldrb	r2, [r3, #0]
 800eb4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb4c:	695b      	ldr	r3, [r3, #20]
 800eb4e:	3304      	adds	r3, #4
 800eb50:	f042 0220 	orr.w	r2, r2, #32
 800eb54:	b2d2      	uxtb	r2, r2
 800eb56:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	79da      	ldrb	r2, [r3, #7]
 800eb5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb5e:	695b      	ldr	r3, [r3, #20]
 800eb60:	3321      	adds	r3, #33	; 0x21
 800eb62:	f042 0201 	orr.w	r2, r2, #1
 800eb66:	b2d2      	uxtb	r2, r2
 800eb68:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800eb6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb6c:	695b      	ldr	r3, [r3, #20]
 800eb6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	4619      	mov	r1, r3
 800eb78:	4610      	mov	r0, r2
 800eb7a:	f7fb ff10 	bl	800a99e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800eb7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb80:	695b      	ldr	r3, [r3, #20]
 800eb82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eb8c:	4608      	mov	r0, r1
 800eb8e:	f7fb ff32 	bl	800a9f6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800eb92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb94:	695b      	ldr	r3, [r3, #20]
 800eb96:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eba0:	4608      	mov	r0, r1
 800eba2:	f7fb ff28 	bl	800a9f6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800eba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eba8:	695b      	ldr	r3, [r3, #20]
 800ebaa:	330c      	adds	r3, #12
 800ebac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fb fef5 	bl	800a99e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800ebb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebb6:	695b      	ldr	r3, [r3, #20]
 800ebb8:	3315      	adds	r3, #21
 800ebba:	2200      	movs	r2, #0
 800ebbc:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800ebbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebc0:	695b      	ldr	r3, [r3, #20]
 800ebc2:	3310      	adds	r3, #16
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fb fee9 	bl	800a99e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800ebcc:	f107 0308 	add.w	r3, r7, #8
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7fd fe35 	bl	800c840 <store_xdir>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ebdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d15b      	bne.n	800ec9c <f_sync+0x230>
							res = sync_fs(fs);
 800ebe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fc f9ea 	bl	800afc0 <sync_fs>
 800ebec:	4603      	mov	r3, r0
 800ebee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ebf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebfc:	b2da      	uxtb	r2, r3
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ec04:	e04a      	b.n	800ec9c <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ec06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	4610      	mov	r0, r2
 800ec10:	f7fc f9a8 	bl	800af64 <move_window>
 800ec14:	4603      	mov	r3, r0
 800ec16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800ec1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d13c      	bne.n	800ec9c <f_sync+0x230>
					dir = fp->dir_ptr;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec26:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ec28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec2a:	330b      	adds	r3, #11
 800ec2c:	781a      	ldrb	r2, [r3, #0]
 800ec2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec30:	330b      	adds	r3, #11
 800ec32:	f042 0220 	orr.w	r2, r2, #32
 800ec36:	b2d2      	uxtb	r2, r2
 800ec38:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6818      	ldr	r0, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	461a      	mov	r2, r3
 800ec44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ec46:	f7fd fa13 	bl	800c070 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ec4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec4c:	f103 001c 	add.w	r0, r3, #28
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ec56:	4613      	mov	r3, r2
 800ec58:	4619      	mov	r1, r3
 800ec5a:	f7fb fea0 	bl	800a99e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ec5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec60:	3316      	adds	r3, #22
 800ec62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fb fe9a 	bl	800a99e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ec6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec6c:	3312      	adds	r3, #18
 800ec6e:	2100      	movs	r1, #0
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fb fe79 	bl	800a968 <st_word>
					fs->wflag = 1;
 800ec76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec78:	2201      	movs	r2, #1
 800ec7a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ec7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fc f99e 	bl	800afc0 <sync_fs>
 800ec84:	4603      	mov	r3, r0
 800ec86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec94:	b2da      	uxtb	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ec9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3768      	adds	r7, #104	; 0x68
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7ff fedb 	bl	800ea6c <f_sync>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d118      	bne.n	800ecf2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f107 0208 	add.w	r2, r7, #8
 800ecc6:	4611      	mov	r1, r2
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7ff f9a9 	bl	800e020 <validate>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ecd2:	7bfb      	ldrb	r3, [r7, #15]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d10c      	bne.n	800ecf2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fc f89d 	bl	800ae1c <dec_lock>
 800ece2:	4603      	mov	r3, r0
 800ece4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d102      	bne.n	800ecf2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ecf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b086      	sub	sp, #24
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d101      	bne.n	800ed10 <f_opendir+0x14>
 800ed0c:	2309      	movs	r3, #9
 800ed0e:	e09a      	b.n	800ee46 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ed14:	f107 010c 	add.w	r1, r7, #12
 800ed18:	463b      	mov	r3, r7
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fe fde5 	bl	800d8ec <find_volume>
 800ed22:	4603      	mov	r3, r0
 800ed24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ed26:	7dfb      	ldrb	r3, [r7, #23]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f040 8085 	bne.w	800ee38 <f_opendir+0x13c>
		obj->fs = fs;
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	4619      	mov	r1, r3
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f7fe fc81 	bl	800d640 <follow_path>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d172      	bne.n	800ee2e <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ed4e:	b25b      	sxtb	r3, r3
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	db47      	blt.n	800ede4 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	799b      	ldrb	r3, [r3, #6]
 800ed58:	f003 0310 	and.w	r3, r3, #16
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d03f      	beq.n	800ede0 <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	2b04      	cmp	r3, #4
 800ed66:	d130      	bne.n	800edca <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	689a      	ldr	r2, [r3, #8]
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ed76:	4613      	mov	r3, r2
 800ed78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed7c:	693a      	ldr	r2, [r7, #16]
 800ed7e:	79d2      	ldrb	r2, [r2, #7]
 800ed80:	431a      	orrs	r2, r3
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	695b      	ldr	r3, [r3, #20]
 800ed92:	3334      	adds	r3, #52	; 0x34
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fb fce9 	bl	800a76c <ld_dword>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	695b      	ldr	r3, [r3, #20]
 800eda4:	3338      	adds	r3, #56	; 0x38
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fb fd03 	bl	800a7b2 <ld_qword>
 800edac:	4602      	mov	r2, r0
 800edae:	460b      	mov	r3, r1
 800edb0:	6939      	ldr	r1, [r7, #16]
 800edb2:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	695b      	ldr	r3, [r3, #20]
 800edba:	3321      	adds	r3, #33	; 0x21
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	f003 0302 	and.w	r3, r3, #2
 800edc2:	b2da      	uxtb	r2, r3
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	71da      	strb	r2, [r3, #7]
 800edc8:	e00c      	b.n	800ede4 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edd0:	4619      	mov	r1, r3
 800edd2:	4610      	mov	r0, r2
 800edd4:	f7fd f92d 	bl	800c032 <ld_clust>
 800edd8:	4602      	mov	r2, r0
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	609a      	str	r2, [r3, #8]
 800edde:	e001      	b.n	800ede4 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ede0:	2305      	movs	r3, #5
 800ede2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ede4:	7dfb      	ldrb	r3, [r7, #23]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d121      	bne.n	800ee2e <f_opendir+0x132>
				obj->id = fs->id;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	88da      	ldrh	r2, [r3, #6]
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800edf2:	2100      	movs	r1, #0
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f7fc ff46 	bl	800bc86 <dir_sdi>
 800edfa:	4603      	mov	r3, r0
 800edfc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800edfe:	7dfb      	ldrb	r3, [r7, #23]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d114      	bne.n	800ee2e <f_opendir+0x132>
					if (obj->sclust) {
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d00d      	beq.n	800ee28 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7fb ff76 	bl	800ad00 <inc_lock>
 800ee14:	4602      	mov	r2, r0
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d105      	bne.n	800ee2e <f_opendir+0x132>
 800ee22:	2312      	movs	r3, #18
 800ee24:	75fb      	strb	r3, [r7, #23]
 800ee26:	e002      	b.n	800ee2e <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ee2e:	7dfb      	ldrb	r3, [r7, #23]
 800ee30:	2b04      	cmp	r3, #4
 800ee32:	d101      	bne.n	800ee38 <f_opendir+0x13c>
 800ee34:	2305      	movs	r3, #5
 800ee36:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ee38:	7dfb      	ldrb	r3, [r7, #23]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d002      	beq.n	800ee44 <f_opendir+0x148>
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	2200      	movs	r2, #0
 800ee42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ee44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3718      	adds	r7, #24
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b084      	sub	sp, #16
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f107 0208 	add.w	r2, r7, #8
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7ff f8de 	bl	800e020 <validate>
 800ee64:	4603      	mov	r3, r0
 800ee66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ee68:	7bfb      	ldrb	r3, [r7, #15]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d110      	bne.n	800ee90 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d006      	beq.n	800ee84 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fb ffce 	bl	800ae1c <dec_lock>
 800ee80:	4603      	mov	r3, r0
 800ee82:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ee84:	7bfb      	ldrb	r3, [r7, #15]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d102      	bne.n	800ee90 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ee90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}

0800ee9a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b084      	sub	sp, #16
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
 800eea2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f107 0208 	add.w	r2, r7, #8
 800eeaa:	4611      	mov	r1, r2
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7ff f8b7 	bl	800e020 <validate>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d126      	bne.n	800ef0a <f_readdir+0x70>
		if (!fno) {
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d106      	bne.n	800eed0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800eec2:	2100      	movs	r1, #0
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f7fc fede 	bl	800bc86 <dir_sdi>
 800eeca:	4603      	mov	r3, r0
 800eecc:	73fb      	strb	r3, [r7, #15]
 800eece:	e01c      	b.n	800ef0a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800eed0:	2100      	movs	r1, #0
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7fd fd76 	bl	800c9c4 <dir_read>
 800eed8:	4603      	mov	r3, r0
 800eeda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800eedc:	7bfb      	ldrb	r3, [r7, #15]
 800eede:	2b04      	cmp	r3, #4
 800eee0:	d101      	bne.n	800eee6 <f_readdir+0x4c>
 800eee2:	2300      	movs	r3, #0
 800eee4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d10e      	bne.n	800ef0a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800eeec:	6839      	ldr	r1, [r7, #0]
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f7fe f902 	bl	800d0f8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800eef4:	2100      	movs	r1, #0
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f7fc ff59 	bl	800bdae <dir_next>
 800eefc:	4603      	mov	r3, r0
 800eefe:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
 800ef02:	2b04      	cmp	r3, #4
 800ef04:	d101      	bne.n	800ef0a <f_readdir+0x70>
 800ef06:	2300      	movs	r3, #0
 800ef08:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ef0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b098      	sub	sp, #96	; 0x60
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ef1e:	f107 0108 	add.w	r1, r7, #8
 800ef22:	1d3b      	adds	r3, r7, #4
 800ef24:	2200      	movs	r2, #0
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fe fce0 	bl	800d8ec <find_volume>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ef32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d11f      	bne.n	800ef7a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	f107 0308 	add.w	r3, r7, #8
 800ef40:	4611      	mov	r1, r2
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fe fb7c 	bl	800d640 <follow_path>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800ef4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d111      	bne.n	800ef7a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ef56:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ef5a:	b25b      	sxtb	r3, r3
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	da03      	bge.n	800ef68 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800ef60:	2306      	movs	r3, #6
 800ef62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ef66:	e008      	b.n	800ef7a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d005      	beq.n	800ef7a <f_stat+0x66>
 800ef6e:	f107 0308 	add.w	r3, r7, #8
 800ef72:	6839      	ldr	r1, [r7, #0]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7fe f8bf 	bl	800d0f8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ef7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3760      	adds	r7, #96	; 0x60
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b09a      	sub	sp, #104	; 0x68
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	60f8      	str	r0, [r7, #12]
 800ef8e:	60b9      	str	r1, [r7, #8]
 800ef90:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ef92:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ef96:	f107 030c 	add.w	r3, r7, #12
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fe fca5 	bl	800d8ec <find_volume>
 800efa2:	4603      	mov	r3, r0
 800efa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800efa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800efac:	2b00      	cmp	r3, #0
 800efae:	f040 80eb 	bne.w	800f188 <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800efb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800efb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efba:	69da      	ldr	r2, [r3, #28]
 800efbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efbe:	6a1b      	ldr	r3, [r3, #32]
 800efc0:	3b02      	subs	r3, #2
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d804      	bhi.n	800efd0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800efc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efc8:	69da      	ldr	r2, [r3, #28]
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	e0db      	b.n	800f188 <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800efd0:	2300      	movs	r3, #0
 800efd2:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800efd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d128      	bne.n	800f02e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800efdc:	2302      	movs	r3, #2
 800efde:	65fb      	str	r3, [r7, #92]	; 0x5c
 800efe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efe2:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800efe4:	f107 0310 	add.w	r3, r7, #16
 800efe8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800efea:	4618      	mov	r0, r3
 800efec:	f7fc f878 	bl	800b0e0 <get_fat>
 800eff0:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800eff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eff8:	d103      	bne.n	800f002 <f_getfree+0x7c>
 800effa:	2301      	movs	r3, #1
 800effc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f000:	e0b5      	b.n	800f16e <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800f002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f004:	2b01      	cmp	r3, #1
 800f006:	d103      	bne.n	800f010 <f_getfree+0x8a>
 800f008:	2302      	movs	r3, #2
 800f00a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f00e:	e0ae      	b.n	800f16e <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800f010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f012:	2b00      	cmp	r3, #0
 800f014:	d102      	bne.n	800f01c <f_getfree+0x96>
 800f016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f018:	3301      	adds	r3, #1
 800f01a:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800f01c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f01e:	3301      	adds	r3, #1
 800f020:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f024:	6a1b      	ldr	r3, [r3, #32]
 800f026:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f028:	429a      	cmp	r2, r3
 800f02a:	d3db      	bcc.n	800efe4 <f_getfree+0x5e>
 800f02c:	e09f      	b.n	800f16e <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800f02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	2b04      	cmp	r3, #4
 800f034:	d14b      	bne.n	800f0ce <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800f036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f038:	6a1b      	ldr	r3, [r3, #32]
 800f03a:	3b02      	subs	r3, #2
 800f03c:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800f03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f042:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800f044:	2300      	movs	r3, #0
 800f046:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800f048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10d      	bne.n	800f06a <f_getfree+0xe4>
 800f04e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f052:	1c5a      	adds	r2, r3, #1
 800f054:	65ba      	str	r2, [r7, #88]	; 0x58
 800f056:	4619      	mov	r1, r3
 800f058:	f7fb ff84 	bl	800af64 <move_window>
 800f05c:	4603      	mov	r3, r0
 800f05e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f062:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f066:	2b00      	cmp	r3, #0
 800f068:	d17e      	bne.n	800f168 <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800f06a:	2308      	movs	r3, #8
 800f06c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f06e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f072:	4413      	add	r3, r2
 800f074:	333c      	adds	r3, #60	; 0x3c
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f07c:	e013      	b.n	800f0a6 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800f07e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f082:	f003 0301 	and.w	r3, r3, #1
 800f086:	2b00      	cmp	r3, #0
 800f088:	d102      	bne.n	800f090 <f_getfree+0x10a>
 800f08a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f08c:	3301      	adds	r3, #1
 800f08e:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800f090:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f094:	085b      	lsrs	r3, r3, #1
 800f096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800f09a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f09c:	3b01      	subs	r3, #1
 800f09e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d002      	beq.n	800f0b2 <f_getfree+0x12c>
 800f0ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1e5      	bne.n	800f07e <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800f0b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0b8:	8992      	ldrh	r2, [r2, #12]
 800f0ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0be:	fb01 f202 	mul.w	r2, r1, r2
 800f0c2:	1a9b      	subs	r3, r3, r2
 800f0c4:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800f0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1bd      	bne.n	800f048 <f_getfree+0xc2>
 800f0cc:	e04f      	b.n	800f16e <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800f0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0d0:	6a1b      	ldr	r3, [r3, #32]
 800f0d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d8:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	657b      	str	r3, [r7, #84]	; 0x54
 800f0de:	2300      	movs	r3, #0
 800f0e0:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800f0e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d113      	bne.n	800f110 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800f0e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f0ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0ec:	1c5a      	adds	r2, r3, #1
 800f0ee:	65ba      	str	r2, [r7, #88]	; 0x58
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	f7fb ff37 	bl	800af64 <move_window>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800f0fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f100:	2b00      	cmp	r3, #0
 800f102:	d133      	bne.n	800f16c <f_getfree+0x1e6>
							p = fs->win;
 800f104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f106:	333c      	adds	r3, #60	; 0x3c
 800f108:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800f10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f10c:	899b      	ldrh	r3, [r3, #12]
 800f10e:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800f110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	2b02      	cmp	r3, #2
 800f116:	d10f      	bne.n	800f138 <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800f118:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f11a:	f7fb fb0f 	bl	800a73c <ld_word>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d102      	bne.n	800f12a <f_getfree+0x1a4>
 800f124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f126:	3301      	adds	r3, #1
 800f128:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800f12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f12c:	3302      	adds	r3, #2
 800f12e:	653b      	str	r3, [r7, #80]	; 0x50
 800f130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f132:	3b02      	subs	r3, #2
 800f134:	657b      	str	r3, [r7, #84]	; 0x54
 800f136:	e010      	b.n	800f15a <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800f138:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f13a:	f7fb fb17 	bl	800a76c <ld_dword>
 800f13e:	4603      	mov	r3, r0
 800f140:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f144:	2b00      	cmp	r3, #0
 800f146:	d102      	bne.n	800f14e <f_getfree+0x1c8>
 800f148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f14a:	3301      	adds	r3, #1
 800f14c:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800f14e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f150:	3304      	adds	r3, #4
 800f152:	653b      	str	r3, [r7, #80]	; 0x50
 800f154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f156:	3b04      	subs	r3, #4
 800f158:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800f15a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f15c:	3b01      	subs	r3, #1
 800f15e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1bd      	bne.n	800f0e2 <f_getfree+0x15c>
 800f166:	e002      	b.n	800f16e <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800f168:	bf00      	nop
 800f16a:	e000      	b.n	800f16e <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800f16c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f172:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800f174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f176:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f178:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800f17a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f17c:	791a      	ldrb	r2, [r3, #4]
 800f17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f180:	f042 0201 	orr.w	r2, r2, #1
 800f184:	b2d2      	uxtb	r2, r2
 800f186:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800f188:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3768      	adds	r7, #104	; 0x68
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f194:	b5b0      	push	{r4, r5, r7, lr}
 800f196:	b0a0      	sub	sp, #128	; 0x80
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f19c:	f107 010c 	add.w	r1, r7, #12
 800f1a0:	1d3b      	adds	r3, r7, #4
 800f1a2:	2202      	movs	r2, #2
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7fe fba1 	bl	800d8ec <find_volume>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800f1b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	f040 8133 	bne.w	800f424 <f_mkdir+0x290>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f1be:	687a      	ldr	r2, [r7, #4]
 800f1c0:	f107 0310 	add.w	r3, r7, #16
 800f1c4:	4611      	mov	r1, r2
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fe fa3a 	bl	800d640 <follow_path>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f1d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d102      	bne.n	800f1e0 <f_mkdir+0x4c>
 800f1da:	2308      	movs	r3, #8
 800f1dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f1e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f1e4:	2b04      	cmp	r3, #4
 800f1e6:	f040 811d 	bne.w	800f424 <f_mkdir+0x290>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f1ea:	f107 0310 	add.w	r3, r7, #16
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7fc fbfb 	bl	800b9ec <create_chain>
 800f1f6:	66f8      	str	r0, [r7, #108]	; 0x6c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	895b      	ldrh	r3, [r3, #10]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	899b      	ldrh	r3, [r3, #12]
 800f202:	fb02 f303 	mul.w	r3, r2, r3
 800f206:	2200      	movs	r2, #0
 800f208:	461c      	mov	r4, r3
 800f20a:	4615      	mov	r5, r2
 800f20c:	e9c7 4508 	strd	r4, r5, [r7, #32]
			res = FR_OK;
 800f210:	2300      	movs	r3, #0
 800f212:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d102      	bne.n	800f222 <f_mkdir+0x8e>
 800f21c:	2307      	movs	r3, #7
 800f21e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 800f222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f224:	2b01      	cmp	r3, #1
 800f226:	d102      	bne.n	800f22e <f_mkdir+0x9a>
 800f228:	2302      	movs	r3, #2
 800f22a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f22e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f234:	d102      	bne.n	800f23c <f_mkdir+0xa8>
 800f236:	2301      	movs	r3, #1
 800f238:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f23c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f240:	2b00      	cmp	r3, #0
 800f242:	d106      	bne.n	800f252 <f_mkdir+0xbe>
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	4618      	mov	r0, r3
 800f248:	f7fb fe48 	bl	800aedc <sync_window>
 800f24c:	4603      	mov	r3, r0
 800f24e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 800f252:	f7f9 f86f 	bl	8008334 <get_fattime>
 800f256:	66b8      	str	r0, [r7, #104]	; 0x68
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f258:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d170      	bne.n	800f342 <f_mkdir+0x1ae>
				dsc = clust2sect(fs, dcl);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f264:	4618      	mov	r0, r3
 800f266:	f7fb ff1b 	bl	800b0a0 <clust2sect>
 800f26a:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	333c      	adds	r3, #60	; 0x3c
 800f270:	667b      	str	r3, [r7, #100]	; 0x64
				mem_set(dir, 0, SS(fs));
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	899b      	ldrh	r3, [r3, #12]
 800f276:	461a      	mov	r2, r3
 800f278:	2100      	movs	r1, #0
 800f27a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f27c:	f7fb fc64 	bl	800ab48 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b04      	cmp	r3, #4
 800f286:	d036      	beq.n	800f2f6 <f_mkdir+0x162>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f288:	220b      	movs	r2, #11
 800f28a:	2120      	movs	r1, #32
 800f28c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f28e:	f7fb fc5b 	bl	800ab48 <mem_set>
					dir[DIR_Name] = '.';
 800f292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f294:	222e      	movs	r2, #46	; 0x2e
 800f296:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800f298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f29a:	330b      	adds	r3, #11
 800f29c:	2210      	movs	r2, #16
 800f29e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800f2a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2a2:	3316      	adds	r3, #22
 800f2a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fb fb79 	bl	800a99e <st_dword>
					st_clust(fs, dir, dcl);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f2b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fc fedc 	bl	800c070 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800f2b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2ba:	3320      	adds	r3, #32
 800f2bc:	2220      	movs	r2, #32
 800f2be:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fb fc20 	bl	800ab06 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f2c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2c8:	3321      	adds	r3, #33	; 0x21
 800f2ca:	222e      	movs	r2, #46	; 0x2e
 800f2cc:	701a      	strb	r2, [r3, #0]
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	2b03      	cmp	r3, #3
 800f2d8:	d106      	bne.n	800f2e8 <f_mkdir+0x154>
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d101      	bne.n	800f2e8 <f_mkdir+0x154>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2ec:	3320      	adds	r3, #32
 800f2ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	f7fc febd 	bl	800c070 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	895b      	ldrh	r3, [r3, #10]
 800f2fa:	67bb      	str	r3, [r7, #120]	; 0x78
 800f2fc:	e01c      	b.n	800f338 <f_mkdir+0x1a4>
					fs->winsect = dsc++;
 800f2fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f300:	1c5a      	adds	r2, r3, #1
 800f302:	677a      	str	r2, [r7, #116]	; 0x74
 800f304:	68fa      	ldr	r2, [r7, #12]
 800f306:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2201      	movs	r2, #1
 800f30c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	4618      	mov	r0, r3
 800f312:	f7fb fde3 	bl	800aedc <sync_window>
 800f316:	4603      	mov	r3, r0
 800f318:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 800f31c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f320:	2b00      	cmp	r3, #0
 800f322:	d10d      	bne.n	800f340 <f_mkdir+0x1ac>
					mem_set(dir, 0, SS(fs));
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	899b      	ldrh	r3, [r3, #12]
 800f328:	461a      	mov	r2, r3
 800f32a:	2100      	movs	r1, #0
 800f32c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f32e:	f7fb fc0b 	bl	800ab48 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f334:	3b01      	subs	r3, #1
 800f336:	67bb      	str	r3, [r7, #120]	; 0x78
 800f338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d1df      	bne.n	800f2fe <f_mkdir+0x16a>
 800f33e:	e000      	b.n	800f342 <f_mkdir+0x1ae>
					if (res != FR_OK) break;
 800f340:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800f342:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f346:	2b00      	cmp	r3, #0
 800f348:	d107      	bne.n	800f35a <f_mkdir+0x1c6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f34a:	f107 0310 	add.w	r3, r7, #16
 800f34e:	4618      	mov	r0, r3
 800f350:	f7fd fd28 	bl	800cda4 <dir_register>
 800f354:	4603      	mov	r3, r0
 800f356:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 800f35a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d159      	bne.n	800f416 <f_mkdir+0x282>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	2b04      	cmp	r3, #4
 800f368:	d134      	bne.n	800f3d4 <f_mkdir+0x240>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	695b      	ldr	r3, [r3, #20]
 800f36e:	330c      	adds	r3, #12
 800f370:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f372:	4618      	mov	r0, r3
 800f374:	f7fb fb13 	bl	800a99e <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	695b      	ldr	r3, [r3, #20]
 800f37c:	3334      	adds	r3, #52	; 0x34
 800f37e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f380:	4618      	mov	r0, r3
 800f382:	f7fb fb0c 	bl	800a99e <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	695b      	ldr	r3, [r3, #20]
 800f38a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f38e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f392:	4613      	mov	r3, r2
 800f394:	4619      	mov	r1, r3
 800f396:	f7fb fb02 	bl	800a99e <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	695b      	ldr	r3, [r3, #20]
 800f39e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800f3a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	f7fb faf8 	bl	800a99e <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	695b      	ldr	r3, [r3, #20]
 800f3b2:	3321      	adds	r3, #33	; 0x21
 800f3b4:	2203      	movs	r2, #3
 800f3b6:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	695b      	ldr	r3, [r3, #20]
 800f3bc:	3304      	adds	r3, #4
 800f3be:	2210      	movs	r2, #16
 800f3c0:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800f3c2:	f107 0310 	add.w	r3, r7, #16
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fd fa3a 	bl	800c840 <store_xdir>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f3d2:	e014      	b.n	800f3fe <f_mkdir+0x26a>
				} else
#endif
				{
					dir = dj.dir;
 800f3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3d6:	667b      	str	r3, [r7, #100]	; 0x64
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f3d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3da:	3316      	adds	r3, #22
 800f3dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fb fadd 	bl	800a99e <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f3e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fc fe40 	bl	800c070 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f3f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3f2:	330b      	adds	r3, #11
 800f3f4:	2210      	movs	r2, #16
 800f3f6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f3fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f402:	2b00      	cmp	r3, #0
 800f404:	d10e      	bne.n	800f424 <f_mkdir+0x290>
					res = sync_fs(fs);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fb fdd9 	bl	800afc0 <sync_fs>
 800f40e:	4603      	mov	r3, r0
 800f410:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f414:	e006      	b.n	800f424 <f_mkdir+0x290>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f416:	f107 0310 	add.w	r3, r7, #16
 800f41a:	2200      	movs	r2, #0
 800f41c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fc fa30 	bl	800b884 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f424:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3780      	adds	r7, #128	; 0x80
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bdb0      	pop	{r4, r5, r7, pc}

0800f430 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f430:	b480      	push	{r7}
 800f432:	b087      	sub	sp, #28
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	4613      	mov	r3, r2
 800f43c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f43e:	2301      	movs	r3, #1
 800f440:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f442:	2300      	movs	r3, #0
 800f444:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f446:	4b1f      	ldr	r3, [pc, #124]	; (800f4c4 <FATFS_LinkDriverEx+0x94>)
 800f448:	7a5b      	ldrb	r3, [r3, #9]
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d131      	bne.n	800f4b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f450:	4b1c      	ldr	r3, [pc, #112]	; (800f4c4 <FATFS_LinkDriverEx+0x94>)
 800f452:	7a5b      	ldrb	r3, [r3, #9]
 800f454:	b2db      	uxtb	r3, r3
 800f456:	461a      	mov	r2, r3
 800f458:	4b1a      	ldr	r3, [pc, #104]	; (800f4c4 <FATFS_LinkDriverEx+0x94>)
 800f45a:	2100      	movs	r1, #0
 800f45c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f45e:	4b19      	ldr	r3, [pc, #100]	; (800f4c4 <FATFS_LinkDriverEx+0x94>)
 800f460:	7a5b      	ldrb	r3, [r3, #9]
 800f462:	b2db      	uxtb	r3, r3
 800f464:	4a17      	ldr	r2, [pc, #92]	; (800f4c4 <FATFS_LinkDriverEx+0x94>)
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4413      	add	r3, r2
 800f46a:	68fa      	ldr	r2, [r7, #12]
 800f46c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f46e:	4b15      	ldr	r3, [pc, #84]	; (800f4c4 <FATFS_LinkDriverEx+0x94>)
 800f470:	7a5b      	ldrb	r3, [r3, #9]
 800f472:	b2db      	uxtb	r3, r3
 800f474:	461a      	mov	r2, r3
 800f476:	4b13      	ldr	r3, [pc, #76]	; (800f4c4 <FATFS_LinkDriverEx+0x94>)
 800f478:	4413      	add	r3, r2
 800f47a:	79fa      	ldrb	r2, [r7, #7]
 800f47c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f47e:	4b11      	ldr	r3, [pc, #68]	; (800f4c4 <FATFS_LinkDriverEx+0x94>)
 800f480:	7a5b      	ldrb	r3, [r3, #9]
 800f482:	b2db      	uxtb	r3, r3
 800f484:	1c5a      	adds	r2, r3, #1
 800f486:	b2d1      	uxtb	r1, r2
 800f488:	4a0e      	ldr	r2, [pc, #56]	; (800f4c4 <FATFS_LinkDriverEx+0x94>)
 800f48a:	7251      	strb	r1, [r2, #9]
 800f48c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f48e:	7dbb      	ldrb	r3, [r7, #22]
 800f490:	3330      	adds	r3, #48	; 0x30
 800f492:	b2da      	uxtb	r2, r3
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	3301      	adds	r3, #1
 800f49c:	223a      	movs	r2, #58	; 0x3a
 800f49e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	3302      	adds	r3, #2
 800f4a4:	222f      	movs	r2, #47	; 0x2f
 800f4a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	3303      	adds	r3, #3
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	371c      	adds	r7, #28
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c0:	4770      	bx	lr
 800f4c2:	bf00      	nop
 800f4c4:	20002800 	.word	0x20002800

0800f4c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7ff ffaa 	bl	800f430 <FATFS_LinkDriverEx>
 800f4dc:	4603      	mov	r3, r0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3708      	adds	r7, #8
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
	...

0800f4e8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b085      	sub	sp, #20
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	6039      	str	r1, [r7, #0]
 800f4f2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f4f4:	88fb      	ldrh	r3, [r7, #6]
 800f4f6:	2b7f      	cmp	r3, #127	; 0x7f
 800f4f8:	d802      	bhi.n	800f500 <ff_convert+0x18>
		c = chr;
 800f4fa:	88fb      	ldrh	r3, [r7, #6]
 800f4fc:	81fb      	strh	r3, [r7, #14]
 800f4fe:	e025      	b.n	800f54c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d00b      	beq.n	800f51e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f506:	88fb      	ldrh	r3, [r7, #6]
 800f508:	2bff      	cmp	r3, #255	; 0xff
 800f50a:	d805      	bhi.n	800f518 <ff_convert+0x30>
 800f50c:	88fb      	ldrh	r3, [r7, #6]
 800f50e:	3b80      	subs	r3, #128	; 0x80
 800f510:	4a12      	ldr	r2, [pc, #72]	; (800f55c <ff_convert+0x74>)
 800f512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f516:	e000      	b.n	800f51a <ff_convert+0x32>
 800f518:	2300      	movs	r3, #0
 800f51a:	81fb      	strh	r3, [r7, #14]
 800f51c:	e016      	b.n	800f54c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f51e:	2300      	movs	r3, #0
 800f520:	81fb      	strh	r3, [r7, #14]
 800f522:	e009      	b.n	800f538 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f524:	89fb      	ldrh	r3, [r7, #14]
 800f526:	4a0d      	ldr	r2, [pc, #52]	; (800f55c <ff_convert+0x74>)
 800f528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f52c:	88fa      	ldrh	r2, [r7, #6]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d006      	beq.n	800f540 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f532:	89fb      	ldrh	r3, [r7, #14]
 800f534:	3301      	adds	r3, #1
 800f536:	81fb      	strh	r3, [r7, #14]
 800f538:	89fb      	ldrh	r3, [r7, #14]
 800f53a:	2b7f      	cmp	r3, #127	; 0x7f
 800f53c:	d9f2      	bls.n	800f524 <ff_convert+0x3c>
 800f53e:	e000      	b.n	800f542 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f540:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f542:	89fb      	ldrh	r3, [r7, #14]
 800f544:	3380      	adds	r3, #128	; 0x80
 800f546:	b29b      	uxth	r3, r3
 800f548:	b2db      	uxtb	r3, r3
 800f54a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f54c:	89fb      	ldrh	r3, [r7, #14]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3714      	adds	r7, #20
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	08011534 	.word	0x08011534

0800f560 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f560:	b480      	push	{r7}
 800f562:	b087      	sub	sp, #28
 800f564:	af00      	add	r7, sp, #0
 800f566:	4603      	mov	r3, r0
 800f568:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f56a:	88fb      	ldrh	r3, [r7, #6]
 800f56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f570:	d201      	bcs.n	800f576 <ff_wtoupper+0x16>
 800f572:	4b3e      	ldr	r3, [pc, #248]	; (800f66c <ff_wtoupper+0x10c>)
 800f574:	e000      	b.n	800f578 <ff_wtoupper+0x18>
 800f576:	4b3e      	ldr	r3, [pc, #248]	; (800f670 <ff_wtoupper+0x110>)
 800f578:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	1c9a      	adds	r2, r3, #2
 800f57e:	617a      	str	r2, [r7, #20]
 800f580:	881b      	ldrh	r3, [r3, #0]
 800f582:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f584:	8a7b      	ldrh	r3, [r7, #18]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d068      	beq.n	800f65c <ff_wtoupper+0xfc>
 800f58a:	88fa      	ldrh	r2, [r7, #6]
 800f58c:	8a7b      	ldrh	r3, [r7, #18]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d364      	bcc.n	800f65c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	1c9a      	adds	r2, r3, #2
 800f596:	617a      	str	r2, [r7, #20]
 800f598:	881b      	ldrh	r3, [r3, #0]
 800f59a:	823b      	strh	r3, [r7, #16]
 800f59c:	8a3b      	ldrh	r3, [r7, #16]
 800f59e:	0a1b      	lsrs	r3, r3, #8
 800f5a0:	81fb      	strh	r3, [r7, #14]
 800f5a2:	8a3b      	ldrh	r3, [r7, #16]
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f5a8:	88fa      	ldrh	r2, [r7, #6]
 800f5aa:	8a79      	ldrh	r1, [r7, #18]
 800f5ac:	8a3b      	ldrh	r3, [r7, #16]
 800f5ae:	440b      	add	r3, r1
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	da49      	bge.n	800f648 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f5b4:	89fb      	ldrh	r3, [r7, #14]
 800f5b6:	2b08      	cmp	r3, #8
 800f5b8:	d84f      	bhi.n	800f65a <ff_wtoupper+0xfa>
 800f5ba:	a201      	add	r2, pc, #4	; (adr r2, 800f5c0 <ff_wtoupper+0x60>)
 800f5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c0:	0800f5e5 	.word	0x0800f5e5
 800f5c4:	0800f5f7 	.word	0x0800f5f7
 800f5c8:	0800f60d 	.word	0x0800f60d
 800f5cc:	0800f615 	.word	0x0800f615
 800f5d0:	0800f61d 	.word	0x0800f61d
 800f5d4:	0800f625 	.word	0x0800f625
 800f5d8:	0800f62d 	.word	0x0800f62d
 800f5dc:	0800f635 	.word	0x0800f635
 800f5e0:	0800f63d 	.word	0x0800f63d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f5e4:	88fa      	ldrh	r2, [r7, #6]
 800f5e6:	8a7b      	ldrh	r3, [r7, #18]
 800f5e8:	1ad3      	subs	r3, r2, r3
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	697a      	ldr	r2, [r7, #20]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	881b      	ldrh	r3, [r3, #0]
 800f5f2:	80fb      	strh	r3, [r7, #6]
 800f5f4:	e027      	b.n	800f646 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f5f6:	88fa      	ldrh	r2, [r7, #6]
 800f5f8:	8a7b      	ldrh	r3, [r7, #18]
 800f5fa:	1ad3      	subs	r3, r2, r3
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	f003 0301 	and.w	r3, r3, #1
 800f602:	b29b      	uxth	r3, r3
 800f604:	88fa      	ldrh	r2, [r7, #6]
 800f606:	1ad3      	subs	r3, r2, r3
 800f608:	80fb      	strh	r3, [r7, #6]
 800f60a:	e01c      	b.n	800f646 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f60c:	88fb      	ldrh	r3, [r7, #6]
 800f60e:	3b10      	subs	r3, #16
 800f610:	80fb      	strh	r3, [r7, #6]
 800f612:	e018      	b.n	800f646 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f614:	88fb      	ldrh	r3, [r7, #6]
 800f616:	3b20      	subs	r3, #32
 800f618:	80fb      	strh	r3, [r7, #6]
 800f61a:	e014      	b.n	800f646 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f61c:	88fb      	ldrh	r3, [r7, #6]
 800f61e:	3b30      	subs	r3, #48	; 0x30
 800f620:	80fb      	strh	r3, [r7, #6]
 800f622:	e010      	b.n	800f646 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f624:	88fb      	ldrh	r3, [r7, #6]
 800f626:	3b1a      	subs	r3, #26
 800f628:	80fb      	strh	r3, [r7, #6]
 800f62a:	e00c      	b.n	800f646 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f62c:	88fb      	ldrh	r3, [r7, #6]
 800f62e:	3308      	adds	r3, #8
 800f630:	80fb      	strh	r3, [r7, #6]
 800f632:	e008      	b.n	800f646 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f634:	88fb      	ldrh	r3, [r7, #6]
 800f636:	3b50      	subs	r3, #80	; 0x50
 800f638:	80fb      	strh	r3, [r7, #6]
 800f63a:	e004      	b.n	800f646 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f63c:	88fb      	ldrh	r3, [r7, #6]
 800f63e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f642:	80fb      	strh	r3, [r7, #6]
 800f644:	bf00      	nop
			}
			break;
 800f646:	e008      	b.n	800f65a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f648:	89fb      	ldrh	r3, [r7, #14]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d195      	bne.n	800f57a <ff_wtoupper+0x1a>
 800f64e:	8a3b      	ldrh	r3, [r7, #16]
 800f650:	005b      	lsls	r3, r3, #1
 800f652:	697a      	ldr	r2, [r7, #20]
 800f654:	4413      	add	r3, r2
 800f656:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f658:	e78f      	b.n	800f57a <ff_wtoupper+0x1a>
			break;
 800f65a:	bf00      	nop
	}

	return chr;
 800f65c:	88fb      	ldrh	r3, [r7, #6]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	371c      	adds	r7, #28
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	08011634 	.word	0x08011634
 800f670:	08011828 	.word	0x08011828

0800f674 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f678:	2201      	movs	r2, #1
 800f67a:	490e      	ldr	r1, [pc, #56]	; (800f6b4 <MX_USB_HOST_Init+0x40>)
 800f67c:	480e      	ldr	r0, [pc, #56]	; (800f6b8 <MX_USB_HOST_Init+0x44>)
 800f67e:	f7fa fafd 	bl	8009c7c <USBH_Init>
 800f682:	4603      	mov	r3, r0
 800f684:	2b00      	cmp	r3, #0
 800f686:	d001      	beq.n	800f68c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f688:	f7f1 ff7c 	bl	8001584 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800f68c:	490b      	ldr	r1, [pc, #44]	; (800f6bc <MX_USB_HOST_Init+0x48>)
 800f68e:	480a      	ldr	r0, [pc, #40]	; (800f6b8 <MX_USB_HOST_Init+0x44>)
 800f690:	f7fa fb82 	bl	8009d98 <USBH_RegisterClass>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d001      	beq.n	800f69e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f69a:	f7f1 ff73 	bl	8001584 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f69e:	4806      	ldr	r0, [pc, #24]	; (800f6b8 <MX_USB_HOST_Init+0x44>)
 800f6a0:	f7fa fc06 	bl	8009eb0 <USBH_Start>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d001      	beq.n	800f6ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f6aa:	f7f1 ff6b 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f6ae:	bf00      	nop
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	0800f6c1 	.word	0x0800f6c1
 800f6b8:	2000280c 	.word	0x2000280c
 800f6bc:	2000000c 	.word	0x2000000c

0800f6c0 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f6cc:	78fb      	ldrb	r3, [r7, #3]
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	2b04      	cmp	r3, #4
 800f6d2:	d82e      	bhi.n	800f732 <USBH_UserProcess+0x72>
 800f6d4:	a201      	add	r2, pc, #4	; (adr r2, 800f6dc <USBH_UserProcess+0x1c>)
 800f6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6da:	bf00      	nop
 800f6dc:	0800f733 	.word	0x0800f733
 800f6e0:	0800f6fd 	.word	0x0800f6fd
 800f6e4:	0800f733 	.word	0x0800f733
 800f6e8:	0800f72b 	.word	0x0800f72b
 800f6ec:	0800f6f1 	.word	0x0800f6f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f6f0:	4b12      	ldr	r3, [pc, #72]	; (800f73c <USBH_UserProcess+0x7c>)
 800f6f2:	2203      	movs	r2, #3
 800f6f4:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 800f6f6:	f7f1 faad 	bl	8000c54 <Unmount_USB>
  break;
 800f6fa:	e01b      	b.n	800f734 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f6fc:	4b0f      	ldr	r3, [pc, #60]	; (800f73c <USBH_UserProcess+0x7c>)
 800f6fe:	2202      	movs	r2, #2
 800f700:	701a      	strb	r2, [r3, #0]

  Mount_USB();
 800f702:	f7f1 fa7b 	bl	8000bfc <Mount_USB>

  Check_USB_Details();		// Check space datials
 800f706:	f7f1 fd0b 	bl	8001120 <Check_USB_Details>

  Scan_USB("/");		//Scan for files and directories
 800f70a:	480d      	ldr	r0, [pc, #52]	; (800f740 <USBH_UserProcess+0x80>)
 800f70c:	f7f1 fac2 	bl	8000c94 <Scan_USB>

  Check_USB_Details();
 800f710:	f7f1 fd06 	bl	8001120 <Check_USB_Details>

  Create_Dir("/DIR1");
 800f714:	480b      	ldr	r0, [pc, #44]	; (800f744 <USBH_UserProcess+0x84>)
 800f716:	f7f1 fcc3 	bl	80010a0 <Create_Dir>
  Create_File("/DIR1/DIR1FILE.txt");
 800f71a:	480b      	ldr	r0, [pc, #44]	; (800f748 <USBH_UserProcess+0x88>)
 800f71c:	f7f1 fc24 	bl	8000f68 <Create_File>
  Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file/n");
 800f720:	490a      	ldr	r1, [pc, #40]	; (800f74c <USBH_UserProcess+0x8c>)
 800f722:	4809      	ldr	r0, [pc, #36]	; (800f748 <USBH_UserProcess+0x88>)
 800f724:	f7f1 fb5c 	bl	8000de0 <Write_File>


  break;
 800f728:	e004      	b.n	800f734 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f72a:	4b04      	ldr	r3, [pc, #16]	; (800f73c <USBH_UserProcess+0x7c>)
 800f72c:	2201      	movs	r2, #1
 800f72e:	701a      	strb	r2, [r3, #0]
  break;
 800f730:	e000      	b.n	800f734 <USBH_UserProcess+0x74>

  default:
  break;
 800f732:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f734:	bf00      	nop
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	20002be4 	.word	0x20002be4
 800f740:	08011404 	.word	0x08011404
 800f744:	08011408 	.word	0x08011408
 800f748:	08011410 	.word	0x08011410
 800f74c:	08011424 	.word	0x08011424

0800f750 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b08a      	sub	sp, #40	; 0x28
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f758:	f107 0314 	add.w	r3, r7, #20
 800f75c:	2200      	movs	r2, #0
 800f75e:	601a      	str	r2, [r3, #0]
 800f760:	605a      	str	r2, [r3, #4]
 800f762:	609a      	str	r2, [r3, #8]
 800f764:	60da      	str	r2, [r3, #12]
 800f766:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f770:	d15c      	bne.n	800f82c <HAL_HCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f772:	4b30      	ldr	r3, [pc, #192]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f776:	4a2f      	ldr	r2, [pc, #188]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f778:	f043 0301 	orr.w	r3, r3, #1
 800f77c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f77e:	4b2d      	ldr	r3, [pc, #180]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f782:	f003 0301 	and.w	r3, r3, #1
 800f786:	613b      	str	r3, [r7, #16]
 800f788:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f78a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f78e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f790:	2300      	movs	r3, #0
 800f792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f794:	2300      	movs	r3, #0
 800f796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f798:	f107 0314 	add.w	r3, r7, #20
 800f79c:	4619      	mov	r1, r3
 800f79e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f7a2:	f7f3 fd5d 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f7a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f7aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7ac:	2302      	movs	r3, #2
 800f7ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f7b8:	230a      	movs	r3, #10
 800f7ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7bc:	f107 0314 	add.w	r3, r7, #20
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f7c6:	f7f3 fd4b 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f7ca:	4b1a      	ldr	r3, [pc, #104]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ce:	4a19      	ldr	r2, [pc, #100]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f7d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f7d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f7d6:	4b17      	ldr	r3, [pc, #92]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f7de:	60fb      	str	r3, [r7, #12]
 800f7e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f7e2:	4b14      	ldr	r3, [pc, #80]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d114      	bne.n	800f818 <HAL_HCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f7ee:	4b11      	ldr	r3, [pc, #68]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7f2:	4a10      	ldr	r2, [pc, #64]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f7f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7f8:	6593      	str	r3, [r2, #88]	; 0x58
 800f7fa:	4b0e      	ldr	r3, [pc, #56]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f802:	60bb      	str	r3, [r7, #8]
 800f804:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800f806:	f7f5 faab 	bl	8004d60 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f80a:	4b0a      	ldr	r3, [pc, #40]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f80e:	4a09      	ldr	r2, [pc, #36]	; (800f834 <HAL_HCD_MspInit+0xe4>)
 800f810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f814:	6593      	str	r3, [r2, #88]	; 0x58
 800f816:	e001      	b.n	800f81c <HAL_HCD_MspInit+0xcc>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f818:	f7f5 faa2 	bl	8004d60 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f81c:	2200      	movs	r2, #0
 800f81e:	2100      	movs	r1, #0
 800f820:	2043      	movs	r0, #67	; 0x43
 800f822:	f7f3 fc68 	bl	80030f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f826:	2043      	movs	r0, #67	; 0x43
 800f828:	f7f3 fc81 	bl	800312e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f82c:	bf00      	nop
 800f82e:	3728      	adds	r7, #40	; 0x28
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	40021000 	.word	0x40021000

0800f838 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f846:	4618      	mov	r0, r3
 800f848:	f7fa fb51 	bl	8009eee <USBH_LL_IncTimer>
}
 800f84c:	bf00      	nop
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f862:	4618      	mov	r0, r3
 800f864:	f7fa fb89 	bl	8009f7a <USBH_LL_Connect>
}
 800f868:	bf00      	nop
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fa fb92 	bl	8009fa8 <USBH_LL_Disconnect>
}
 800f884:	bf00      	nop
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	460b      	mov	r3, r1
 800f896:	70fb      	strb	r3, [r7, #3]
 800f898:	4613      	mov	r3, r2
 800f89a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f89c:	bf00      	nop
 800f89e:	370c      	adds	r7, #12
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a6:	4770      	bx	lr

0800f8a8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fa fb43 	bl	8009f42 <USBH_LL_PortEnabled>
}
 800f8bc:	bf00      	nop
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fa fb43 	bl	8009f5e <USBH_LL_PortDisabled>
}
 800f8d8:	bf00      	nop
 800f8da:	3708      	adds	r7, #8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d12a      	bne.n	800f948 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f8f2:	4a18      	ldr	r2, [pc, #96]	; (800f954 <USBH_LL_Init+0x74>)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4a15      	ldr	r2, [pc, #84]	; (800f954 <USBH_LL_Init+0x74>)
 800f8fe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f902:	4b14      	ldr	r3, [pc, #80]	; (800f954 <USBH_LL_Init+0x74>)
 800f904:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f908:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800f90a:	4b12      	ldr	r3, [pc, #72]	; (800f954 <USBH_LL_Init+0x74>)
 800f90c:	220c      	movs	r2, #12
 800f90e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f910:	4b10      	ldr	r3, [pc, #64]	; (800f954 <USBH_LL_Init+0x74>)
 800f912:	2201      	movs	r2, #1
 800f914:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f916:	4b0f      	ldr	r3, [pc, #60]	; (800f954 <USBH_LL_Init+0x74>)
 800f918:	2200      	movs	r2, #0
 800f91a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f91c:	4b0d      	ldr	r3, [pc, #52]	; (800f954 <USBH_LL_Init+0x74>)
 800f91e:	2202      	movs	r2, #2
 800f920:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f922:	4b0c      	ldr	r3, [pc, #48]	; (800f954 <USBH_LL_Init+0x74>)
 800f924:	2200      	movs	r2, #0
 800f926:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f928:	480a      	ldr	r0, [pc, #40]	; (800f954 <USBH_LL_Init+0x74>)
 800f92a:	f7f3 fe43 	bl	80035b4 <HAL_HCD_Init>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d001      	beq.n	800f938 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f934:	f7f1 fe26 	bl	8001584 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f938:	4806      	ldr	r0, [pc, #24]	; (800f954 <USBH_LL_Init+0x74>)
 800f93a:	f7f4 fa14 	bl	8003d66 <HAL_HCD_GetCurrentFrame>
 800f93e:	4603      	mov	r3, r0
 800f940:	4619      	mov	r1, r3
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f7fa fac4 	bl	8009ed0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f948:	2300      	movs	r3, #0
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3708      	adds	r7, #8
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}
 800f952:	bf00      	nop
 800f954:	20002be8 	.word	0x20002be8

0800f958 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f960:	2300      	movs	r3, #0
 800f962:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f964:	2300      	movs	r3, #0
 800f966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f96e:	4618      	mov	r0, r3
 800f970:	f7f4 f991 	bl	8003c96 <HAL_HCD_Start>
 800f974:	4603      	mov	r3, r0
 800f976:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f978:	7bfb      	ldrb	r3, [r7, #15]
 800f97a:	4618      	mov	r0, r3
 800f97c:	f000 f93e 	bl	800fbfc <USBH_Get_USB_Status>
 800f980:	4603      	mov	r3, r0
 800f982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f984:	7bbb      	ldrb	r3, [r7, #14]
}
 800f986:	4618      	mov	r0, r3
 800f988:	3710      	adds	r7, #16
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f98e:	b580      	push	{r7, lr}
 800f990:	b084      	sub	sp, #16
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f996:	2300      	movs	r3, #0
 800f998:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f99a:	2300      	movs	r3, #0
 800f99c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7f4 f999 	bl	8003cdc <HAL_HCD_Stop>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f9ae:	7bfb      	ldrb	r3, [r7, #15]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f000 f923 	bl	800fbfc <USBH_Get_USB_Status>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f9d6:	78fa      	ldrb	r2, [r7, #3]
 800f9d8:	4611      	mov	r1, r2
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7f4 f9af 	bl	8003d3e <HAL_HCD_HC_GetXferCount>
 800f9e0:	4603      	mov	r3, r0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f9ea:	b590      	push	{r4, r7, lr}
 800f9ec:	b089      	sub	sp, #36	; 0x24
 800f9ee:	af04      	add	r7, sp, #16
 800f9f0:	6078      	str	r0, [r7, #4]
 800f9f2:	4608      	mov	r0, r1
 800f9f4:	4611      	mov	r1, r2
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	70fb      	strb	r3, [r7, #3]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	70bb      	strb	r3, [r7, #2]
 800fa00:	4613      	mov	r3, r2
 800fa02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa04:	2300      	movs	r3, #0
 800fa06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fa12:	787c      	ldrb	r4, [r7, #1]
 800fa14:	78ba      	ldrb	r2, [r7, #2]
 800fa16:	78f9      	ldrb	r1, [r7, #3]
 800fa18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fa1a:	9302      	str	r3, [sp, #8]
 800fa1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fa20:	9301      	str	r3, [sp, #4]
 800fa22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fa26:	9300      	str	r3, [sp, #0]
 800fa28:	4623      	mov	r3, r4
 800fa2a:	f7f3 fe25 	bl	8003678 <HAL_HCD_HC_Init>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa32:	7bfb      	ldrb	r3, [r7, #15]
 800fa34:	4618      	mov	r0, r3
 800fa36:	f000 f8e1 	bl	800fbfc <USBH_Get_USB_Status>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3714      	adds	r7, #20
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd90      	pop	{r4, r7, pc}

0800fa48 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	460b      	mov	r3, r1
 800fa52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa54:	2300      	movs	r3, #0
 800fa56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa62:	78fa      	ldrb	r2, [r7, #3]
 800fa64:	4611      	mov	r1, r2
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7f3 fe95 	bl	8003796 <HAL_HCD_HC_Halt>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa70:	7bfb      	ldrb	r3, [r7, #15]
 800fa72:	4618      	mov	r0, r3
 800fa74:	f000 f8c2 	bl	800fbfc <USBH_Get_USB_Status>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3710      	adds	r7, #16
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fa86:	b590      	push	{r4, r7, lr}
 800fa88:	b089      	sub	sp, #36	; 0x24
 800fa8a:	af04      	add	r7, sp, #16
 800fa8c:	6078      	str	r0, [r7, #4]
 800fa8e:	4608      	mov	r0, r1
 800fa90:	4611      	mov	r1, r2
 800fa92:	461a      	mov	r2, r3
 800fa94:	4603      	mov	r3, r0
 800fa96:	70fb      	strb	r3, [r7, #3]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	70bb      	strb	r3, [r7, #2]
 800fa9c:	4613      	mov	r3, r2
 800fa9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faa0:	2300      	movs	r3, #0
 800faa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800faa4:	2300      	movs	r3, #0
 800faa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800faae:	787c      	ldrb	r4, [r7, #1]
 800fab0:	78ba      	ldrb	r2, [r7, #2]
 800fab2:	78f9      	ldrb	r1, [r7, #3]
 800fab4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fab8:	9303      	str	r3, [sp, #12]
 800faba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fabc:	9302      	str	r3, [sp, #8]
 800fabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac0:	9301      	str	r3, [sp, #4]
 800fac2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fac6:	9300      	str	r3, [sp, #0]
 800fac8:	4623      	mov	r3, r4
 800faca:	f7f3 fe87 	bl	80037dc <HAL_HCD_HC_SubmitRequest>
 800face:	4603      	mov	r3, r0
 800fad0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fad2:	7bfb      	ldrb	r3, [r7, #15]
 800fad4:	4618      	mov	r0, r3
 800fad6:	f000 f891 	bl	800fbfc <USBH_Get_USB_Status>
 800fada:	4603      	mov	r3, r0
 800fadc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fade:	7bbb      	ldrb	r3, [r7, #14]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3714      	adds	r7, #20
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd90      	pop	{r4, r7, pc}

0800fae8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	460b      	mov	r3, r1
 800faf2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fafa:	78fa      	ldrb	r2, [r7, #3]
 800fafc:	4611      	mov	r1, r2
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7f4 f909 	bl	8003d16 <HAL_HCD_HC_GetURBState>
 800fb04:	4603      	mov	r3, r0
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3708      	adds	r7, #8
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fb0e:	b580      	push	{r7, lr}
 800fb10:	b082      	sub	sp, #8
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
 800fb16:	460b      	mov	r3, r1
 800fb18:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d103      	bne.n	800fb2c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fb24:	78fb      	ldrb	r3, [r7, #3]
 800fb26:	4618      	mov	r0, r3
 800fb28:	f000 f894 	bl	800fc54 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fb2c:	20c8      	movs	r0, #200	; 0xc8
 800fb2e:	f7f1 ff8b 	bl	8001a48 <HAL_Delay>
  return USBH_OK;
 800fb32:	2300      	movs	r3, #0
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	460b      	mov	r3, r1
 800fb46:	70fb      	strb	r3, [r7, #3]
 800fb48:	4613      	mov	r3, r2
 800fb4a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb52:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fb54:	78fb      	ldrb	r3, [r7, #3]
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	212c      	movs	r1, #44	; 0x2c
 800fb5a:	fb01 f303 	mul.w	r3, r1, r3
 800fb5e:	4413      	add	r3, r2
 800fb60:	333b      	adds	r3, #59	; 0x3b
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d009      	beq.n	800fb7c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fb68:	78fb      	ldrb	r3, [r7, #3]
 800fb6a:	68fa      	ldr	r2, [r7, #12]
 800fb6c:	212c      	movs	r1, #44	; 0x2c
 800fb6e:	fb01 f303 	mul.w	r3, r1, r3
 800fb72:	4413      	add	r3, r2
 800fb74:	3354      	adds	r3, #84	; 0x54
 800fb76:	78ba      	ldrb	r2, [r7, #2]
 800fb78:	701a      	strb	r2, [r3, #0]
 800fb7a:	e008      	b.n	800fb8e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fb7c:	78fb      	ldrb	r3, [r7, #3]
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	212c      	movs	r1, #44	; 0x2c
 800fb82:	fb01 f303 	mul.w	r3, r1, r3
 800fb86:	4413      	add	r3, r2
 800fb88:	3355      	adds	r3, #85	; 0x55
 800fb8a:	78ba      	ldrb	r2, [r7, #2]
 800fb8c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3714      	adds	r7, #20
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	460b      	mov	r3, r1
 800fba6:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fbb2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800fbb4:	78fb      	ldrb	r3, [r7, #3]
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	212c      	movs	r1, #44	; 0x2c
 800fbba:	fb01 f303 	mul.w	r3, r1, r3
 800fbbe:	4413      	add	r3, r2
 800fbc0:	333b      	adds	r3, #59	; 0x3b
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d009      	beq.n	800fbdc <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800fbc8:	78fb      	ldrb	r3, [r7, #3]
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	212c      	movs	r1, #44	; 0x2c
 800fbce:	fb01 f303 	mul.w	r3, r1, r3
 800fbd2:	4413      	add	r3, r2
 800fbd4:	3354      	adds	r3, #84	; 0x54
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	73fb      	strb	r3, [r7, #15]
 800fbda:	e008      	b.n	800fbee <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800fbdc:	78fb      	ldrb	r3, [r7, #3]
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	212c      	movs	r1, #44	; 0x2c
 800fbe2:	fb01 f303 	mul.w	r3, r1, r3
 800fbe6:	4413      	add	r3, r2
 800fbe8:	3355      	adds	r3, #85	; 0x55
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800fbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3714      	adds	r7, #20
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b085      	sub	sp, #20
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	4603      	mov	r3, r0
 800fc04:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc06:	2300      	movs	r3, #0
 800fc08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc0a:	79fb      	ldrb	r3, [r7, #7]
 800fc0c:	2b03      	cmp	r3, #3
 800fc0e:	d817      	bhi.n	800fc40 <USBH_Get_USB_Status+0x44>
 800fc10:	a201      	add	r2, pc, #4	; (adr r2, 800fc18 <USBH_Get_USB_Status+0x1c>)
 800fc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc16:	bf00      	nop
 800fc18:	0800fc29 	.word	0x0800fc29
 800fc1c:	0800fc2f 	.word	0x0800fc2f
 800fc20:	0800fc35 	.word	0x0800fc35
 800fc24:	0800fc3b 	.word	0x0800fc3b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	73fb      	strb	r3, [r7, #15]
    break;
 800fc2c:	e00b      	b.n	800fc46 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fc2e:	2302      	movs	r3, #2
 800fc30:	73fb      	strb	r3, [r7, #15]
    break;
 800fc32:	e008      	b.n	800fc46 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fc34:	2301      	movs	r3, #1
 800fc36:	73fb      	strb	r3, [r7, #15]
    break;
 800fc38:	e005      	b.n	800fc46 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fc3a:	2302      	movs	r3, #2
 800fc3c:	73fb      	strb	r3, [r7, #15]
    break;
 800fc3e:	e002      	b.n	800fc46 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fc40:	2302      	movs	r3, #2
 800fc42:	73fb      	strb	r3, [r7, #15]
    break;
 800fc44:	bf00      	nop
  }
  return usb_status;
 800fc46:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3714      	adds	r7, #20
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fc5e:	79fb      	ldrb	r3, [r7, #7]
 800fc60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fc62:	79fb      	ldrb	r3, [r7, #7]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d102      	bne.n	800fc6e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	73fb      	strb	r3, [r7, #15]
 800fc6c:	e001      	b.n	800fc72 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800fc6e:	2301      	movs	r3, #1
 800fc70:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800fc72:	7bfb      	ldrb	r3, [r7, #15]
 800fc74:	461a      	mov	r2, r3
 800fc76:	2140      	movs	r1, #64	; 0x40
 800fc78:	4803      	ldr	r0, [pc, #12]	; (800fc88 <MX_DriverVbusFS+0x34>)
 800fc7a:	f7f3 fc83 	bl	8003584 <HAL_GPIO_WritePin>
}
 800fc7e:	bf00      	nop
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	48001800 	.word	0x48001800

0800fc8c <__errno>:
 800fc8c:	4b01      	ldr	r3, [pc, #4]	; (800fc94 <__errno+0x8>)
 800fc8e:	6818      	ldr	r0, [r3, #0]
 800fc90:	4770      	bx	lr
 800fc92:	bf00      	nop
 800fc94:	2000002c 	.word	0x2000002c

0800fc98 <__libc_init_array>:
 800fc98:	b570      	push	{r4, r5, r6, lr}
 800fc9a:	4d0d      	ldr	r5, [pc, #52]	; (800fcd0 <__libc_init_array+0x38>)
 800fc9c:	4c0d      	ldr	r4, [pc, #52]	; (800fcd4 <__libc_init_array+0x3c>)
 800fc9e:	1b64      	subs	r4, r4, r5
 800fca0:	10a4      	asrs	r4, r4, #2
 800fca2:	2600      	movs	r6, #0
 800fca4:	42a6      	cmp	r6, r4
 800fca6:	d109      	bne.n	800fcbc <__libc_init_array+0x24>
 800fca8:	4d0b      	ldr	r5, [pc, #44]	; (800fcd8 <__libc_init_array+0x40>)
 800fcaa:	4c0c      	ldr	r4, [pc, #48]	; (800fcdc <__libc_init_array+0x44>)
 800fcac:	f001 f8fa 	bl	8010ea4 <_init>
 800fcb0:	1b64      	subs	r4, r4, r5
 800fcb2:	10a4      	asrs	r4, r4, #2
 800fcb4:	2600      	movs	r6, #0
 800fcb6:	42a6      	cmp	r6, r4
 800fcb8:	d105      	bne.n	800fcc6 <__libc_init_array+0x2e>
 800fcba:	bd70      	pop	{r4, r5, r6, pc}
 800fcbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcc0:	4798      	blx	r3
 800fcc2:	3601      	adds	r6, #1
 800fcc4:	e7ee      	b.n	800fca4 <__libc_init_array+0xc>
 800fcc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcca:	4798      	blx	r3
 800fccc:	3601      	adds	r6, #1
 800fcce:	e7f2      	b.n	800fcb6 <__libc_init_array+0x1e>
 800fcd0:	080119ac 	.word	0x080119ac
 800fcd4:	080119ac 	.word	0x080119ac
 800fcd8:	080119ac 	.word	0x080119ac
 800fcdc:	080119b0 	.word	0x080119b0

0800fce0 <__itoa>:
 800fce0:	1e93      	subs	r3, r2, #2
 800fce2:	2b22      	cmp	r3, #34	; 0x22
 800fce4:	b510      	push	{r4, lr}
 800fce6:	460c      	mov	r4, r1
 800fce8:	d904      	bls.n	800fcf4 <__itoa+0x14>
 800fcea:	2300      	movs	r3, #0
 800fcec:	700b      	strb	r3, [r1, #0]
 800fcee:	461c      	mov	r4, r3
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	bd10      	pop	{r4, pc}
 800fcf4:	2a0a      	cmp	r2, #10
 800fcf6:	d109      	bne.n	800fd0c <__itoa+0x2c>
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	da07      	bge.n	800fd0c <__itoa+0x2c>
 800fcfc:	232d      	movs	r3, #45	; 0x2d
 800fcfe:	700b      	strb	r3, [r1, #0]
 800fd00:	4240      	negs	r0, r0
 800fd02:	2101      	movs	r1, #1
 800fd04:	4421      	add	r1, r4
 800fd06:	f000 f9b1 	bl	801006c <__utoa>
 800fd0a:	e7f1      	b.n	800fcf0 <__itoa+0x10>
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	e7f9      	b.n	800fd04 <__itoa+0x24>

0800fd10 <itoa>:
 800fd10:	f7ff bfe6 	b.w	800fce0 <__itoa>

0800fd14 <malloc>:
 800fd14:	4b02      	ldr	r3, [pc, #8]	; (800fd20 <malloc+0xc>)
 800fd16:	4601      	mov	r1, r0
 800fd18:	6818      	ldr	r0, [r3, #0]
 800fd1a:	f000 b88d 	b.w	800fe38 <_malloc_r>
 800fd1e:	bf00      	nop
 800fd20:	2000002c 	.word	0x2000002c

0800fd24 <free>:
 800fd24:	4b02      	ldr	r3, [pc, #8]	; (800fd30 <free+0xc>)
 800fd26:	4601      	mov	r1, r0
 800fd28:	6818      	ldr	r0, [r3, #0]
 800fd2a:	f000 b819 	b.w	800fd60 <_free_r>
 800fd2e:	bf00      	nop
 800fd30:	2000002c 	.word	0x2000002c

0800fd34 <memcpy>:
 800fd34:	440a      	add	r2, r1
 800fd36:	4291      	cmp	r1, r2
 800fd38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fd3c:	d100      	bne.n	800fd40 <memcpy+0xc>
 800fd3e:	4770      	bx	lr
 800fd40:	b510      	push	{r4, lr}
 800fd42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd4a:	4291      	cmp	r1, r2
 800fd4c:	d1f9      	bne.n	800fd42 <memcpy+0xe>
 800fd4e:	bd10      	pop	{r4, pc}

0800fd50 <memset>:
 800fd50:	4402      	add	r2, r0
 800fd52:	4603      	mov	r3, r0
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d100      	bne.n	800fd5a <memset+0xa>
 800fd58:	4770      	bx	lr
 800fd5a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd5e:	e7f9      	b.n	800fd54 <memset+0x4>

0800fd60 <_free_r>:
 800fd60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd62:	2900      	cmp	r1, #0
 800fd64:	d044      	beq.n	800fdf0 <_free_r+0x90>
 800fd66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd6a:	9001      	str	r0, [sp, #4]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	f1a1 0404 	sub.w	r4, r1, #4
 800fd72:	bfb8      	it	lt
 800fd74:	18e4      	addlt	r4, r4, r3
 800fd76:	f000 fc9b 	bl	80106b0 <__malloc_lock>
 800fd7a:	4a1e      	ldr	r2, [pc, #120]	; (800fdf4 <_free_r+0x94>)
 800fd7c:	9801      	ldr	r0, [sp, #4]
 800fd7e:	6813      	ldr	r3, [r2, #0]
 800fd80:	b933      	cbnz	r3, 800fd90 <_free_r+0x30>
 800fd82:	6063      	str	r3, [r4, #4]
 800fd84:	6014      	str	r4, [r2, #0]
 800fd86:	b003      	add	sp, #12
 800fd88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd8c:	f000 bc96 	b.w	80106bc <__malloc_unlock>
 800fd90:	42a3      	cmp	r3, r4
 800fd92:	d908      	bls.n	800fda6 <_free_r+0x46>
 800fd94:	6825      	ldr	r5, [r4, #0]
 800fd96:	1961      	adds	r1, r4, r5
 800fd98:	428b      	cmp	r3, r1
 800fd9a:	bf01      	itttt	eq
 800fd9c:	6819      	ldreq	r1, [r3, #0]
 800fd9e:	685b      	ldreq	r3, [r3, #4]
 800fda0:	1949      	addeq	r1, r1, r5
 800fda2:	6021      	streq	r1, [r4, #0]
 800fda4:	e7ed      	b.n	800fd82 <_free_r+0x22>
 800fda6:	461a      	mov	r2, r3
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	b10b      	cbz	r3, 800fdb0 <_free_r+0x50>
 800fdac:	42a3      	cmp	r3, r4
 800fdae:	d9fa      	bls.n	800fda6 <_free_r+0x46>
 800fdb0:	6811      	ldr	r1, [r2, #0]
 800fdb2:	1855      	adds	r5, r2, r1
 800fdb4:	42a5      	cmp	r5, r4
 800fdb6:	d10b      	bne.n	800fdd0 <_free_r+0x70>
 800fdb8:	6824      	ldr	r4, [r4, #0]
 800fdba:	4421      	add	r1, r4
 800fdbc:	1854      	adds	r4, r2, r1
 800fdbe:	42a3      	cmp	r3, r4
 800fdc0:	6011      	str	r1, [r2, #0]
 800fdc2:	d1e0      	bne.n	800fd86 <_free_r+0x26>
 800fdc4:	681c      	ldr	r4, [r3, #0]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	6053      	str	r3, [r2, #4]
 800fdca:	4421      	add	r1, r4
 800fdcc:	6011      	str	r1, [r2, #0]
 800fdce:	e7da      	b.n	800fd86 <_free_r+0x26>
 800fdd0:	d902      	bls.n	800fdd8 <_free_r+0x78>
 800fdd2:	230c      	movs	r3, #12
 800fdd4:	6003      	str	r3, [r0, #0]
 800fdd6:	e7d6      	b.n	800fd86 <_free_r+0x26>
 800fdd8:	6825      	ldr	r5, [r4, #0]
 800fdda:	1961      	adds	r1, r4, r5
 800fddc:	428b      	cmp	r3, r1
 800fdde:	bf04      	itt	eq
 800fde0:	6819      	ldreq	r1, [r3, #0]
 800fde2:	685b      	ldreq	r3, [r3, #4]
 800fde4:	6063      	str	r3, [r4, #4]
 800fde6:	bf04      	itt	eq
 800fde8:	1949      	addeq	r1, r1, r5
 800fdea:	6021      	streq	r1, [r4, #0]
 800fdec:	6054      	str	r4, [r2, #4]
 800fdee:	e7ca      	b.n	800fd86 <_free_r+0x26>
 800fdf0:	b003      	add	sp, #12
 800fdf2:	bd30      	pop	{r4, r5, pc}
 800fdf4:	20002eec 	.word	0x20002eec

0800fdf8 <sbrk_aligned>:
 800fdf8:	b570      	push	{r4, r5, r6, lr}
 800fdfa:	4e0e      	ldr	r6, [pc, #56]	; (800fe34 <sbrk_aligned+0x3c>)
 800fdfc:	460c      	mov	r4, r1
 800fdfe:	6831      	ldr	r1, [r6, #0]
 800fe00:	4605      	mov	r5, r0
 800fe02:	b911      	cbnz	r1, 800fe0a <sbrk_aligned+0x12>
 800fe04:	f000 f902 	bl	801000c <_sbrk_r>
 800fe08:	6030      	str	r0, [r6, #0]
 800fe0a:	4621      	mov	r1, r4
 800fe0c:	4628      	mov	r0, r5
 800fe0e:	f000 f8fd 	bl	801000c <_sbrk_r>
 800fe12:	1c43      	adds	r3, r0, #1
 800fe14:	d00a      	beq.n	800fe2c <sbrk_aligned+0x34>
 800fe16:	1cc4      	adds	r4, r0, #3
 800fe18:	f024 0403 	bic.w	r4, r4, #3
 800fe1c:	42a0      	cmp	r0, r4
 800fe1e:	d007      	beq.n	800fe30 <sbrk_aligned+0x38>
 800fe20:	1a21      	subs	r1, r4, r0
 800fe22:	4628      	mov	r0, r5
 800fe24:	f000 f8f2 	bl	801000c <_sbrk_r>
 800fe28:	3001      	adds	r0, #1
 800fe2a:	d101      	bne.n	800fe30 <sbrk_aligned+0x38>
 800fe2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fe30:	4620      	mov	r0, r4
 800fe32:	bd70      	pop	{r4, r5, r6, pc}
 800fe34:	20002ef0 	.word	0x20002ef0

0800fe38 <_malloc_r>:
 800fe38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe3c:	1ccd      	adds	r5, r1, #3
 800fe3e:	f025 0503 	bic.w	r5, r5, #3
 800fe42:	3508      	adds	r5, #8
 800fe44:	2d0c      	cmp	r5, #12
 800fe46:	bf38      	it	cc
 800fe48:	250c      	movcc	r5, #12
 800fe4a:	2d00      	cmp	r5, #0
 800fe4c:	4607      	mov	r7, r0
 800fe4e:	db01      	blt.n	800fe54 <_malloc_r+0x1c>
 800fe50:	42a9      	cmp	r1, r5
 800fe52:	d905      	bls.n	800fe60 <_malloc_r+0x28>
 800fe54:	230c      	movs	r3, #12
 800fe56:	603b      	str	r3, [r7, #0]
 800fe58:	2600      	movs	r6, #0
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe60:	4e2e      	ldr	r6, [pc, #184]	; (800ff1c <_malloc_r+0xe4>)
 800fe62:	f000 fc25 	bl	80106b0 <__malloc_lock>
 800fe66:	6833      	ldr	r3, [r6, #0]
 800fe68:	461c      	mov	r4, r3
 800fe6a:	bb34      	cbnz	r4, 800feba <_malloc_r+0x82>
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	4638      	mov	r0, r7
 800fe70:	f7ff ffc2 	bl	800fdf8 <sbrk_aligned>
 800fe74:	1c43      	adds	r3, r0, #1
 800fe76:	4604      	mov	r4, r0
 800fe78:	d14d      	bne.n	800ff16 <_malloc_r+0xde>
 800fe7a:	6834      	ldr	r4, [r6, #0]
 800fe7c:	4626      	mov	r6, r4
 800fe7e:	2e00      	cmp	r6, #0
 800fe80:	d140      	bne.n	800ff04 <_malloc_r+0xcc>
 800fe82:	6823      	ldr	r3, [r4, #0]
 800fe84:	4631      	mov	r1, r6
 800fe86:	4638      	mov	r0, r7
 800fe88:	eb04 0803 	add.w	r8, r4, r3
 800fe8c:	f000 f8be 	bl	801000c <_sbrk_r>
 800fe90:	4580      	cmp	r8, r0
 800fe92:	d13a      	bne.n	800ff0a <_malloc_r+0xd2>
 800fe94:	6821      	ldr	r1, [r4, #0]
 800fe96:	3503      	adds	r5, #3
 800fe98:	1a6d      	subs	r5, r5, r1
 800fe9a:	f025 0503 	bic.w	r5, r5, #3
 800fe9e:	3508      	adds	r5, #8
 800fea0:	2d0c      	cmp	r5, #12
 800fea2:	bf38      	it	cc
 800fea4:	250c      	movcc	r5, #12
 800fea6:	4629      	mov	r1, r5
 800fea8:	4638      	mov	r0, r7
 800feaa:	f7ff ffa5 	bl	800fdf8 <sbrk_aligned>
 800feae:	3001      	adds	r0, #1
 800feb0:	d02b      	beq.n	800ff0a <_malloc_r+0xd2>
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	442b      	add	r3, r5
 800feb6:	6023      	str	r3, [r4, #0]
 800feb8:	e00e      	b.n	800fed8 <_malloc_r+0xa0>
 800feba:	6822      	ldr	r2, [r4, #0]
 800febc:	1b52      	subs	r2, r2, r5
 800febe:	d41e      	bmi.n	800fefe <_malloc_r+0xc6>
 800fec0:	2a0b      	cmp	r2, #11
 800fec2:	d916      	bls.n	800fef2 <_malloc_r+0xba>
 800fec4:	1961      	adds	r1, r4, r5
 800fec6:	42a3      	cmp	r3, r4
 800fec8:	6025      	str	r5, [r4, #0]
 800feca:	bf18      	it	ne
 800fecc:	6059      	strne	r1, [r3, #4]
 800fece:	6863      	ldr	r3, [r4, #4]
 800fed0:	bf08      	it	eq
 800fed2:	6031      	streq	r1, [r6, #0]
 800fed4:	5162      	str	r2, [r4, r5]
 800fed6:	604b      	str	r3, [r1, #4]
 800fed8:	4638      	mov	r0, r7
 800feda:	f104 060b 	add.w	r6, r4, #11
 800fede:	f000 fbed 	bl	80106bc <__malloc_unlock>
 800fee2:	f026 0607 	bic.w	r6, r6, #7
 800fee6:	1d23      	adds	r3, r4, #4
 800fee8:	1af2      	subs	r2, r6, r3
 800feea:	d0b6      	beq.n	800fe5a <_malloc_r+0x22>
 800feec:	1b9b      	subs	r3, r3, r6
 800feee:	50a3      	str	r3, [r4, r2]
 800fef0:	e7b3      	b.n	800fe5a <_malloc_r+0x22>
 800fef2:	6862      	ldr	r2, [r4, #4]
 800fef4:	42a3      	cmp	r3, r4
 800fef6:	bf0c      	ite	eq
 800fef8:	6032      	streq	r2, [r6, #0]
 800fefa:	605a      	strne	r2, [r3, #4]
 800fefc:	e7ec      	b.n	800fed8 <_malloc_r+0xa0>
 800fefe:	4623      	mov	r3, r4
 800ff00:	6864      	ldr	r4, [r4, #4]
 800ff02:	e7b2      	b.n	800fe6a <_malloc_r+0x32>
 800ff04:	4634      	mov	r4, r6
 800ff06:	6876      	ldr	r6, [r6, #4]
 800ff08:	e7b9      	b.n	800fe7e <_malloc_r+0x46>
 800ff0a:	230c      	movs	r3, #12
 800ff0c:	603b      	str	r3, [r7, #0]
 800ff0e:	4638      	mov	r0, r7
 800ff10:	f000 fbd4 	bl	80106bc <__malloc_unlock>
 800ff14:	e7a1      	b.n	800fe5a <_malloc_r+0x22>
 800ff16:	6025      	str	r5, [r4, #0]
 800ff18:	e7de      	b.n	800fed8 <_malloc_r+0xa0>
 800ff1a:	bf00      	nop
 800ff1c:	20002eec 	.word	0x20002eec

0800ff20 <_puts_r>:
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	460e      	mov	r6, r1
 800ff24:	4605      	mov	r5, r0
 800ff26:	b118      	cbz	r0, 800ff30 <_puts_r+0x10>
 800ff28:	6983      	ldr	r3, [r0, #24]
 800ff2a:	b90b      	cbnz	r3, 800ff30 <_puts_r+0x10>
 800ff2c:	f000 faba 	bl	80104a4 <__sinit>
 800ff30:	69ab      	ldr	r3, [r5, #24]
 800ff32:	68ac      	ldr	r4, [r5, #8]
 800ff34:	b913      	cbnz	r3, 800ff3c <_puts_r+0x1c>
 800ff36:	4628      	mov	r0, r5
 800ff38:	f000 fab4 	bl	80104a4 <__sinit>
 800ff3c:	4b2c      	ldr	r3, [pc, #176]	; (800fff0 <_puts_r+0xd0>)
 800ff3e:	429c      	cmp	r4, r3
 800ff40:	d120      	bne.n	800ff84 <_puts_r+0x64>
 800ff42:	686c      	ldr	r4, [r5, #4]
 800ff44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff46:	07db      	lsls	r3, r3, #31
 800ff48:	d405      	bmi.n	800ff56 <_puts_r+0x36>
 800ff4a:	89a3      	ldrh	r3, [r4, #12]
 800ff4c:	0598      	lsls	r0, r3, #22
 800ff4e:	d402      	bmi.n	800ff56 <_puts_r+0x36>
 800ff50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff52:	f000 fb45 	bl	80105e0 <__retarget_lock_acquire_recursive>
 800ff56:	89a3      	ldrh	r3, [r4, #12]
 800ff58:	0719      	lsls	r1, r3, #28
 800ff5a:	d51d      	bpl.n	800ff98 <_puts_r+0x78>
 800ff5c:	6923      	ldr	r3, [r4, #16]
 800ff5e:	b1db      	cbz	r3, 800ff98 <_puts_r+0x78>
 800ff60:	3e01      	subs	r6, #1
 800ff62:	68a3      	ldr	r3, [r4, #8]
 800ff64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ff68:	3b01      	subs	r3, #1
 800ff6a:	60a3      	str	r3, [r4, #8]
 800ff6c:	bb39      	cbnz	r1, 800ffbe <_puts_r+0x9e>
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	da38      	bge.n	800ffe4 <_puts_r+0xc4>
 800ff72:	4622      	mov	r2, r4
 800ff74:	210a      	movs	r1, #10
 800ff76:	4628      	mov	r0, r5
 800ff78:	f000 f8ba 	bl	80100f0 <__swbuf_r>
 800ff7c:	3001      	adds	r0, #1
 800ff7e:	d011      	beq.n	800ffa4 <_puts_r+0x84>
 800ff80:	250a      	movs	r5, #10
 800ff82:	e011      	b.n	800ffa8 <_puts_r+0x88>
 800ff84:	4b1b      	ldr	r3, [pc, #108]	; (800fff4 <_puts_r+0xd4>)
 800ff86:	429c      	cmp	r4, r3
 800ff88:	d101      	bne.n	800ff8e <_puts_r+0x6e>
 800ff8a:	68ac      	ldr	r4, [r5, #8]
 800ff8c:	e7da      	b.n	800ff44 <_puts_r+0x24>
 800ff8e:	4b1a      	ldr	r3, [pc, #104]	; (800fff8 <_puts_r+0xd8>)
 800ff90:	429c      	cmp	r4, r3
 800ff92:	bf08      	it	eq
 800ff94:	68ec      	ldreq	r4, [r5, #12]
 800ff96:	e7d5      	b.n	800ff44 <_puts_r+0x24>
 800ff98:	4621      	mov	r1, r4
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	f000 f8fa 	bl	8010194 <__swsetup_r>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d0dd      	beq.n	800ff60 <_puts_r+0x40>
 800ffa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ffa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffaa:	07da      	lsls	r2, r3, #31
 800ffac:	d405      	bmi.n	800ffba <_puts_r+0x9a>
 800ffae:	89a3      	ldrh	r3, [r4, #12]
 800ffb0:	059b      	lsls	r3, r3, #22
 800ffb2:	d402      	bmi.n	800ffba <_puts_r+0x9a>
 800ffb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffb6:	f000 fb14 	bl	80105e2 <__retarget_lock_release_recursive>
 800ffba:	4628      	mov	r0, r5
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	da04      	bge.n	800ffcc <_puts_r+0xac>
 800ffc2:	69a2      	ldr	r2, [r4, #24]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	dc06      	bgt.n	800ffd6 <_puts_r+0xb6>
 800ffc8:	290a      	cmp	r1, #10
 800ffca:	d004      	beq.n	800ffd6 <_puts_r+0xb6>
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	1c5a      	adds	r2, r3, #1
 800ffd0:	6022      	str	r2, [r4, #0]
 800ffd2:	7019      	strb	r1, [r3, #0]
 800ffd4:	e7c5      	b.n	800ff62 <_puts_r+0x42>
 800ffd6:	4622      	mov	r2, r4
 800ffd8:	4628      	mov	r0, r5
 800ffda:	f000 f889 	bl	80100f0 <__swbuf_r>
 800ffde:	3001      	adds	r0, #1
 800ffe0:	d1bf      	bne.n	800ff62 <_puts_r+0x42>
 800ffe2:	e7df      	b.n	800ffa4 <_puts_r+0x84>
 800ffe4:	6823      	ldr	r3, [r4, #0]
 800ffe6:	250a      	movs	r5, #10
 800ffe8:	1c5a      	adds	r2, r3, #1
 800ffea:	6022      	str	r2, [r4, #0]
 800ffec:	701d      	strb	r5, [r3, #0]
 800ffee:	e7db      	b.n	800ffa8 <_puts_r+0x88>
 800fff0:	08011930 	.word	0x08011930
 800fff4:	08011950 	.word	0x08011950
 800fff8:	08011910 	.word	0x08011910

0800fffc <puts>:
 800fffc:	4b02      	ldr	r3, [pc, #8]	; (8010008 <puts+0xc>)
 800fffe:	4601      	mov	r1, r0
 8010000:	6818      	ldr	r0, [r3, #0]
 8010002:	f7ff bf8d 	b.w	800ff20 <_puts_r>
 8010006:	bf00      	nop
 8010008:	2000002c 	.word	0x2000002c

0801000c <_sbrk_r>:
 801000c:	b538      	push	{r3, r4, r5, lr}
 801000e:	4d06      	ldr	r5, [pc, #24]	; (8010028 <_sbrk_r+0x1c>)
 8010010:	2300      	movs	r3, #0
 8010012:	4604      	mov	r4, r0
 8010014:	4608      	mov	r0, r1
 8010016:	602b      	str	r3, [r5, #0]
 8010018:	f7f1 fc30 	bl	800187c <_sbrk>
 801001c:	1c43      	adds	r3, r0, #1
 801001e:	d102      	bne.n	8010026 <_sbrk_r+0x1a>
 8010020:	682b      	ldr	r3, [r5, #0]
 8010022:	b103      	cbz	r3, 8010026 <_sbrk_r+0x1a>
 8010024:	6023      	str	r3, [r4, #0]
 8010026:	bd38      	pop	{r3, r4, r5, pc}
 8010028:	20002ef8 	.word	0x20002ef8

0801002c <siprintf>:
 801002c:	b40e      	push	{r1, r2, r3}
 801002e:	b500      	push	{lr}
 8010030:	b09c      	sub	sp, #112	; 0x70
 8010032:	ab1d      	add	r3, sp, #116	; 0x74
 8010034:	9002      	str	r0, [sp, #8]
 8010036:	9006      	str	r0, [sp, #24]
 8010038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801003c:	4809      	ldr	r0, [pc, #36]	; (8010064 <siprintf+0x38>)
 801003e:	9107      	str	r1, [sp, #28]
 8010040:	9104      	str	r1, [sp, #16]
 8010042:	4909      	ldr	r1, [pc, #36]	; (8010068 <siprintf+0x3c>)
 8010044:	f853 2b04 	ldr.w	r2, [r3], #4
 8010048:	9105      	str	r1, [sp, #20]
 801004a:	6800      	ldr	r0, [r0, #0]
 801004c:	9301      	str	r3, [sp, #4]
 801004e:	a902      	add	r1, sp, #8
 8010050:	f000 fb96 	bl	8010780 <_svfiprintf_r>
 8010054:	9b02      	ldr	r3, [sp, #8]
 8010056:	2200      	movs	r2, #0
 8010058:	701a      	strb	r2, [r3, #0]
 801005a:	b01c      	add	sp, #112	; 0x70
 801005c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010060:	b003      	add	sp, #12
 8010062:	4770      	bx	lr
 8010064:	2000002c 	.word	0x2000002c
 8010068:	ffff0208 	.word	0xffff0208

0801006c <__utoa>:
 801006c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801006e:	4c1f      	ldr	r4, [pc, #124]	; (80100ec <__utoa+0x80>)
 8010070:	b08b      	sub	sp, #44	; 0x2c
 8010072:	4605      	mov	r5, r0
 8010074:	460b      	mov	r3, r1
 8010076:	466e      	mov	r6, sp
 8010078:	f104 0c20 	add.w	ip, r4, #32
 801007c:	6820      	ldr	r0, [r4, #0]
 801007e:	6861      	ldr	r1, [r4, #4]
 8010080:	4637      	mov	r7, r6
 8010082:	c703      	stmia	r7!, {r0, r1}
 8010084:	3408      	adds	r4, #8
 8010086:	4564      	cmp	r4, ip
 8010088:	463e      	mov	r6, r7
 801008a:	d1f7      	bne.n	801007c <__utoa+0x10>
 801008c:	7921      	ldrb	r1, [r4, #4]
 801008e:	7139      	strb	r1, [r7, #4]
 8010090:	1e91      	subs	r1, r2, #2
 8010092:	6820      	ldr	r0, [r4, #0]
 8010094:	6038      	str	r0, [r7, #0]
 8010096:	2922      	cmp	r1, #34	; 0x22
 8010098:	f04f 0100 	mov.w	r1, #0
 801009c:	d904      	bls.n	80100a8 <__utoa+0x3c>
 801009e:	7019      	strb	r1, [r3, #0]
 80100a0:	460b      	mov	r3, r1
 80100a2:	4618      	mov	r0, r3
 80100a4:	b00b      	add	sp, #44	; 0x2c
 80100a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100a8:	1e58      	subs	r0, r3, #1
 80100aa:	4684      	mov	ip, r0
 80100ac:	fbb5 f7f2 	udiv	r7, r5, r2
 80100b0:	fb02 5617 	mls	r6, r2, r7, r5
 80100b4:	3628      	adds	r6, #40	; 0x28
 80100b6:	446e      	add	r6, sp
 80100b8:	460c      	mov	r4, r1
 80100ba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80100be:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80100c2:	462e      	mov	r6, r5
 80100c4:	42b2      	cmp	r2, r6
 80100c6:	f101 0101 	add.w	r1, r1, #1
 80100ca:	463d      	mov	r5, r7
 80100cc:	d9ee      	bls.n	80100ac <__utoa+0x40>
 80100ce:	2200      	movs	r2, #0
 80100d0:	545a      	strb	r2, [r3, r1]
 80100d2:	1919      	adds	r1, r3, r4
 80100d4:	1aa5      	subs	r5, r4, r2
 80100d6:	42aa      	cmp	r2, r5
 80100d8:	dae3      	bge.n	80100a2 <__utoa+0x36>
 80100da:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80100de:	780e      	ldrb	r6, [r1, #0]
 80100e0:	7006      	strb	r6, [r0, #0]
 80100e2:	3201      	adds	r2, #1
 80100e4:	f801 5901 	strb.w	r5, [r1], #-1
 80100e8:	e7f4      	b.n	80100d4 <__utoa+0x68>
 80100ea:	bf00      	nop
 80100ec:	080118e8 	.word	0x080118e8

080100f0 <__swbuf_r>:
 80100f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100f2:	460e      	mov	r6, r1
 80100f4:	4614      	mov	r4, r2
 80100f6:	4605      	mov	r5, r0
 80100f8:	b118      	cbz	r0, 8010102 <__swbuf_r+0x12>
 80100fa:	6983      	ldr	r3, [r0, #24]
 80100fc:	b90b      	cbnz	r3, 8010102 <__swbuf_r+0x12>
 80100fe:	f000 f9d1 	bl	80104a4 <__sinit>
 8010102:	4b21      	ldr	r3, [pc, #132]	; (8010188 <__swbuf_r+0x98>)
 8010104:	429c      	cmp	r4, r3
 8010106:	d12b      	bne.n	8010160 <__swbuf_r+0x70>
 8010108:	686c      	ldr	r4, [r5, #4]
 801010a:	69a3      	ldr	r3, [r4, #24]
 801010c:	60a3      	str	r3, [r4, #8]
 801010e:	89a3      	ldrh	r3, [r4, #12]
 8010110:	071a      	lsls	r2, r3, #28
 8010112:	d52f      	bpl.n	8010174 <__swbuf_r+0x84>
 8010114:	6923      	ldr	r3, [r4, #16]
 8010116:	b36b      	cbz	r3, 8010174 <__swbuf_r+0x84>
 8010118:	6923      	ldr	r3, [r4, #16]
 801011a:	6820      	ldr	r0, [r4, #0]
 801011c:	1ac0      	subs	r0, r0, r3
 801011e:	6963      	ldr	r3, [r4, #20]
 8010120:	b2f6      	uxtb	r6, r6
 8010122:	4283      	cmp	r3, r0
 8010124:	4637      	mov	r7, r6
 8010126:	dc04      	bgt.n	8010132 <__swbuf_r+0x42>
 8010128:	4621      	mov	r1, r4
 801012a:	4628      	mov	r0, r5
 801012c:	f000 f926 	bl	801037c <_fflush_r>
 8010130:	bb30      	cbnz	r0, 8010180 <__swbuf_r+0x90>
 8010132:	68a3      	ldr	r3, [r4, #8]
 8010134:	3b01      	subs	r3, #1
 8010136:	60a3      	str	r3, [r4, #8]
 8010138:	6823      	ldr	r3, [r4, #0]
 801013a:	1c5a      	adds	r2, r3, #1
 801013c:	6022      	str	r2, [r4, #0]
 801013e:	701e      	strb	r6, [r3, #0]
 8010140:	6963      	ldr	r3, [r4, #20]
 8010142:	3001      	adds	r0, #1
 8010144:	4283      	cmp	r3, r0
 8010146:	d004      	beq.n	8010152 <__swbuf_r+0x62>
 8010148:	89a3      	ldrh	r3, [r4, #12]
 801014a:	07db      	lsls	r3, r3, #31
 801014c:	d506      	bpl.n	801015c <__swbuf_r+0x6c>
 801014e:	2e0a      	cmp	r6, #10
 8010150:	d104      	bne.n	801015c <__swbuf_r+0x6c>
 8010152:	4621      	mov	r1, r4
 8010154:	4628      	mov	r0, r5
 8010156:	f000 f911 	bl	801037c <_fflush_r>
 801015a:	b988      	cbnz	r0, 8010180 <__swbuf_r+0x90>
 801015c:	4638      	mov	r0, r7
 801015e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010160:	4b0a      	ldr	r3, [pc, #40]	; (801018c <__swbuf_r+0x9c>)
 8010162:	429c      	cmp	r4, r3
 8010164:	d101      	bne.n	801016a <__swbuf_r+0x7a>
 8010166:	68ac      	ldr	r4, [r5, #8]
 8010168:	e7cf      	b.n	801010a <__swbuf_r+0x1a>
 801016a:	4b09      	ldr	r3, [pc, #36]	; (8010190 <__swbuf_r+0xa0>)
 801016c:	429c      	cmp	r4, r3
 801016e:	bf08      	it	eq
 8010170:	68ec      	ldreq	r4, [r5, #12]
 8010172:	e7ca      	b.n	801010a <__swbuf_r+0x1a>
 8010174:	4621      	mov	r1, r4
 8010176:	4628      	mov	r0, r5
 8010178:	f000 f80c 	bl	8010194 <__swsetup_r>
 801017c:	2800      	cmp	r0, #0
 801017e:	d0cb      	beq.n	8010118 <__swbuf_r+0x28>
 8010180:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010184:	e7ea      	b.n	801015c <__swbuf_r+0x6c>
 8010186:	bf00      	nop
 8010188:	08011930 	.word	0x08011930
 801018c:	08011950 	.word	0x08011950
 8010190:	08011910 	.word	0x08011910

08010194 <__swsetup_r>:
 8010194:	4b32      	ldr	r3, [pc, #200]	; (8010260 <__swsetup_r+0xcc>)
 8010196:	b570      	push	{r4, r5, r6, lr}
 8010198:	681d      	ldr	r5, [r3, #0]
 801019a:	4606      	mov	r6, r0
 801019c:	460c      	mov	r4, r1
 801019e:	b125      	cbz	r5, 80101aa <__swsetup_r+0x16>
 80101a0:	69ab      	ldr	r3, [r5, #24]
 80101a2:	b913      	cbnz	r3, 80101aa <__swsetup_r+0x16>
 80101a4:	4628      	mov	r0, r5
 80101a6:	f000 f97d 	bl	80104a4 <__sinit>
 80101aa:	4b2e      	ldr	r3, [pc, #184]	; (8010264 <__swsetup_r+0xd0>)
 80101ac:	429c      	cmp	r4, r3
 80101ae:	d10f      	bne.n	80101d0 <__swsetup_r+0x3c>
 80101b0:	686c      	ldr	r4, [r5, #4]
 80101b2:	89a3      	ldrh	r3, [r4, #12]
 80101b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101b8:	0719      	lsls	r1, r3, #28
 80101ba:	d42c      	bmi.n	8010216 <__swsetup_r+0x82>
 80101bc:	06dd      	lsls	r5, r3, #27
 80101be:	d411      	bmi.n	80101e4 <__swsetup_r+0x50>
 80101c0:	2309      	movs	r3, #9
 80101c2:	6033      	str	r3, [r6, #0]
 80101c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80101c8:	81a3      	strh	r3, [r4, #12]
 80101ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101ce:	e03e      	b.n	801024e <__swsetup_r+0xba>
 80101d0:	4b25      	ldr	r3, [pc, #148]	; (8010268 <__swsetup_r+0xd4>)
 80101d2:	429c      	cmp	r4, r3
 80101d4:	d101      	bne.n	80101da <__swsetup_r+0x46>
 80101d6:	68ac      	ldr	r4, [r5, #8]
 80101d8:	e7eb      	b.n	80101b2 <__swsetup_r+0x1e>
 80101da:	4b24      	ldr	r3, [pc, #144]	; (801026c <__swsetup_r+0xd8>)
 80101dc:	429c      	cmp	r4, r3
 80101de:	bf08      	it	eq
 80101e0:	68ec      	ldreq	r4, [r5, #12]
 80101e2:	e7e6      	b.n	80101b2 <__swsetup_r+0x1e>
 80101e4:	0758      	lsls	r0, r3, #29
 80101e6:	d512      	bpl.n	801020e <__swsetup_r+0x7a>
 80101e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101ea:	b141      	cbz	r1, 80101fe <__swsetup_r+0x6a>
 80101ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101f0:	4299      	cmp	r1, r3
 80101f2:	d002      	beq.n	80101fa <__swsetup_r+0x66>
 80101f4:	4630      	mov	r0, r6
 80101f6:	f7ff fdb3 	bl	800fd60 <_free_r>
 80101fa:	2300      	movs	r3, #0
 80101fc:	6363      	str	r3, [r4, #52]	; 0x34
 80101fe:	89a3      	ldrh	r3, [r4, #12]
 8010200:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010204:	81a3      	strh	r3, [r4, #12]
 8010206:	2300      	movs	r3, #0
 8010208:	6063      	str	r3, [r4, #4]
 801020a:	6923      	ldr	r3, [r4, #16]
 801020c:	6023      	str	r3, [r4, #0]
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	f043 0308 	orr.w	r3, r3, #8
 8010214:	81a3      	strh	r3, [r4, #12]
 8010216:	6923      	ldr	r3, [r4, #16]
 8010218:	b94b      	cbnz	r3, 801022e <__swsetup_r+0x9a>
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010224:	d003      	beq.n	801022e <__swsetup_r+0x9a>
 8010226:	4621      	mov	r1, r4
 8010228:	4630      	mov	r0, r6
 801022a:	f000 fa01 	bl	8010630 <__smakebuf_r>
 801022e:	89a0      	ldrh	r0, [r4, #12]
 8010230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010234:	f010 0301 	ands.w	r3, r0, #1
 8010238:	d00a      	beq.n	8010250 <__swsetup_r+0xbc>
 801023a:	2300      	movs	r3, #0
 801023c:	60a3      	str	r3, [r4, #8]
 801023e:	6963      	ldr	r3, [r4, #20]
 8010240:	425b      	negs	r3, r3
 8010242:	61a3      	str	r3, [r4, #24]
 8010244:	6923      	ldr	r3, [r4, #16]
 8010246:	b943      	cbnz	r3, 801025a <__swsetup_r+0xc6>
 8010248:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801024c:	d1ba      	bne.n	80101c4 <__swsetup_r+0x30>
 801024e:	bd70      	pop	{r4, r5, r6, pc}
 8010250:	0781      	lsls	r1, r0, #30
 8010252:	bf58      	it	pl
 8010254:	6963      	ldrpl	r3, [r4, #20]
 8010256:	60a3      	str	r3, [r4, #8]
 8010258:	e7f4      	b.n	8010244 <__swsetup_r+0xb0>
 801025a:	2000      	movs	r0, #0
 801025c:	e7f7      	b.n	801024e <__swsetup_r+0xba>
 801025e:	bf00      	nop
 8010260:	2000002c 	.word	0x2000002c
 8010264:	08011930 	.word	0x08011930
 8010268:	08011950 	.word	0x08011950
 801026c:	08011910 	.word	0x08011910

08010270 <__sflush_r>:
 8010270:	898a      	ldrh	r2, [r1, #12]
 8010272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010276:	4605      	mov	r5, r0
 8010278:	0710      	lsls	r0, r2, #28
 801027a:	460c      	mov	r4, r1
 801027c:	d458      	bmi.n	8010330 <__sflush_r+0xc0>
 801027e:	684b      	ldr	r3, [r1, #4]
 8010280:	2b00      	cmp	r3, #0
 8010282:	dc05      	bgt.n	8010290 <__sflush_r+0x20>
 8010284:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010286:	2b00      	cmp	r3, #0
 8010288:	dc02      	bgt.n	8010290 <__sflush_r+0x20>
 801028a:	2000      	movs	r0, #0
 801028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010292:	2e00      	cmp	r6, #0
 8010294:	d0f9      	beq.n	801028a <__sflush_r+0x1a>
 8010296:	2300      	movs	r3, #0
 8010298:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801029c:	682f      	ldr	r7, [r5, #0]
 801029e:	602b      	str	r3, [r5, #0]
 80102a0:	d032      	beq.n	8010308 <__sflush_r+0x98>
 80102a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	075a      	lsls	r2, r3, #29
 80102a8:	d505      	bpl.n	80102b6 <__sflush_r+0x46>
 80102aa:	6863      	ldr	r3, [r4, #4]
 80102ac:	1ac0      	subs	r0, r0, r3
 80102ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80102b0:	b10b      	cbz	r3, 80102b6 <__sflush_r+0x46>
 80102b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102b4:	1ac0      	subs	r0, r0, r3
 80102b6:	2300      	movs	r3, #0
 80102b8:	4602      	mov	r2, r0
 80102ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102bc:	6a21      	ldr	r1, [r4, #32]
 80102be:	4628      	mov	r0, r5
 80102c0:	47b0      	blx	r6
 80102c2:	1c43      	adds	r3, r0, #1
 80102c4:	89a3      	ldrh	r3, [r4, #12]
 80102c6:	d106      	bne.n	80102d6 <__sflush_r+0x66>
 80102c8:	6829      	ldr	r1, [r5, #0]
 80102ca:	291d      	cmp	r1, #29
 80102cc:	d82c      	bhi.n	8010328 <__sflush_r+0xb8>
 80102ce:	4a2a      	ldr	r2, [pc, #168]	; (8010378 <__sflush_r+0x108>)
 80102d0:	40ca      	lsrs	r2, r1
 80102d2:	07d6      	lsls	r6, r2, #31
 80102d4:	d528      	bpl.n	8010328 <__sflush_r+0xb8>
 80102d6:	2200      	movs	r2, #0
 80102d8:	6062      	str	r2, [r4, #4]
 80102da:	04d9      	lsls	r1, r3, #19
 80102dc:	6922      	ldr	r2, [r4, #16]
 80102de:	6022      	str	r2, [r4, #0]
 80102e0:	d504      	bpl.n	80102ec <__sflush_r+0x7c>
 80102e2:	1c42      	adds	r2, r0, #1
 80102e4:	d101      	bne.n	80102ea <__sflush_r+0x7a>
 80102e6:	682b      	ldr	r3, [r5, #0]
 80102e8:	b903      	cbnz	r3, 80102ec <__sflush_r+0x7c>
 80102ea:	6560      	str	r0, [r4, #84]	; 0x54
 80102ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102ee:	602f      	str	r7, [r5, #0]
 80102f0:	2900      	cmp	r1, #0
 80102f2:	d0ca      	beq.n	801028a <__sflush_r+0x1a>
 80102f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102f8:	4299      	cmp	r1, r3
 80102fa:	d002      	beq.n	8010302 <__sflush_r+0x92>
 80102fc:	4628      	mov	r0, r5
 80102fe:	f7ff fd2f 	bl	800fd60 <_free_r>
 8010302:	2000      	movs	r0, #0
 8010304:	6360      	str	r0, [r4, #52]	; 0x34
 8010306:	e7c1      	b.n	801028c <__sflush_r+0x1c>
 8010308:	6a21      	ldr	r1, [r4, #32]
 801030a:	2301      	movs	r3, #1
 801030c:	4628      	mov	r0, r5
 801030e:	47b0      	blx	r6
 8010310:	1c41      	adds	r1, r0, #1
 8010312:	d1c7      	bne.n	80102a4 <__sflush_r+0x34>
 8010314:	682b      	ldr	r3, [r5, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d0c4      	beq.n	80102a4 <__sflush_r+0x34>
 801031a:	2b1d      	cmp	r3, #29
 801031c:	d001      	beq.n	8010322 <__sflush_r+0xb2>
 801031e:	2b16      	cmp	r3, #22
 8010320:	d101      	bne.n	8010326 <__sflush_r+0xb6>
 8010322:	602f      	str	r7, [r5, #0]
 8010324:	e7b1      	b.n	801028a <__sflush_r+0x1a>
 8010326:	89a3      	ldrh	r3, [r4, #12]
 8010328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801032c:	81a3      	strh	r3, [r4, #12]
 801032e:	e7ad      	b.n	801028c <__sflush_r+0x1c>
 8010330:	690f      	ldr	r7, [r1, #16]
 8010332:	2f00      	cmp	r7, #0
 8010334:	d0a9      	beq.n	801028a <__sflush_r+0x1a>
 8010336:	0793      	lsls	r3, r2, #30
 8010338:	680e      	ldr	r6, [r1, #0]
 801033a:	bf08      	it	eq
 801033c:	694b      	ldreq	r3, [r1, #20]
 801033e:	600f      	str	r7, [r1, #0]
 8010340:	bf18      	it	ne
 8010342:	2300      	movne	r3, #0
 8010344:	eba6 0807 	sub.w	r8, r6, r7
 8010348:	608b      	str	r3, [r1, #8]
 801034a:	f1b8 0f00 	cmp.w	r8, #0
 801034e:	dd9c      	ble.n	801028a <__sflush_r+0x1a>
 8010350:	6a21      	ldr	r1, [r4, #32]
 8010352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010354:	4643      	mov	r3, r8
 8010356:	463a      	mov	r2, r7
 8010358:	4628      	mov	r0, r5
 801035a:	47b0      	blx	r6
 801035c:	2800      	cmp	r0, #0
 801035e:	dc06      	bgt.n	801036e <__sflush_r+0xfe>
 8010360:	89a3      	ldrh	r3, [r4, #12]
 8010362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010366:	81a3      	strh	r3, [r4, #12]
 8010368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801036c:	e78e      	b.n	801028c <__sflush_r+0x1c>
 801036e:	4407      	add	r7, r0
 8010370:	eba8 0800 	sub.w	r8, r8, r0
 8010374:	e7e9      	b.n	801034a <__sflush_r+0xda>
 8010376:	bf00      	nop
 8010378:	20400001 	.word	0x20400001

0801037c <_fflush_r>:
 801037c:	b538      	push	{r3, r4, r5, lr}
 801037e:	690b      	ldr	r3, [r1, #16]
 8010380:	4605      	mov	r5, r0
 8010382:	460c      	mov	r4, r1
 8010384:	b913      	cbnz	r3, 801038c <_fflush_r+0x10>
 8010386:	2500      	movs	r5, #0
 8010388:	4628      	mov	r0, r5
 801038a:	bd38      	pop	{r3, r4, r5, pc}
 801038c:	b118      	cbz	r0, 8010396 <_fflush_r+0x1a>
 801038e:	6983      	ldr	r3, [r0, #24]
 8010390:	b90b      	cbnz	r3, 8010396 <_fflush_r+0x1a>
 8010392:	f000 f887 	bl	80104a4 <__sinit>
 8010396:	4b14      	ldr	r3, [pc, #80]	; (80103e8 <_fflush_r+0x6c>)
 8010398:	429c      	cmp	r4, r3
 801039a:	d11b      	bne.n	80103d4 <_fflush_r+0x58>
 801039c:	686c      	ldr	r4, [r5, #4]
 801039e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d0ef      	beq.n	8010386 <_fflush_r+0xa>
 80103a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80103a8:	07d0      	lsls	r0, r2, #31
 80103aa:	d404      	bmi.n	80103b6 <_fflush_r+0x3a>
 80103ac:	0599      	lsls	r1, r3, #22
 80103ae:	d402      	bmi.n	80103b6 <_fflush_r+0x3a>
 80103b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103b2:	f000 f915 	bl	80105e0 <__retarget_lock_acquire_recursive>
 80103b6:	4628      	mov	r0, r5
 80103b8:	4621      	mov	r1, r4
 80103ba:	f7ff ff59 	bl	8010270 <__sflush_r>
 80103be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80103c0:	07da      	lsls	r2, r3, #31
 80103c2:	4605      	mov	r5, r0
 80103c4:	d4e0      	bmi.n	8010388 <_fflush_r+0xc>
 80103c6:	89a3      	ldrh	r3, [r4, #12]
 80103c8:	059b      	lsls	r3, r3, #22
 80103ca:	d4dd      	bmi.n	8010388 <_fflush_r+0xc>
 80103cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103ce:	f000 f908 	bl	80105e2 <__retarget_lock_release_recursive>
 80103d2:	e7d9      	b.n	8010388 <_fflush_r+0xc>
 80103d4:	4b05      	ldr	r3, [pc, #20]	; (80103ec <_fflush_r+0x70>)
 80103d6:	429c      	cmp	r4, r3
 80103d8:	d101      	bne.n	80103de <_fflush_r+0x62>
 80103da:	68ac      	ldr	r4, [r5, #8]
 80103dc:	e7df      	b.n	801039e <_fflush_r+0x22>
 80103de:	4b04      	ldr	r3, [pc, #16]	; (80103f0 <_fflush_r+0x74>)
 80103e0:	429c      	cmp	r4, r3
 80103e2:	bf08      	it	eq
 80103e4:	68ec      	ldreq	r4, [r5, #12]
 80103e6:	e7da      	b.n	801039e <_fflush_r+0x22>
 80103e8:	08011930 	.word	0x08011930
 80103ec:	08011950 	.word	0x08011950
 80103f0:	08011910 	.word	0x08011910

080103f4 <std>:
 80103f4:	2300      	movs	r3, #0
 80103f6:	b510      	push	{r4, lr}
 80103f8:	4604      	mov	r4, r0
 80103fa:	e9c0 3300 	strd	r3, r3, [r0]
 80103fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010402:	6083      	str	r3, [r0, #8]
 8010404:	8181      	strh	r1, [r0, #12]
 8010406:	6643      	str	r3, [r0, #100]	; 0x64
 8010408:	81c2      	strh	r2, [r0, #14]
 801040a:	6183      	str	r3, [r0, #24]
 801040c:	4619      	mov	r1, r3
 801040e:	2208      	movs	r2, #8
 8010410:	305c      	adds	r0, #92	; 0x5c
 8010412:	f7ff fc9d 	bl	800fd50 <memset>
 8010416:	4b05      	ldr	r3, [pc, #20]	; (801042c <std+0x38>)
 8010418:	6263      	str	r3, [r4, #36]	; 0x24
 801041a:	4b05      	ldr	r3, [pc, #20]	; (8010430 <std+0x3c>)
 801041c:	62a3      	str	r3, [r4, #40]	; 0x28
 801041e:	4b05      	ldr	r3, [pc, #20]	; (8010434 <std+0x40>)
 8010420:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010422:	4b05      	ldr	r3, [pc, #20]	; (8010438 <std+0x44>)
 8010424:	6224      	str	r4, [r4, #32]
 8010426:	6323      	str	r3, [r4, #48]	; 0x30
 8010428:	bd10      	pop	{r4, pc}
 801042a:	bf00      	nop
 801042c:	08010ca9 	.word	0x08010ca9
 8010430:	08010ccb 	.word	0x08010ccb
 8010434:	08010d03 	.word	0x08010d03
 8010438:	08010d27 	.word	0x08010d27

0801043c <_cleanup_r>:
 801043c:	4901      	ldr	r1, [pc, #4]	; (8010444 <_cleanup_r+0x8>)
 801043e:	f000 b8af 	b.w	80105a0 <_fwalk_reent>
 8010442:	bf00      	nop
 8010444:	0801037d 	.word	0x0801037d

08010448 <__sfmoreglue>:
 8010448:	b570      	push	{r4, r5, r6, lr}
 801044a:	2268      	movs	r2, #104	; 0x68
 801044c:	1e4d      	subs	r5, r1, #1
 801044e:	4355      	muls	r5, r2
 8010450:	460e      	mov	r6, r1
 8010452:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010456:	f7ff fcef 	bl	800fe38 <_malloc_r>
 801045a:	4604      	mov	r4, r0
 801045c:	b140      	cbz	r0, 8010470 <__sfmoreglue+0x28>
 801045e:	2100      	movs	r1, #0
 8010460:	e9c0 1600 	strd	r1, r6, [r0]
 8010464:	300c      	adds	r0, #12
 8010466:	60a0      	str	r0, [r4, #8]
 8010468:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801046c:	f7ff fc70 	bl	800fd50 <memset>
 8010470:	4620      	mov	r0, r4
 8010472:	bd70      	pop	{r4, r5, r6, pc}

08010474 <__sfp_lock_acquire>:
 8010474:	4801      	ldr	r0, [pc, #4]	; (801047c <__sfp_lock_acquire+0x8>)
 8010476:	f000 b8b3 	b.w	80105e0 <__retarget_lock_acquire_recursive>
 801047a:	bf00      	nop
 801047c:	20002ef5 	.word	0x20002ef5

08010480 <__sfp_lock_release>:
 8010480:	4801      	ldr	r0, [pc, #4]	; (8010488 <__sfp_lock_release+0x8>)
 8010482:	f000 b8ae 	b.w	80105e2 <__retarget_lock_release_recursive>
 8010486:	bf00      	nop
 8010488:	20002ef5 	.word	0x20002ef5

0801048c <__sinit_lock_acquire>:
 801048c:	4801      	ldr	r0, [pc, #4]	; (8010494 <__sinit_lock_acquire+0x8>)
 801048e:	f000 b8a7 	b.w	80105e0 <__retarget_lock_acquire_recursive>
 8010492:	bf00      	nop
 8010494:	20002ef6 	.word	0x20002ef6

08010498 <__sinit_lock_release>:
 8010498:	4801      	ldr	r0, [pc, #4]	; (80104a0 <__sinit_lock_release+0x8>)
 801049a:	f000 b8a2 	b.w	80105e2 <__retarget_lock_release_recursive>
 801049e:	bf00      	nop
 80104a0:	20002ef6 	.word	0x20002ef6

080104a4 <__sinit>:
 80104a4:	b510      	push	{r4, lr}
 80104a6:	4604      	mov	r4, r0
 80104a8:	f7ff fff0 	bl	801048c <__sinit_lock_acquire>
 80104ac:	69a3      	ldr	r3, [r4, #24]
 80104ae:	b11b      	cbz	r3, 80104b8 <__sinit+0x14>
 80104b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104b4:	f7ff bff0 	b.w	8010498 <__sinit_lock_release>
 80104b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80104bc:	6523      	str	r3, [r4, #80]	; 0x50
 80104be:	4b13      	ldr	r3, [pc, #76]	; (801050c <__sinit+0x68>)
 80104c0:	4a13      	ldr	r2, [pc, #76]	; (8010510 <__sinit+0x6c>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80104c6:	42a3      	cmp	r3, r4
 80104c8:	bf04      	itt	eq
 80104ca:	2301      	moveq	r3, #1
 80104cc:	61a3      	streq	r3, [r4, #24]
 80104ce:	4620      	mov	r0, r4
 80104d0:	f000 f820 	bl	8010514 <__sfp>
 80104d4:	6060      	str	r0, [r4, #4]
 80104d6:	4620      	mov	r0, r4
 80104d8:	f000 f81c 	bl	8010514 <__sfp>
 80104dc:	60a0      	str	r0, [r4, #8]
 80104de:	4620      	mov	r0, r4
 80104e0:	f000 f818 	bl	8010514 <__sfp>
 80104e4:	2200      	movs	r2, #0
 80104e6:	60e0      	str	r0, [r4, #12]
 80104e8:	2104      	movs	r1, #4
 80104ea:	6860      	ldr	r0, [r4, #4]
 80104ec:	f7ff ff82 	bl	80103f4 <std>
 80104f0:	68a0      	ldr	r0, [r4, #8]
 80104f2:	2201      	movs	r2, #1
 80104f4:	2109      	movs	r1, #9
 80104f6:	f7ff ff7d 	bl	80103f4 <std>
 80104fa:	68e0      	ldr	r0, [r4, #12]
 80104fc:	2202      	movs	r2, #2
 80104fe:	2112      	movs	r1, #18
 8010500:	f7ff ff78 	bl	80103f4 <std>
 8010504:	2301      	movs	r3, #1
 8010506:	61a3      	str	r3, [r4, #24]
 8010508:	e7d2      	b.n	80104b0 <__sinit+0xc>
 801050a:	bf00      	nop
 801050c:	080118e4 	.word	0x080118e4
 8010510:	0801043d 	.word	0x0801043d

08010514 <__sfp>:
 8010514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010516:	4607      	mov	r7, r0
 8010518:	f7ff ffac 	bl	8010474 <__sfp_lock_acquire>
 801051c:	4b1e      	ldr	r3, [pc, #120]	; (8010598 <__sfp+0x84>)
 801051e:	681e      	ldr	r6, [r3, #0]
 8010520:	69b3      	ldr	r3, [r6, #24]
 8010522:	b913      	cbnz	r3, 801052a <__sfp+0x16>
 8010524:	4630      	mov	r0, r6
 8010526:	f7ff ffbd 	bl	80104a4 <__sinit>
 801052a:	3648      	adds	r6, #72	; 0x48
 801052c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010530:	3b01      	subs	r3, #1
 8010532:	d503      	bpl.n	801053c <__sfp+0x28>
 8010534:	6833      	ldr	r3, [r6, #0]
 8010536:	b30b      	cbz	r3, 801057c <__sfp+0x68>
 8010538:	6836      	ldr	r6, [r6, #0]
 801053a:	e7f7      	b.n	801052c <__sfp+0x18>
 801053c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010540:	b9d5      	cbnz	r5, 8010578 <__sfp+0x64>
 8010542:	4b16      	ldr	r3, [pc, #88]	; (801059c <__sfp+0x88>)
 8010544:	60e3      	str	r3, [r4, #12]
 8010546:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801054a:	6665      	str	r5, [r4, #100]	; 0x64
 801054c:	f000 f847 	bl	80105de <__retarget_lock_init_recursive>
 8010550:	f7ff ff96 	bl	8010480 <__sfp_lock_release>
 8010554:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010558:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801055c:	6025      	str	r5, [r4, #0]
 801055e:	61a5      	str	r5, [r4, #24]
 8010560:	2208      	movs	r2, #8
 8010562:	4629      	mov	r1, r5
 8010564:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010568:	f7ff fbf2 	bl	800fd50 <memset>
 801056c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010570:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010574:	4620      	mov	r0, r4
 8010576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010578:	3468      	adds	r4, #104	; 0x68
 801057a:	e7d9      	b.n	8010530 <__sfp+0x1c>
 801057c:	2104      	movs	r1, #4
 801057e:	4638      	mov	r0, r7
 8010580:	f7ff ff62 	bl	8010448 <__sfmoreglue>
 8010584:	4604      	mov	r4, r0
 8010586:	6030      	str	r0, [r6, #0]
 8010588:	2800      	cmp	r0, #0
 801058a:	d1d5      	bne.n	8010538 <__sfp+0x24>
 801058c:	f7ff ff78 	bl	8010480 <__sfp_lock_release>
 8010590:	230c      	movs	r3, #12
 8010592:	603b      	str	r3, [r7, #0]
 8010594:	e7ee      	b.n	8010574 <__sfp+0x60>
 8010596:	bf00      	nop
 8010598:	080118e4 	.word	0x080118e4
 801059c:	ffff0001 	.word	0xffff0001

080105a0 <_fwalk_reent>:
 80105a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105a4:	4606      	mov	r6, r0
 80105a6:	4688      	mov	r8, r1
 80105a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80105ac:	2700      	movs	r7, #0
 80105ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105b2:	f1b9 0901 	subs.w	r9, r9, #1
 80105b6:	d505      	bpl.n	80105c4 <_fwalk_reent+0x24>
 80105b8:	6824      	ldr	r4, [r4, #0]
 80105ba:	2c00      	cmp	r4, #0
 80105bc:	d1f7      	bne.n	80105ae <_fwalk_reent+0xe>
 80105be:	4638      	mov	r0, r7
 80105c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105c4:	89ab      	ldrh	r3, [r5, #12]
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d907      	bls.n	80105da <_fwalk_reent+0x3a>
 80105ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105ce:	3301      	adds	r3, #1
 80105d0:	d003      	beq.n	80105da <_fwalk_reent+0x3a>
 80105d2:	4629      	mov	r1, r5
 80105d4:	4630      	mov	r0, r6
 80105d6:	47c0      	blx	r8
 80105d8:	4307      	orrs	r7, r0
 80105da:	3568      	adds	r5, #104	; 0x68
 80105dc:	e7e9      	b.n	80105b2 <_fwalk_reent+0x12>

080105de <__retarget_lock_init_recursive>:
 80105de:	4770      	bx	lr

080105e0 <__retarget_lock_acquire_recursive>:
 80105e0:	4770      	bx	lr

080105e2 <__retarget_lock_release_recursive>:
 80105e2:	4770      	bx	lr

080105e4 <__swhatbuf_r>:
 80105e4:	b570      	push	{r4, r5, r6, lr}
 80105e6:	460e      	mov	r6, r1
 80105e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ec:	2900      	cmp	r1, #0
 80105ee:	b096      	sub	sp, #88	; 0x58
 80105f0:	4614      	mov	r4, r2
 80105f2:	461d      	mov	r5, r3
 80105f4:	da08      	bge.n	8010608 <__swhatbuf_r+0x24>
 80105f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80105fa:	2200      	movs	r2, #0
 80105fc:	602a      	str	r2, [r5, #0]
 80105fe:	061a      	lsls	r2, r3, #24
 8010600:	d410      	bmi.n	8010624 <__swhatbuf_r+0x40>
 8010602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010606:	e00e      	b.n	8010626 <__swhatbuf_r+0x42>
 8010608:	466a      	mov	r2, sp
 801060a:	f000 fbb3 	bl	8010d74 <_fstat_r>
 801060e:	2800      	cmp	r0, #0
 8010610:	dbf1      	blt.n	80105f6 <__swhatbuf_r+0x12>
 8010612:	9a01      	ldr	r2, [sp, #4]
 8010614:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010618:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801061c:	425a      	negs	r2, r3
 801061e:	415a      	adcs	r2, r3
 8010620:	602a      	str	r2, [r5, #0]
 8010622:	e7ee      	b.n	8010602 <__swhatbuf_r+0x1e>
 8010624:	2340      	movs	r3, #64	; 0x40
 8010626:	2000      	movs	r0, #0
 8010628:	6023      	str	r3, [r4, #0]
 801062a:	b016      	add	sp, #88	; 0x58
 801062c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010630 <__smakebuf_r>:
 8010630:	898b      	ldrh	r3, [r1, #12]
 8010632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010634:	079d      	lsls	r5, r3, #30
 8010636:	4606      	mov	r6, r0
 8010638:	460c      	mov	r4, r1
 801063a:	d507      	bpl.n	801064c <__smakebuf_r+0x1c>
 801063c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010640:	6023      	str	r3, [r4, #0]
 8010642:	6123      	str	r3, [r4, #16]
 8010644:	2301      	movs	r3, #1
 8010646:	6163      	str	r3, [r4, #20]
 8010648:	b002      	add	sp, #8
 801064a:	bd70      	pop	{r4, r5, r6, pc}
 801064c:	ab01      	add	r3, sp, #4
 801064e:	466a      	mov	r2, sp
 8010650:	f7ff ffc8 	bl	80105e4 <__swhatbuf_r>
 8010654:	9900      	ldr	r1, [sp, #0]
 8010656:	4605      	mov	r5, r0
 8010658:	4630      	mov	r0, r6
 801065a:	f7ff fbed 	bl	800fe38 <_malloc_r>
 801065e:	b948      	cbnz	r0, 8010674 <__smakebuf_r+0x44>
 8010660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010664:	059a      	lsls	r2, r3, #22
 8010666:	d4ef      	bmi.n	8010648 <__smakebuf_r+0x18>
 8010668:	f023 0303 	bic.w	r3, r3, #3
 801066c:	f043 0302 	orr.w	r3, r3, #2
 8010670:	81a3      	strh	r3, [r4, #12]
 8010672:	e7e3      	b.n	801063c <__smakebuf_r+0xc>
 8010674:	4b0d      	ldr	r3, [pc, #52]	; (80106ac <__smakebuf_r+0x7c>)
 8010676:	62b3      	str	r3, [r6, #40]	; 0x28
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	6020      	str	r0, [r4, #0]
 801067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010680:	81a3      	strh	r3, [r4, #12]
 8010682:	9b00      	ldr	r3, [sp, #0]
 8010684:	6163      	str	r3, [r4, #20]
 8010686:	9b01      	ldr	r3, [sp, #4]
 8010688:	6120      	str	r0, [r4, #16]
 801068a:	b15b      	cbz	r3, 80106a4 <__smakebuf_r+0x74>
 801068c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010690:	4630      	mov	r0, r6
 8010692:	f000 fb81 	bl	8010d98 <_isatty_r>
 8010696:	b128      	cbz	r0, 80106a4 <__smakebuf_r+0x74>
 8010698:	89a3      	ldrh	r3, [r4, #12]
 801069a:	f023 0303 	bic.w	r3, r3, #3
 801069e:	f043 0301 	orr.w	r3, r3, #1
 80106a2:	81a3      	strh	r3, [r4, #12]
 80106a4:	89a0      	ldrh	r0, [r4, #12]
 80106a6:	4305      	orrs	r5, r0
 80106a8:	81a5      	strh	r5, [r4, #12]
 80106aa:	e7cd      	b.n	8010648 <__smakebuf_r+0x18>
 80106ac:	0801043d 	.word	0x0801043d

080106b0 <__malloc_lock>:
 80106b0:	4801      	ldr	r0, [pc, #4]	; (80106b8 <__malloc_lock+0x8>)
 80106b2:	f7ff bf95 	b.w	80105e0 <__retarget_lock_acquire_recursive>
 80106b6:	bf00      	nop
 80106b8:	20002ef4 	.word	0x20002ef4

080106bc <__malloc_unlock>:
 80106bc:	4801      	ldr	r0, [pc, #4]	; (80106c4 <__malloc_unlock+0x8>)
 80106be:	f7ff bf90 	b.w	80105e2 <__retarget_lock_release_recursive>
 80106c2:	bf00      	nop
 80106c4:	20002ef4 	.word	0x20002ef4

080106c8 <__ssputs_r>:
 80106c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106cc:	688e      	ldr	r6, [r1, #8]
 80106ce:	429e      	cmp	r6, r3
 80106d0:	4682      	mov	sl, r0
 80106d2:	460c      	mov	r4, r1
 80106d4:	4690      	mov	r8, r2
 80106d6:	461f      	mov	r7, r3
 80106d8:	d838      	bhi.n	801074c <__ssputs_r+0x84>
 80106da:	898a      	ldrh	r2, [r1, #12]
 80106dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80106e0:	d032      	beq.n	8010748 <__ssputs_r+0x80>
 80106e2:	6825      	ldr	r5, [r4, #0]
 80106e4:	6909      	ldr	r1, [r1, #16]
 80106e6:	eba5 0901 	sub.w	r9, r5, r1
 80106ea:	6965      	ldr	r5, [r4, #20]
 80106ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80106f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80106f4:	3301      	adds	r3, #1
 80106f6:	444b      	add	r3, r9
 80106f8:	106d      	asrs	r5, r5, #1
 80106fa:	429d      	cmp	r5, r3
 80106fc:	bf38      	it	cc
 80106fe:	461d      	movcc	r5, r3
 8010700:	0553      	lsls	r3, r2, #21
 8010702:	d531      	bpl.n	8010768 <__ssputs_r+0xa0>
 8010704:	4629      	mov	r1, r5
 8010706:	f7ff fb97 	bl	800fe38 <_malloc_r>
 801070a:	4606      	mov	r6, r0
 801070c:	b950      	cbnz	r0, 8010724 <__ssputs_r+0x5c>
 801070e:	230c      	movs	r3, #12
 8010710:	f8ca 3000 	str.w	r3, [sl]
 8010714:	89a3      	ldrh	r3, [r4, #12]
 8010716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801071a:	81a3      	strh	r3, [r4, #12]
 801071c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010724:	6921      	ldr	r1, [r4, #16]
 8010726:	464a      	mov	r2, r9
 8010728:	f7ff fb04 	bl	800fd34 <memcpy>
 801072c:	89a3      	ldrh	r3, [r4, #12]
 801072e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010736:	81a3      	strh	r3, [r4, #12]
 8010738:	6126      	str	r6, [r4, #16]
 801073a:	6165      	str	r5, [r4, #20]
 801073c:	444e      	add	r6, r9
 801073e:	eba5 0509 	sub.w	r5, r5, r9
 8010742:	6026      	str	r6, [r4, #0]
 8010744:	60a5      	str	r5, [r4, #8]
 8010746:	463e      	mov	r6, r7
 8010748:	42be      	cmp	r6, r7
 801074a:	d900      	bls.n	801074e <__ssputs_r+0x86>
 801074c:	463e      	mov	r6, r7
 801074e:	6820      	ldr	r0, [r4, #0]
 8010750:	4632      	mov	r2, r6
 8010752:	4641      	mov	r1, r8
 8010754:	f000 fb42 	bl	8010ddc <memmove>
 8010758:	68a3      	ldr	r3, [r4, #8]
 801075a:	1b9b      	subs	r3, r3, r6
 801075c:	60a3      	str	r3, [r4, #8]
 801075e:	6823      	ldr	r3, [r4, #0]
 8010760:	4433      	add	r3, r6
 8010762:	6023      	str	r3, [r4, #0]
 8010764:	2000      	movs	r0, #0
 8010766:	e7db      	b.n	8010720 <__ssputs_r+0x58>
 8010768:	462a      	mov	r2, r5
 801076a:	f000 fb51 	bl	8010e10 <_realloc_r>
 801076e:	4606      	mov	r6, r0
 8010770:	2800      	cmp	r0, #0
 8010772:	d1e1      	bne.n	8010738 <__ssputs_r+0x70>
 8010774:	6921      	ldr	r1, [r4, #16]
 8010776:	4650      	mov	r0, sl
 8010778:	f7ff faf2 	bl	800fd60 <_free_r>
 801077c:	e7c7      	b.n	801070e <__ssputs_r+0x46>
	...

08010780 <_svfiprintf_r>:
 8010780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010784:	4698      	mov	r8, r3
 8010786:	898b      	ldrh	r3, [r1, #12]
 8010788:	061b      	lsls	r3, r3, #24
 801078a:	b09d      	sub	sp, #116	; 0x74
 801078c:	4607      	mov	r7, r0
 801078e:	460d      	mov	r5, r1
 8010790:	4614      	mov	r4, r2
 8010792:	d50e      	bpl.n	80107b2 <_svfiprintf_r+0x32>
 8010794:	690b      	ldr	r3, [r1, #16]
 8010796:	b963      	cbnz	r3, 80107b2 <_svfiprintf_r+0x32>
 8010798:	2140      	movs	r1, #64	; 0x40
 801079a:	f7ff fb4d 	bl	800fe38 <_malloc_r>
 801079e:	6028      	str	r0, [r5, #0]
 80107a0:	6128      	str	r0, [r5, #16]
 80107a2:	b920      	cbnz	r0, 80107ae <_svfiprintf_r+0x2e>
 80107a4:	230c      	movs	r3, #12
 80107a6:	603b      	str	r3, [r7, #0]
 80107a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107ac:	e0d1      	b.n	8010952 <_svfiprintf_r+0x1d2>
 80107ae:	2340      	movs	r3, #64	; 0x40
 80107b0:	616b      	str	r3, [r5, #20]
 80107b2:	2300      	movs	r3, #0
 80107b4:	9309      	str	r3, [sp, #36]	; 0x24
 80107b6:	2320      	movs	r3, #32
 80107b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80107c0:	2330      	movs	r3, #48	; 0x30
 80107c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801096c <_svfiprintf_r+0x1ec>
 80107c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107ca:	f04f 0901 	mov.w	r9, #1
 80107ce:	4623      	mov	r3, r4
 80107d0:	469a      	mov	sl, r3
 80107d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107d6:	b10a      	cbz	r2, 80107dc <_svfiprintf_r+0x5c>
 80107d8:	2a25      	cmp	r2, #37	; 0x25
 80107da:	d1f9      	bne.n	80107d0 <_svfiprintf_r+0x50>
 80107dc:	ebba 0b04 	subs.w	fp, sl, r4
 80107e0:	d00b      	beq.n	80107fa <_svfiprintf_r+0x7a>
 80107e2:	465b      	mov	r3, fp
 80107e4:	4622      	mov	r2, r4
 80107e6:	4629      	mov	r1, r5
 80107e8:	4638      	mov	r0, r7
 80107ea:	f7ff ff6d 	bl	80106c8 <__ssputs_r>
 80107ee:	3001      	adds	r0, #1
 80107f0:	f000 80aa 	beq.w	8010948 <_svfiprintf_r+0x1c8>
 80107f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107f6:	445a      	add	r2, fp
 80107f8:	9209      	str	r2, [sp, #36]	; 0x24
 80107fa:	f89a 3000 	ldrb.w	r3, [sl]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f000 80a2 	beq.w	8010948 <_svfiprintf_r+0x1c8>
 8010804:	2300      	movs	r3, #0
 8010806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801080a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801080e:	f10a 0a01 	add.w	sl, sl, #1
 8010812:	9304      	str	r3, [sp, #16]
 8010814:	9307      	str	r3, [sp, #28]
 8010816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801081a:	931a      	str	r3, [sp, #104]	; 0x68
 801081c:	4654      	mov	r4, sl
 801081e:	2205      	movs	r2, #5
 8010820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010824:	4851      	ldr	r0, [pc, #324]	; (801096c <_svfiprintf_r+0x1ec>)
 8010826:	f7ef fcfb 	bl	8000220 <memchr>
 801082a:	9a04      	ldr	r2, [sp, #16]
 801082c:	b9d8      	cbnz	r0, 8010866 <_svfiprintf_r+0xe6>
 801082e:	06d0      	lsls	r0, r2, #27
 8010830:	bf44      	itt	mi
 8010832:	2320      	movmi	r3, #32
 8010834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010838:	0711      	lsls	r1, r2, #28
 801083a:	bf44      	itt	mi
 801083c:	232b      	movmi	r3, #43	; 0x2b
 801083e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010842:	f89a 3000 	ldrb.w	r3, [sl]
 8010846:	2b2a      	cmp	r3, #42	; 0x2a
 8010848:	d015      	beq.n	8010876 <_svfiprintf_r+0xf6>
 801084a:	9a07      	ldr	r2, [sp, #28]
 801084c:	4654      	mov	r4, sl
 801084e:	2000      	movs	r0, #0
 8010850:	f04f 0c0a 	mov.w	ip, #10
 8010854:	4621      	mov	r1, r4
 8010856:	f811 3b01 	ldrb.w	r3, [r1], #1
 801085a:	3b30      	subs	r3, #48	; 0x30
 801085c:	2b09      	cmp	r3, #9
 801085e:	d94e      	bls.n	80108fe <_svfiprintf_r+0x17e>
 8010860:	b1b0      	cbz	r0, 8010890 <_svfiprintf_r+0x110>
 8010862:	9207      	str	r2, [sp, #28]
 8010864:	e014      	b.n	8010890 <_svfiprintf_r+0x110>
 8010866:	eba0 0308 	sub.w	r3, r0, r8
 801086a:	fa09 f303 	lsl.w	r3, r9, r3
 801086e:	4313      	orrs	r3, r2
 8010870:	9304      	str	r3, [sp, #16]
 8010872:	46a2      	mov	sl, r4
 8010874:	e7d2      	b.n	801081c <_svfiprintf_r+0x9c>
 8010876:	9b03      	ldr	r3, [sp, #12]
 8010878:	1d19      	adds	r1, r3, #4
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	9103      	str	r1, [sp, #12]
 801087e:	2b00      	cmp	r3, #0
 8010880:	bfbb      	ittet	lt
 8010882:	425b      	neglt	r3, r3
 8010884:	f042 0202 	orrlt.w	r2, r2, #2
 8010888:	9307      	strge	r3, [sp, #28]
 801088a:	9307      	strlt	r3, [sp, #28]
 801088c:	bfb8      	it	lt
 801088e:	9204      	strlt	r2, [sp, #16]
 8010890:	7823      	ldrb	r3, [r4, #0]
 8010892:	2b2e      	cmp	r3, #46	; 0x2e
 8010894:	d10c      	bne.n	80108b0 <_svfiprintf_r+0x130>
 8010896:	7863      	ldrb	r3, [r4, #1]
 8010898:	2b2a      	cmp	r3, #42	; 0x2a
 801089a:	d135      	bne.n	8010908 <_svfiprintf_r+0x188>
 801089c:	9b03      	ldr	r3, [sp, #12]
 801089e:	1d1a      	adds	r2, r3, #4
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	9203      	str	r2, [sp, #12]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	bfb8      	it	lt
 80108a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80108ac:	3402      	adds	r4, #2
 80108ae:	9305      	str	r3, [sp, #20]
 80108b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801097c <_svfiprintf_r+0x1fc>
 80108b4:	7821      	ldrb	r1, [r4, #0]
 80108b6:	2203      	movs	r2, #3
 80108b8:	4650      	mov	r0, sl
 80108ba:	f7ef fcb1 	bl	8000220 <memchr>
 80108be:	b140      	cbz	r0, 80108d2 <_svfiprintf_r+0x152>
 80108c0:	2340      	movs	r3, #64	; 0x40
 80108c2:	eba0 000a 	sub.w	r0, r0, sl
 80108c6:	fa03 f000 	lsl.w	r0, r3, r0
 80108ca:	9b04      	ldr	r3, [sp, #16]
 80108cc:	4303      	orrs	r3, r0
 80108ce:	3401      	adds	r4, #1
 80108d0:	9304      	str	r3, [sp, #16]
 80108d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108d6:	4826      	ldr	r0, [pc, #152]	; (8010970 <_svfiprintf_r+0x1f0>)
 80108d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108dc:	2206      	movs	r2, #6
 80108de:	f7ef fc9f 	bl	8000220 <memchr>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d038      	beq.n	8010958 <_svfiprintf_r+0x1d8>
 80108e6:	4b23      	ldr	r3, [pc, #140]	; (8010974 <_svfiprintf_r+0x1f4>)
 80108e8:	bb1b      	cbnz	r3, 8010932 <_svfiprintf_r+0x1b2>
 80108ea:	9b03      	ldr	r3, [sp, #12]
 80108ec:	3307      	adds	r3, #7
 80108ee:	f023 0307 	bic.w	r3, r3, #7
 80108f2:	3308      	adds	r3, #8
 80108f4:	9303      	str	r3, [sp, #12]
 80108f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108f8:	4433      	add	r3, r6
 80108fa:	9309      	str	r3, [sp, #36]	; 0x24
 80108fc:	e767      	b.n	80107ce <_svfiprintf_r+0x4e>
 80108fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010902:	460c      	mov	r4, r1
 8010904:	2001      	movs	r0, #1
 8010906:	e7a5      	b.n	8010854 <_svfiprintf_r+0xd4>
 8010908:	2300      	movs	r3, #0
 801090a:	3401      	adds	r4, #1
 801090c:	9305      	str	r3, [sp, #20]
 801090e:	4619      	mov	r1, r3
 8010910:	f04f 0c0a 	mov.w	ip, #10
 8010914:	4620      	mov	r0, r4
 8010916:	f810 2b01 	ldrb.w	r2, [r0], #1
 801091a:	3a30      	subs	r2, #48	; 0x30
 801091c:	2a09      	cmp	r2, #9
 801091e:	d903      	bls.n	8010928 <_svfiprintf_r+0x1a8>
 8010920:	2b00      	cmp	r3, #0
 8010922:	d0c5      	beq.n	80108b0 <_svfiprintf_r+0x130>
 8010924:	9105      	str	r1, [sp, #20]
 8010926:	e7c3      	b.n	80108b0 <_svfiprintf_r+0x130>
 8010928:	fb0c 2101 	mla	r1, ip, r1, r2
 801092c:	4604      	mov	r4, r0
 801092e:	2301      	movs	r3, #1
 8010930:	e7f0      	b.n	8010914 <_svfiprintf_r+0x194>
 8010932:	ab03      	add	r3, sp, #12
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	462a      	mov	r2, r5
 8010938:	4b0f      	ldr	r3, [pc, #60]	; (8010978 <_svfiprintf_r+0x1f8>)
 801093a:	a904      	add	r1, sp, #16
 801093c:	4638      	mov	r0, r7
 801093e:	f3af 8000 	nop.w
 8010942:	1c42      	adds	r2, r0, #1
 8010944:	4606      	mov	r6, r0
 8010946:	d1d6      	bne.n	80108f6 <_svfiprintf_r+0x176>
 8010948:	89ab      	ldrh	r3, [r5, #12]
 801094a:	065b      	lsls	r3, r3, #25
 801094c:	f53f af2c 	bmi.w	80107a8 <_svfiprintf_r+0x28>
 8010950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010952:	b01d      	add	sp, #116	; 0x74
 8010954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010958:	ab03      	add	r3, sp, #12
 801095a:	9300      	str	r3, [sp, #0]
 801095c:	462a      	mov	r2, r5
 801095e:	4b06      	ldr	r3, [pc, #24]	; (8010978 <_svfiprintf_r+0x1f8>)
 8010960:	a904      	add	r1, sp, #16
 8010962:	4638      	mov	r0, r7
 8010964:	f000 f87a 	bl	8010a5c <_printf_i>
 8010968:	e7eb      	b.n	8010942 <_svfiprintf_r+0x1c2>
 801096a:	bf00      	nop
 801096c:	08011970 	.word	0x08011970
 8010970:	0801197a 	.word	0x0801197a
 8010974:	00000000 	.word	0x00000000
 8010978:	080106c9 	.word	0x080106c9
 801097c:	08011976 	.word	0x08011976

08010980 <_printf_common>:
 8010980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010984:	4616      	mov	r6, r2
 8010986:	4699      	mov	r9, r3
 8010988:	688a      	ldr	r2, [r1, #8]
 801098a:	690b      	ldr	r3, [r1, #16]
 801098c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010990:	4293      	cmp	r3, r2
 8010992:	bfb8      	it	lt
 8010994:	4613      	movlt	r3, r2
 8010996:	6033      	str	r3, [r6, #0]
 8010998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801099c:	4607      	mov	r7, r0
 801099e:	460c      	mov	r4, r1
 80109a0:	b10a      	cbz	r2, 80109a6 <_printf_common+0x26>
 80109a2:	3301      	adds	r3, #1
 80109a4:	6033      	str	r3, [r6, #0]
 80109a6:	6823      	ldr	r3, [r4, #0]
 80109a8:	0699      	lsls	r1, r3, #26
 80109aa:	bf42      	ittt	mi
 80109ac:	6833      	ldrmi	r3, [r6, #0]
 80109ae:	3302      	addmi	r3, #2
 80109b0:	6033      	strmi	r3, [r6, #0]
 80109b2:	6825      	ldr	r5, [r4, #0]
 80109b4:	f015 0506 	ands.w	r5, r5, #6
 80109b8:	d106      	bne.n	80109c8 <_printf_common+0x48>
 80109ba:	f104 0a19 	add.w	sl, r4, #25
 80109be:	68e3      	ldr	r3, [r4, #12]
 80109c0:	6832      	ldr	r2, [r6, #0]
 80109c2:	1a9b      	subs	r3, r3, r2
 80109c4:	42ab      	cmp	r3, r5
 80109c6:	dc26      	bgt.n	8010a16 <_printf_common+0x96>
 80109c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80109cc:	1e13      	subs	r3, r2, #0
 80109ce:	6822      	ldr	r2, [r4, #0]
 80109d0:	bf18      	it	ne
 80109d2:	2301      	movne	r3, #1
 80109d4:	0692      	lsls	r2, r2, #26
 80109d6:	d42b      	bmi.n	8010a30 <_printf_common+0xb0>
 80109d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109dc:	4649      	mov	r1, r9
 80109de:	4638      	mov	r0, r7
 80109e0:	47c0      	blx	r8
 80109e2:	3001      	adds	r0, #1
 80109e4:	d01e      	beq.n	8010a24 <_printf_common+0xa4>
 80109e6:	6823      	ldr	r3, [r4, #0]
 80109e8:	68e5      	ldr	r5, [r4, #12]
 80109ea:	6832      	ldr	r2, [r6, #0]
 80109ec:	f003 0306 	and.w	r3, r3, #6
 80109f0:	2b04      	cmp	r3, #4
 80109f2:	bf08      	it	eq
 80109f4:	1aad      	subeq	r5, r5, r2
 80109f6:	68a3      	ldr	r3, [r4, #8]
 80109f8:	6922      	ldr	r2, [r4, #16]
 80109fa:	bf0c      	ite	eq
 80109fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a00:	2500      	movne	r5, #0
 8010a02:	4293      	cmp	r3, r2
 8010a04:	bfc4      	itt	gt
 8010a06:	1a9b      	subgt	r3, r3, r2
 8010a08:	18ed      	addgt	r5, r5, r3
 8010a0a:	2600      	movs	r6, #0
 8010a0c:	341a      	adds	r4, #26
 8010a0e:	42b5      	cmp	r5, r6
 8010a10:	d11a      	bne.n	8010a48 <_printf_common+0xc8>
 8010a12:	2000      	movs	r0, #0
 8010a14:	e008      	b.n	8010a28 <_printf_common+0xa8>
 8010a16:	2301      	movs	r3, #1
 8010a18:	4652      	mov	r2, sl
 8010a1a:	4649      	mov	r1, r9
 8010a1c:	4638      	mov	r0, r7
 8010a1e:	47c0      	blx	r8
 8010a20:	3001      	adds	r0, #1
 8010a22:	d103      	bne.n	8010a2c <_printf_common+0xac>
 8010a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a2c:	3501      	adds	r5, #1
 8010a2e:	e7c6      	b.n	80109be <_printf_common+0x3e>
 8010a30:	18e1      	adds	r1, r4, r3
 8010a32:	1c5a      	adds	r2, r3, #1
 8010a34:	2030      	movs	r0, #48	; 0x30
 8010a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a3a:	4422      	add	r2, r4
 8010a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a44:	3302      	adds	r3, #2
 8010a46:	e7c7      	b.n	80109d8 <_printf_common+0x58>
 8010a48:	2301      	movs	r3, #1
 8010a4a:	4622      	mov	r2, r4
 8010a4c:	4649      	mov	r1, r9
 8010a4e:	4638      	mov	r0, r7
 8010a50:	47c0      	blx	r8
 8010a52:	3001      	adds	r0, #1
 8010a54:	d0e6      	beq.n	8010a24 <_printf_common+0xa4>
 8010a56:	3601      	adds	r6, #1
 8010a58:	e7d9      	b.n	8010a0e <_printf_common+0x8e>
	...

08010a5c <_printf_i>:
 8010a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a60:	7e0f      	ldrb	r7, [r1, #24]
 8010a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010a64:	2f78      	cmp	r7, #120	; 0x78
 8010a66:	4691      	mov	r9, r2
 8010a68:	4680      	mov	r8, r0
 8010a6a:	460c      	mov	r4, r1
 8010a6c:	469a      	mov	sl, r3
 8010a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010a72:	d807      	bhi.n	8010a84 <_printf_i+0x28>
 8010a74:	2f62      	cmp	r7, #98	; 0x62
 8010a76:	d80a      	bhi.n	8010a8e <_printf_i+0x32>
 8010a78:	2f00      	cmp	r7, #0
 8010a7a:	f000 80d8 	beq.w	8010c2e <_printf_i+0x1d2>
 8010a7e:	2f58      	cmp	r7, #88	; 0x58
 8010a80:	f000 80a3 	beq.w	8010bca <_printf_i+0x16e>
 8010a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a8c:	e03a      	b.n	8010b04 <_printf_i+0xa8>
 8010a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a92:	2b15      	cmp	r3, #21
 8010a94:	d8f6      	bhi.n	8010a84 <_printf_i+0x28>
 8010a96:	a101      	add	r1, pc, #4	; (adr r1, 8010a9c <_printf_i+0x40>)
 8010a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a9c:	08010af5 	.word	0x08010af5
 8010aa0:	08010b09 	.word	0x08010b09
 8010aa4:	08010a85 	.word	0x08010a85
 8010aa8:	08010a85 	.word	0x08010a85
 8010aac:	08010a85 	.word	0x08010a85
 8010ab0:	08010a85 	.word	0x08010a85
 8010ab4:	08010b09 	.word	0x08010b09
 8010ab8:	08010a85 	.word	0x08010a85
 8010abc:	08010a85 	.word	0x08010a85
 8010ac0:	08010a85 	.word	0x08010a85
 8010ac4:	08010a85 	.word	0x08010a85
 8010ac8:	08010c15 	.word	0x08010c15
 8010acc:	08010b39 	.word	0x08010b39
 8010ad0:	08010bf7 	.word	0x08010bf7
 8010ad4:	08010a85 	.word	0x08010a85
 8010ad8:	08010a85 	.word	0x08010a85
 8010adc:	08010c37 	.word	0x08010c37
 8010ae0:	08010a85 	.word	0x08010a85
 8010ae4:	08010b39 	.word	0x08010b39
 8010ae8:	08010a85 	.word	0x08010a85
 8010aec:	08010a85 	.word	0x08010a85
 8010af0:	08010bff 	.word	0x08010bff
 8010af4:	682b      	ldr	r3, [r5, #0]
 8010af6:	1d1a      	adds	r2, r3, #4
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	602a      	str	r2, [r5, #0]
 8010afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b04:	2301      	movs	r3, #1
 8010b06:	e0a3      	b.n	8010c50 <_printf_i+0x1f4>
 8010b08:	6820      	ldr	r0, [r4, #0]
 8010b0a:	6829      	ldr	r1, [r5, #0]
 8010b0c:	0606      	lsls	r6, r0, #24
 8010b0e:	f101 0304 	add.w	r3, r1, #4
 8010b12:	d50a      	bpl.n	8010b2a <_printf_i+0xce>
 8010b14:	680e      	ldr	r6, [r1, #0]
 8010b16:	602b      	str	r3, [r5, #0]
 8010b18:	2e00      	cmp	r6, #0
 8010b1a:	da03      	bge.n	8010b24 <_printf_i+0xc8>
 8010b1c:	232d      	movs	r3, #45	; 0x2d
 8010b1e:	4276      	negs	r6, r6
 8010b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b24:	485e      	ldr	r0, [pc, #376]	; (8010ca0 <_printf_i+0x244>)
 8010b26:	230a      	movs	r3, #10
 8010b28:	e019      	b.n	8010b5e <_printf_i+0x102>
 8010b2a:	680e      	ldr	r6, [r1, #0]
 8010b2c:	602b      	str	r3, [r5, #0]
 8010b2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b32:	bf18      	it	ne
 8010b34:	b236      	sxthne	r6, r6
 8010b36:	e7ef      	b.n	8010b18 <_printf_i+0xbc>
 8010b38:	682b      	ldr	r3, [r5, #0]
 8010b3a:	6820      	ldr	r0, [r4, #0]
 8010b3c:	1d19      	adds	r1, r3, #4
 8010b3e:	6029      	str	r1, [r5, #0]
 8010b40:	0601      	lsls	r1, r0, #24
 8010b42:	d501      	bpl.n	8010b48 <_printf_i+0xec>
 8010b44:	681e      	ldr	r6, [r3, #0]
 8010b46:	e002      	b.n	8010b4e <_printf_i+0xf2>
 8010b48:	0646      	lsls	r6, r0, #25
 8010b4a:	d5fb      	bpl.n	8010b44 <_printf_i+0xe8>
 8010b4c:	881e      	ldrh	r6, [r3, #0]
 8010b4e:	4854      	ldr	r0, [pc, #336]	; (8010ca0 <_printf_i+0x244>)
 8010b50:	2f6f      	cmp	r7, #111	; 0x6f
 8010b52:	bf0c      	ite	eq
 8010b54:	2308      	moveq	r3, #8
 8010b56:	230a      	movne	r3, #10
 8010b58:	2100      	movs	r1, #0
 8010b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b5e:	6865      	ldr	r5, [r4, #4]
 8010b60:	60a5      	str	r5, [r4, #8]
 8010b62:	2d00      	cmp	r5, #0
 8010b64:	bfa2      	ittt	ge
 8010b66:	6821      	ldrge	r1, [r4, #0]
 8010b68:	f021 0104 	bicge.w	r1, r1, #4
 8010b6c:	6021      	strge	r1, [r4, #0]
 8010b6e:	b90e      	cbnz	r6, 8010b74 <_printf_i+0x118>
 8010b70:	2d00      	cmp	r5, #0
 8010b72:	d04d      	beq.n	8010c10 <_printf_i+0x1b4>
 8010b74:	4615      	mov	r5, r2
 8010b76:	fbb6 f1f3 	udiv	r1, r6, r3
 8010b7a:	fb03 6711 	mls	r7, r3, r1, r6
 8010b7e:	5dc7      	ldrb	r7, [r0, r7]
 8010b80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010b84:	4637      	mov	r7, r6
 8010b86:	42bb      	cmp	r3, r7
 8010b88:	460e      	mov	r6, r1
 8010b8a:	d9f4      	bls.n	8010b76 <_printf_i+0x11a>
 8010b8c:	2b08      	cmp	r3, #8
 8010b8e:	d10b      	bne.n	8010ba8 <_printf_i+0x14c>
 8010b90:	6823      	ldr	r3, [r4, #0]
 8010b92:	07de      	lsls	r6, r3, #31
 8010b94:	d508      	bpl.n	8010ba8 <_printf_i+0x14c>
 8010b96:	6923      	ldr	r3, [r4, #16]
 8010b98:	6861      	ldr	r1, [r4, #4]
 8010b9a:	4299      	cmp	r1, r3
 8010b9c:	bfde      	ittt	le
 8010b9e:	2330      	movle	r3, #48	; 0x30
 8010ba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010ba4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010ba8:	1b52      	subs	r2, r2, r5
 8010baa:	6122      	str	r2, [r4, #16]
 8010bac:	f8cd a000 	str.w	sl, [sp]
 8010bb0:	464b      	mov	r3, r9
 8010bb2:	aa03      	add	r2, sp, #12
 8010bb4:	4621      	mov	r1, r4
 8010bb6:	4640      	mov	r0, r8
 8010bb8:	f7ff fee2 	bl	8010980 <_printf_common>
 8010bbc:	3001      	adds	r0, #1
 8010bbe:	d14c      	bne.n	8010c5a <_printf_i+0x1fe>
 8010bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bc4:	b004      	add	sp, #16
 8010bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bca:	4835      	ldr	r0, [pc, #212]	; (8010ca0 <_printf_i+0x244>)
 8010bcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010bd0:	6829      	ldr	r1, [r5, #0]
 8010bd2:	6823      	ldr	r3, [r4, #0]
 8010bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8010bd8:	6029      	str	r1, [r5, #0]
 8010bda:	061d      	lsls	r5, r3, #24
 8010bdc:	d514      	bpl.n	8010c08 <_printf_i+0x1ac>
 8010bde:	07df      	lsls	r7, r3, #31
 8010be0:	bf44      	itt	mi
 8010be2:	f043 0320 	orrmi.w	r3, r3, #32
 8010be6:	6023      	strmi	r3, [r4, #0]
 8010be8:	b91e      	cbnz	r6, 8010bf2 <_printf_i+0x196>
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	f023 0320 	bic.w	r3, r3, #32
 8010bf0:	6023      	str	r3, [r4, #0]
 8010bf2:	2310      	movs	r3, #16
 8010bf4:	e7b0      	b.n	8010b58 <_printf_i+0xfc>
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	f043 0320 	orr.w	r3, r3, #32
 8010bfc:	6023      	str	r3, [r4, #0]
 8010bfe:	2378      	movs	r3, #120	; 0x78
 8010c00:	4828      	ldr	r0, [pc, #160]	; (8010ca4 <_printf_i+0x248>)
 8010c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c06:	e7e3      	b.n	8010bd0 <_printf_i+0x174>
 8010c08:	0659      	lsls	r1, r3, #25
 8010c0a:	bf48      	it	mi
 8010c0c:	b2b6      	uxthmi	r6, r6
 8010c0e:	e7e6      	b.n	8010bde <_printf_i+0x182>
 8010c10:	4615      	mov	r5, r2
 8010c12:	e7bb      	b.n	8010b8c <_printf_i+0x130>
 8010c14:	682b      	ldr	r3, [r5, #0]
 8010c16:	6826      	ldr	r6, [r4, #0]
 8010c18:	6961      	ldr	r1, [r4, #20]
 8010c1a:	1d18      	adds	r0, r3, #4
 8010c1c:	6028      	str	r0, [r5, #0]
 8010c1e:	0635      	lsls	r5, r6, #24
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	d501      	bpl.n	8010c28 <_printf_i+0x1cc>
 8010c24:	6019      	str	r1, [r3, #0]
 8010c26:	e002      	b.n	8010c2e <_printf_i+0x1d2>
 8010c28:	0670      	lsls	r0, r6, #25
 8010c2a:	d5fb      	bpl.n	8010c24 <_printf_i+0x1c8>
 8010c2c:	8019      	strh	r1, [r3, #0]
 8010c2e:	2300      	movs	r3, #0
 8010c30:	6123      	str	r3, [r4, #16]
 8010c32:	4615      	mov	r5, r2
 8010c34:	e7ba      	b.n	8010bac <_printf_i+0x150>
 8010c36:	682b      	ldr	r3, [r5, #0]
 8010c38:	1d1a      	adds	r2, r3, #4
 8010c3a:	602a      	str	r2, [r5, #0]
 8010c3c:	681d      	ldr	r5, [r3, #0]
 8010c3e:	6862      	ldr	r2, [r4, #4]
 8010c40:	2100      	movs	r1, #0
 8010c42:	4628      	mov	r0, r5
 8010c44:	f7ef faec 	bl	8000220 <memchr>
 8010c48:	b108      	cbz	r0, 8010c4e <_printf_i+0x1f2>
 8010c4a:	1b40      	subs	r0, r0, r5
 8010c4c:	6060      	str	r0, [r4, #4]
 8010c4e:	6863      	ldr	r3, [r4, #4]
 8010c50:	6123      	str	r3, [r4, #16]
 8010c52:	2300      	movs	r3, #0
 8010c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c58:	e7a8      	b.n	8010bac <_printf_i+0x150>
 8010c5a:	6923      	ldr	r3, [r4, #16]
 8010c5c:	462a      	mov	r2, r5
 8010c5e:	4649      	mov	r1, r9
 8010c60:	4640      	mov	r0, r8
 8010c62:	47d0      	blx	sl
 8010c64:	3001      	adds	r0, #1
 8010c66:	d0ab      	beq.n	8010bc0 <_printf_i+0x164>
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	079b      	lsls	r3, r3, #30
 8010c6c:	d413      	bmi.n	8010c96 <_printf_i+0x23a>
 8010c6e:	68e0      	ldr	r0, [r4, #12]
 8010c70:	9b03      	ldr	r3, [sp, #12]
 8010c72:	4298      	cmp	r0, r3
 8010c74:	bfb8      	it	lt
 8010c76:	4618      	movlt	r0, r3
 8010c78:	e7a4      	b.n	8010bc4 <_printf_i+0x168>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	4632      	mov	r2, r6
 8010c7e:	4649      	mov	r1, r9
 8010c80:	4640      	mov	r0, r8
 8010c82:	47d0      	blx	sl
 8010c84:	3001      	adds	r0, #1
 8010c86:	d09b      	beq.n	8010bc0 <_printf_i+0x164>
 8010c88:	3501      	adds	r5, #1
 8010c8a:	68e3      	ldr	r3, [r4, #12]
 8010c8c:	9903      	ldr	r1, [sp, #12]
 8010c8e:	1a5b      	subs	r3, r3, r1
 8010c90:	42ab      	cmp	r3, r5
 8010c92:	dcf2      	bgt.n	8010c7a <_printf_i+0x21e>
 8010c94:	e7eb      	b.n	8010c6e <_printf_i+0x212>
 8010c96:	2500      	movs	r5, #0
 8010c98:	f104 0619 	add.w	r6, r4, #25
 8010c9c:	e7f5      	b.n	8010c8a <_printf_i+0x22e>
 8010c9e:	bf00      	nop
 8010ca0:	08011981 	.word	0x08011981
 8010ca4:	08011992 	.word	0x08011992

08010ca8 <__sread>:
 8010ca8:	b510      	push	{r4, lr}
 8010caa:	460c      	mov	r4, r1
 8010cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cb0:	f000 f8de 	bl	8010e70 <_read_r>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	bfab      	itete	ge
 8010cb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010cba:	89a3      	ldrhlt	r3, [r4, #12]
 8010cbc:	181b      	addge	r3, r3, r0
 8010cbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010cc2:	bfac      	ite	ge
 8010cc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8010cc6:	81a3      	strhlt	r3, [r4, #12]
 8010cc8:	bd10      	pop	{r4, pc}

08010cca <__swrite>:
 8010cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cce:	461f      	mov	r7, r3
 8010cd0:	898b      	ldrh	r3, [r1, #12]
 8010cd2:	05db      	lsls	r3, r3, #23
 8010cd4:	4605      	mov	r5, r0
 8010cd6:	460c      	mov	r4, r1
 8010cd8:	4616      	mov	r6, r2
 8010cda:	d505      	bpl.n	8010ce8 <__swrite+0x1e>
 8010cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ce0:	2302      	movs	r3, #2
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	f000 f868 	bl	8010db8 <_lseek_r>
 8010ce8:	89a3      	ldrh	r3, [r4, #12]
 8010cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010cf2:	81a3      	strh	r3, [r4, #12]
 8010cf4:	4632      	mov	r2, r6
 8010cf6:	463b      	mov	r3, r7
 8010cf8:	4628      	mov	r0, r5
 8010cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cfe:	f000 b817 	b.w	8010d30 <_write_r>

08010d02 <__sseek>:
 8010d02:	b510      	push	{r4, lr}
 8010d04:	460c      	mov	r4, r1
 8010d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d0a:	f000 f855 	bl	8010db8 <_lseek_r>
 8010d0e:	1c43      	adds	r3, r0, #1
 8010d10:	89a3      	ldrh	r3, [r4, #12]
 8010d12:	bf15      	itete	ne
 8010d14:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d1e:	81a3      	strheq	r3, [r4, #12]
 8010d20:	bf18      	it	ne
 8010d22:	81a3      	strhne	r3, [r4, #12]
 8010d24:	bd10      	pop	{r4, pc}

08010d26 <__sclose>:
 8010d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d2a:	f000 b813 	b.w	8010d54 <_close_r>
	...

08010d30 <_write_r>:
 8010d30:	b538      	push	{r3, r4, r5, lr}
 8010d32:	4d07      	ldr	r5, [pc, #28]	; (8010d50 <_write_r+0x20>)
 8010d34:	4604      	mov	r4, r0
 8010d36:	4608      	mov	r0, r1
 8010d38:	4611      	mov	r1, r2
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	602a      	str	r2, [r5, #0]
 8010d3e:	461a      	mov	r2, r3
 8010d40:	f7f0 fd4b 	bl	80017da <_write>
 8010d44:	1c43      	adds	r3, r0, #1
 8010d46:	d102      	bne.n	8010d4e <_write_r+0x1e>
 8010d48:	682b      	ldr	r3, [r5, #0]
 8010d4a:	b103      	cbz	r3, 8010d4e <_write_r+0x1e>
 8010d4c:	6023      	str	r3, [r4, #0]
 8010d4e:	bd38      	pop	{r3, r4, r5, pc}
 8010d50:	20002ef8 	.word	0x20002ef8

08010d54 <_close_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4d06      	ldr	r5, [pc, #24]	; (8010d70 <_close_r+0x1c>)
 8010d58:	2300      	movs	r3, #0
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	4608      	mov	r0, r1
 8010d5e:	602b      	str	r3, [r5, #0]
 8010d60:	f7f0 fd57 	bl	8001812 <_close>
 8010d64:	1c43      	adds	r3, r0, #1
 8010d66:	d102      	bne.n	8010d6e <_close_r+0x1a>
 8010d68:	682b      	ldr	r3, [r5, #0]
 8010d6a:	b103      	cbz	r3, 8010d6e <_close_r+0x1a>
 8010d6c:	6023      	str	r3, [r4, #0]
 8010d6e:	bd38      	pop	{r3, r4, r5, pc}
 8010d70:	20002ef8 	.word	0x20002ef8

08010d74 <_fstat_r>:
 8010d74:	b538      	push	{r3, r4, r5, lr}
 8010d76:	4d07      	ldr	r5, [pc, #28]	; (8010d94 <_fstat_r+0x20>)
 8010d78:	2300      	movs	r3, #0
 8010d7a:	4604      	mov	r4, r0
 8010d7c:	4608      	mov	r0, r1
 8010d7e:	4611      	mov	r1, r2
 8010d80:	602b      	str	r3, [r5, #0]
 8010d82:	f7f0 fd52 	bl	800182a <_fstat>
 8010d86:	1c43      	adds	r3, r0, #1
 8010d88:	d102      	bne.n	8010d90 <_fstat_r+0x1c>
 8010d8a:	682b      	ldr	r3, [r5, #0]
 8010d8c:	b103      	cbz	r3, 8010d90 <_fstat_r+0x1c>
 8010d8e:	6023      	str	r3, [r4, #0]
 8010d90:	bd38      	pop	{r3, r4, r5, pc}
 8010d92:	bf00      	nop
 8010d94:	20002ef8 	.word	0x20002ef8

08010d98 <_isatty_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4d06      	ldr	r5, [pc, #24]	; (8010db4 <_isatty_r+0x1c>)
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	4604      	mov	r4, r0
 8010da0:	4608      	mov	r0, r1
 8010da2:	602b      	str	r3, [r5, #0]
 8010da4:	f7f0 fd51 	bl	800184a <_isatty>
 8010da8:	1c43      	adds	r3, r0, #1
 8010daa:	d102      	bne.n	8010db2 <_isatty_r+0x1a>
 8010dac:	682b      	ldr	r3, [r5, #0]
 8010dae:	b103      	cbz	r3, 8010db2 <_isatty_r+0x1a>
 8010db0:	6023      	str	r3, [r4, #0]
 8010db2:	bd38      	pop	{r3, r4, r5, pc}
 8010db4:	20002ef8 	.word	0x20002ef8

08010db8 <_lseek_r>:
 8010db8:	b538      	push	{r3, r4, r5, lr}
 8010dba:	4d07      	ldr	r5, [pc, #28]	; (8010dd8 <_lseek_r+0x20>)
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	4608      	mov	r0, r1
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	602a      	str	r2, [r5, #0]
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	f7f0 fd4a 	bl	8001860 <_lseek>
 8010dcc:	1c43      	adds	r3, r0, #1
 8010dce:	d102      	bne.n	8010dd6 <_lseek_r+0x1e>
 8010dd0:	682b      	ldr	r3, [r5, #0]
 8010dd2:	b103      	cbz	r3, 8010dd6 <_lseek_r+0x1e>
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	bd38      	pop	{r3, r4, r5, pc}
 8010dd8:	20002ef8 	.word	0x20002ef8

08010ddc <memmove>:
 8010ddc:	4288      	cmp	r0, r1
 8010dde:	b510      	push	{r4, lr}
 8010de0:	eb01 0402 	add.w	r4, r1, r2
 8010de4:	d902      	bls.n	8010dec <memmove+0x10>
 8010de6:	4284      	cmp	r4, r0
 8010de8:	4623      	mov	r3, r4
 8010dea:	d807      	bhi.n	8010dfc <memmove+0x20>
 8010dec:	1e43      	subs	r3, r0, #1
 8010dee:	42a1      	cmp	r1, r4
 8010df0:	d008      	beq.n	8010e04 <memmove+0x28>
 8010df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010dfa:	e7f8      	b.n	8010dee <memmove+0x12>
 8010dfc:	4402      	add	r2, r0
 8010dfe:	4601      	mov	r1, r0
 8010e00:	428a      	cmp	r2, r1
 8010e02:	d100      	bne.n	8010e06 <memmove+0x2a>
 8010e04:	bd10      	pop	{r4, pc}
 8010e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e0e:	e7f7      	b.n	8010e00 <memmove+0x24>

08010e10 <_realloc_r>:
 8010e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e14:	4680      	mov	r8, r0
 8010e16:	4614      	mov	r4, r2
 8010e18:	460e      	mov	r6, r1
 8010e1a:	b921      	cbnz	r1, 8010e26 <_realloc_r+0x16>
 8010e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e20:	4611      	mov	r1, r2
 8010e22:	f7ff b809 	b.w	800fe38 <_malloc_r>
 8010e26:	b92a      	cbnz	r2, 8010e34 <_realloc_r+0x24>
 8010e28:	f7fe ff9a 	bl	800fd60 <_free_r>
 8010e2c:	4625      	mov	r5, r4
 8010e2e:	4628      	mov	r0, r5
 8010e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e34:	f000 f82e 	bl	8010e94 <_malloc_usable_size_r>
 8010e38:	4284      	cmp	r4, r0
 8010e3a:	4607      	mov	r7, r0
 8010e3c:	d802      	bhi.n	8010e44 <_realloc_r+0x34>
 8010e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010e42:	d812      	bhi.n	8010e6a <_realloc_r+0x5a>
 8010e44:	4621      	mov	r1, r4
 8010e46:	4640      	mov	r0, r8
 8010e48:	f7fe fff6 	bl	800fe38 <_malloc_r>
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	d0ed      	beq.n	8010e2e <_realloc_r+0x1e>
 8010e52:	42bc      	cmp	r4, r7
 8010e54:	4622      	mov	r2, r4
 8010e56:	4631      	mov	r1, r6
 8010e58:	bf28      	it	cs
 8010e5a:	463a      	movcs	r2, r7
 8010e5c:	f7fe ff6a 	bl	800fd34 <memcpy>
 8010e60:	4631      	mov	r1, r6
 8010e62:	4640      	mov	r0, r8
 8010e64:	f7fe ff7c 	bl	800fd60 <_free_r>
 8010e68:	e7e1      	b.n	8010e2e <_realloc_r+0x1e>
 8010e6a:	4635      	mov	r5, r6
 8010e6c:	e7df      	b.n	8010e2e <_realloc_r+0x1e>
	...

08010e70 <_read_r>:
 8010e70:	b538      	push	{r3, r4, r5, lr}
 8010e72:	4d07      	ldr	r5, [pc, #28]	; (8010e90 <_read_r+0x20>)
 8010e74:	4604      	mov	r4, r0
 8010e76:	4608      	mov	r0, r1
 8010e78:	4611      	mov	r1, r2
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	602a      	str	r2, [r5, #0]
 8010e7e:	461a      	mov	r2, r3
 8010e80:	f7f0 fc8e 	bl	80017a0 <_read>
 8010e84:	1c43      	adds	r3, r0, #1
 8010e86:	d102      	bne.n	8010e8e <_read_r+0x1e>
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	b103      	cbz	r3, 8010e8e <_read_r+0x1e>
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	bd38      	pop	{r3, r4, r5, pc}
 8010e90:	20002ef8 	.word	0x20002ef8

08010e94 <_malloc_usable_size_r>:
 8010e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e98:	1f18      	subs	r0, r3, #4
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	bfbc      	itt	lt
 8010e9e:	580b      	ldrlt	r3, [r1, r0]
 8010ea0:	18c0      	addlt	r0, r0, r3
 8010ea2:	4770      	bx	lr

08010ea4 <_init>:
 8010ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ea6:	bf00      	nop
 8010ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010eaa:	bc08      	pop	{r3}
 8010eac:	469e      	mov	lr, r3
 8010eae:	4770      	bx	lr

08010eb0 <_fini>:
 8010eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eb2:	bf00      	nop
 8010eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010eb6:	bc08      	pop	{r3}
 8010eb8:	469e      	mov	lr, r3
 8010eba:	4770      	bx	lr
